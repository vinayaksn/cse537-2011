
328_EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000cae  00000d22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  00000d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000012e  00000000  00000000  00000d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000cdd  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000003b2  00000000  00000000  00001b69  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000a10  00000000  00000000  00001f1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000180  00000000  00000000  0000292c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002d1  00000000  00000000  00002aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000004b5  00000000  00000000  00002d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000138  00000000  00000000  00003232  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ea       	ldi	r30, 0xAE	; 174
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 43 02 	call	0x486	; 0x486 <main>
  8e:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <lcd_write>:
static void lcd_write(uint8_t data,uint8_t rs) 
{
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
  96:	66 23       	and	r22, r22
  98:	11 f0       	breq	.+4      	; 0x9e <lcd_write+0x8>
       lcd_rs_high();
  9a:	43 9a       	sbi	0x08, 3	; 8
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <lcd_write+0xa>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
  9e:	43 98       	cbi	0x08, 3	; 8
    }
    lcd_rw_low();
  a0:	41 98       	cbi	0x08, 1	; 8
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
  a2:	52 9a       	sbi	0x0a, 2	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
  a4:	53 9a       	sbi	0x0a, 3	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
  a6:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
  a8:	55 9a       	sbi	0x0a, 5	; 10
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
  aa:	5d 98       	cbi	0x0b, 5	; 11
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
  ac:	5c 98       	cbi	0x0b, 4	; 11
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
  ae:	5b 98       	cbi	0x0b, 3	; 11
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
  b0:	5a 98       	cbi	0x0b, 2	; 11
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  b2:	87 fd       	sbrc	r24, 7
  b4:	5d 9a       	sbi	0x0b, 5	; 11
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  b6:	86 fd       	sbrc	r24, 6
  b8:	5c 9a       	sbi	0x0b, 4	; 11
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  ba:	85 fd       	sbrc	r24, 5
  bc:	5b 9a       	sbi	0x0b, 3	; 11
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
  be:	84 fd       	sbrc	r24, 4
  c0:	5a 9a       	sbi	0x0b, 2	; 11

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
  c2:	42 9a       	sbi	0x08, 2	; 8
    lcd_e_delay();
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <lcd_write+0x30>
    lcd_e_low();
  c6:	42 98       	cbi	0x08, 2	; 8
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
        lcd_e_toggle();
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
  c8:	5d 98       	cbi	0x0b, 5	; 11
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
  ca:	5c 98       	cbi	0x0b, 4	; 11
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
  cc:	5b 98       	cbi	0x0b, 3	; 11
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
  ce:	5a 98       	cbi	0x0b, 2	; 11
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  d0:	83 fd       	sbrc	r24, 3
  d2:	5d 9a       	sbi	0x0b, 5	; 11
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  d4:	82 fd       	sbrc	r24, 2
  d6:	5c 9a       	sbi	0x0b, 4	; 11
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  d8:	81 fd       	sbrc	r24, 1
  da:	5b 9a       	sbi	0x0b, 3	; 11
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
  dc:	80 fd       	sbrc	r24, 0
  de:	5a 9a       	sbi	0x0b, 2	; 11

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
  e0:	42 9a       	sbi	0x08, 2	; 8
    lcd_e_delay();
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <lcd_write+0x4e>
    lcd_e_low();
  e4:	42 98       	cbi	0x08, 2	; 8
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();        
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
  e6:	5a 9a       	sbi	0x0b, 2	; 11
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  e8:	5b 9a       	sbi	0x0b, 3	; 11
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  ea:	5c 9a       	sbi	0x0b, 4	; 11
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  ec:	5d 9a       	sbi	0x0b, 5	; 11
    }
}
  ee:	08 95       	ret

000000f0 <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
  f0:	88 23       	and	r24, r24
  f2:	11 f0       	breq	.+4      	; 0xf8 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
  f4:	43 9a       	sbi	0x08, 3	; 8
  f6:	01 c0       	rjmp	.+2      	; 0xfa <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
  f8:	43 98       	cbi	0x08, 3	; 8
    lcd_rw_high();                           /* RW=1  read mode      */
  fa:	41 9a       	sbi	0x08, 1	; 8
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
  fc:	52 98       	cbi	0x0a, 2	; 10
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
  fe:	53 98       	cbi	0x0a, 3	; 10
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 100:	54 98       	cbi	0x0a, 4	; 10
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 102:	55 98       	cbi	0x0a, 5	; 10
                
        /* read high nibble first */
        lcd_e_high();
 104:	42 9a       	sbi	0x08, 2	; 8
        lcd_e_delay();        
 106:	00 c0       	rjmp	.+0      	; 0x108 <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 108:	4a 9b       	sbis	0x09, 2	; 9
 10a:	02 c0       	rjmp	.+4      	; 0x110 <lcd_read+0x20>
 10c:	80 e1       	ldi	r24, 0x10	; 16
 10e:	01 c0       	rjmp	.+2      	; 0x112 <lcd_read+0x22>
 110:	80 e0       	ldi	r24, 0x00	; 0
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 112:	4b 99       	sbic	0x09, 3	; 9
 114:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 116:	4c 99       	sbic	0x09, 4	; 9
 118:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 11a:	4d 99       	sbic	0x09, 5	; 9
 11c:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 11e:	42 98       	cbi	0x08, 2	; 8

        lcd_e_delay();                       /* Enable 500ns low       */
 120:	00 c0       	rjmp	.+0      	; 0x122 <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
 122:	42 9a       	sbi	0x08, 2	; 8
        lcd_e_delay();
 124:	00 c0       	rjmp	.+0      	; 0x126 <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 126:	4a 99       	sbic	0x09, 2	; 9
 128:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 12a:	4b 99       	sbic	0x09, 3	; 9
 12c:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 12e:	4c 99       	sbic	0x09, 4	; 9
 130:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 132:	4d 99       	sbic	0x09, 5	; 9
 134:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 136:	42 98       	cbi	0x08, 2	; 8
    }
    return data;
}
 138:	08 95       	ret

0000013a <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_read>
 140:	87 fd       	sbrc	r24, 7
 142:	fb cf       	rjmp	.-10     	; 0x13a <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 144:	88 e0       	ldi	r24, 0x08	; 8
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <lcd_waitbusy+0xe>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_read>
    
}/* lcd_waitbusy */
 152:	08 95       	ret

00000154 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 154:	1f 93       	push	r17
 156:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 158:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_waitbusy>
    lcd_write(cmd,0);
 15c:	81 2f       	mov	r24, r17
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write>
}
 164:	1f 91       	pop	r17
 166:	08 95       	ret

00000168 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 168:	1f 93       	push	r17
 16a:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 16c:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_waitbusy>
    lcd_write(data,1);
 170:	81 2f       	mov	r24, r17
 172:	61 e0       	ldi	r22, 0x01	; 1
 174:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write>
}
 178:	1f 91       	pop	r17
 17a:	08 95       	ret

0000017c <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 17c:	66 23       	and	r22, r22
 17e:	11 f4       	brne	.+4      	; 0x184 <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 180:	80 58       	subi	r24, 0x80	; 128
 182:	01 c0       	rjmp	.+2      	; 0x186 <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 184:	80 54       	subi	r24, 0x40	; 64
 186:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>
 18a:	08 95       	ret

0000018c <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 18c:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_waitbusy>
}
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	08 95       	ret

00000194 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>
}
 19a:	08 95       	ret

0000019c <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 19c:	82 e0       	ldi	r24, 0x02	; 2
 19e:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>
}
 1a2:	08 95       	ret

000001a4 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 1a4:	1f 93       	push	r17
 1a6:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 1a8:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_waitbusy>
    if (c=='\n')
 1ac:	1a 30       	cpi	r17, 0x0A	; 10
 1ae:	49 f4       	brne	.+18     	; 0x1c2 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 1b0:	80 34       	cpi	r24, 0x40	; 64
 1b2:	10 f0       	brcs	.+4      	; 0x1b8 <lcd_putc+0x14>
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <lcd_putc+0x16>
 1b8:	80 e4       	ldi	r24, 0x40	; 64
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 1ba:	80 58       	subi	r24, 0x80	; 128
 1bc:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>
 1c0:	04 c0       	rjmp	.+8      	; 0x1ca <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 1c2:	81 2f       	mov	r24, r17
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write>
    }

}/* lcd_putc */
 1ca:	1f 91       	pop	r17
 1cc:	08 95       	ret

000001ce <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	ec 01       	movw	r28, r24
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <lcd_puts+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
 1d6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 1da:	89 91       	ld	r24, Y+
 1dc:	88 23       	and	r24, r24
 1de:	d9 f7       	brne	.-10     	; 0x1d6 <lcd_puts+0x8>
        lcd_putc(c);
    }

}/* lcd_puts */
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	ec 01       	movw	r28, r24
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
 1ee:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_putc>
 1f2:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 1f4:	21 96       	adiw	r28, 0x01	; 1
 1f6:	84 91       	lpm	r24, Z+
 1f8:	88 23       	and	r24, r24
 1fa:	c9 f7       	brne	.-14     	; 0x1ee <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 202:	1f 93       	push	r17
 204:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 206:	3b 9a       	sbi	0x07, 3	; 7
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 208:	39 9a       	sbi	0x07, 1	; 7
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 20a:	3a 9a       	sbi	0x07, 2	; 7
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 20c:	52 9a       	sbi	0x0a, 2	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 20e:	53 9a       	sbi	0x0a, 3	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 210:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 212:	55 9a       	sbi	0x0a, 5	; 10
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	9a ef       	ldi	r25, 0xFA	; 250
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <lcd_init+0x16>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 21c:	5b 9a       	sbi	0x0b, 3	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 21e:	5a 9a       	sbi	0x0b, 2	; 11

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 220:	42 9a       	sbi	0x08, 2	; 8
    lcd_e_delay();
 222:	00 c0       	rjmp	.+0      	; 0x224 <lcd_init+0x22>
    lcd_e_low();
 224:	42 98       	cbi	0x08, 2	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	9e e4       	ldi	r25, 0x4E	; 78
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <lcd_init+0x28>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 22e:	42 9a       	sbi	0x08, 2	; 8
    lcd_e_delay();
 230:	00 c0       	rjmp	.+0      	; 0x232 <lcd_init+0x30>
    lcd_e_low();
 232:	42 98       	cbi	0x08, 2	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	fc 01       	movw	r30, r24
 23a:	31 97       	sbiw	r30, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <lcd_init+0x38>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 23e:	42 9a       	sbi	0x08, 2	; 8
    lcd_e_delay();
 240:	00 c0       	rjmp	.+0      	; 0x242 <lcd_init+0x40>
    lcd_e_low();
 242:	42 98       	cbi	0x08, 2	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 244:	fc 01       	movw	r30, r24
 246:	31 97       	sbiw	r30, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <lcd_init+0x44>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 24a:	5a 98       	cbi	0x0b, 2	; 11

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 24c:	42 9a       	sbi	0x08, 2	; 8
    lcd_e_delay();
 24e:	00 c0       	rjmp	.+0      	; 0x250 <lcd_init+0x4e>
    lcd_e_low();
 250:	42 98       	cbi	0x08, 2	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <lcd_init+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 256:	88 e2       	ldi	r24, 0x28	; 40
 258:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 25c:	88 e0       	ldi	r24, 0x08	; 8
 25e:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 262:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 266:	86 e0       	ldi	r24, 0x06	; 6
 268:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 26c:	81 2f       	mov	r24, r17
 26e:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>

}/* lcd_init */
 272:	1f 91       	pop	r17
 274:	08 95       	ret

00000276 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
 276:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
 27a:	88 e4       	ldi	r24, 0x48	; 72
 27c:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
 280:	08 95       	ret

00000282 <i2c_start>:
/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
 282:	98 2f       	mov	r25, r24
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 284:	84 ea       	ldi	r24, 0xA4	; 164
 286:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 28a:	80 91 bc 00 	lds	r24, 0x00BC
 28e:	87 ff       	sbrs	r24, 7
 290:	fc cf       	rjmp	.-8      	; 0x28a <i2c_start+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 292:	80 91 b9 00 	lds	r24, 0x00B9
 296:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 298:	88 30       	cpi	r24, 0x08	; 8
 29a:	21 f0       	breq	.+8      	; 0x2a4 <i2c_start+0x22>
 29c:	80 31       	cpi	r24, 0x10	; 16
 29e:	11 f0       	breq	.+4      	; 0x2a4 <i2c_start+0x22>
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	08 95       	ret

	// send device address
	TWDR = address;
 2a4:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
 2a8:	84 e8       	ldi	r24, 0x84	; 132
 2aa:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
 2ae:	80 91 bc 00 	lds	r24, 0x00BC
 2b2:	87 ff       	sbrs	r24, 7
 2b4:	fc cf       	rjmp	.-8      	; 0x2ae <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 2b6:	90 91 b9 00 	lds	r25, 0x00B9
 2ba:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 2bc:	98 31       	cpi	r25, 0x18	; 24
 2be:	11 f4       	brne	.+4      	; 0x2c4 <i2c_start+0x42>
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	08 95       	ret
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	90 34       	cpi	r25, 0x40	; 64
 2c8:	09 f0       	breq	.+2      	; 0x2cc <i2c_start+0x4a>
 2ca:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
 2cc:	08 95       	ret

000002ce <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
 2ce:	98 2f       	mov	r25, r24


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 2d0:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
 2d2:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 2d4:	24 e9       	ldi	r18, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 2d6:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 2da:	80 91 bc 00 	lds	r24, 0x00BC
 2de:	87 ff       	sbrs	r24, 7
 2e0:	fc cf       	rjmp	.-8      	; 0x2da <i2c_start_wait+0xc>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 2e2:	80 91 b9 00 	lds	r24, 0x00B9
 2e6:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
 2e8:	88 30       	cpi	r24, 0x08	; 8
 2ea:	11 f0       	breq	.+4      	; 0x2f0 <i2c_start_wait+0x22>
 2ec:	80 31       	cpi	r24, 0x10	; 16
 2ee:	99 f7       	brne	.-26     	; 0x2d6 <i2c_start_wait+0x8>
    
    	// send device address
    	TWDR = address;
 2f0:	90 93 bb 00 	sts	0x00BB, r25
    	TWCR = (1<<TWINT) | (1<<TWEN);
 2f4:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 2f8:	80 91 bc 00 	lds	r24, 0x00BC
 2fc:	87 ff       	sbrs	r24, 7
 2fe:	fc cf       	rjmp	.-8      	; 0x2f8 <i2c_start_wait+0x2a>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 300:	80 91 b9 00 	lds	r24, 0x00B9
 304:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
 306:	80 32       	cpi	r24, 0x20	; 32
 308:	11 f0       	breq	.+4      	; 0x30e <i2c_start_wait+0x40>
 30a:	88 35       	cpi	r24, 0x58	; 88
 30c:	39 f4       	brne	.+14     	; 0x31c <i2c_start_wait+0x4e>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 30e:	20 93 bc 00 	sts	0x00BC, r18
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
 312:	80 91 bc 00 	lds	r24, 0x00BC
 316:	84 fd       	sbrc	r24, 4
 318:	fc cf       	rjmp	.-8      	; 0x312 <i2c_start_wait+0x44>
 31a:	dd cf       	rjmp	.-70     	; 0x2d6 <i2c_start_wait+0x8>
 31c:	08 95       	ret

0000031e <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
 31e:	0e 94 41 01 	call	0x282	; 0x282 <i2c_start>

}/* i2c_rep_start */
 322:	08 95       	ret

00000324 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 324:	84 e9       	ldi	r24, 0x94	; 148
 326:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 32a:	80 91 bc 00 	lds	r24, 0x00BC
 32e:	84 fd       	sbrc	r24, 4
 330:	fc cf       	rjmp	.-8      	; 0x32a <i2c_stop+0x6>

}/* i2c_stop */
 332:	08 95       	ret

00000334 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 334:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 338:	84 e8       	ldi	r24, 0x84	; 132
 33a:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 33e:	80 91 bc 00 	lds	r24, 0x00BC
 342:	87 ff       	sbrs	r24, 7
 344:	fc cf       	rjmp	.-8      	; 0x33e <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 346:	80 91 b9 00 	lds	r24, 0x00B9
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	88 7f       	andi	r24, 0xF8	; 248
 34e:	88 32       	cpi	r24, 0x28	; 40
 350:	09 f0       	breq	.+2      	; 0x354 <i2c_write+0x20>
 352:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
 354:	89 2f       	mov	r24, r25
 356:	08 95       	ret

00000358 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 358:	84 ec       	ldi	r24, 0xC4	; 196
 35a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
 35e:	80 91 bc 00 	lds	r24, 0x00BC
 362:	87 ff       	sbrs	r24, 7
 364:	fc cf       	rjmp	.-8      	; 0x35e <i2c_readAck+0x6>

    return TWDR;
 366:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
 36a:	08 95       	ret

0000036c <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 36c:	84 e8       	ldi	r24, 0x84	; 132
 36e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
 372:	80 91 bc 00 	lds	r24, 0x00BC
 376:	87 ff       	sbrs	r24, 7
 378:	fc cf       	rjmp	.-8      	; 0x372 <i2c_readNak+0x6>
	
    return TWDR;
 37a:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
 37e:	08 95       	ret

00000380 <adc_val>:
#include "i2cmaster.h"
#include "twimaster.c"

#include <avr/interrupt.h> 
int adc_val()
{
 380:	ef 92       	push	r14
 382:	ff 92       	push	r15
 384:	0f 93       	push	r16
 386:	1f 93       	push	r17
 388:	df 93       	push	r29
 38a:	cf 93       	push	r28
 38c:	cd b7       	in	r28, 0x3d	; 61
 38e:	de b7       	in	r29, 0x3e	; 62
 390:	2a 97       	sbiw	r28, 0x0a	; 10
 392:	0f b6       	in	r0, 0x3f	; 63
 394:	f8 94       	cli
 396:	de bf       	out	0x3e, r29	; 62
 398:	0f be       	out	0x3f, r0	; 63
 39a:	cd bf       	out	0x3d, r28	; 61
// DDRD =140;
	int x=-1,y=-1;
   
 ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz 
 39c:	aa e7       	ldi	r26, 0x7A	; 122
 39e:	b0 e0       	ldi	r27, 0x00	; 0
 3a0:	8c 91       	ld	r24, X
 3a2:	87 60       	ori	r24, 0x07	; 7
 3a4:	8c 93       	st	X, r24
ADCSRB &= ~(1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 3a6:	eb e7       	ldi	r30, 0x7B	; 123
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	80 81       	ld	r24, Z
 3ac:	8b 7f       	andi	r24, 0xFB	; 251
 3ae:	80 83       	st	Z, r24


   ADMUX |= (1 << REFS0); // Set ADC reference to AVCC 
 3b0:	ec e7       	ldi	r30, 0x7C	; 124
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	80 81       	ld	r24, Z
 3b6:	80 64       	ori	r24, 0x40	; 64
 3b8:	80 83       	st	Z, r24
 

   ADMUX |= (0 << ADLAR);
 3ba:	80 81       	ld	r24, Z
 3bc:	80 83       	st	Z, r24

	

	//ADCSRA |= (1 << ADSC);
	//ADCSRA |= (1 << ADATE);
	ADCSRA |= (1 << ADATE);
 3be:	8c 91       	ld	r24, X
 3c0:	80 62       	ori	r24, 0x20	; 32
 3c2:	8c 93       	st	X, r24

	ADCSRA |= (1 << ADEN);
 3c4:	8c 91       	ld	r24, X
 3c6:	80 68       	ori	r24, 0x80	; 128
 3c8:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADSC);       	
 3ca:	8c 91       	ld	r24, X
 3cc:	80 64       	ori	r24, 0x40	; 64
 3ce:	8c 93       	st	X, r24
	
	
	lcd_init(LCD_DISP_ON);
 3d0:	8c e0       	ldi	r24, 0x0C	; 12
 3d2:	0e 94 01 01 	call	0x202	; 0x202 <lcd_init>
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
 3d6:	8f e7       	ldi	r24, 0x7F	; 127
 3d8:	e8 2e       	mov	r14, r24
 3da:	84 e8       	ldi	r24, 0x84	; 132
 3dc:	f8 2e       	mov	r15, r24
 3de:	8e e1       	ldi	r24, 0x1E	; 30
 3e0:	08 2f       	mov	r16, r24
 3e2:	11 2d       	mov	r17, r1
 3e4:	d8 01       	movw	r26, r16
 3e6:	c7 01       	movw	r24, r14
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	a1 09       	sbc	r26, r1
 3ec:	b1 09       	sbc	r27, r1
 3ee:	00 00       	nop
 3f0:	01 f0       	breq	.+0      	; 0x3f2 <adc_val+0x72>
 3f2:	d1 f7       	brne	.-12     	; 0x3e8 <adc_val+0x68>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
 3f4:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
 3f6:	00 00       	nop
   _delay_ms(1000);
   lcd_clrscr();
 3f8:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_clrscr>
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
 3fc:	d8 01       	movw	r26, r16
 3fe:	c7 01       	movw	r24, r14
 400:	01 97       	sbiw	r24, 0x01	; 1
 402:	a1 09       	sbc	r26, r1
 404:	b1 09       	sbc	r27, r1
 406:	00 00       	nop
 408:	01 f0       	breq	.+0      	; 0x40a <adc_val+0x8a>
 40a:	d1 f7       	brne	.-12     	; 0x400 <adc_val+0x80>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
 40c:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
 40e:	00 00       	nop
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
 410:	8f e3       	ldi	r24, 0x3F	; 63
 412:	9c e9       	ldi	r25, 0x9C	; 156
 414:	01 97       	sbiw	r24, 0x01	; 1
 416:	f1 f7       	brne	.-4      	; 0x414 <adc_val+0x94>
 418:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
 41a:	00 c0       	rjmp	.+0      	; 0x41c <adc_val+0x9c>

//while(1)  // Loop Forever 
  // { 
   
  //_delay_s(3);
	x= ADCL; 
 41c:	00 91 78 00 	lds	r16, 0x0078
 420:	10 e0       	ldi	r17, 0x00	; 0
	x |= (ADCH<<8); //left shift 
 422:	20 91 79 00 	lds	r18, 0x0079
 426:	92 2f       	mov	r25, r18
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	08 2b       	or	r16, r24
 42c:	19 2b       	or	r17, r25
	
  char buf[10];
	sprintf( buf, "%d\n", x );
 42e:	00 d0       	rcall	.+0      	; 0x430 <adc_val+0xb0>
 430:	00 d0       	rcall	.+0      	; 0x432 <adc_val+0xb2>
 432:	00 d0       	rcall	.+0      	; 0x434 <adc_val+0xb4>
 434:	ed b7       	in	r30, 0x3d	; 61
 436:	fe b7       	in	r31, 0x3e	; 62
 438:	31 96       	adiw	r30, 0x01	; 1
 43a:	ce 01       	movw	r24, r28
 43c:	01 96       	adiw	r24, 0x01	; 1
 43e:	ad b7       	in	r26, 0x3d	; 61
 440:	be b7       	in	r27, 0x3e	; 62
 442:	12 96       	adiw	r26, 0x02	; 2
 444:	9c 93       	st	X, r25
 446:	8e 93       	st	-X, r24
 448:	11 97       	sbiw	r26, 0x01	; 1
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	91 e0       	ldi	r25, 0x01	; 1
 44e:	93 83       	std	Z+3, r25	; 0x03
 450:	82 83       	std	Z+2, r24	; 0x02
 452:	15 83       	std	Z+5, r17	; 0x05
 454:	04 83       	std	Z+4, r16	; 0x04
 456:	0e 94 56 03 	call	0x6ac	; 0x6ac <sprintf>
 45a:	8d b7       	in	r24, 0x3d	; 61
 45c:	9e b7       	in	r25, 0x3e	; 62
 45e:	06 96       	adiw	r24, 0x06	; 6
 460:	0f b6       	in	r0, 0x3f	; 63
 462:	f8 94       	cli
 464:	9e bf       	out	0x3e, r25	; 62
 466:	0f be       	out	0x3f, r0	; 63
 468:	8d bf       	out	0x3d, r24	; 61
//	ADCSRA |= (1 << ADSC);       	  
	 //_delay_ms(1000);

   //}

}
 46a:	c8 01       	movw	r24, r16
 46c:	2a 96       	adiw	r28, 0x0a	; 10
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	f8 94       	cli
 472:	de bf       	out	0x3e, r29	; 62
 474:	0f be       	out	0x3f, r0	; 63
 476:	cd bf       	out	0x3d, r28	; 61
 478:	cf 91       	pop	r28
 47a:	df 91       	pop	r29
 47c:	1f 91       	pop	r17
 47e:	0f 91       	pop	r16
 480:	ff 90       	pop	r15
 482:	ef 90       	pop	r14
 484:	08 95       	ret

00000486 <main>:
int main(){
 486:	8f 92       	push	r8
 488:	9f 92       	push	r9
 48a:	af 92       	push	r10
 48c:	bf 92       	push	r11
 48e:	cf 92       	push	r12
 490:	df 92       	push	r13
 492:	ef 92       	push	r14
 494:	ff 92       	push	r15
 496:	0f 93       	push	r16
 498:	1f 93       	push	r17
 49a:	df 93       	push	r29
 49c:	cf 93       	push	r28
 49e:	cd b7       	in	r28, 0x3d	; 61
 4a0:	de b7       	in	r29, 0x3e	; 62
 4a2:	2a 97       	sbiw	r28, 0x0a	; 10
 4a4:	0f b6       	in	r0, 0x3f	; 63
 4a6:	f8 94       	cli
 4a8:	de bf       	out	0x3e, r29	; 62
 4aa:	0f be       	out	0x3f, r0	; 63
 4ac:	cd bf       	out	0x3d, r28	; 61

unsigned char temp, ret;
unsigned int input=0;

char buf[10];
lcd_init(LCD_DISP_ON);
 4ae:	8c e0       	ldi	r24, 0x0C	; 12
 4b0:	0e 94 01 01 	call	0x202	; 0x202 <lcd_init>
lcd_clrscr();
 4b4:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_clrscr>
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
 4b8:	af e7       	ldi	r26, 0x7F	; 127
 4ba:	ea 2e       	mov	r14, r26
 4bc:	a4 e8       	ldi	r26, 0x84	; 132
 4be:	fa 2e       	mov	r15, r26
 4c0:	ae e1       	ldi	r26, 0x1E	; 30
 4c2:	0a 2f       	mov	r16, r26
 4c4:	11 2d       	mov	r17, r1
 4c6:	d8 01       	movw	r26, r16
 4c8:	c7 01       	movw	r24, r14
 4ca:	01 97       	sbiw	r24, 0x01	; 1
 4cc:	a1 09       	sbc	r26, r1
 4ce:	b1 09       	sbc	r27, r1
 4d0:	00 00       	nop
 4d2:	01 f0       	breq	.+0      	; 0x4d4 <main+0x4e>
 4d4:	d1 f7       	brne	.-12     	; 0x4ca <main+0x44>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
 4d6:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
 4d8:	00 00       	nop
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
 4da:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
 4de:	88 e4       	ldi	r24, 0x48	; 72
 4e0:	80 93 b8 00 	sts	0x00B8, r24
_delay_ms(1000);

int counter=0,avg=0;
int address=0x05;
i2c_init();
		lcd_clrscr();
 4e4:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_clrscr>
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
 4e8:	8f e3       	ldi	r24, 0x3F	; 63
 4ea:	9d e0       	ldi	r25, 0x0D	; 13
 4ec:	a3 e0       	ldi	r26, 0x03	; 3
 4ee:	b0 e0       	ldi	r27, 0x00	; 0
 4f0:	01 97       	sbiw	r24, 0x01	; 1
 4f2:	a1 09       	sbc	r26, r1
 4f4:	b1 09       	sbc	r27, r1
 4f6:	00 00       	nop
 4f8:	01 f0       	breq	.+0      	; 0x4fa <main+0x74>
 4fa:	d1 f7       	brne	.-12     	; 0x4f0 <main+0x6a>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
 4fc:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
 4fe:	00 00       	nop
	  _delay_ms(100);	  
      lcd_puts("EEPROM started");	  
 500:	84 e0       	ldi	r24, 0x04	; 4
 502:	91 e0       	ldi	r25, 0x01	; 1
 504:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
 508:	d8 01       	movw	r26, r16
 50a:	c7 01       	movw	r24, r14
 50c:	01 97       	sbiw	r24, 0x01	; 1
 50e:	a1 09       	sbc	r26, r1
 510:	b1 09       	sbc	r27, r1
 512:	00 00       	nop
 514:	01 f0       	breq	.+0      	; 0x516 <main+0x90>
 516:	d1 f7       	brne	.-12     	; 0x50c <main+0x86>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
 518:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
 51a:	00 00       	nop
	  _delay_ms(1000);

	ret = i2c_start(Dev24C08+I2C_WRITE);       // set device address and write mode
 51c:	80 ea       	ldi	r24, 0xA0	; 160
 51e:	0e 94 41 01 	call	0x282	; 0x282 <i2c_start>
 522:	00 e0       	ldi	r16, 0x00	; 0
 524:	10 e0       	ldi	r17, 0x00	; 0
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 526:	f5 e0       	ldi	r31, 0x05	; 5
 528:	df 2e       	mov	r13, r31
	TWCR = (1<<TWINT) | (1<<TWEN);
 52a:	e4 e8       	ldi	r30, 0x84	; 132
 52c:	fe 2e       	mov	r15, r30
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 52e:	74 e7       	ldi	r23, 0x74	; 116
 530:	e7 2e       	mov	r14, r23
 532:	d0 92 bb 00 	sts	0x00BB, r13
	TWCR = (1<<TWINT) | (1<<TWEN);
 536:	f0 92 bc 00 	sts	0x00BC, r15

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 53a:	80 91 bc 00 	lds	r24, 0x00BC
 53e:	87 ff       	sbrs	r24, 7
 540:	fc cf       	rjmp	.-8      	; 0x53a <main+0xb4>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 542:	80 91 b9 00 	lds	r24, 0x00B9
    
	while(counter<10)
	{
	
        i2c_write(address);                       // write address = 5
		input=adc_val();
 546:	0e 94 c0 01 	call	0x380	; 0x380 <adc_val>
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 54a:	e0 92 bb 00 	sts	0x00BB, r14
	TWCR = (1<<TWINT) | (1<<TWEN);
 54e:	f0 92 bc 00 	sts	0x00BC, r15

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 552:	80 91 bc 00 	lds	r24, 0x00BC
 556:	87 ff       	sbrs	r24, 7
 558:	fc cf       	rjmp	.-8      	; 0x552 <main+0xcc>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 55a:	80 91 b9 00 	lds	r24, 0x00B9
		input=input/4;
        i2c_write('input');                       // ret=0 -> Ok, ret=1 -> no ACK 
		
                                    // set stop conditon = release bus
		counter++;
 55e:	0f 5f       	subi	r16, 0xFF	; 255
 560:	1f 4f       	sbci	r17, 0xFF	; 255
      lcd_puts("EEPROM started");	  
	  _delay_ms(1000);

	ret = i2c_start(Dev24C08+I2C_WRITE);       // set device address and write mode
    
	while(counter<10)
 562:	0a 30       	cpi	r16, 0x0A	; 10
 564:	11 05       	cpc	r17, r1
 566:	29 f7       	brne	.-54     	; 0x532 <main+0xac>
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 568:	84 e9       	ldi	r24, 0x94	; 148
 56a:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 56e:	80 91 bc 00 	lds	r24, 0x00BC
 572:	84 fd       	sbrc	r24, 4
 574:	fc cf       	rjmp	.-8      	; 0x56e <main+0xe8>
 576:	00 e0       	ldi	r16, 0x00	; 0
 578:	10 e0       	ldi	r17, 0x00	; 0
 57a:	65 e0       	ldi	r22, 0x05	; 5
 57c:	e6 2e       	mov	r14, r22
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
	TWCR = (1<<TWINT) | (1<<TWEN);
 57e:	54 e8       	ldi	r21, 0x84	; 132
 580:	f5 2e       	mov	r15, r21
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 582:	44 e9       	ldi	r20, 0x94	; 148
 584:	d4 2e       	mov	r13, r20
        i2c_stop();/* write ok, read value back from eeprom address 0x05, wait until 
           the device is no longer busy from the previous write operation */
     counter=0;   
	while(counter<10)
	{
		i2c_start_wait(Dev24C08+I2C_WRITE);     // set device address and write mode
 586:	80 ea       	ldi	r24, 0xA0	; 160
 588:	0e 94 67 01 	call	0x2ce	; 0x2ce <i2c_start_wait>
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 58c:	e0 92 bb 00 	sts	0x00BB, r14
	TWCR = (1<<TWINT) | (1<<TWEN);
 590:	f0 92 bc 00 	sts	0x00BC, r15

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 594:	80 91 bc 00 	lds	r24, 0x00BC
 598:	87 ff       	sbrs	r24, 7
 59a:	fc cf       	rjmp	.-8      	; 0x594 <main+0x10e>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 59c:	80 91 b9 00 	lds	r24, 0x00B9
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
 5a0:	81 ea       	ldi	r24, 0xA1	; 161
 5a2:	0e 94 41 01 	call	0x282	; 0x282 <i2c_start>
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 5a6:	f0 92 bc 00 	sts	0x00BC, r15
	while(!(TWCR & (1<<TWINT)));
 5aa:	80 91 bc 00 	lds	r24, 0x00BC
 5ae:	87 ff       	sbrs	r24, 7
 5b0:	fc cf       	rjmp	.-8      	; 0x5aa <main+0x124>
	
    return TWDR;
 5b2:	90 91 bb 00 	lds	r25, 0x00BB
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 5b6:	d0 92 bc 00 	sts	0x00BC, r13
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 5ba:	80 91 bc 00 	lds	r24, 0x00BC
 5be:	84 fd       	sbrc	r24, 4
 5c0:	fc cf       	rjmp	.-8      	; 0x5ba <main+0x134>
        i2c_write(address);                        // write address = 5
        i2c_rep_start(Dev24C08+I2C_READ);       // set device address and read mode
        ret = i2c_readNak();                    // read one byte
        i2c_stop();
		avg=avg+(int)ret;
 5c2:	09 0f       	add	r16, r25
 5c4:	11 1d       	adc	r17, r1
 5c6:	e3 94       	inc	r14
		counter++;
}
        i2c_stop();/* write ok, read value back from eeprom address 0x05, wait until 
           the device is no longer busy from the previous write operation */
     counter=0;   
	while(counter<10)
 5c8:	8f e0       	ldi	r24, 0x0F	; 15
 5ca:	e8 16       	cp	r14, r24
 5cc:	e1 f6       	brne	.-72     	; 0x586 <main+0x100>
        i2c_stop();
		avg=avg+(int)ret;
		address++;
    counter++;
	}
	avg=avg/10;
 5ce:	c8 01       	movw	r24, r16
 5d0:	6a e0       	ldi	r22, 0x0A	; 10
 5d2:	70 e0       	ldi	r23, 0x00	; 0
 5d4:	0e 94 f7 05 	call	0xbee	; 0xbee <__divmodhi4>
 5d8:	cb 01       	movw	r24, r22
	avg=avg*4;
	sprintf( buf, "avg : %d", avg );
 5da:	00 d0       	rcall	.+0      	; 0x5dc <main+0x156>
 5dc:	00 d0       	rcall	.+0      	; 0x5de <main+0x158>
 5de:	00 d0       	rcall	.+0      	; 0x5e0 <main+0x15a>
 5e0:	ed b7       	in	r30, 0x3d	; 61
 5e2:	fe b7       	in	r31, 0x3e	; 62
 5e4:	31 96       	adiw	r30, 0x01	; 1
 5e6:	8e 01       	movw	r16, r28
 5e8:	0f 5f       	subi	r16, 0xFF	; 255
 5ea:	1f 4f       	sbci	r17, 0xFF	; 255
 5ec:	ad b7       	in	r26, 0x3d	; 61
 5ee:	be b7       	in	r27, 0x3e	; 62
 5f0:	12 96       	adiw	r26, 0x02	; 2
 5f2:	1c 93       	st	X, r17
 5f4:	0e 93       	st	-X, r16
 5f6:	11 97       	sbiw	r26, 0x01	; 1
 5f8:	23 e1       	ldi	r18, 0x13	; 19
 5fa:	31 e0       	ldi	r19, 0x01	; 1
 5fc:	33 83       	std	Z+3, r19	; 0x03
 5fe:	22 83       	std	Z+2, r18	; 0x02
 600:	88 0f       	add	r24, r24
 602:	99 1f       	adc	r25, r25
 604:	88 0f       	add	r24, r24
 606:	99 1f       	adc	r25, r25
 608:	95 83       	std	Z+5, r25	; 0x05
 60a:	84 83       	std	Z+4, r24	; 0x04
 60c:	0e 94 56 03 	call	0x6ac	; 0x6ac <sprintf>
	 
		lcd_clrscr();
 610:	8d b7       	in	r24, 0x3d	; 61
 612:	9e b7       	in	r25, 0x3e	; 62
 614:	06 96       	adiw	r24, 0x06	; 6
 616:	0f b6       	in	r0, 0x3f	; 63
 618:	f8 94       	cli
 61a:	9e bf       	out	0x3e, r25	; 62
 61c:	0f be       	out	0x3f, r0	; 63
 61e:	8d bf       	out	0x3d, r24	; 61
 620:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_clrscr>
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
 624:	8f e3       	ldi	r24, 0x3F	; 63
 626:	9d e0       	ldi	r25, 0x0D	; 13
 628:	a3 e0       	ldi	r26, 0x03	; 3
 62a:	b0 e0       	ldi	r27, 0x00	; 0
 62c:	01 97       	sbiw	r24, 0x01	; 1
 62e:	a1 09       	sbc	r26, r1
 630:	b1 09       	sbc	r27, r1
 632:	00 00       	nop
 634:	01 f0       	breq	.+0      	; 0x636 <main+0x1b0>
 636:	d1 f7       	brne	.-12     	; 0x62c <main+0x1a6>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
 638:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
 63a:	00 00       	nop
	  _delay_ms(100);	  
      lcd_puts( buf );	  
 63c:	c8 01       	movw	r24, r16
 63e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
 642:	8f e7       	ldi	r24, 0x7F	; 127
 644:	94 e8       	ldi	r25, 0x84	; 132
 646:	ae e1       	ldi	r26, 0x1E	; 30
 648:	b0 e0       	ldi	r27, 0x00	; 0
 64a:	01 97       	sbiw	r24, 0x01	; 1
 64c:	a1 09       	sbc	r26, r1
 64e:	b1 09       	sbc	r27, r1
 650:	00 00       	nop
 652:	01 f0       	breq	.+0      	; 0x654 <main+0x1ce>
 654:	d1 f7       	brne	.-12     	; 0x64a <main+0x1c4>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
 656:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
 658:	00 00       	nop
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
 65a:	2f e3       	ldi	r18, 0x3F	; 63
 65c:	a2 2e       	mov	r10, r18
 65e:	2d e0       	ldi	r18, 0x0D	; 13
 660:	b2 2e       	mov	r11, r18
 662:	23 e0       	ldi	r18, 0x03	; 3
 664:	c2 2e       	mov	r12, r18
 666:	d1 2c       	mov	r13, r1
*/

while(1){
		lcd_clrscr();
	  _delay_ms(100);
lcd_puts(buf);
 668:	48 01       	movw	r8, r16
 66a:	9f e7       	ldi	r25, 0x7F	; 127
 66c:	e9 2e       	mov	r14, r25
 66e:	94 e8       	ldi	r25, 0x84	; 132
 670:	f9 2e       	mov	r15, r25
 672:	9e e1       	ldi	r25, 0x1E	; 30
 674:	09 2f       	mov	r16, r25
 676:	11 2d       	mov	r17, r1
temp = i2c_readNak();
i2c_stop();
*/

while(1){
		lcd_clrscr();
 678:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_clrscr>
 67c:	d6 01       	movw	r26, r12
 67e:	c5 01       	movw	r24, r10
 680:	01 97       	sbiw	r24, 0x01	; 1
 682:	a1 09       	sbc	r26, r1
 684:	b1 09       	sbc	r27, r1
 686:	00 00       	nop
 688:	01 f0       	breq	.+0      	; 0x68a <main+0x204>
 68a:	d1 f7       	brne	.-12     	; 0x680 <main+0x1fa>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
 68c:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
 68e:	00 00       	nop
	  _delay_ms(100);
lcd_puts(buf);
 690:	c4 01       	movw	r24, r8
 692:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
 696:	d8 01       	movw	r26, r16
 698:	c7 01       	movw	r24, r14
 69a:	01 97       	sbiw	r24, 0x01	; 1
 69c:	a1 09       	sbc	r26, r1
 69e:	b1 09       	sbc	r27, r1
 6a0:	00 00       	nop
 6a2:	01 f0       	breq	.+0      	; 0x6a4 <main+0x21e>
 6a4:	d1 f7       	brne	.-12     	; 0x69a <main+0x214>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
 6a6:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
 6a8:	00 00       	nop
 6aa:	e6 cf       	rjmp	.-52     	; 0x678 <main+0x1f2>

000006ac <sprintf>:
 6ac:	ae e0       	ldi	r26, 0x0E	; 14
 6ae:	b0 e0       	ldi	r27, 0x00	; 0
 6b0:	ec e5       	ldi	r30, 0x5C	; 92
 6b2:	f3 e0       	ldi	r31, 0x03	; 3
 6b4:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__prologue_saves__+0x1c>
 6b8:	0d 89       	ldd	r16, Y+21	; 0x15
 6ba:	1e 89       	ldd	r17, Y+22	; 0x16
 6bc:	86 e0       	ldi	r24, 0x06	; 6
 6be:	8c 83       	std	Y+4, r24	; 0x04
 6c0:	1a 83       	std	Y+2, r17	; 0x02
 6c2:	09 83       	std	Y+1, r16	; 0x01
 6c4:	8f ef       	ldi	r24, 0xFF	; 255
 6c6:	9f e7       	ldi	r25, 0x7F	; 127
 6c8:	9e 83       	std	Y+6, r25	; 0x06
 6ca:	8d 83       	std	Y+5, r24	; 0x05
 6cc:	9e 01       	movw	r18, r28
 6ce:	27 5e       	subi	r18, 0xE7	; 231
 6d0:	3f 4f       	sbci	r19, 0xFF	; 255
 6d2:	ce 01       	movw	r24, r28
 6d4:	01 96       	adiw	r24, 0x01	; 1
 6d6:	6f 89       	ldd	r22, Y+23	; 0x17
 6d8:	78 8d       	ldd	r23, Y+24	; 0x18
 6da:	a9 01       	movw	r20, r18
 6dc:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vfprintf>
 6e0:	2f 81       	ldd	r18, Y+7	; 0x07
 6e2:	38 85       	ldd	r19, Y+8	; 0x08
 6e4:	02 0f       	add	r16, r18
 6e6:	13 1f       	adc	r17, r19
 6e8:	f8 01       	movw	r30, r16
 6ea:	10 82       	st	Z, r1
 6ec:	2e 96       	adiw	r28, 0x0e	; 14
 6ee:	e4 e0       	ldi	r30, 0x04	; 4
 6f0:	0c 94 48 06 	jmp	0xc90	; 0xc90 <__epilogue_restores__+0x1c>

000006f4 <vfprintf>:
 6f4:	ab e0       	ldi	r26, 0x0B	; 11
 6f6:	b0 e0       	ldi	r27, 0x00	; 0
 6f8:	e0 e8       	ldi	r30, 0x80	; 128
 6fa:	f3 e0       	ldi	r31, 0x03	; 3
 6fc:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <__prologue_saves__>
 700:	3c 01       	movw	r6, r24
 702:	2b 01       	movw	r4, r22
 704:	5a 01       	movw	r10, r20
 706:	fc 01       	movw	r30, r24
 708:	17 82       	std	Z+7, r1	; 0x07
 70a:	16 82       	std	Z+6, r1	; 0x06
 70c:	83 81       	ldd	r24, Z+3	; 0x03
 70e:	81 fd       	sbrc	r24, 1
 710:	03 c0       	rjmp	.+6      	; 0x718 <vfprintf+0x24>
 712:	6f ef       	ldi	r22, 0xFF	; 255
 714:	7f ef       	ldi	r23, 0xFF	; 255
 716:	c6 c1       	rjmp	.+908    	; 0xaa4 <__stack+0x1a5>
 718:	9a e0       	ldi	r25, 0x0A	; 10
 71a:	89 2e       	mov	r8, r25
 71c:	1e 01       	movw	r2, r28
 71e:	08 94       	sec
 720:	21 1c       	adc	r2, r1
 722:	31 1c       	adc	r3, r1
 724:	f3 01       	movw	r30, r6
 726:	23 81       	ldd	r18, Z+3	; 0x03
 728:	f2 01       	movw	r30, r4
 72a:	23 fd       	sbrc	r18, 3
 72c:	85 91       	lpm	r24, Z+
 72e:	23 ff       	sbrs	r18, 3
 730:	81 91       	ld	r24, Z+
 732:	2f 01       	movw	r4, r30
 734:	88 23       	and	r24, r24
 736:	09 f4       	brne	.+2      	; 0x73a <vfprintf+0x46>
 738:	b2 c1       	rjmp	.+868    	; 0xa9e <__stack+0x19f>
 73a:	85 32       	cpi	r24, 0x25	; 37
 73c:	39 f4       	brne	.+14     	; 0x74c <vfprintf+0x58>
 73e:	23 fd       	sbrc	r18, 3
 740:	85 91       	lpm	r24, Z+
 742:	23 ff       	sbrs	r18, 3
 744:	81 91       	ld	r24, Z+
 746:	2f 01       	movw	r4, r30
 748:	85 32       	cpi	r24, 0x25	; 37
 74a:	29 f4       	brne	.+10     	; 0x756 <vfprintf+0x62>
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	b3 01       	movw	r22, r6
 750:	0e 94 6d 05 	call	0xada	; 0xada <fputc>
 754:	e7 cf       	rjmp	.-50     	; 0x724 <vfprintf+0x30>
 756:	98 2f       	mov	r25, r24
 758:	ff 24       	eor	r15, r15
 75a:	ee 24       	eor	r14, r14
 75c:	99 24       	eor	r9, r9
 75e:	ff e1       	ldi	r31, 0x1F	; 31
 760:	ff 15       	cp	r31, r15
 762:	d0 f0       	brcs	.+52     	; 0x798 <vfprintf+0xa4>
 764:	9b 32       	cpi	r25, 0x2B	; 43
 766:	69 f0       	breq	.+26     	; 0x782 <vfprintf+0x8e>
 768:	9c 32       	cpi	r25, 0x2C	; 44
 76a:	28 f4       	brcc	.+10     	; 0x776 <vfprintf+0x82>
 76c:	90 32       	cpi	r25, 0x20	; 32
 76e:	59 f0       	breq	.+22     	; 0x786 <vfprintf+0x92>
 770:	93 32       	cpi	r25, 0x23	; 35
 772:	91 f4       	brne	.+36     	; 0x798 <vfprintf+0xa4>
 774:	0e c0       	rjmp	.+28     	; 0x792 <vfprintf+0x9e>
 776:	9d 32       	cpi	r25, 0x2D	; 45
 778:	49 f0       	breq	.+18     	; 0x78c <vfprintf+0x98>
 77a:	90 33       	cpi	r25, 0x30	; 48
 77c:	69 f4       	brne	.+26     	; 0x798 <vfprintf+0xa4>
 77e:	41 e0       	ldi	r20, 0x01	; 1
 780:	24 c0       	rjmp	.+72     	; 0x7ca <vfprintf+0xd6>
 782:	52 e0       	ldi	r21, 0x02	; 2
 784:	f5 2a       	or	r15, r21
 786:	84 e0       	ldi	r24, 0x04	; 4
 788:	f8 2a       	or	r15, r24
 78a:	28 c0       	rjmp	.+80     	; 0x7dc <vfprintf+0xe8>
 78c:	98 e0       	ldi	r25, 0x08	; 8
 78e:	f9 2a       	or	r15, r25
 790:	25 c0       	rjmp	.+74     	; 0x7dc <vfprintf+0xe8>
 792:	e0 e1       	ldi	r30, 0x10	; 16
 794:	fe 2a       	or	r15, r30
 796:	22 c0       	rjmp	.+68     	; 0x7dc <vfprintf+0xe8>
 798:	f7 fc       	sbrc	r15, 7
 79a:	29 c0       	rjmp	.+82     	; 0x7ee <vfprintf+0xfa>
 79c:	89 2f       	mov	r24, r25
 79e:	80 53       	subi	r24, 0x30	; 48
 7a0:	8a 30       	cpi	r24, 0x0A	; 10
 7a2:	70 f4       	brcc	.+28     	; 0x7c0 <vfprintf+0xcc>
 7a4:	f6 fe       	sbrs	r15, 6
 7a6:	05 c0       	rjmp	.+10     	; 0x7b2 <vfprintf+0xbe>
 7a8:	98 9c       	mul	r9, r8
 7aa:	90 2c       	mov	r9, r0
 7ac:	11 24       	eor	r1, r1
 7ae:	98 0e       	add	r9, r24
 7b0:	15 c0       	rjmp	.+42     	; 0x7dc <vfprintf+0xe8>
 7b2:	e8 9c       	mul	r14, r8
 7b4:	e0 2c       	mov	r14, r0
 7b6:	11 24       	eor	r1, r1
 7b8:	e8 0e       	add	r14, r24
 7ba:	f0 e2       	ldi	r31, 0x20	; 32
 7bc:	ff 2a       	or	r15, r31
 7be:	0e c0       	rjmp	.+28     	; 0x7dc <vfprintf+0xe8>
 7c0:	9e 32       	cpi	r25, 0x2E	; 46
 7c2:	29 f4       	brne	.+10     	; 0x7ce <vfprintf+0xda>
 7c4:	f6 fc       	sbrc	r15, 6
 7c6:	6b c1       	rjmp	.+726    	; 0xa9e <__stack+0x19f>
 7c8:	40 e4       	ldi	r20, 0x40	; 64
 7ca:	f4 2a       	or	r15, r20
 7cc:	07 c0       	rjmp	.+14     	; 0x7dc <vfprintf+0xe8>
 7ce:	9c 36       	cpi	r25, 0x6C	; 108
 7d0:	19 f4       	brne	.+6      	; 0x7d8 <vfprintf+0xe4>
 7d2:	50 e8       	ldi	r21, 0x80	; 128
 7d4:	f5 2a       	or	r15, r21
 7d6:	02 c0       	rjmp	.+4      	; 0x7dc <vfprintf+0xe8>
 7d8:	98 36       	cpi	r25, 0x68	; 104
 7da:	49 f4       	brne	.+18     	; 0x7ee <vfprintf+0xfa>
 7dc:	f2 01       	movw	r30, r4
 7de:	23 fd       	sbrc	r18, 3
 7e0:	95 91       	lpm	r25, Z+
 7e2:	23 ff       	sbrs	r18, 3
 7e4:	91 91       	ld	r25, Z+
 7e6:	2f 01       	movw	r4, r30
 7e8:	99 23       	and	r25, r25
 7ea:	09 f0       	breq	.+2      	; 0x7ee <vfprintf+0xfa>
 7ec:	b8 cf       	rjmp	.-144    	; 0x75e <vfprintf+0x6a>
 7ee:	89 2f       	mov	r24, r25
 7f0:	85 54       	subi	r24, 0x45	; 69
 7f2:	83 30       	cpi	r24, 0x03	; 3
 7f4:	18 f0       	brcs	.+6      	; 0x7fc <vfprintf+0x108>
 7f6:	80 52       	subi	r24, 0x20	; 32
 7f8:	83 30       	cpi	r24, 0x03	; 3
 7fa:	38 f4       	brcc	.+14     	; 0x80a <vfprintf+0x116>
 7fc:	44 e0       	ldi	r20, 0x04	; 4
 7fe:	50 e0       	ldi	r21, 0x00	; 0
 800:	a4 0e       	add	r10, r20
 802:	b5 1e       	adc	r11, r21
 804:	5f e3       	ldi	r21, 0x3F	; 63
 806:	59 83       	std	Y+1, r21	; 0x01
 808:	0f c0       	rjmp	.+30     	; 0x828 <vfprintf+0x134>
 80a:	93 36       	cpi	r25, 0x63	; 99
 80c:	31 f0       	breq	.+12     	; 0x81a <vfprintf+0x126>
 80e:	93 37       	cpi	r25, 0x73	; 115
 810:	79 f0       	breq	.+30     	; 0x830 <vfprintf+0x13c>
 812:	93 35       	cpi	r25, 0x53	; 83
 814:	09 f0       	breq	.+2      	; 0x818 <vfprintf+0x124>
 816:	56 c0       	rjmp	.+172    	; 0x8c4 <vfprintf+0x1d0>
 818:	20 c0       	rjmp	.+64     	; 0x85a <vfprintf+0x166>
 81a:	f5 01       	movw	r30, r10
 81c:	80 81       	ld	r24, Z
 81e:	89 83       	std	Y+1, r24	; 0x01
 820:	42 e0       	ldi	r20, 0x02	; 2
 822:	50 e0       	ldi	r21, 0x00	; 0
 824:	a4 0e       	add	r10, r20
 826:	b5 1e       	adc	r11, r21
 828:	61 01       	movw	r12, r2
 82a:	01 e0       	ldi	r16, 0x01	; 1
 82c:	10 e0       	ldi	r17, 0x00	; 0
 82e:	12 c0       	rjmp	.+36     	; 0x854 <vfprintf+0x160>
 830:	f5 01       	movw	r30, r10
 832:	c0 80       	ld	r12, Z
 834:	d1 80       	ldd	r13, Z+1	; 0x01
 836:	f6 fc       	sbrc	r15, 6
 838:	03 c0       	rjmp	.+6      	; 0x840 <vfprintf+0x14c>
 83a:	6f ef       	ldi	r22, 0xFF	; 255
 83c:	7f ef       	ldi	r23, 0xFF	; 255
 83e:	02 c0       	rjmp	.+4      	; 0x844 <vfprintf+0x150>
 840:	69 2d       	mov	r22, r9
 842:	70 e0       	ldi	r23, 0x00	; 0
 844:	42 e0       	ldi	r20, 0x02	; 2
 846:	50 e0       	ldi	r21, 0x00	; 0
 848:	a4 0e       	add	r10, r20
 84a:	b5 1e       	adc	r11, r21
 84c:	c6 01       	movw	r24, r12
 84e:	0e 94 62 05 	call	0xac4	; 0xac4 <strnlen>
 852:	8c 01       	movw	r16, r24
 854:	5f e7       	ldi	r21, 0x7F	; 127
 856:	f5 22       	and	r15, r21
 858:	14 c0       	rjmp	.+40     	; 0x882 <vfprintf+0x18e>
 85a:	f5 01       	movw	r30, r10
 85c:	c0 80       	ld	r12, Z
 85e:	d1 80       	ldd	r13, Z+1	; 0x01
 860:	f6 fc       	sbrc	r15, 6
 862:	03 c0       	rjmp	.+6      	; 0x86a <vfprintf+0x176>
 864:	6f ef       	ldi	r22, 0xFF	; 255
 866:	7f ef       	ldi	r23, 0xFF	; 255
 868:	02 c0       	rjmp	.+4      	; 0x86e <vfprintf+0x17a>
 86a:	69 2d       	mov	r22, r9
 86c:	70 e0       	ldi	r23, 0x00	; 0
 86e:	42 e0       	ldi	r20, 0x02	; 2
 870:	50 e0       	ldi	r21, 0x00	; 0
 872:	a4 0e       	add	r10, r20
 874:	b5 1e       	adc	r11, r21
 876:	c6 01       	movw	r24, r12
 878:	0e 94 57 05 	call	0xaae	; 0xaae <strnlen_P>
 87c:	8c 01       	movw	r16, r24
 87e:	50 e8       	ldi	r21, 0x80	; 128
 880:	f5 2a       	or	r15, r21
 882:	f3 fe       	sbrs	r15, 3
 884:	07 c0       	rjmp	.+14     	; 0x894 <vfprintf+0x1a0>
 886:	1a c0       	rjmp	.+52     	; 0x8bc <vfprintf+0x1c8>
 888:	80 e2       	ldi	r24, 0x20	; 32
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	b3 01       	movw	r22, r6
 88e:	0e 94 6d 05 	call	0xada	; 0xada <fputc>
 892:	ea 94       	dec	r14
 894:	8e 2d       	mov	r24, r14
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	08 17       	cp	r16, r24
 89a:	19 07       	cpc	r17, r25
 89c:	a8 f3       	brcs	.-22     	; 0x888 <vfprintf+0x194>
 89e:	0e c0       	rjmp	.+28     	; 0x8bc <vfprintf+0x1c8>
 8a0:	f6 01       	movw	r30, r12
 8a2:	f7 fc       	sbrc	r15, 7
 8a4:	85 91       	lpm	r24, Z+
 8a6:	f7 fe       	sbrs	r15, 7
 8a8:	81 91       	ld	r24, Z+
 8aa:	6f 01       	movw	r12, r30
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	b3 01       	movw	r22, r6
 8b0:	0e 94 6d 05 	call	0xada	; 0xada <fputc>
 8b4:	e1 10       	cpse	r14, r1
 8b6:	ea 94       	dec	r14
 8b8:	01 50       	subi	r16, 0x01	; 1
 8ba:	10 40       	sbci	r17, 0x00	; 0
 8bc:	01 15       	cp	r16, r1
 8be:	11 05       	cpc	r17, r1
 8c0:	79 f7       	brne	.-34     	; 0x8a0 <vfprintf+0x1ac>
 8c2:	ea c0       	rjmp	.+468    	; 0xa98 <__stack+0x199>
 8c4:	94 36       	cpi	r25, 0x64	; 100
 8c6:	11 f0       	breq	.+4      	; 0x8cc <vfprintf+0x1d8>
 8c8:	99 36       	cpi	r25, 0x69	; 105
 8ca:	69 f5       	brne	.+90     	; 0x926 <__stack+0x27>
 8cc:	f7 fe       	sbrs	r15, 7
 8ce:	08 c0       	rjmp	.+16     	; 0x8e0 <vfprintf+0x1ec>
 8d0:	f5 01       	movw	r30, r10
 8d2:	20 81       	ld	r18, Z
 8d4:	31 81       	ldd	r19, Z+1	; 0x01
 8d6:	42 81       	ldd	r20, Z+2	; 0x02
 8d8:	53 81       	ldd	r21, Z+3	; 0x03
 8da:	84 e0       	ldi	r24, 0x04	; 4
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	0a c0       	rjmp	.+20     	; 0x8f4 <vfprintf+0x200>
 8e0:	f5 01       	movw	r30, r10
 8e2:	80 81       	ld	r24, Z
 8e4:	91 81       	ldd	r25, Z+1	; 0x01
 8e6:	9c 01       	movw	r18, r24
 8e8:	44 27       	eor	r20, r20
 8ea:	37 fd       	sbrc	r19, 7
 8ec:	40 95       	com	r20
 8ee:	54 2f       	mov	r21, r20
 8f0:	82 e0       	ldi	r24, 0x02	; 2
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	a8 0e       	add	r10, r24
 8f6:	b9 1e       	adc	r11, r25
 8f8:	9f e6       	ldi	r25, 0x6F	; 111
 8fa:	f9 22       	and	r15, r25
 8fc:	57 ff       	sbrs	r21, 7
 8fe:	09 c0       	rjmp	.+18     	; 0x912 <__stack+0x13>
 900:	50 95       	com	r21
 902:	40 95       	com	r20
 904:	30 95       	com	r19
 906:	21 95       	neg	r18
 908:	3f 4f       	sbci	r19, 0xFF	; 255
 90a:	4f 4f       	sbci	r20, 0xFF	; 255
 90c:	5f 4f       	sbci	r21, 0xFF	; 255
 90e:	e0 e8       	ldi	r30, 0x80	; 128
 910:	fe 2a       	or	r15, r30
 912:	ca 01       	movw	r24, r20
 914:	b9 01       	movw	r22, r18
 916:	a1 01       	movw	r20, r2
 918:	2a e0       	ldi	r18, 0x0A	; 10
 91a:	30 e0       	ldi	r19, 0x00	; 0
 91c:	0e 94 99 05 	call	0xb32	; 0xb32 <__ultoa_invert>
 920:	d8 2e       	mov	r13, r24
 922:	d2 18       	sub	r13, r2
 924:	40 c0       	rjmp	.+128    	; 0x9a6 <__stack+0xa7>
 926:	95 37       	cpi	r25, 0x75	; 117
 928:	29 f4       	brne	.+10     	; 0x934 <__stack+0x35>
 92a:	1f 2d       	mov	r17, r15
 92c:	1f 7e       	andi	r17, 0xEF	; 239
 92e:	2a e0       	ldi	r18, 0x0A	; 10
 930:	30 e0       	ldi	r19, 0x00	; 0
 932:	1d c0       	rjmp	.+58     	; 0x96e <__stack+0x6f>
 934:	1f 2d       	mov	r17, r15
 936:	19 7f       	andi	r17, 0xF9	; 249
 938:	9f 36       	cpi	r25, 0x6F	; 111
 93a:	61 f0       	breq	.+24     	; 0x954 <__stack+0x55>
 93c:	90 37       	cpi	r25, 0x70	; 112
 93e:	20 f4       	brcc	.+8      	; 0x948 <__stack+0x49>
 940:	98 35       	cpi	r25, 0x58	; 88
 942:	09 f0       	breq	.+2      	; 0x946 <__stack+0x47>
 944:	ac c0       	rjmp	.+344    	; 0xa9e <__stack+0x19f>
 946:	0f c0       	rjmp	.+30     	; 0x966 <__stack+0x67>
 948:	90 37       	cpi	r25, 0x70	; 112
 94a:	39 f0       	breq	.+14     	; 0x95a <__stack+0x5b>
 94c:	98 37       	cpi	r25, 0x78	; 120
 94e:	09 f0       	breq	.+2      	; 0x952 <__stack+0x53>
 950:	a6 c0       	rjmp	.+332    	; 0xa9e <__stack+0x19f>
 952:	04 c0       	rjmp	.+8      	; 0x95c <__stack+0x5d>
 954:	28 e0       	ldi	r18, 0x08	; 8
 956:	30 e0       	ldi	r19, 0x00	; 0
 958:	0a c0       	rjmp	.+20     	; 0x96e <__stack+0x6f>
 95a:	10 61       	ori	r17, 0x10	; 16
 95c:	14 fd       	sbrc	r17, 4
 95e:	14 60       	ori	r17, 0x04	; 4
 960:	20 e1       	ldi	r18, 0x10	; 16
 962:	30 e0       	ldi	r19, 0x00	; 0
 964:	04 c0       	rjmp	.+8      	; 0x96e <__stack+0x6f>
 966:	14 fd       	sbrc	r17, 4
 968:	16 60       	ori	r17, 0x06	; 6
 96a:	20 e1       	ldi	r18, 0x10	; 16
 96c:	32 e0       	ldi	r19, 0x02	; 2
 96e:	17 ff       	sbrs	r17, 7
 970:	08 c0       	rjmp	.+16     	; 0x982 <__stack+0x83>
 972:	f5 01       	movw	r30, r10
 974:	60 81       	ld	r22, Z
 976:	71 81       	ldd	r23, Z+1	; 0x01
 978:	82 81       	ldd	r24, Z+2	; 0x02
 97a:	93 81       	ldd	r25, Z+3	; 0x03
 97c:	44 e0       	ldi	r20, 0x04	; 4
 97e:	50 e0       	ldi	r21, 0x00	; 0
 980:	08 c0       	rjmp	.+16     	; 0x992 <__stack+0x93>
 982:	f5 01       	movw	r30, r10
 984:	80 81       	ld	r24, Z
 986:	91 81       	ldd	r25, Z+1	; 0x01
 988:	bc 01       	movw	r22, r24
 98a:	80 e0       	ldi	r24, 0x00	; 0
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	42 e0       	ldi	r20, 0x02	; 2
 990:	50 e0       	ldi	r21, 0x00	; 0
 992:	a4 0e       	add	r10, r20
 994:	b5 1e       	adc	r11, r21
 996:	a1 01       	movw	r20, r2
 998:	0e 94 99 05 	call	0xb32	; 0xb32 <__ultoa_invert>
 99c:	d8 2e       	mov	r13, r24
 99e:	d2 18       	sub	r13, r2
 9a0:	8f e7       	ldi	r24, 0x7F	; 127
 9a2:	f8 2e       	mov	r15, r24
 9a4:	f1 22       	and	r15, r17
 9a6:	f6 fe       	sbrs	r15, 6
 9a8:	0b c0       	rjmp	.+22     	; 0x9c0 <__stack+0xc1>
 9aa:	5e ef       	ldi	r21, 0xFE	; 254
 9ac:	f5 22       	and	r15, r21
 9ae:	d9 14       	cp	r13, r9
 9b0:	38 f4       	brcc	.+14     	; 0x9c0 <__stack+0xc1>
 9b2:	f4 fe       	sbrs	r15, 4
 9b4:	07 c0       	rjmp	.+14     	; 0x9c4 <__stack+0xc5>
 9b6:	f2 fc       	sbrc	r15, 2
 9b8:	05 c0       	rjmp	.+10     	; 0x9c4 <__stack+0xc5>
 9ba:	8f ee       	ldi	r24, 0xEF	; 239
 9bc:	f8 22       	and	r15, r24
 9be:	02 c0       	rjmp	.+4      	; 0x9c4 <__stack+0xc5>
 9c0:	1d 2d       	mov	r17, r13
 9c2:	01 c0       	rjmp	.+2      	; 0x9c6 <__stack+0xc7>
 9c4:	19 2d       	mov	r17, r9
 9c6:	f4 fe       	sbrs	r15, 4
 9c8:	0d c0       	rjmp	.+26     	; 0x9e4 <__stack+0xe5>
 9ca:	fe 01       	movw	r30, r28
 9cc:	ed 0d       	add	r30, r13
 9ce:	f1 1d       	adc	r31, r1
 9d0:	80 81       	ld	r24, Z
 9d2:	80 33       	cpi	r24, 0x30	; 48
 9d4:	19 f4       	brne	.+6      	; 0x9dc <__stack+0xdd>
 9d6:	99 ee       	ldi	r25, 0xE9	; 233
 9d8:	f9 22       	and	r15, r25
 9da:	08 c0       	rjmp	.+16     	; 0x9ec <__stack+0xed>
 9dc:	1f 5f       	subi	r17, 0xFF	; 255
 9de:	f2 fe       	sbrs	r15, 2
 9e0:	05 c0       	rjmp	.+10     	; 0x9ec <__stack+0xed>
 9e2:	03 c0       	rjmp	.+6      	; 0x9ea <__stack+0xeb>
 9e4:	8f 2d       	mov	r24, r15
 9e6:	86 78       	andi	r24, 0x86	; 134
 9e8:	09 f0       	breq	.+2      	; 0x9ec <__stack+0xed>
 9ea:	1f 5f       	subi	r17, 0xFF	; 255
 9ec:	0f 2d       	mov	r16, r15
 9ee:	f3 fc       	sbrc	r15, 3
 9f0:	14 c0       	rjmp	.+40     	; 0xa1a <__stack+0x11b>
 9f2:	f0 fe       	sbrs	r15, 0
 9f4:	0f c0       	rjmp	.+30     	; 0xa14 <__stack+0x115>
 9f6:	1e 15       	cp	r17, r14
 9f8:	10 f0       	brcs	.+4      	; 0x9fe <__stack+0xff>
 9fa:	9d 2c       	mov	r9, r13
 9fc:	0b c0       	rjmp	.+22     	; 0xa14 <__stack+0x115>
 9fe:	9d 2c       	mov	r9, r13
 a00:	9e 0c       	add	r9, r14
 a02:	91 1a       	sub	r9, r17
 a04:	1e 2d       	mov	r17, r14
 a06:	06 c0       	rjmp	.+12     	; 0xa14 <__stack+0x115>
 a08:	80 e2       	ldi	r24, 0x20	; 32
 a0a:	90 e0       	ldi	r25, 0x00	; 0
 a0c:	b3 01       	movw	r22, r6
 a0e:	0e 94 6d 05 	call	0xada	; 0xada <fputc>
 a12:	1f 5f       	subi	r17, 0xFF	; 255
 a14:	1e 15       	cp	r17, r14
 a16:	c0 f3       	brcs	.-16     	; 0xa08 <__stack+0x109>
 a18:	04 c0       	rjmp	.+8      	; 0xa22 <__stack+0x123>
 a1a:	1e 15       	cp	r17, r14
 a1c:	10 f4       	brcc	.+4      	; 0xa22 <__stack+0x123>
 a1e:	e1 1a       	sub	r14, r17
 a20:	01 c0       	rjmp	.+2      	; 0xa24 <__stack+0x125>
 a22:	ee 24       	eor	r14, r14
 a24:	04 ff       	sbrs	r16, 4
 a26:	0f c0       	rjmp	.+30     	; 0xa46 <__stack+0x147>
 a28:	80 e3       	ldi	r24, 0x30	; 48
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	b3 01       	movw	r22, r6
 a2e:	0e 94 6d 05 	call	0xada	; 0xada <fputc>
 a32:	02 ff       	sbrs	r16, 2
 a34:	1d c0       	rjmp	.+58     	; 0xa70 <__stack+0x171>
 a36:	01 fd       	sbrc	r16, 1
 a38:	03 c0       	rjmp	.+6      	; 0xa40 <__stack+0x141>
 a3a:	88 e7       	ldi	r24, 0x78	; 120
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	0e c0       	rjmp	.+28     	; 0xa5c <__stack+0x15d>
 a40:	88 e5       	ldi	r24, 0x58	; 88
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	0b c0       	rjmp	.+22     	; 0xa5c <__stack+0x15d>
 a46:	80 2f       	mov	r24, r16
 a48:	86 78       	andi	r24, 0x86	; 134
 a4a:	91 f0       	breq	.+36     	; 0xa70 <__stack+0x171>
 a4c:	01 ff       	sbrs	r16, 1
 a4e:	02 c0       	rjmp	.+4      	; 0xa54 <__stack+0x155>
 a50:	8b e2       	ldi	r24, 0x2B	; 43
 a52:	01 c0       	rjmp	.+2      	; 0xa56 <__stack+0x157>
 a54:	80 e2       	ldi	r24, 0x20	; 32
 a56:	f7 fc       	sbrc	r15, 7
 a58:	8d e2       	ldi	r24, 0x2D	; 45
 a5a:	90 e0       	ldi	r25, 0x00	; 0
 a5c:	b3 01       	movw	r22, r6
 a5e:	0e 94 6d 05 	call	0xada	; 0xada <fputc>
 a62:	06 c0       	rjmp	.+12     	; 0xa70 <__stack+0x171>
 a64:	80 e3       	ldi	r24, 0x30	; 48
 a66:	90 e0       	ldi	r25, 0x00	; 0
 a68:	b3 01       	movw	r22, r6
 a6a:	0e 94 6d 05 	call	0xada	; 0xada <fputc>
 a6e:	9a 94       	dec	r9
 a70:	d9 14       	cp	r13, r9
 a72:	c0 f3       	brcs	.-16     	; 0xa64 <__stack+0x165>
 a74:	da 94       	dec	r13
 a76:	f1 01       	movw	r30, r2
 a78:	ed 0d       	add	r30, r13
 a7a:	f1 1d       	adc	r31, r1
 a7c:	80 81       	ld	r24, Z
 a7e:	90 e0       	ldi	r25, 0x00	; 0
 a80:	b3 01       	movw	r22, r6
 a82:	0e 94 6d 05 	call	0xada	; 0xada <fputc>
 a86:	dd 20       	and	r13, r13
 a88:	a9 f7       	brne	.-22     	; 0xa74 <__stack+0x175>
 a8a:	06 c0       	rjmp	.+12     	; 0xa98 <__stack+0x199>
 a8c:	80 e2       	ldi	r24, 0x20	; 32
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	b3 01       	movw	r22, r6
 a92:	0e 94 6d 05 	call	0xada	; 0xada <fputc>
 a96:	ea 94       	dec	r14
 a98:	ee 20       	and	r14, r14
 a9a:	c1 f7       	brne	.-16     	; 0xa8c <__stack+0x18d>
 a9c:	43 ce       	rjmp	.-890    	; 0x724 <vfprintf+0x30>
 a9e:	f3 01       	movw	r30, r6
 aa0:	66 81       	ldd	r22, Z+6	; 0x06
 aa2:	77 81       	ldd	r23, Z+7	; 0x07
 aa4:	cb 01       	movw	r24, r22
 aa6:	2b 96       	adiw	r28, 0x0b	; 11
 aa8:	e2 e1       	ldi	r30, 0x12	; 18
 aaa:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <__epilogue_restores__>

00000aae <strnlen_P>:
 aae:	fc 01       	movw	r30, r24
 ab0:	05 90       	lpm	r0, Z+
 ab2:	61 50       	subi	r22, 0x01	; 1
 ab4:	70 40       	sbci	r23, 0x00	; 0
 ab6:	01 10       	cpse	r0, r1
 ab8:	d8 f7       	brcc	.-10     	; 0xab0 <strnlen_P+0x2>
 aba:	80 95       	com	r24
 abc:	90 95       	com	r25
 abe:	8e 0f       	add	r24, r30
 ac0:	9f 1f       	adc	r25, r31
 ac2:	08 95       	ret

00000ac4 <strnlen>:
 ac4:	fc 01       	movw	r30, r24
 ac6:	61 50       	subi	r22, 0x01	; 1
 ac8:	70 40       	sbci	r23, 0x00	; 0
 aca:	01 90       	ld	r0, Z+
 acc:	01 10       	cpse	r0, r1
 ace:	d8 f7       	brcc	.-10     	; 0xac6 <strnlen+0x2>
 ad0:	80 95       	com	r24
 ad2:	90 95       	com	r25
 ad4:	8e 0f       	add	r24, r30
 ad6:	9f 1f       	adc	r25, r31
 ad8:	08 95       	ret

00000ada <fputc>:
 ada:	0f 93       	push	r16
 adc:	1f 93       	push	r17
 ade:	cf 93       	push	r28
 ae0:	df 93       	push	r29
 ae2:	8c 01       	movw	r16, r24
 ae4:	eb 01       	movw	r28, r22
 ae6:	8b 81       	ldd	r24, Y+3	; 0x03
 ae8:	81 ff       	sbrs	r24, 1
 aea:	1b c0       	rjmp	.+54     	; 0xb22 <fputc+0x48>
 aec:	82 ff       	sbrs	r24, 2
 aee:	0d c0       	rjmp	.+26     	; 0xb0a <fputc+0x30>
 af0:	2e 81       	ldd	r18, Y+6	; 0x06
 af2:	3f 81       	ldd	r19, Y+7	; 0x07
 af4:	8c 81       	ldd	r24, Y+4	; 0x04
 af6:	9d 81       	ldd	r25, Y+5	; 0x05
 af8:	28 17       	cp	r18, r24
 afa:	39 07       	cpc	r19, r25
 afc:	64 f4       	brge	.+24     	; 0xb16 <fputc+0x3c>
 afe:	e8 81       	ld	r30, Y
 b00:	f9 81       	ldd	r31, Y+1	; 0x01
 b02:	01 93       	st	Z+, r16
 b04:	f9 83       	std	Y+1, r31	; 0x01
 b06:	e8 83       	st	Y, r30
 b08:	06 c0       	rjmp	.+12     	; 0xb16 <fputc+0x3c>
 b0a:	e8 85       	ldd	r30, Y+8	; 0x08
 b0c:	f9 85       	ldd	r31, Y+9	; 0x09
 b0e:	80 2f       	mov	r24, r16
 b10:	09 95       	icall
 b12:	89 2b       	or	r24, r25
 b14:	31 f4       	brne	.+12     	; 0xb22 <fputc+0x48>
 b16:	8e 81       	ldd	r24, Y+6	; 0x06
 b18:	9f 81       	ldd	r25, Y+7	; 0x07
 b1a:	01 96       	adiw	r24, 0x01	; 1
 b1c:	9f 83       	std	Y+7, r25	; 0x07
 b1e:	8e 83       	std	Y+6, r24	; 0x06
 b20:	02 c0       	rjmp	.+4      	; 0xb26 <fputc+0x4c>
 b22:	0f ef       	ldi	r16, 0xFF	; 255
 b24:	1f ef       	ldi	r17, 0xFF	; 255
 b26:	c8 01       	movw	r24, r16
 b28:	df 91       	pop	r29
 b2a:	cf 91       	pop	r28
 b2c:	1f 91       	pop	r17
 b2e:	0f 91       	pop	r16
 b30:	08 95       	ret

00000b32 <__ultoa_invert>:
 b32:	fa 01       	movw	r30, r20
 b34:	aa 27       	eor	r26, r26
 b36:	28 30       	cpi	r18, 0x08	; 8
 b38:	51 f1       	breq	.+84     	; 0xb8e <__ultoa_invert+0x5c>
 b3a:	20 31       	cpi	r18, 0x10	; 16
 b3c:	81 f1       	breq	.+96     	; 0xb9e <__ultoa_invert+0x6c>
 b3e:	e8 94       	clt
 b40:	6f 93       	push	r22
 b42:	6e 7f       	andi	r22, 0xFE	; 254
 b44:	6e 5f       	subi	r22, 0xFE	; 254
 b46:	7f 4f       	sbci	r23, 0xFF	; 255
 b48:	8f 4f       	sbci	r24, 0xFF	; 255
 b4a:	9f 4f       	sbci	r25, 0xFF	; 255
 b4c:	af 4f       	sbci	r26, 0xFF	; 255
 b4e:	b1 e0       	ldi	r27, 0x01	; 1
 b50:	3e d0       	rcall	.+124    	; 0xbce <__ultoa_invert+0x9c>
 b52:	b4 e0       	ldi	r27, 0x04	; 4
 b54:	3c d0       	rcall	.+120    	; 0xbce <__ultoa_invert+0x9c>
 b56:	67 0f       	add	r22, r23
 b58:	78 1f       	adc	r23, r24
 b5a:	89 1f       	adc	r24, r25
 b5c:	9a 1f       	adc	r25, r26
 b5e:	a1 1d       	adc	r26, r1
 b60:	68 0f       	add	r22, r24
 b62:	79 1f       	adc	r23, r25
 b64:	8a 1f       	adc	r24, r26
 b66:	91 1d       	adc	r25, r1
 b68:	a1 1d       	adc	r26, r1
 b6a:	6a 0f       	add	r22, r26
 b6c:	71 1d       	adc	r23, r1
 b6e:	81 1d       	adc	r24, r1
 b70:	91 1d       	adc	r25, r1
 b72:	a1 1d       	adc	r26, r1
 b74:	20 d0       	rcall	.+64     	; 0xbb6 <__ultoa_invert+0x84>
 b76:	09 f4       	brne	.+2      	; 0xb7a <__ultoa_invert+0x48>
 b78:	68 94       	set
 b7a:	3f 91       	pop	r19
 b7c:	2a e0       	ldi	r18, 0x0A	; 10
 b7e:	26 9f       	mul	r18, r22
 b80:	11 24       	eor	r1, r1
 b82:	30 19       	sub	r19, r0
 b84:	30 5d       	subi	r19, 0xD0	; 208
 b86:	31 93       	st	Z+, r19
 b88:	de f6       	brtc	.-74     	; 0xb40 <__ultoa_invert+0xe>
 b8a:	cf 01       	movw	r24, r30
 b8c:	08 95       	ret
 b8e:	46 2f       	mov	r20, r22
 b90:	47 70       	andi	r20, 0x07	; 7
 b92:	40 5d       	subi	r20, 0xD0	; 208
 b94:	41 93       	st	Z+, r20
 b96:	b3 e0       	ldi	r27, 0x03	; 3
 b98:	0f d0       	rcall	.+30     	; 0xbb8 <__ultoa_invert+0x86>
 b9a:	c9 f7       	brne	.-14     	; 0xb8e <__ultoa_invert+0x5c>
 b9c:	f6 cf       	rjmp	.-20     	; 0xb8a <__ultoa_invert+0x58>
 b9e:	46 2f       	mov	r20, r22
 ba0:	4f 70       	andi	r20, 0x0F	; 15
 ba2:	40 5d       	subi	r20, 0xD0	; 208
 ba4:	4a 33       	cpi	r20, 0x3A	; 58
 ba6:	18 f0       	brcs	.+6      	; 0xbae <__ultoa_invert+0x7c>
 ba8:	49 5d       	subi	r20, 0xD9	; 217
 baa:	31 fd       	sbrc	r19, 1
 bac:	40 52       	subi	r20, 0x20	; 32
 bae:	41 93       	st	Z+, r20
 bb0:	02 d0       	rcall	.+4      	; 0xbb6 <__ultoa_invert+0x84>
 bb2:	a9 f7       	brne	.-22     	; 0xb9e <__ultoa_invert+0x6c>
 bb4:	ea cf       	rjmp	.-44     	; 0xb8a <__ultoa_invert+0x58>
 bb6:	b4 e0       	ldi	r27, 0x04	; 4
 bb8:	a6 95       	lsr	r26
 bba:	97 95       	ror	r25
 bbc:	87 95       	ror	r24
 bbe:	77 95       	ror	r23
 bc0:	67 95       	ror	r22
 bc2:	ba 95       	dec	r27
 bc4:	c9 f7       	brne	.-14     	; 0xbb8 <__ultoa_invert+0x86>
 bc6:	00 97       	sbiw	r24, 0x00	; 0
 bc8:	61 05       	cpc	r22, r1
 bca:	71 05       	cpc	r23, r1
 bcc:	08 95       	ret
 bce:	9b 01       	movw	r18, r22
 bd0:	ac 01       	movw	r20, r24
 bd2:	0a 2e       	mov	r0, r26
 bd4:	06 94       	lsr	r0
 bd6:	57 95       	ror	r21
 bd8:	47 95       	ror	r20
 bda:	37 95       	ror	r19
 bdc:	27 95       	ror	r18
 bde:	ba 95       	dec	r27
 be0:	c9 f7       	brne	.-14     	; 0xbd4 <__ultoa_invert+0xa2>
 be2:	62 0f       	add	r22, r18
 be4:	73 1f       	adc	r23, r19
 be6:	84 1f       	adc	r24, r20
 be8:	95 1f       	adc	r25, r21
 bea:	a0 1d       	adc	r26, r0
 bec:	08 95       	ret

00000bee <__divmodhi4>:
 bee:	97 fb       	bst	r25, 7
 bf0:	09 2e       	mov	r0, r25
 bf2:	07 26       	eor	r0, r23
 bf4:	0a d0       	rcall	.+20     	; 0xc0a <__divmodhi4_neg1>
 bf6:	77 fd       	sbrc	r23, 7
 bf8:	04 d0       	rcall	.+8      	; 0xc02 <__divmodhi4_neg2>
 bfa:	0c d0       	rcall	.+24     	; 0xc14 <__udivmodhi4>
 bfc:	06 d0       	rcall	.+12     	; 0xc0a <__divmodhi4_neg1>
 bfe:	00 20       	and	r0, r0
 c00:	1a f4       	brpl	.+6      	; 0xc08 <__divmodhi4_exit>

00000c02 <__divmodhi4_neg2>:
 c02:	70 95       	com	r23
 c04:	61 95       	neg	r22
 c06:	7f 4f       	sbci	r23, 0xFF	; 255

00000c08 <__divmodhi4_exit>:
 c08:	08 95       	ret

00000c0a <__divmodhi4_neg1>:
 c0a:	f6 f7       	brtc	.-4      	; 0xc08 <__divmodhi4_exit>
 c0c:	90 95       	com	r25
 c0e:	81 95       	neg	r24
 c10:	9f 4f       	sbci	r25, 0xFF	; 255
 c12:	08 95       	ret

00000c14 <__udivmodhi4>:
 c14:	aa 1b       	sub	r26, r26
 c16:	bb 1b       	sub	r27, r27
 c18:	51 e1       	ldi	r21, 0x11	; 17
 c1a:	07 c0       	rjmp	.+14     	; 0xc2a <__udivmodhi4_ep>

00000c1c <__udivmodhi4_loop>:
 c1c:	aa 1f       	adc	r26, r26
 c1e:	bb 1f       	adc	r27, r27
 c20:	a6 17       	cp	r26, r22
 c22:	b7 07       	cpc	r27, r23
 c24:	10 f0       	brcs	.+4      	; 0xc2a <__udivmodhi4_ep>
 c26:	a6 1b       	sub	r26, r22
 c28:	b7 0b       	sbc	r27, r23

00000c2a <__udivmodhi4_ep>:
 c2a:	88 1f       	adc	r24, r24
 c2c:	99 1f       	adc	r25, r25
 c2e:	5a 95       	dec	r21
 c30:	a9 f7       	brne	.-22     	; 0xc1c <__udivmodhi4_loop>
 c32:	80 95       	com	r24
 c34:	90 95       	com	r25
 c36:	bc 01       	movw	r22, r24
 c38:	cd 01       	movw	r24, r26
 c3a:	08 95       	ret

00000c3c <__prologue_saves__>:
 c3c:	2f 92       	push	r2
 c3e:	3f 92       	push	r3
 c40:	4f 92       	push	r4
 c42:	5f 92       	push	r5
 c44:	6f 92       	push	r6
 c46:	7f 92       	push	r7
 c48:	8f 92       	push	r8
 c4a:	9f 92       	push	r9
 c4c:	af 92       	push	r10
 c4e:	bf 92       	push	r11
 c50:	cf 92       	push	r12
 c52:	df 92       	push	r13
 c54:	ef 92       	push	r14
 c56:	ff 92       	push	r15
 c58:	0f 93       	push	r16
 c5a:	1f 93       	push	r17
 c5c:	cf 93       	push	r28
 c5e:	df 93       	push	r29
 c60:	cd b7       	in	r28, 0x3d	; 61
 c62:	de b7       	in	r29, 0x3e	; 62
 c64:	ca 1b       	sub	r28, r26
 c66:	db 0b       	sbc	r29, r27
 c68:	0f b6       	in	r0, 0x3f	; 63
 c6a:	f8 94       	cli
 c6c:	de bf       	out	0x3e, r29	; 62
 c6e:	0f be       	out	0x3f, r0	; 63
 c70:	cd bf       	out	0x3d, r28	; 61
 c72:	09 94       	ijmp

00000c74 <__epilogue_restores__>:
 c74:	2a 88       	ldd	r2, Y+18	; 0x12
 c76:	39 88       	ldd	r3, Y+17	; 0x11
 c78:	48 88       	ldd	r4, Y+16	; 0x10
 c7a:	5f 84       	ldd	r5, Y+15	; 0x0f
 c7c:	6e 84       	ldd	r6, Y+14	; 0x0e
 c7e:	7d 84       	ldd	r7, Y+13	; 0x0d
 c80:	8c 84       	ldd	r8, Y+12	; 0x0c
 c82:	9b 84       	ldd	r9, Y+11	; 0x0b
 c84:	aa 84       	ldd	r10, Y+10	; 0x0a
 c86:	b9 84       	ldd	r11, Y+9	; 0x09
 c88:	c8 84       	ldd	r12, Y+8	; 0x08
 c8a:	df 80       	ldd	r13, Y+7	; 0x07
 c8c:	ee 80       	ldd	r14, Y+6	; 0x06
 c8e:	fd 80       	ldd	r15, Y+5	; 0x05
 c90:	0c 81       	ldd	r16, Y+4	; 0x04
 c92:	1b 81       	ldd	r17, Y+3	; 0x03
 c94:	aa 81       	ldd	r26, Y+2	; 0x02
 c96:	b9 81       	ldd	r27, Y+1	; 0x01
 c98:	ce 0f       	add	r28, r30
 c9a:	d1 1d       	adc	r29, r1
 c9c:	0f b6       	in	r0, 0x3f	; 63
 c9e:	f8 94       	cli
 ca0:	de bf       	out	0x3e, r29	; 62
 ca2:	0f be       	out	0x3f, r0	; 63
 ca4:	cd bf       	out	0x3d, r28	; 61
 ca6:	ed 01       	movw	r28, r26
 ca8:	08 95       	ret

00000caa <_exit>:
 caa:	f8 94       	cli

00000cac <__stop_program>:
 cac:	ff cf       	rjmp	.-2      	; 0xcac <__stop_program>
