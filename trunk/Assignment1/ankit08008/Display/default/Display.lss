
Display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000002ac  00000320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000a7  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000007a0  00000000  00000000  000003f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000267  00000000  00000000  00000b93  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004d9  00000000  00000000  00000dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000e0  00000000  00000000  000012d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000023d  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002a1  00000000  00000000  000015f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ea       	ldi	r30, 0xAC	; 172
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 1f 01 	call	0x23e	; 0x23e <main>
  8e:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
  96:	28 2f       	mov	r18, r24
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
  98:	66 23       	and	r22, r22
  9a:	11 f0       	breq	.+4      	; 0xa0 <lcd_write+0xa>
       lcd_rs_high();
  9c:	40 9a       	sbi	0x08, 0	; 8
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <lcd_write+0xc>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
  a0:	40 98       	cbi	0x08, 0	; 8
    }
    lcd_rw_low();
  a2:	41 98       	cbi	0x08, 1	; 8

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
  a4:	8a b1       	in	r24, 0x0a	; 10
  a6:	8f 60       	ori	r24, 0x0F	; 15
  a8:	8a b9       	out	0x0a, r24	; 10

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
  aa:	9b b1       	in	r25, 0x0b	; 11
  ac:	90 7f       	andi	r25, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
  ae:	82 2f       	mov	r24, r18
  b0:	82 95       	swap	r24
  b2:	8f 70       	andi	r24, 0x0F	; 15
  b4:	89 2b       	or	r24, r25
  b6:	8b b9       	out	0x0b, r24	; 11

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
  b8:	42 9a       	sbi	0x08, 2	; 8
    lcd_e_delay();
  ba:	00 c0       	rjmp	.+0      	; 0xbc <lcd_write+0x26>
    lcd_e_low();
  bc:	42 98       	cbi	0x08, 2	; 8
        dataBits = LCD_DATA0_PORT & 0xF0;
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
        lcd_e_toggle();

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
  be:	2f 70       	andi	r18, 0x0F	; 15
  c0:	29 2b       	or	r18, r25
  c2:	2b b9       	out	0x0b, r18	; 11

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
  c4:	42 9a       	sbi	0x08, 2	; 8
    lcd_e_delay();
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <lcd_write+0x32>
    lcd_e_low();
  c8:	42 98       	cbi	0x08, 2	; 8
        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
        lcd_e_toggle();

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
  ca:	9f 60       	ori	r25, 0x0F	; 15
  cc:	9b b9       	out	0x0b, r25	; 11
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
  ce:	08 95       	ret

000000d0 <lcd_waitbusy>:
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
  d0:	40 98       	cbi	0x08, 0	; 8
    lcd_rw_high();                           /* RW=1  read mode      */
  d2:	41 9a       	sbi	0x08, 1	; 8
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
  d4:	8a b1       	in	r24, 0x0a	; 10
  d6:	80 7f       	andi	r24, 0xF0	; 240
  d8:	8a b9       	out	0x0a, r24	; 10
        
        lcd_e_high();
  da:	42 9a       	sbi	0x08, 2	; 8
        lcd_e_delay();        
  dc:	00 c0       	rjmp	.+0      	; 0xde <lcd_waitbusy+0xe>
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
  de:	89 b1       	in	r24, 0x09	; 9
        lcd_e_low();
  e0:	42 98       	cbi	0x08, 2	; 8
        
        lcd_e_delay();                       /* Enable 500ns low       */
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <lcd_waitbusy+0x14>
        
        lcd_e_high();
  e4:	42 9a       	sbi	0x08, 2	; 8
        lcd_e_delay();
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <lcd_waitbusy+0x18>
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
  e8:	99 b1       	in	r25, 0x09	; 9
        lcd_e_low();
  ea:	42 98       	cbi	0x08, 2	; 8

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
  ec:	83 fd       	sbrc	r24, 3
  ee:	f0 cf       	rjmp	.-32     	; 0xd0 <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <lcd_waitbusy+0x24>
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
  f8:	40 98       	cbi	0x08, 0	; 8
    lcd_rw_high();                           /* RW=1  read mode      */
  fa:	41 9a       	sbi	0x08, 1	; 8
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
  fc:	8a b1       	in	r24, 0x0a	; 10
  fe:	80 7f       	andi	r24, 0xF0	; 240
 100:	8a b9       	out	0x0a, r24	; 10
        
        lcd_e_high();
 102:	42 9a       	sbi	0x08, 2	; 8
        lcd_e_delay();        
 104:	00 c0       	rjmp	.+0      	; 0x106 <lcd_waitbusy+0x36>
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 106:	99 b1       	in	r25, 0x09	; 9
        lcd_e_low();
 108:	42 98       	cbi	0x08, 2	; 8
        
        lcd_e_delay();                       /* Enable 500ns low       */
 10a:	00 c0       	rjmp	.+0      	; 0x10c <lcd_waitbusy+0x3c>
        
        lcd_e_high();
 10c:	42 9a       	sbi	0x08, 2	; 8
        lcd_e_delay();
 10e:	00 c0       	rjmp	.+0      	; 0x110 <lcd_waitbusy+0x40>
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 110:	89 b1       	in	r24, 0x09	; 9
 112:	8f 70       	andi	r24, 0x0F	; 15
 114:	92 95       	swap	r25
 116:	90 7f       	andi	r25, 0xF0	; 240
        lcd_e_low();
 118:	42 98       	cbi	0x08, 2	; 8
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
    
}/* lcd_waitbusy */
 11a:	89 2b       	or	r24, r25
 11c:	08 95       	ret

0000011e <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 11e:	1f 93       	push	r17
 120:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 122:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_waitbusy>
    lcd_write(cmd,0);
 126:	81 2f       	mov	r24, r17
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write>
}
 12e:	1f 91       	pop	r17
 130:	08 95       	ret

00000132 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 132:	1f 93       	push	r17
 134:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 136:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_waitbusy>
    lcd_write(data,1);
 13a:	81 2f       	mov	r24, r17
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write>
}
 142:	1f 91       	pop	r17
 144:	08 95       	ret

00000146 <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 146:	66 23       	and	r22, r22
 148:	11 f4       	brne	.+4      	; 0x14e <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 14a:	80 58       	subi	r24, 0x80	; 128
 14c:	01 c0       	rjmp	.+2      	; 0x150 <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 14e:	80 54       	subi	r24, 0x40	; 64
 150:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_command>
 154:	08 95       	ret

00000156 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 156:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_waitbusy>
}
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	08 95       	ret

0000015e <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_command>
}
 164:	08 95       	ret

00000166 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_command>
}
 16c:	08 95       	ret

0000016e <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 16e:	1f 93       	push	r17
 170:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 172:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_waitbusy>
    if (c=='\n')
 176:	1a 30       	cpi	r17, 0x0A	; 10
 178:	49 f4       	brne	.+18     	; 0x18c <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 17a:	80 34       	cpi	r24, 0x40	; 64
 17c:	10 f0       	brcs	.+4      	; 0x182 <lcd_putc+0x14>
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	01 c0       	rjmp	.+2      	; 0x184 <lcd_putc+0x16>
 182:	80 e4       	ldi	r24, 0x40	; 64
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 184:	80 58       	subi	r24, 0x80	; 128
 186:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_command>
 18a:	04 c0       	rjmp	.+8      	; 0x194 <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 18c:	81 2f       	mov	r24, r17
 18e:	61 e0       	ldi	r22, 0x01	; 1
 190:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write>
    }

}/* lcd_putc */
 194:	1f 91       	pop	r17
 196:	08 95       	ret

00000198 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	ec 01       	movw	r28, r24
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <lcd_puts+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
 1a0:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 1a4:	89 91       	ld	r24, Y+
 1a6:	88 23       	and	r24, r24
 1a8:	d9 f7       	brne	.-10     	; 0x1a0 <lcd_puts+0x8>
        lcd_putc(c);
    }

}/* lcd_puts */
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	ec 01       	movw	r28, r24
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
 1b8:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_putc>
 1bc:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 1be:	21 96       	adiw	r28, 0x01	; 1
 1c0:	84 91       	lpm	r24, Z+
 1c2:	88 23       	and	r24, r24
 1c4:	c9 f7       	brne	.-14     	; 0x1b8 <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1cc:	1f 93       	push	r17
 1ce:	18 2f       	mov	r17, r24
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 1d0:	8a b1       	in	r24, 0x0a	; 10
 1d2:	8f 60       	ori	r24, 0x0F	; 15
 1d4:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1d6:	38 9a       	sbi	0x07, 0	; 7
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1d8:	39 9a       	sbi	0x07, 1	; 7
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1da:	3a 9a       	sbi	0x07, 2	; 7
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1dc:	80 e8       	ldi	r24, 0x80	; 128
 1de:	9e e3       	ldi	r25, 0x3E	; 62
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcd_init+0x14>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1e4:	59 9a       	sbi	0x0b, 1	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1e6:	58 9a       	sbi	0x0b, 0	; 11

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 1e8:	42 9a       	sbi	0x08, 2	; 8
    lcd_e_delay();
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <lcd_init+0x20>
    lcd_e_low();
 1ec:	42 98       	cbi	0x08, 2	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1ee:	80 e8       	ldi	r24, 0x80	; 128
 1f0:	93 e1       	ldi	r25, 0x13	; 19
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcd_init+0x26>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 1f6:	42 9a       	sbi	0x08, 2	; 8
    lcd_e_delay();
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <lcd_init+0x2e>
    lcd_e_low();
 1fa:	42 98       	cbi	0x08, 2	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1fc:	80 e4       	ldi	r24, 0x40	; 64
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	fc 01       	movw	r30, r24
 202:	31 97       	sbiw	r30, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <lcd_init+0x36>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 206:	42 9a       	sbi	0x08, 2	; 8
    lcd_e_delay();
 208:	00 c0       	rjmp	.+0      	; 0x20a <lcd_init+0x3e>
    lcd_e_low();
 20a:	42 98       	cbi	0x08, 2	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 20c:	fc 01       	movw	r30, r24
 20e:	31 97       	sbiw	r30, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 212:	58 98       	cbi	0x0b, 0	; 11

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 214:	42 9a       	sbi	0x08, 2	; 8
    lcd_e_delay();
 216:	00 c0       	rjmp	.+0      	; 0x218 <lcd_init+0x4c>
    lcd_e_low();
 218:	42 98       	cbi	0x08, 2	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <lcd_init+0x4e>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 21e:	88 e2       	ldi	r24, 0x28	; 40
 220:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 224:	88 e0       	ldi	r24, 0x08	; 8
 226:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 22a:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 22e:	86 e0       	ldi	r24, 0x06	; 6
 230:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 234:	81 2f       	mov	r24, r17
 236:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_command>

}/* lcd_init */
 23a:	1f 91       	pop	r17
 23c:	08 95       	ret

0000023e <main>:
#include<avr/io.h>
#include"delay_x.h"
#include"lcd.h"
#include"lcd.c"
int main()
{
 23e:	ef 92       	push	r14
 240:	ff 92       	push	r15
 242:	0f 93       	push	r16
 244:	1f 93       	push	r17
  lcd_init(LCD_DISP_ON);
 246:	8c e0       	ldi	r24, 0x0C	; 12
 248:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_init>
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
 24c:	8f e7       	ldi	r24, 0x7F	; 127
 24e:	e8 2e       	mov	r14, r24
 250:	84 e8       	ldi	r24, 0x84	; 132
 252:	f8 2e       	mov	r15, r24
 254:	8e e1       	ldi	r24, 0x1E	; 30
 256:	08 2f       	mov	r16, r24
 258:	11 2d       	mov	r17, r1
 25a:	d8 01       	movw	r26, r16
 25c:	c7 01       	movw	r24, r14
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	a1 09       	sbc	r26, r1
 262:	b1 09       	sbc	r27, r1
 264:	00 00       	nop
 266:	01 f0       	breq	.+0      	; 0x268 <main+0x2a>
 268:	d1 f7       	brne	.-12     	; 0x25e <main+0x20>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
 26a:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
 26c:	00 00       	nop
  _delay_ms(1000);
  lcd_clrscr();
 26e:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_clrscr>
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
 272:	d8 01       	movw	r26, r16
 274:	c7 01       	movw	r24, r14
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	a1 09       	sbc	r26, r1
 27a:	b1 09       	sbc	r27, r1
 27c:	00 00       	nop
 27e:	01 f0       	breq	.+0      	; 0x280 <main+0x42>
 280:	d1 f7       	brne	.-12     	; 0x276 <main+0x38>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
 282:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
 284:	00 00       	nop
  
  _delay_ms(1000);

 while(1)
 {
   lcd_clrscr();
 286:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_clrscr>
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
 28a:	d8 01       	movw	r26, r16
 28c:	c7 01       	movw	r24, r14
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	a1 09       	sbc	r26, r1
 292:	b1 09       	sbc	r27, r1
 294:	00 00       	nop
 296:	01 f0       	breq	.+0      	; 0x298 <main+0x5a>
 298:	d1 f7       	brne	.-12     	; 0x28e <main+0x50>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
 29a:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
 29c:	00 00       	nop
   _delay_ms(1000);
   lcd_puts("Ankit Kadam");
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_puts>
 2a6:	e5 cf       	rjmp	.-54     	; 0x272 <main+0x34>

000002a8 <_exit>:
 2a8:	f8 94       	cli

000002aa <__stop_program>:
 2aa:	ff cf       	rjmp	.-2      	; 0x2aa <__stop_program>
