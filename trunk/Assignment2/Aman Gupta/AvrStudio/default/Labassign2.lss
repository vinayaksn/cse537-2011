
Labassign2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000980  000009f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000980  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000a7  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000086e  00000000  00000000  00000abf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002d5  00000000  00000000  0000132d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000063a  00000000  00000000  00001602  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000f0  00000000  00000000  00001c3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000242  00000000  00000000  00001d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000308  00000000  00000000  00001f6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00002276  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e8       	ldi	r30, 0x80	; 128
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 3b 01 	call	0x276	; 0x276 <main>
  8e:	0c 94 be 04 	jmp	0x97c	; 0x97c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <lcd_write>:
static void lcd_write(uint8_t data,uint8_t rs) 
{
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
  96:	66 23       	and	r22, r22
  98:	11 f0       	breq	.+4      	; 0x9e <lcd_write+0x8>
       lcd_rs_high();
  9a:	28 9a       	sbi	0x05, 0	; 5
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <lcd_write+0xa>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
  9e:	28 98       	cbi	0x05, 0	; 5
    }
    lcd_rw_low();
  a0:	29 98       	cbi	0x05, 1	; 5
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
  a2:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
  a4:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
  a6:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
  a8:	57 9a       	sbi	0x0a, 7	; 10
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
  aa:	5f 98       	cbi	0x0b, 7	; 11
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
  ac:	5e 98       	cbi	0x0b, 6	; 11
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
  ae:	5d 98       	cbi	0x0b, 5	; 11
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
  b0:	5c 98       	cbi	0x0b, 4	; 11
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  b2:	87 fd       	sbrc	r24, 7
  b4:	5f 9a       	sbi	0x0b, 7	; 11
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  b6:	86 fd       	sbrc	r24, 6
  b8:	5e 9a       	sbi	0x0b, 6	; 11
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  ba:	85 fd       	sbrc	r24, 5
  bc:	5d 9a       	sbi	0x0b, 5	; 11
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
  be:	84 fd       	sbrc	r24, 4
  c0:	5c 9a       	sbi	0x0b, 4	; 11

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
  c2:	2a 9a       	sbi	0x05, 2	; 5
    lcd_e_delay();
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <lcd_write+0x30>
    lcd_e_low();
  c6:	2a 98       	cbi	0x05, 2	; 5
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
        lcd_e_toggle();
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
  c8:	5f 98       	cbi	0x0b, 7	; 11
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
  ca:	5e 98       	cbi	0x0b, 6	; 11
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
  cc:	5d 98       	cbi	0x0b, 5	; 11
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
  ce:	5c 98       	cbi	0x0b, 4	; 11
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  d0:	83 fd       	sbrc	r24, 3
  d2:	5f 9a       	sbi	0x0b, 7	; 11
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  d4:	82 fd       	sbrc	r24, 2
  d6:	5e 9a       	sbi	0x0b, 6	; 11
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  d8:	81 fd       	sbrc	r24, 1
  da:	5d 9a       	sbi	0x0b, 5	; 11
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
  dc:	80 fd       	sbrc	r24, 0
  de:	5c 9a       	sbi	0x0b, 4	; 11

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
  e0:	2a 9a       	sbi	0x05, 2	; 5
    lcd_e_delay();
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <lcd_write+0x4e>
    lcd_e_low();
  e4:	2a 98       	cbi	0x05, 2	; 5
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();        
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
  e6:	5c 9a       	sbi	0x0b, 4	; 11
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  e8:	5d 9a       	sbi	0x0b, 5	; 11
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  ea:	5e 9a       	sbi	0x0b, 6	; 11
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  ec:	5f 9a       	sbi	0x0b, 7	; 11
    }
}
  ee:	08 95       	ret

000000f0 <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
  f0:	88 23       	and	r24, r24
  f2:	11 f0       	breq	.+4      	; 0xf8 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
  f4:	28 9a       	sbi	0x05, 0	; 5
  f6:	01 c0       	rjmp	.+2      	; 0xfa <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
  f8:	28 98       	cbi	0x05, 0	; 5
    lcd_rw_high();                           /* RW=1  read mode      */
  fa:	29 9a       	sbi	0x05, 1	; 5
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
  fc:	54 98       	cbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
  fe:	55 98       	cbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 100:	56 98       	cbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 102:	57 98       	cbi	0x0a, 7	; 10
                
        /* read high nibble first */
        lcd_e_high();
 104:	2a 9a       	sbi	0x05, 2	; 5
        lcd_e_delay();        
 106:	00 c0       	rjmp	.+0      	; 0x108 <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 108:	4c 9b       	sbis	0x09, 4	; 9
 10a:	02 c0       	rjmp	.+4      	; 0x110 <lcd_read+0x20>
 10c:	80 e1       	ldi	r24, 0x10	; 16
 10e:	01 c0       	rjmp	.+2      	; 0x112 <lcd_read+0x22>
 110:	80 e0       	ldi	r24, 0x00	; 0
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 112:	4d 99       	sbic	0x09, 5	; 9
 114:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 116:	4e 99       	sbic	0x09, 6	; 9
 118:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 11a:	4f 99       	sbic	0x09, 7	; 9
 11c:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 11e:	2a 98       	cbi	0x05, 2	; 5

        lcd_e_delay();                       /* Enable 500ns low       */
 120:	00 c0       	rjmp	.+0      	; 0x122 <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
 122:	2a 9a       	sbi	0x05, 2	; 5
        lcd_e_delay();
 124:	00 c0       	rjmp	.+0      	; 0x126 <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 126:	4c 99       	sbic	0x09, 4	; 9
 128:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 12a:	4d 99       	sbic	0x09, 5	; 9
 12c:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 12e:	4e 99       	sbic	0x09, 6	; 9
 130:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 132:	4f 99       	sbic	0x09, 7	; 9
 134:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 136:	2a 98       	cbi	0x05, 2	; 5
    }
    return data;
}
 138:	08 95       	ret

0000013a <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_read>
 140:	87 fd       	sbrc	r24, 7
 142:	fb cf       	rjmp	.-10     	; 0x13a <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <lcd_waitbusy+0xe>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_read>
    
}/* lcd_waitbusy */
 152:	08 95       	ret

00000154 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 154:	1f 93       	push	r17
 156:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 158:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_waitbusy>
    lcd_write(cmd,0);
 15c:	81 2f       	mov	r24, r17
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write>
}
 164:	1f 91       	pop	r17
 166:	08 95       	ret

00000168 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 168:	1f 93       	push	r17
 16a:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 16c:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_waitbusy>
    lcd_write(data,1);
 170:	81 2f       	mov	r24, r17
 172:	61 e0       	ldi	r22, 0x01	; 1
 174:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write>
}
 178:	1f 91       	pop	r17
 17a:	08 95       	ret

0000017c <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 17c:	66 23       	and	r22, r22
 17e:	11 f4       	brne	.+4      	; 0x184 <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 180:	80 58       	subi	r24, 0x80	; 128
 182:	01 c0       	rjmp	.+2      	; 0x186 <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 184:	80 54       	subi	r24, 0x40	; 64
 186:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>
 18a:	08 95       	ret

0000018c <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 18c:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_waitbusy>
}
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	08 95       	ret

00000194 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>
}
 19a:	08 95       	ret

0000019c <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 19c:	82 e0       	ldi	r24, 0x02	; 2
 19e:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>
}
 1a2:	08 95       	ret

000001a4 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 1a4:	1f 93       	push	r17
 1a6:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 1a8:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_waitbusy>
    if (c=='\n')
 1ac:	1a 30       	cpi	r17, 0x0A	; 10
 1ae:	49 f4       	brne	.+18     	; 0x1c2 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 1b0:	80 34       	cpi	r24, 0x40	; 64
 1b2:	10 f0       	brcs	.+4      	; 0x1b8 <lcd_putc+0x14>
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <lcd_putc+0x16>
 1b8:	80 e4       	ldi	r24, 0x40	; 64
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 1ba:	80 58       	subi	r24, 0x80	; 128
 1bc:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>
 1c0:	04 c0       	rjmp	.+8      	; 0x1ca <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 1c2:	81 2f       	mov	r24, r17
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write>
    }

}/* lcd_putc */
 1ca:	1f 91       	pop	r17
 1cc:	08 95       	ret

000001ce <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	ec 01       	movw	r28, r24
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <lcd_puts+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
 1d6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 1da:	89 91       	ld	r24, Y+
 1dc:	88 23       	and	r24, r24
 1de:	d9 f7       	brne	.-10     	; 0x1d6 <lcd_puts+0x8>
        lcd_putc(c);
    }

}/* lcd_puts */
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	ec 01       	movw	r28, r24
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
 1ee:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_putc>
 1f2:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 1f4:	21 96       	adiw	r28, 0x01	; 1
 1f6:	84 91       	lpm	r24, Z+
 1f8:	88 23       	and	r24, r24
 1fa:	c9 f7       	brne	.-14     	; 0x1ee <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 202:	1f 93       	push	r17
 204:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 206:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 208:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 20a:	22 9a       	sbi	0x04, 2	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 20c:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 20e:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 210:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 212:	57 9a       	sbi	0x0a, 7	; 10
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 214:	80 e8       	ldi	r24, 0x80	; 128
 216:	9e e3       	ldi	r25, 0x3E	; 62
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <lcd_init+0x16>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 21c:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 21e:	5c 9a       	sbi	0x0b, 4	; 11

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 220:	2a 9a       	sbi	0x05, 2	; 5
    lcd_e_delay();
 222:	00 c0       	rjmp	.+0      	; 0x224 <lcd_init+0x22>
    lcd_e_low();
 224:	2a 98       	cbi	0x05, 2	; 5
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 226:	80 e8       	ldi	r24, 0x80	; 128
 228:	93 e1       	ldi	r25, 0x13	; 19
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <lcd_init+0x28>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 22e:	2a 9a       	sbi	0x05, 2	; 5
    lcd_e_delay();
 230:	00 c0       	rjmp	.+0      	; 0x232 <lcd_init+0x30>
    lcd_e_low();
 232:	2a 98       	cbi	0x05, 2	; 5
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 234:	80 e4       	ldi	r24, 0x40	; 64
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	fc 01       	movw	r30, r24
 23a:	31 97       	sbiw	r30, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <lcd_init+0x38>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 23e:	2a 9a       	sbi	0x05, 2	; 5
    lcd_e_delay();
 240:	00 c0       	rjmp	.+0      	; 0x242 <lcd_init+0x40>
    lcd_e_low();
 242:	2a 98       	cbi	0x05, 2	; 5
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 244:	fc 01       	movw	r30, r24
 246:	31 97       	sbiw	r30, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <lcd_init+0x44>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 24a:	5c 98       	cbi	0x0b, 4	; 11

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 24c:	2a 9a       	sbi	0x05, 2	; 5
    lcd_e_delay();
 24e:	00 c0       	rjmp	.+0      	; 0x250 <lcd_init+0x4e>
    lcd_e_low();
 250:	2a 98       	cbi	0x05, 2	; 5
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <lcd_init+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 256:	88 e2       	ldi	r24, 0x28	; 40
 258:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 25c:	88 e0       	ldi	r24, 0x08	; 8
 25e:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 262:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 266:	86 e0       	ldi	r24, 0x06	; 6
 268:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 26c:	81 2f       	mov	r24, r17
 26e:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>

}/* lcd_init */
 272:	1f 91       	pop	r17
 274:	08 95       	ret

00000276 <main>:
#include "lcd.c"
#include "delay_x.h"
#include <string.h>

int main (void)
{
 276:	8f 92       	push	r8
 278:	9f 92       	push	r9
 27a:	af 92       	push	r10
 27c:	bf 92       	push	r11
 27e:	cf 92       	push	r12
 280:	df 92       	push	r13
 282:	ef 92       	push	r14
 284:	ff 92       	push	r15
 286:	0f 93       	push	r16
 288:	1f 93       	push	r17
 28a:	df 93       	push	r29
 28c:	cf 93       	push	r28
 28e:	cd b7       	in	r28, 0x3d	; 61
 290:	de b7       	in	r29, 0x3e	; 62
 292:	2a 97       	sbiw	r28, 0x0a	; 10
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	f8 94       	cli
 298:	de bf       	out	0x3e, r29	; 62
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	cd bf       	out	0x3d, r28	; 61

	int x=0;


	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 29e:	80 91 7a 00 	lds	r24, 0x007A
 2a2:	87 60       	ori	r24, 0x07	; 7
 2a4:	80 93 7a 00 	sts	0x007A, r24
	ADMUX |= (0 << MUX1) | (0 << MUX0)|(0 << MUX2);
 2a8:	80 91 7c 00 	lds	r24, 0x007C
 2ac:	80 93 7c 00 	sts	0x007C, r24
	
	ADMUX |= (1 << REFS0);
 2b0:	80 91 7c 00 	lds	r24, 0x007C
 2b4:	80 64       	ori	r24, 0x40	; 64
 2b6:	80 93 7c 00 	sts	0x007C, r24
	ADMUX |= (0 << ADLAR);
 2ba:	80 91 7c 00 	lds	r24, 0x007C
 2be:	80 93 7c 00 	sts	0x007C, r24
	
	ADCSRA |= (1 << ADATE);
 2c2:	80 91 7a 00 	lds	r24, 0x007A
 2c6:	80 62       	ori	r24, 0x20	; 32
 2c8:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= (1 << ADEN);
 2cc:	80 91 7a 00 	lds	r24, 0x007A
 2d0:	80 68       	ori	r24, 0x80	; 128
 2d2:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= (1 << ADSC);
 2d6:	80 91 7a 00 	lds	r24, 0x007A
 2da:	80 64       	ori	r24, 0x40	; 64
 2dc:	80 93 7a 00 	sts	0x007A, r24

	lcd_init(LCD_DISP_ON);                  		//Initial ADC
 2e0:	8c e0       	ldi	r24, 0x0C	; 12
 2e2:	0e 94 01 01 	call	0x202	; 0x202 <lcd_init>
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
 2e6:	2f e7       	ldi	r18, 0x7F	; 127
 2e8:	e2 2e       	mov	r14, r18
 2ea:	24 e8       	ldi	r18, 0x84	; 132
 2ec:	f2 2e       	mov	r15, r18
 2ee:	2e e1       	ldi	r18, 0x1E	; 30
 2f0:	02 2f       	mov	r16, r18
 2f2:	11 2d       	mov	r17, r1
 2f4:	d8 01       	movw	r26, r16
 2f6:	c7 01       	movw	r24, r14
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	a1 09       	sbc	r26, r1
 2fc:	b1 09       	sbc	r27, r1
 2fe:	00 00       	nop
 300:	01 f0       	breq	.+0      	; 0x302 <main+0x8c>
 302:	d1 f7       	brne	.-12     	; 0x2f8 <main+0x82>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
 304:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
 306:	00 00       	nop
	_delay_ms(1000);
	lcd_clrscr();
 308:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_clrscr>
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
 30c:	d8 01       	movw	r26, r16
 30e:	c7 01       	movw	r24, r14
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	a1 09       	sbc	r26, r1
 314:	b1 09       	sbc	r27, r1
 316:	00 00       	nop
 318:	01 f0       	breq	.+0      	; 0x31a <main+0xa4>
 31a:	d1 f7       	brne	.-12     	; 0x310 <main+0x9a>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
 31c:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
 31e:	00 00       	nop
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
 320:	9f e7       	ldi	r25, 0x7F	; 127
 322:	c9 2e       	mov	r12, r25
 324:	94 e8       	ldi	r25, 0x84	; 132
 326:	d9 2e       	mov	r13, r25
 328:	9e e1       	ldi	r25, 0x1E	; 30
 32a:	e9 2e       	mov	r14, r25
 32c:	f1 2c       	mov	r15, r1
		x|=(ADCH<<8);
		
		//x=ADC;
		
		char str[10];
		sprintf( str, "%d", x );
 32e:	5e 01       	movw	r10, r28
 330:	08 94       	sec
 332:	a1 1c       	adc	r10, r1
 334:	b1 1c       	adc	r11, r1
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	88 2e       	mov	r8, r24
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	98 2e       	mov	r9, r24
	_delay_ms(1000);

  	while (1)
	{

   		lcd_clrscr();
 33e:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_clrscr>
 342:	d7 01       	movw	r26, r14
 344:	c6 01       	movw	r24, r12
 346:	01 97       	sbiw	r24, 0x01	; 1
 348:	a1 09       	sbc	r26, r1
 34a:	b1 09       	sbc	r27, r1
 34c:	00 00       	nop
 34e:	01 f0       	breq	.+0      	; 0x350 <main+0xda>
 350:	d1 f7       	brne	.-12     	; 0x346 <main+0xd0>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
 352:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
 354:	00 00       	nop
		_delay_ms(1000);
		x=ADCL;
 356:	80 91 78 00 	lds	r24, 0x0078
 35a:	90 e0       	ldi	r25, 0x00	; 0
		x|=(ADCH<<8);
 35c:	20 91 79 00 	lds	r18, 0x0079
		
		//x=ADC;
		
		char str[10];
		sprintf( str, "%d", x );
 360:	00 d0       	rcall	.+0      	; 0x362 <main+0xec>
 362:	00 d0       	rcall	.+0      	; 0x364 <main+0xee>
 364:	00 d0       	rcall	.+0      	; 0x366 <main+0xf0>
 366:	ed b7       	in	r30, 0x3d	; 61
 368:	fe b7       	in	r31, 0x3e	; 62
 36a:	31 96       	adiw	r30, 0x01	; 1
 36c:	ad b7       	in	r26, 0x3d	; 61
 36e:	be b7       	in	r27, 0x3e	; 62
 370:	12 96       	adiw	r26, 0x02	; 2
 372:	bc 92       	st	X, r11
 374:	ae 92       	st	-X, r10
 376:	11 97       	sbiw	r26, 0x01	; 1
 378:	93 82       	std	Z+3, r9	; 0x03
 37a:	82 82       	std	Z+2, r8	; 0x02
 37c:	12 2f       	mov	r17, r18
 37e:	00 e0       	ldi	r16, 0x00	; 0
 380:	80 2b       	or	r24, r16
 382:	91 2b       	or	r25, r17
 384:	95 83       	std	Z+5, r25	; 0x05
 386:	84 83       	std	Z+4, r24	; 0x04
 388:	0e 94 e6 01 	call	0x3cc	; 0x3cc <sprintf>
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
 38c:	d7 01       	movw	r26, r14
 38e:	c6 01       	movw	r24, r12
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	a1 09       	sbc	r26, r1
 394:	b1 09       	sbc	r27, r1
 396:	00 00       	nop
 398:	01 f0       	breq	.+0      	; 0x39a <main+0x124>
 39a:	d1 f7       	brne	.-12     	; 0x390 <main+0x11a>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
 39c:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
 39e:	00 00       	nop
	
    	_delay_ms(1000);
		lcd_puts(str);
 3a0:	8d b7       	in	r24, 0x3d	; 61
 3a2:	9e b7       	in	r25, 0x3e	; 62
 3a4:	06 96       	adiw	r24, 0x06	; 6
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	f8 94       	cli
 3aa:	9e bf       	out	0x3e, r25	; 62
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	8d bf       	out	0x3d, r24	; 61
 3b0:	c5 01       	movw	r24, r10
 3b2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
 3b6:	d7 01       	movw	r26, r14
 3b8:	c6 01       	movw	r24, r12
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	a1 09       	sbc	r26, r1
 3be:	b1 09       	sbc	r27, r1
 3c0:	00 00       	nop
 3c2:	01 f0       	breq	.+0      	; 0x3c4 <main+0x14e>
 3c4:	d1 f7       	brne	.-12     	; 0x3ba <main+0x144>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
 3c6:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
 3c8:	00 00       	nop
 3ca:	b9 cf       	rjmp	.-142    	; 0x33e <main+0xc8>

000003cc <sprintf>:
 3cc:	ae e0       	ldi	r26, 0x0E	; 14
 3ce:	b0 e0       	ldi	r27, 0x00	; 0
 3d0:	ec ee       	ldi	r30, 0xEC	; 236
 3d2:	f1 e0       	ldi	r31, 0x01	; 1
 3d4:	0c 94 95 04 	jmp	0x92a	; 0x92a <__prologue_saves__+0x1c>
 3d8:	0d 89       	ldd	r16, Y+21	; 0x15
 3da:	1e 89       	ldd	r17, Y+22	; 0x16
 3dc:	86 e0       	ldi	r24, 0x06	; 6
 3de:	8c 83       	std	Y+4, r24	; 0x04
 3e0:	1a 83       	std	Y+2, r17	; 0x02
 3e2:	09 83       	std	Y+1, r16	; 0x01
 3e4:	8f ef       	ldi	r24, 0xFF	; 255
 3e6:	9f e7       	ldi	r25, 0x7F	; 127
 3e8:	9e 83       	std	Y+6, r25	; 0x06
 3ea:	8d 83       	std	Y+5, r24	; 0x05
 3ec:	9e 01       	movw	r18, r28
 3ee:	27 5e       	subi	r18, 0xE7	; 231
 3f0:	3f 4f       	sbci	r19, 0xFF	; 255
 3f2:	ce 01       	movw	r24, r28
 3f4:	01 96       	adiw	r24, 0x01	; 1
 3f6:	6f 89       	ldd	r22, Y+23	; 0x17
 3f8:	78 8d       	ldd	r23, Y+24	; 0x18
 3fa:	a9 01       	movw	r20, r18
 3fc:	0e 94 0a 02 	call	0x414	; 0x414 <vfprintf>
 400:	2f 81       	ldd	r18, Y+7	; 0x07
 402:	38 85       	ldd	r19, Y+8	; 0x08
 404:	02 0f       	add	r16, r18
 406:	13 1f       	adc	r17, r19
 408:	f8 01       	movw	r30, r16
 40a:	10 82       	st	Z, r1
 40c:	2e 96       	adiw	r28, 0x0e	; 14
 40e:	e4 e0       	ldi	r30, 0x04	; 4
 410:	0c 94 b1 04 	jmp	0x962	; 0x962 <__epilogue_restores__+0x1c>

00000414 <vfprintf>:
 414:	ab e0       	ldi	r26, 0x0B	; 11
 416:	b0 e0       	ldi	r27, 0x00	; 0
 418:	e0 e1       	ldi	r30, 0x10	; 16
 41a:	f2 e0       	ldi	r31, 0x02	; 2
 41c:	0c 94 87 04 	jmp	0x90e	; 0x90e <__prologue_saves__>
 420:	3c 01       	movw	r6, r24
 422:	2b 01       	movw	r4, r22
 424:	5a 01       	movw	r10, r20
 426:	fc 01       	movw	r30, r24
 428:	17 82       	std	Z+7, r1	; 0x07
 42a:	16 82       	std	Z+6, r1	; 0x06
 42c:	83 81       	ldd	r24, Z+3	; 0x03
 42e:	81 fd       	sbrc	r24, 1
 430:	03 c0       	rjmp	.+6      	; 0x438 <vfprintf+0x24>
 432:	6f ef       	ldi	r22, 0xFF	; 255
 434:	7f ef       	ldi	r23, 0xFF	; 255
 436:	c6 c1       	rjmp	.+908    	; 0x7c4 <vfprintf+0x3b0>
 438:	9a e0       	ldi	r25, 0x0A	; 10
 43a:	89 2e       	mov	r8, r25
 43c:	1e 01       	movw	r2, r28
 43e:	08 94       	sec
 440:	21 1c       	adc	r2, r1
 442:	31 1c       	adc	r3, r1
 444:	f3 01       	movw	r30, r6
 446:	23 81       	ldd	r18, Z+3	; 0x03
 448:	f2 01       	movw	r30, r4
 44a:	23 fd       	sbrc	r18, 3
 44c:	85 91       	lpm	r24, Z+
 44e:	23 ff       	sbrs	r18, 3
 450:	81 91       	ld	r24, Z+
 452:	2f 01       	movw	r4, r30
 454:	88 23       	and	r24, r24
 456:	09 f4       	brne	.+2      	; 0x45a <vfprintf+0x46>
 458:	b2 c1       	rjmp	.+868    	; 0x7be <vfprintf+0x3aa>
 45a:	85 32       	cpi	r24, 0x25	; 37
 45c:	39 f4       	brne	.+14     	; 0x46c <vfprintf+0x58>
 45e:	23 fd       	sbrc	r18, 3
 460:	85 91       	lpm	r24, Z+
 462:	23 ff       	sbrs	r18, 3
 464:	81 91       	ld	r24, Z+
 466:	2f 01       	movw	r4, r30
 468:	85 32       	cpi	r24, 0x25	; 37
 46a:	29 f4       	brne	.+10     	; 0x476 <vfprintf+0x62>
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	b3 01       	movw	r22, r6
 470:	0e 94 fd 03 	call	0x7fa	; 0x7fa <fputc>
 474:	e7 cf       	rjmp	.-50     	; 0x444 <vfprintf+0x30>
 476:	98 2f       	mov	r25, r24
 478:	ff 24       	eor	r15, r15
 47a:	ee 24       	eor	r14, r14
 47c:	99 24       	eor	r9, r9
 47e:	ff e1       	ldi	r31, 0x1F	; 31
 480:	ff 15       	cp	r31, r15
 482:	d0 f0       	brcs	.+52     	; 0x4b8 <vfprintf+0xa4>
 484:	9b 32       	cpi	r25, 0x2B	; 43
 486:	69 f0       	breq	.+26     	; 0x4a2 <vfprintf+0x8e>
 488:	9c 32       	cpi	r25, 0x2C	; 44
 48a:	28 f4       	brcc	.+10     	; 0x496 <vfprintf+0x82>
 48c:	90 32       	cpi	r25, 0x20	; 32
 48e:	59 f0       	breq	.+22     	; 0x4a6 <vfprintf+0x92>
 490:	93 32       	cpi	r25, 0x23	; 35
 492:	91 f4       	brne	.+36     	; 0x4b8 <vfprintf+0xa4>
 494:	0e c0       	rjmp	.+28     	; 0x4b2 <vfprintf+0x9e>
 496:	9d 32       	cpi	r25, 0x2D	; 45
 498:	49 f0       	breq	.+18     	; 0x4ac <vfprintf+0x98>
 49a:	90 33       	cpi	r25, 0x30	; 48
 49c:	69 f4       	brne	.+26     	; 0x4b8 <vfprintf+0xa4>
 49e:	41 e0       	ldi	r20, 0x01	; 1
 4a0:	24 c0       	rjmp	.+72     	; 0x4ea <vfprintf+0xd6>
 4a2:	52 e0       	ldi	r21, 0x02	; 2
 4a4:	f5 2a       	or	r15, r21
 4a6:	84 e0       	ldi	r24, 0x04	; 4
 4a8:	f8 2a       	or	r15, r24
 4aa:	28 c0       	rjmp	.+80     	; 0x4fc <vfprintf+0xe8>
 4ac:	98 e0       	ldi	r25, 0x08	; 8
 4ae:	f9 2a       	or	r15, r25
 4b0:	25 c0       	rjmp	.+74     	; 0x4fc <vfprintf+0xe8>
 4b2:	e0 e1       	ldi	r30, 0x10	; 16
 4b4:	fe 2a       	or	r15, r30
 4b6:	22 c0       	rjmp	.+68     	; 0x4fc <vfprintf+0xe8>
 4b8:	f7 fc       	sbrc	r15, 7
 4ba:	29 c0       	rjmp	.+82     	; 0x50e <vfprintf+0xfa>
 4bc:	89 2f       	mov	r24, r25
 4be:	80 53       	subi	r24, 0x30	; 48
 4c0:	8a 30       	cpi	r24, 0x0A	; 10
 4c2:	70 f4       	brcc	.+28     	; 0x4e0 <vfprintf+0xcc>
 4c4:	f6 fe       	sbrs	r15, 6
 4c6:	05 c0       	rjmp	.+10     	; 0x4d2 <vfprintf+0xbe>
 4c8:	98 9c       	mul	r9, r8
 4ca:	90 2c       	mov	r9, r0
 4cc:	11 24       	eor	r1, r1
 4ce:	98 0e       	add	r9, r24
 4d0:	15 c0       	rjmp	.+42     	; 0x4fc <vfprintf+0xe8>
 4d2:	e8 9c       	mul	r14, r8
 4d4:	e0 2c       	mov	r14, r0
 4d6:	11 24       	eor	r1, r1
 4d8:	e8 0e       	add	r14, r24
 4da:	f0 e2       	ldi	r31, 0x20	; 32
 4dc:	ff 2a       	or	r15, r31
 4de:	0e c0       	rjmp	.+28     	; 0x4fc <vfprintf+0xe8>
 4e0:	9e 32       	cpi	r25, 0x2E	; 46
 4e2:	29 f4       	brne	.+10     	; 0x4ee <vfprintf+0xda>
 4e4:	f6 fc       	sbrc	r15, 6
 4e6:	6b c1       	rjmp	.+726    	; 0x7be <vfprintf+0x3aa>
 4e8:	40 e4       	ldi	r20, 0x40	; 64
 4ea:	f4 2a       	or	r15, r20
 4ec:	07 c0       	rjmp	.+14     	; 0x4fc <vfprintf+0xe8>
 4ee:	9c 36       	cpi	r25, 0x6C	; 108
 4f0:	19 f4       	brne	.+6      	; 0x4f8 <vfprintf+0xe4>
 4f2:	50 e8       	ldi	r21, 0x80	; 128
 4f4:	f5 2a       	or	r15, r21
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <vfprintf+0xe8>
 4f8:	98 36       	cpi	r25, 0x68	; 104
 4fa:	49 f4       	brne	.+18     	; 0x50e <vfprintf+0xfa>
 4fc:	f2 01       	movw	r30, r4
 4fe:	23 fd       	sbrc	r18, 3
 500:	95 91       	lpm	r25, Z+
 502:	23 ff       	sbrs	r18, 3
 504:	91 91       	ld	r25, Z+
 506:	2f 01       	movw	r4, r30
 508:	99 23       	and	r25, r25
 50a:	09 f0       	breq	.+2      	; 0x50e <vfprintf+0xfa>
 50c:	b8 cf       	rjmp	.-144    	; 0x47e <vfprintf+0x6a>
 50e:	89 2f       	mov	r24, r25
 510:	85 54       	subi	r24, 0x45	; 69
 512:	83 30       	cpi	r24, 0x03	; 3
 514:	18 f0       	brcs	.+6      	; 0x51c <vfprintf+0x108>
 516:	80 52       	subi	r24, 0x20	; 32
 518:	83 30       	cpi	r24, 0x03	; 3
 51a:	38 f4       	brcc	.+14     	; 0x52a <vfprintf+0x116>
 51c:	44 e0       	ldi	r20, 0x04	; 4
 51e:	50 e0       	ldi	r21, 0x00	; 0
 520:	a4 0e       	add	r10, r20
 522:	b5 1e       	adc	r11, r21
 524:	5f e3       	ldi	r21, 0x3F	; 63
 526:	59 83       	std	Y+1, r21	; 0x01
 528:	0f c0       	rjmp	.+30     	; 0x548 <vfprintf+0x134>
 52a:	93 36       	cpi	r25, 0x63	; 99
 52c:	31 f0       	breq	.+12     	; 0x53a <vfprintf+0x126>
 52e:	93 37       	cpi	r25, 0x73	; 115
 530:	79 f0       	breq	.+30     	; 0x550 <vfprintf+0x13c>
 532:	93 35       	cpi	r25, 0x53	; 83
 534:	09 f0       	breq	.+2      	; 0x538 <vfprintf+0x124>
 536:	56 c0       	rjmp	.+172    	; 0x5e4 <vfprintf+0x1d0>
 538:	20 c0       	rjmp	.+64     	; 0x57a <vfprintf+0x166>
 53a:	f5 01       	movw	r30, r10
 53c:	80 81       	ld	r24, Z
 53e:	89 83       	std	Y+1, r24	; 0x01
 540:	42 e0       	ldi	r20, 0x02	; 2
 542:	50 e0       	ldi	r21, 0x00	; 0
 544:	a4 0e       	add	r10, r20
 546:	b5 1e       	adc	r11, r21
 548:	61 01       	movw	r12, r2
 54a:	01 e0       	ldi	r16, 0x01	; 1
 54c:	10 e0       	ldi	r17, 0x00	; 0
 54e:	12 c0       	rjmp	.+36     	; 0x574 <vfprintf+0x160>
 550:	f5 01       	movw	r30, r10
 552:	c0 80       	ld	r12, Z
 554:	d1 80       	ldd	r13, Z+1	; 0x01
 556:	f6 fc       	sbrc	r15, 6
 558:	03 c0       	rjmp	.+6      	; 0x560 <vfprintf+0x14c>
 55a:	6f ef       	ldi	r22, 0xFF	; 255
 55c:	7f ef       	ldi	r23, 0xFF	; 255
 55e:	02 c0       	rjmp	.+4      	; 0x564 <vfprintf+0x150>
 560:	69 2d       	mov	r22, r9
 562:	70 e0       	ldi	r23, 0x00	; 0
 564:	42 e0       	ldi	r20, 0x02	; 2
 566:	50 e0       	ldi	r21, 0x00	; 0
 568:	a4 0e       	add	r10, r20
 56a:	b5 1e       	adc	r11, r21
 56c:	c6 01       	movw	r24, r12
 56e:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <strnlen>
 572:	8c 01       	movw	r16, r24
 574:	5f e7       	ldi	r21, 0x7F	; 127
 576:	f5 22       	and	r15, r21
 578:	14 c0       	rjmp	.+40     	; 0x5a2 <vfprintf+0x18e>
 57a:	f5 01       	movw	r30, r10
 57c:	c0 80       	ld	r12, Z
 57e:	d1 80       	ldd	r13, Z+1	; 0x01
 580:	f6 fc       	sbrc	r15, 6
 582:	03 c0       	rjmp	.+6      	; 0x58a <vfprintf+0x176>
 584:	6f ef       	ldi	r22, 0xFF	; 255
 586:	7f ef       	ldi	r23, 0xFF	; 255
 588:	02 c0       	rjmp	.+4      	; 0x58e <vfprintf+0x17a>
 58a:	69 2d       	mov	r22, r9
 58c:	70 e0       	ldi	r23, 0x00	; 0
 58e:	42 e0       	ldi	r20, 0x02	; 2
 590:	50 e0       	ldi	r21, 0x00	; 0
 592:	a4 0e       	add	r10, r20
 594:	b5 1e       	adc	r11, r21
 596:	c6 01       	movw	r24, r12
 598:	0e 94 e7 03 	call	0x7ce	; 0x7ce <strnlen_P>
 59c:	8c 01       	movw	r16, r24
 59e:	50 e8       	ldi	r21, 0x80	; 128
 5a0:	f5 2a       	or	r15, r21
 5a2:	f3 fe       	sbrs	r15, 3
 5a4:	07 c0       	rjmp	.+14     	; 0x5b4 <vfprintf+0x1a0>
 5a6:	1a c0       	rjmp	.+52     	; 0x5dc <vfprintf+0x1c8>
 5a8:	80 e2       	ldi	r24, 0x20	; 32
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	b3 01       	movw	r22, r6
 5ae:	0e 94 fd 03 	call	0x7fa	; 0x7fa <fputc>
 5b2:	ea 94       	dec	r14
 5b4:	8e 2d       	mov	r24, r14
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	08 17       	cp	r16, r24
 5ba:	19 07       	cpc	r17, r25
 5bc:	a8 f3       	brcs	.-22     	; 0x5a8 <vfprintf+0x194>
 5be:	0e c0       	rjmp	.+28     	; 0x5dc <vfprintf+0x1c8>
 5c0:	f6 01       	movw	r30, r12
 5c2:	f7 fc       	sbrc	r15, 7
 5c4:	85 91       	lpm	r24, Z+
 5c6:	f7 fe       	sbrs	r15, 7
 5c8:	81 91       	ld	r24, Z+
 5ca:	6f 01       	movw	r12, r30
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	b3 01       	movw	r22, r6
 5d0:	0e 94 fd 03 	call	0x7fa	; 0x7fa <fputc>
 5d4:	e1 10       	cpse	r14, r1
 5d6:	ea 94       	dec	r14
 5d8:	01 50       	subi	r16, 0x01	; 1
 5da:	10 40       	sbci	r17, 0x00	; 0
 5dc:	01 15       	cp	r16, r1
 5de:	11 05       	cpc	r17, r1
 5e0:	79 f7       	brne	.-34     	; 0x5c0 <vfprintf+0x1ac>
 5e2:	ea c0       	rjmp	.+468    	; 0x7b8 <vfprintf+0x3a4>
 5e4:	94 36       	cpi	r25, 0x64	; 100
 5e6:	11 f0       	breq	.+4      	; 0x5ec <vfprintf+0x1d8>
 5e8:	99 36       	cpi	r25, 0x69	; 105
 5ea:	69 f5       	brne	.+90     	; 0x646 <vfprintf+0x232>
 5ec:	f7 fe       	sbrs	r15, 7
 5ee:	08 c0       	rjmp	.+16     	; 0x600 <vfprintf+0x1ec>
 5f0:	f5 01       	movw	r30, r10
 5f2:	20 81       	ld	r18, Z
 5f4:	31 81       	ldd	r19, Z+1	; 0x01
 5f6:	42 81       	ldd	r20, Z+2	; 0x02
 5f8:	53 81       	ldd	r21, Z+3	; 0x03
 5fa:	84 e0       	ldi	r24, 0x04	; 4
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	0a c0       	rjmp	.+20     	; 0x614 <vfprintf+0x200>
 600:	f5 01       	movw	r30, r10
 602:	80 81       	ld	r24, Z
 604:	91 81       	ldd	r25, Z+1	; 0x01
 606:	9c 01       	movw	r18, r24
 608:	44 27       	eor	r20, r20
 60a:	37 fd       	sbrc	r19, 7
 60c:	40 95       	com	r20
 60e:	54 2f       	mov	r21, r20
 610:	82 e0       	ldi	r24, 0x02	; 2
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	a8 0e       	add	r10, r24
 616:	b9 1e       	adc	r11, r25
 618:	9f e6       	ldi	r25, 0x6F	; 111
 61a:	f9 22       	and	r15, r25
 61c:	57 ff       	sbrs	r21, 7
 61e:	09 c0       	rjmp	.+18     	; 0x632 <vfprintf+0x21e>
 620:	50 95       	com	r21
 622:	40 95       	com	r20
 624:	30 95       	com	r19
 626:	21 95       	neg	r18
 628:	3f 4f       	sbci	r19, 0xFF	; 255
 62a:	4f 4f       	sbci	r20, 0xFF	; 255
 62c:	5f 4f       	sbci	r21, 0xFF	; 255
 62e:	e0 e8       	ldi	r30, 0x80	; 128
 630:	fe 2a       	or	r15, r30
 632:	ca 01       	movw	r24, r20
 634:	b9 01       	movw	r22, r18
 636:	a1 01       	movw	r20, r2
 638:	2a e0       	ldi	r18, 0x0A	; 10
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	0e 94 29 04 	call	0x852	; 0x852 <__ultoa_invert>
 640:	d8 2e       	mov	r13, r24
 642:	d2 18       	sub	r13, r2
 644:	40 c0       	rjmp	.+128    	; 0x6c6 <vfprintf+0x2b2>
 646:	95 37       	cpi	r25, 0x75	; 117
 648:	29 f4       	brne	.+10     	; 0x654 <vfprintf+0x240>
 64a:	1f 2d       	mov	r17, r15
 64c:	1f 7e       	andi	r17, 0xEF	; 239
 64e:	2a e0       	ldi	r18, 0x0A	; 10
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	1d c0       	rjmp	.+58     	; 0x68e <vfprintf+0x27a>
 654:	1f 2d       	mov	r17, r15
 656:	19 7f       	andi	r17, 0xF9	; 249
 658:	9f 36       	cpi	r25, 0x6F	; 111
 65a:	61 f0       	breq	.+24     	; 0x674 <vfprintf+0x260>
 65c:	90 37       	cpi	r25, 0x70	; 112
 65e:	20 f4       	brcc	.+8      	; 0x668 <vfprintf+0x254>
 660:	98 35       	cpi	r25, 0x58	; 88
 662:	09 f0       	breq	.+2      	; 0x666 <vfprintf+0x252>
 664:	ac c0       	rjmp	.+344    	; 0x7be <vfprintf+0x3aa>
 666:	0f c0       	rjmp	.+30     	; 0x686 <vfprintf+0x272>
 668:	90 37       	cpi	r25, 0x70	; 112
 66a:	39 f0       	breq	.+14     	; 0x67a <vfprintf+0x266>
 66c:	98 37       	cpi	r25, 0x78	; 120
 66e:	09 f0       	breq	.+2      	; 0x672 <vfprintf+0x25e>
 670:	a6 c0       	rjmp	.+332    	; 0x7be <vfprintf+0x3aa>
 672:	04 c0       	rjmp	.+8      	; 0x67c <vfprintf+0x268>
 674:	28 e0       	ldi	r18, 0x08	; 8
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	0a c0       	rjmp	.+20     	; 0x68e <vfprintf+0x27a>
 67a:	10 61       	ori	r17, 0x10	; 16
 67c:	14 fd       	sbrc	r17, 4
 67e:	14 60       	ori	r17, 0x04	; 4
 680:	20 e1       	ldi	r18, 0x10	; 16
 682:	30 e0       	ldi	r19, 0x00	; 0
 684:	04 c0       	rjmp	.+8      	; 0x68e <vfprintf+0x27a>
 686:	14 fd       	sbrc	r17, 4
 688:	16 60       	ori	r17, 0x06	; 6
 68a:	20 e1       	ldi	r18, 0x10	; 16
 68c:	32 e0       	ldi	r19, 0x02	; 2
 68e:	17 ff       	sbrs	r17, 7
 690:	08 c0       	rjmp	.+16     	; 0x6a2 <vfprintf+0x28e>
 692:	f5 01       	movw	r30, r10
 694:	60 81       	ld	r22, Z
 696:	71 81       	ldd	r23, Z+1	; 0x01
 698:	82 81       	ldd	r24, Z+2	; 0x02
 69a:	93 81       	ldd	r25, Z+3	; 0x03
 69c:	44 e0       	ldi	r20, 0x04	; 4
 69e:	50 e0       	ldi	r21, 0x00	; 0
 6a0:	08 c0       	rjmp	.+16     	; 0x6b2 <vfprintf+0x29e>
 6a2:	f5 01       	movw	r30, r10
 6a4:	80 81       	ld	r24, Z
 6a6:	91 81       	ldd	r25, Z+1	; 0x01
 6a8:	bc 01       	movw	r22, r24
 6aa:	80 e0       	ldi	r24, 0x00	; 0
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	42 e0       	ldi	r20, 0x02	; 2
 6b0:	50 e0       	ldi	r21, 0x00	; 0
 6b2:	a4 0e       	add	r10, r20
 6b4:	b5 1e       	adc	r11, r21
 6b6:	a1 01       	movw	r20, r2
 6b8:	0e 94 29 04 	call	0x852	; 0x852 <__ultoa_invert>
 6bc:	d8 2e       	mov	r13, r24
 6be:	d2 18       	sub	r13, r2
 6c0:	8f e7       	ldi	r24, 0x7F	; 127
 6c2:	f8 2e       	mov	r15, r24
 6c4:	f1 22       	and	r15, r17
 6c6:	f6 fe       	sbrs	r15, 6
 6c8:	0b c0       	rjmp	.+22     	; 0x6e0 <vfprintf+0x2cc>
 6ca:	5e ef       	ldi	r21, 0xFE	; 254
 6cc:	f5 22       	and	r15, r21
 6ce:	d9 14       	cp	r13, r9
 6d0:	38 f4       	brcc	.+14     	; 0x6e0 <vfprintf+0x2cc>
 6d2:	f4 fe       	sbrs	r15, 4
 6d4:	07 c0       	rjmp	.+14     	; 0x6e4 <vfprintf+0x2d0>
 6d6:	f2 fc       	sbrc	r15, 2
 6d8:	05 c0       	rjmp	.+10     	; 0x6e4 <vfprintf+0x2d0>
 6da:	8f ee       	ldi	r24, 0xEF	; 239
 6dc:	f8 22       	and	r15, r24
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <vfprintf+0x2d0>
 6e0:	1d 2d       	mov	r17, r13
 6e2:	01 c0       	rjmp	.+2      	; 0x6e6 <vfprintf+0x2d2>
 6e4:	19 2d       	mov	r17, r9
 6e6:	f4 fe       	sbrs	r15, 4
 6e8:	0d c0       	rjmp	.+26     	; 0x704 <vfprintf+0x2f0>
 6ea:	fe 01       	movw	r30, r28
 6ec:	ed 0d       	add	r30, r13
 6ee:	f1 1d       	adc	r31, r1
 6f0:	80 81       	ld	r24, Z
 6f2:	80 33       	cpi	r24, 0x30	; 48
 6f4:	19 f4       	brne	.+6      	; 0x6fc <vfprintf+0x2e8>
 6f6:	99 ee       	ldi	r25, 0xE9	; 233
 6f8:	f9 22       	and	r15, r25
 6fa:	08 c0       	rjmp	.+16     	; 0x70c <vfprintf+0x2f8>
 6fc:	1f 5f       	subi	r17, 0xFF	; 255
 6fe:	f2 fe       	sbrs	r15, 2
 700:	05 c0       	rjmp	.+10     	; 0x70c <vfprintf+0x2f8>
 702:	03 c0       	rjmp	.+6      	; 0x70a <vfprintf+0x2f6>
 704:	8f 2d       	mov	r24, r15
 706:	86 78       	andi	r24, 0x86	; 134
 708:	09 f0       	breq	.+2      	; 0x70c <vfprintf+0x2f8>
 70a:	1f 5f       	subi	r17, 0xFF	; 255
 70c:	0f 2d       	mov	r16, r15
 70e:	f3 fc       	sbrc	r15, 3
 710:	14 c0       	rjmp	.+40     	; 0x73a <vfprintf+0x326>
 712:	f0 fe       	sbrs	r15, 0
 714:	0f c0       	rjmp	.+30     	; 0x734 <vfprintf+0x320>
 716:	1e 15       	cp	r17, r14
 718:	10 f0       	brcs	.+4      	; 0x71e <vfprintf+0x30a>
 71a:	9d 2c       	mov	r9, r13
 71c:	0b c0       	rjmp	.+22     	; 0x734 <vfprintf+0x320>
 71e:	9d 2c       	mov	r9, r13
 720:	9e 0c       	add	r9, r14
 722:	91 1a       	sub	r9, r17
 724:	1e 2d       	mov	r17, r14
 726:	06 c0       	rjmp	.+12     	; 0x734 <vfprintf+0x320>
 728:	80 e2       	ldi	r24, 0x20	; 32
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	b3 01       	movw	r22, r6
 72e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <fputc>
 732:	1f 5f       	subi	r17, 0xFF	; 255
 734:	1e 15       	cp	r17, r14
 736:	c0 f3       	brcs	.-16     	; 0x728 <vfprintf+0x314>
 738:	04 c0       	rjmp	.+8      	; 0x742 <vfprintf+0x32e>
 73a:	1e 15       	cp	r17, r14
 73c:	10 f4       	brcc	.+4      	; 0x742 <vfprintf+0x32e>
 73e:	e1 1a       	sub	r14, r17
 740:	01 c0       	rjmp	.+2      	; 0x744 <vfprintf+0x330>
 742:	ee 24       	eor	r14, r14
 744:	04 ff       	sbrs	r16, 4
 746:	0f c0       	rjmp	.+30     	; 0x766 <vfprintf+0x352>
 748:	80 e3       	ldi	r24, 0x30	; 48
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	b3 01       	movw	r22, r6
 74e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <fputc>
 752:	02 ff       	sbrs	r16, 2
 754:	1d c0       	rjmp	.+58     	; 0x790 <vfprintf+0x37c>
 756:	01 fd       	sbrc	r16, 1
 758:	03 c0       	rjmp	.+6      	; 0x760 <vfprintf+0x34c>
 75a:	88 e7       	ldi	r24, 0x78	; 120
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	0e c0       	rjmp	.+28     	; 0x77c <vfprintf+0x368>
 760:	88 e5       	ldi	r24, 0x58	; 88
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	0b c0       	rjmp	.+22     	; 0x77c <vfprintf+0x368>
 766:	80 2f       	mov	r24, r16
 768:	86 78       	andi	r24, 0x86	; 134
 76a:	91 f0       	breq	.+36     	; 0x790 <vfprintf+0x37c>
 76c:	01 ff       	sbrs	r16, 1
 76e:	02 c0       	rjmp	.+4      	; 0x774 <vfprintf+0x360>
 770:	8b e2       	ldi	r24, 0x2B	; 43
 772:	01 c0       	rjmp	.+2      	; 0x776 <vfprintf+0x362>
 774:	80 e2       	ldi	r24, 0x20	; 32
 776:	f7 fc       	sbrc	r15, 7
 778:	8d e2       	ldi	r24, 0x2D	; 45
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	b3 01       	movw	r22, r6
 77e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <fputc>
 782:	06 c0       	rjmp	.+12     	; 0x790 <vfprintf+0x37c>
 784:	80 e3       	ldi	r24, 0x30	; 48
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	b3 01       	movw	r22, r6
 78a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <fputc>
 78e:	9a 94       	dec	r9
 790:	d9 14       	cp	r13, r9
 792:	c0 f3       	brcs	.-16     	; 0x784 <vfprintf+0x370>
 794:	da 94       	dec	r13
 796:	f1 01       	movw	r30, r2
 798:	ed 0d       	add	r30, r13
 79a:	f1 1d       	adc	r31, r1
 79c:	80 81       	ld	r24, Z
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	b3 01       	movw	r22, r6
 7a2:	0e 94 fd 03 	call	0x7fa	; 0x7fa <fputc>
 7a6:	dd 20       	and	r13, r13
 7a8:	a9 f7       	brne	.-22     	; 0x794 <vfprintf+0x380>
 7aa:	06 c0       	rjmp	.+12     	; 0x7b8 <vfprintf+0x3a4>
 7ac:	80 e2       	ldi	r24, 0x20	; 32
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	b3 01       	movw	r22, r6
 7b2:	0e 94 fd 03 	call	0x7fa	; 0x7fa <fputc>
 7b6:	ea 94       	dec	r14
 7b8:	ee 20       	and	r14, r14
 7ba:	c1 f7       	brne	.-16     	; 0x7ac <vfprintf+0x398>
 7bc:	43 ce       	rjmp	.-890    	; 0x444 <vfprintf+0x30>
 7be:	f3 01       	movw	r30, r6
 7c0:	66 81       	ldd	r22, Z+6	; 0x06
 7c2:	77 81       	ldd	r23, Z+7	; 0x07
 7c4:	cb 01       	movw	r24, r22
 7c6:	2b 96       	adiw	r28, 0x0b	; 11
 7c8:	e2 e1       	ldi	r30, 0x12	; 18
 7ca:	0c 94 a3 04 	jmp	0x946	; 0x946 <__epilogue_restores__>

000007ce <strnlen_P>:
 7ce:	fc 01       	movw	r30, r24
 7d0:	05 90       	lpm	r0, Z+
 7d2:	61 50       	subi	r22, 0x01	; 1
 7d4:	70 40       	sbci	r23, 0x00	; 0
 7d6:	01 10       	cpse	r0, r1
 7d8:	d8 f7       	brcc	.-10     	; 0x7d0 <strnlen_P+0x2>
 7da:	80 95       	com	r24
 7dc:	90 95       	com	r25
 7de:	8e 0f       	add	r24, r30
 7e0:	9f 1f       	adc	r25, r31
 7e2:	08 95       	ret

000007e4 <strnlen>:
 7e4:	fc 01       	movw	r30, r24
 7e6:	61 50       	subi	r22, 0x01	; 1
 7e8:	70 40       	sbci	r23, 0x00	; 0
 7ea:	01 90       	ld	r0, Z+
 7ec:	01 10       	cpse	r0, r1
 7ee:	d8 f7       	brcc	.-10     	; 0x7e6 <strnlen+0x2>
 7f0:	80 95       	com	r24
 7f2:	90 95       	com	r25
 7f4:	8e 0f       	add	r24, r30
 7f6:	9f 1f       	adc	r25, r31
 7f8:	08 95       	ret

000007fa <fputc>:
 7fa:	0f 93       	push	r16
 7fc:	1f 93       	push	r17
 7fe:	cf 93       	push	r28
 800:	df 93       	push	r29
 802:	8c 01       	movw	r16, r24
 804:	eb 01       	movw	r28, r22
 806:	8b 81       	ldd	r24, Y+3	; 0x03
 808:	81 ff       	sbrs	r24, 1
 80a:	1b c0       	rjmp	.+54     	; 0x842 <fputc+0x48>
 80c:	82 ff       	sbrs	r24, 2
 80e:	0d c0       	rjmp	.+26     	; 0x82a <fputc+0x30>
 810:	2e 81       	ldd	r18, Y+6	; 0x06
 812:	3f 81       	ldd	r19, Y+7	; 0x07
 814:	8c 81       	ldd	r24, Y+4	; 0x04
 816:	9d 81       	ldd	r25, Y+5	; 0x05
 818:	28 17       	cp	r18, r24
 81a:	39 07       	cpc	r19, r25
 81c:	64 f4       	brge	.+24     	; 0x836 <fputc+0x3c>
 81e:	e8 81       	ld	r30, Y
 820:	f9 81       	ldd	r31, Y+1	; 0x01
 822:	01 93       	st	Z+, r16
 824:	f9 83       	std	Y+1, r31	; 0x01
 826:	e8 83       	st	Y, r30
 828:	06 c0       	rjmp	.+12     	; 0x836 <fputc+0x3c>
 82a:	e8 85       	ldd	r30, Y+8	; 0x08
 82c:	f9 85       	ldd	r31, Y+9	; 0x09
 82e:	80 2f       	mov	r24, r16
 830:	09 95       	icall
 832:	89 2b       	or	r24, r25
 834:	31 f4       	brne	.+12     	; 0x842 <fputc+0x48>
 836:	8e 81       	ldd	r24, Y+6	; 0x06
 838:	9f 81       	ldd	r25, Y+7	; 0x07
 83a:	01 96       	adiw	r24, 0x01	; 1
 83c:	9f 83       	std	Y+7, r25	; 0x07
 83e:	8e 83       	std	Y+6, r24	; 0x06
 840:	02 c0       	rjmp	.+4      	; 0x846 <fputc+0x4c>
 842:	0f ef       	ldi	r16, 0xFF	; 255
 844:	1f ef       	ldi	r17, 0xFF	; 255
 846:	c8 01       	movw	r24, r16
 848:	df 91       	pop	r29
 84a:	cf 91       	pop	r28
 84c:	1f 91       	pop	r17
 84e:	0f 91       	pop	r16
 850:	08 95       	ret

00000852 <__ultoa_invert>:
 852:	fa 01       	movw	r30, r20
 854:	aa 27       	eor	r26, r26
 856:	28 30       	cpi	r18, 0x08	; 8
 858:	51 f1       	breq	.+84     	; 0x8ae <__ultoa_invert+0x5c>
 85a:	20 31       	cpi	r18, 0x10	; 16
 85c:	81 f1       	breq	.+96     	; 0x8be <__ultoa_invert+0x6c>
 85e:	e8 94       	clt
 860:	6f 93       	push	r22
 862:	6e 7f       	andi	r22, 0xFE	; 254
 864:	6e 5f       	subi	r22, 0xFE	; 254
 866:	7f 4f       	sbci	r23, 0xFF	; 255
 868:	8f 4f       	sbci	r24, 0xFF	; 255
 86a:	9f 4f       	sbci	r25, 0xFF	; 255
 86c:	af 4f       	sbci	r26, 0xFF	; 255
 86e:	b1 e0       	ldi	r27, 0x01	; 1
 870:	3e d0       	rcall	.+124    	; 0x8ee <__ultoa_invert+0x9c>
 872:	b4 e0       	ldi	r27, 0x04	; 4
 874:	3c d0       	rcall	.+120    	; 0x8ee <__ultoa_invert+0x9c>
 876:	67 0f       	add	r22, r23
 878:	78 1f       	adc	r23, r24
 87a:	89 1f       	adc	r24, r25
 87c:	9a 1f       	adc	r25, r26
 87e:	a1 1d       	adc	r26, r1
 880:	68 0f       	add	r22, r24
 882:	79 1f       	adc	r23, r25
 884:	8a 1f       	adc	r24, r26
 886:	91 1d       	adc	r25, r1
 888:	a1 1d       	adc	r26, r1
 88a:	6a 0f       	add	r22, r26
 88c:	71 1d       	adc	r23, r1
 88e:	81 1d       	adc	r24, r1
 890:	91 1d       	adc	r25, r1
 892:	a1 1d       	adc	r26, r1
 894:	20 d0       	rcall	.+64     	; 0x8d6 <__ultoa_invert+0x84>
 896:	09 f4       	brne	.+2      	; 0x89a <__ultoa_invert+0x48>
 898:	68 94       	set
 89a:	3f 91       	pop	r19
 89c:	2a e0       	ldi	r18, 0x0A	; 10
 89e:	26 9f       	mul	r18, r22
 8a0:	11 24       	eor	r1, r1
 8a2:	30 19       	sub	r19, r0
 8a4:	30 5d       	subi	r19, 0xD0	; 208
 8a6:	31 93       	st	Z+, r19
 8a8:	de f6       	brtc	.-74     	; 0x860 <__ultoa_invert+0xe>
 8aa:	cf 01       	movw	r24, r30
 8ac:	08 95       	ret
 8ae:	46 2f       	mov	r20, r22
 8b0:	47 70       	andi	r20, 0x07	; 7
 8b2:	40 5d       	subi	r20, 0xD0	; 208
 8b4:	41 93       	st	Z+, r20
 8b6:	b3 e0       	ldi	r27, 0x03	; 3
 8b8:	0f d0       	rcall	.+30     	; 0x8d8 <__ultoa_invert+0x86>
 8ba:	c9 f7       	brne	.-14     	; 0x8ae <__ultoa_invert+0x5c>
 8bc:	f6 cf       	rjmp	.-20     	; 0x8aa <__ultoa_invert+0x58>
 8be:	46 2f       	mov	r20, r22
 8c0:	4f 70       	andi	r20, 0x0F	; 15
 8c2:	40 5d       	subi	r20, 0xD0	; 208
 8c4:	4a 33       	cpi	r20, 0x3A	; 58
 8c6:	18 f0       	brcs	.+6      	; 0x8ce <__ultoa_invert+0x7c>
 8c8:	49 5d       	subi	r20, 0xD9	; 217
 8ca:	31 fd       	sbrc	r19, 1
 8cc:	40 52       	subi	r20, 0x20	; 32
 8ce:	41 93       	st	Z+, r20
 8d0:	02 d0       	rcall	.+4      	; 0x8d6 <__ultoa_invert+0x84>
 8d2:	a9 f7       	brne	.-22     	; 0x8be <__ultoa_invert+0x6c>
 8d4:	ea cf       	rjmp	.-44     	; 0x8aa <__ultoa_invert+0x58>
 8d6:	b4 e0       	ldi	r27, 0x04	; 4
 8d8:	a6 95       	lsr	r26
 8da:	97 95       	ror	r25
 8dc:	87 95       	ror	r24
 8de:	77 95       	ror	r23
 8e0:	67 95       	ror	r22
 8e2:	ba 95       	dec	r27
 8e4:	c9 f7       	brne	.-14     	; 0x8d8 <__ultoa_invert+0x86>
 8e6:	00 97       	sbiw	r24, 0x00	; 0
 8e8:	61 05       	cpc	r22, r1
 8ea:	71 05       	cpc	r23, r1
 8ec:	08 95       	ret
 8ee:	9b 01       	movw	r18, r22
 8f0:	ac 01       	movw	r20, r24
 8f2:	0a 2e       	mov	r0, r26
 8f4:	06 94       	lsr	r0
 8f6:	57 95       	ror	r21
 8f8:	47 95       	ror	r20
 8fa:	37 95       	ror	r19
 8fc:	27 95       	ror	r18
 8fe:	ba 95       	dec	r27
 900:	c9 f7       	brne	.-14     	; 0x8f4 <__ultoa_invert+0xa2>
 902:	62 0f       	add	r22, r18
 904:	73 1f       	adc	r23, r19
 906:	84 1f       	adc	r24, r20
 908:	95 1f       	adc	r25, r21
 90a:	a0 1d       	adc	r26, r0
 90c:	08 95       	ret

0000090e <__prologue_saves__>:
 90e:	2f 92       	push	r2
 910:	3f 92       	push	r3
 912:	4f 92       	push	r4
 914:	5f 92       	push	r5
 916:	6f 92       	push	r6
 918:	7f 92       	push	r7
 91a:	8f 92       	push	r8
 91c:	9f 92       	push	r9
 91e:	af 92       	push	r10
 920:	bf 92       	push	r11
 922:	cf 92       	push	r12
 924:	df 92       	push	r13
 926:	ef 92       	push	r14
 928:	ff 92       	push	r15
 92a:	0f 93       	push	r16
 92c:	1f 93       	push	r17
 92e:	cf 93       	push	r28
 930:	df 93       	push	r29
 932:	cd b7       	in	r28, 0x3d	; 61
 934:	de b7       	in	r29, 0x3e	; 62
 936:	ca 1b       	sub	r28, r26
 938:	db 0b       	sbc	r29, r27
 93a:	0f b6       	in	r0, 0x3f	; 63
 93c:	f8 94       	cli
 93e:	de bf       	out	0x3e, r29	; 62
 940:	0f be       	out	0x3f, r0	; 63
 942:	cd bf       	out	0x3d, r28	; 61
 944:	09 94       	ijmp

00000946 <__epilogue_restores__>:
 946:	2a 88       	ldd	r2, Y+18	; 0x12
 948:	39 88       	ldd	r3, Y+17	; 0x11
 94a:	48 88       	ldd	r4, Y+16	; 0x10
 94c:	5f 84       	ldd	r5, Y+15	; 0x0f
 94e:	6e 84       	ldd	r6, Y+14	; 0x0e
 950:	7d 84       	ldd	r7, Y+13	; 0x0d
 952:	8c 84       	ldd	r8, Y+12	; 0x0c
 954:	9b 84       	ldd	r9, Y+11	; 0x0b
 956:	aa 84       	ldd	r10, Y+10	; 0x0a
 958:	b9 84       	ldd	r11, Y+9	; 0x09
 95a:	c8 84       	ldd	r12, Y+8	; 0x08
 95c:	df 80       	ldd	r13, Y+7	; 0x07
 95e:	ee 80       	ldd	r14, Y+6	; 0x06
 960:	fd 80       	ldd	r15, Y+5	; 0x05
 962:	0c 81       	ldd	r16, Y+4	; 0x04
 964:	1b 81       	ldd	r17, Y+3	; 0x03
 966:	aa 81       	ldd	r26, Y+2	; 0x02
 968:	b9 81       	ldd	r27, Y+1	; 0x01
 96a:	ce 0f       	add	r28, r30
 96c:	d1 1d       	adc	r29, r1
 96e:	0f b6       	in	r0, 0x3f	; 63
 970:	f8 94       	cli
 972:	de bf       	out	0x3e, r29	; 62
 974:	0f be       	out	0x3f, r0	; 63
 976:	cd bf       	out	0x3d, r28	; 61
 978:	ed 01       	movw	r28, r26
 97a:	08 95       	ret

0000097c <_exit>:
 97c:	f8 94       	cli

0000097e <__stop_program>:
 97e:	ff cf       	rjmp	.-2      	; 0x97e <__stop_program>
