
328_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002be  00000000  00000000  00000187  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000104  00000000  00000000  00000445  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000130  00000000  00000000  00000549  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  0000067c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000016f  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000001e  00000000  00000000  0000080b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000829  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:


int main (void) 
{

   ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz 
  80:	80 91 7a 00 	lds	r24, 0x007A
  84:	87 60       	ori	r24, 0x07	; 7
  86:	80 93 7a 00 	sts	0x007A, r24
   ADMUX |= (1 << REFS0); // Set ADC reference to AVCC 
  8a:	80 91 7c 00 	lds	r24, 0x007C
  8e:	80 64       	ori	r24, 0x40	; 64
  90:	80 93 7c 00 	sts	0x007C, r24
   ADCSRA |= (1 << ADATE);  // Set ADC to Free-Running Mode
  94:	80 91 7a 00 	lds	r24, 0x007A
  98:	80 62       	ori	r24, 0x20	; 32
  9a:	80 93 7a 00 	sts	0x007A, r24
       
   // No MUX values needed to be changed to use ADC0 
   ADCSRA |= (1 << ADEN);  // Enable ADC 
  9e:	80 91 7a 00 	lds	r24, 0x007A
  a2:	80 68       	ori	r24, 0x80	; 128
  a4:	80 93 7a 00 	sts	0x007A, r24
   ADCSRA |= (1 << ADSC);  // Start A2D Conversions 
  a8:	80 91 7a 00 	lds	r24, 0x007A
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 93 7a 00 	sts	0x007A, r24


   DDRB=255;   
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	84 b9       	out	0x04, r24	; 4
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
  b6:	4f e3       	ldi	r20, 0x3F	; 63
  b8:	5d e0       	ldi	r21, 0x0D	; 13
  ba:	63 e0       	ldi	r22, 0x03	; 3
  bc:	70 e0       	ldi	r23, 0x00	; 0
        ppm = (high << 8) | low;

		if (ppm>=1023)
		{
		 
         PORTB = 11111111;
  be:	e7 ec       	ldi	r30, 0xC7	; 199
  c0:	db 01       	movw	r26, r22
  c2:	ca 01       	movw	r24, r20
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	a1 09       	sbc	r26, r1
  c8:	b1 09       	sbc	r27, r1
  ca:	00 00       	nop
  cc:	01 f0       	breq	.+0      	; 0xce <main+0x4e>
  ce:	d1 f7       	brne	.-12     	; 0xc4 <main+0x44>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
  d0:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
  d2:	00 00       	nop

   for(;;)  // Loop Forever 
   {

        _delay_ms(100);
		low = ADCL;            //Make certain to read ADCL first, it locks the values
  d4:	80 91 78 00 	lds	r24, 0x0078
        
        high = ADCH;           //and ADCH releases them.
  d8:	20 91 79 00 	lds	r18, 0x0079
        ppm = (high << 8) | low;

		if (ppm>=1023)
  dc:	32 2f       	mov	r19, r18
  de:	20 e0       	ldi	r18, 0x00	; 0
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	82 2b       	or	r24, r18
  e4:	93 2b       	or	r25, r19
  e6:	8f 5f       	subi	r24, 0xFF	; 255
  e8:	93 40       	sbci	r25, 0x03	; 3
  ea:	10 f0       	brcs	.+4      	; 0xf0 <main+0x70>
		{
		 
         PORTB = 11111111;
  ec:	e5 b9       	out	0x05, r30	; 5
  ee:	e8 cf       	rjmp	.-48     	; 0xc0 <main+0x40>
		}
      else
	  { PORTB = 00000000;}
  f0:	15 b8       	out	0x05, r1	; 5
  f2:	e6 cf       	rjmp	.-52     	; 0xc0 <main+0x40>

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
