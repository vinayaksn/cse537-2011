
Individual.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000126  00800100  00004e64  00004ef8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004e64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002de  00800226  00800226  0000501e  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000501e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003b5  00000000  00000000  0000503e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002b16  00000000  00000000  000053f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000040d  00000000  00000000  00007f09  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000227d  00000000  00000000  00008316  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003d0  00000000  00000000  0000a594  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b94  00000000  00000000  0000a964  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003493  00000000  00000000  0000b4f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000260  00000000  00000000  0000e98b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8c 01 	jmp	0x318	; 0x318 <__ctors_end>
       4:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
       8:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
       c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      10:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      14:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      18:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      1c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      20:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      24:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      28:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      2c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      30:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      34:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      38:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      3c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      40:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      44:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      48:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <__vector_18>
      4c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      50:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      54:	0c 94 e8 1b 	jmp	0x37d0	; 0x37d0 <__vector_21>
      58:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      5c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      60:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      64:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>

00000068 <__c.3685>:
      68:	0d 0a 00                                            ...

0000006b <__c.3657>:
      6b:	47 6c 6f 62 61 6c 20 69 6e 74 65 72 72 75 70 74     Global interrupt
      7b:	20 65 6e 61 62 6c 65 64 0d 0a 00                     enabled...

00000086 <__c.3655>:
      86:	4e 65 77 20 4c 6f 67 20 43 72 65 61 74 65 64 0d     New Log Created.
      96:	0a 00                                               ..

00000098 <__c.3650>:
      98:	44 65 6c 65 74 65 64 20 70 72 65 76 75 6f 69 75     Deleted prevuoiu
      a8:	73 20 4c 6f 67 0d 0a 00                             s Log...

000000b0 <__c.3648>:
      b0:	53 44 2d 43 41 52 44 20 20 69 6e 69 74 69 61 6c     SD-CARD  initial
      c0:	69 7a 65 64 0d 0a 00                                ized...

000000c7 <__c.3646>:
      c7:	55 61 72 74 20 69 6e 69 74 69 61 6c 69 7a 65 64     Uart initialized
      d7:	0d 0a 00                                            ...

000000da <__c.2212>:
      da:	65 72 72 6f 72 20 64 65 6c 65 74 69 6e 67 20 66     error deleting f
      ea:	69 6c 65 3a 20 00                                   ile: .

000000f0 <__c.2188>:
      f0:	65 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 00        error opening .

000000ff <__c.2185>:
      ff:	63 61 6c 6c 20 69 6e 69 74 5f 73 64 63 61 72 64     call init_sdcard
     10f:	28 29 20 66 69 72 73 74 20 0a 00                    () first ..

0000011a <__c.2183>:
     11a:	53 44 20 43 61 72 64 20 6e 6f 74 20 69 6e 69 74     SD Card not init
     12a:	69 61 6c 69 7a 65 64 20 70 72 6f 70 65 72 6c 79     ialized properly
     13a:	0a 00                                               ..

0000013c <__c.2166>:
     13c:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     14c:	20 66 69 6c 65 0a 00                                 file..

00000153 <__c.2164>:
     153:	65 72 72 6f 72 20 73 65 65 6b 69 6e 67 20 6f 6e     error seeking on
     163:	20 00                                                .

00000165 <__c.2162>:
     165:	65 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 00        error opening .

00000174 <__c.2159>:
     174:	63 61 6c 6c 20 69 6e 69 74 5f 73 64 63 61 72 64     call init_sdcard
     184:	28 29 20 66 69 72 73 74 0a 00                       () first..

0000018e <__c.2157>:
     18e:	53 44 20 43 61 72 64 20 6e 6f 74 20 69 6e 69 74     SD Card not init
     19e:	69 61 6c 69 7a 65 64 20 70 72 6f 70 65 72 6c 79     ialized properly
     1ae:	0a 00                                               ..

000001b0 <__c.2136>:
     1b0:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     1c0:	20 66 69 6c 65 0a 00                                 file..

000001c7 <__c.2134>:
     1c7:	65 72 72 6f 72 20 73 65 65 6b 69 6e 67 20 6f 6e     error seeking on
     1d7:	20 00                                                .

000001d9 <__c.2132>:
     1d9:	65 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 00        error opening .

000001e8 <__c.2129>:
     1e8:	63 61 6c 6c 20 69 6e 69 74 5f 73 64 63 61 72 64     call init_sdcard
     1f8:	28 29 20 66 69 72 73 74 0a 00                       () first..

00000202 <__c.2127>:
     202:	53 44 20 43 61 72 64 20 6e 6f 74 20 69 6e 69 74     SD Card not init
     212:	69 61 6c 69 7a 65 64 20 70 72 6f 70 65 72 6c 79     ialized properly
     222:	0a 00                                               ..

00000224 <__c.2115>:
     224:	65 72 72 6f 72 20 63 72 65 61 74 69 6e 67 20 66     error creating f
     234:	69 6c 65 3a 20 00                                   ile: .

0000023a <__c.2096>:
     23a:	6f 70 65 6e 69 6e 67 20 72 6f 6f 74 20 64 69 72     opening root dir
     24a:	65 63 74 6f 72 79 20 66 61 69 6c 65 64 0a 00        ectory failed..

00000259 <__c.2093>:
     259:	6f 70 65 6e 69 6e 67 20 66 69 6c 65 73 79 73 74     opening filesyst
     269:	65 6d 20 66 61 69 6c 65 64 0a 00                    em failed..

00000274 <__c.2091>:
     274:	6f 70 65 6e 69 6e 67 20 70 61 72 74 69 74 69 6f     opening partitio
     284:	6e 20 66 61 69 6c 65 64 0a 00                       n failed..

0000028e <__c.2088>:
     28e:	4d 4d 43 2f 53 44 20 69 6e 69 74 69 61 6c 69 7a     MMC/SD initializ
     29e:	61 74 69 6f 6e 20 66 61 69 6c 65 64 0a 00           ation failed..

000002ac <__c.2267>:
     2ac:	66 72 65 65 3a 20 20 20 00                          free:   .

000002b5 <__c.2265>:
     2b5:	66 6f 72 6d 61 74 3a 20 00                          format: .

000002be <__c.2263>:
     2be:	77 72 2e 70 72 2e 3a 20 00                          wr.pr.: .

000002c7 <__c.2261>:
     2c7:	63 6f 70 79 3a 20 20 20 00                          copy:   .

000002d0 <__c.2259>:
     2d0:	4d 42 0a 00                                         MB..

000002d4 <__c.2257>:
     2d4:	73 69 7a 65 3a 20 20 20 00                          size:   .

000002dd <__c.2255>:
     2dd:	64 61 74 65 3a 20 20 20 00                          date:   .

000002e6 <__c.2253>:
     2e6:	73 65 72 69 61 6c 3a 20 30 78 00                    serial: 0x.

000002f1 <__c.2251>:
     2f1:	72 65 76 3a 20 20 20 20 00                          rev:    .

000002fa <__c.2249>:
     2fa:	70 72 6f 64 3a 20 20 20 00                          prod:   .

00000303 <__c.2247>:
     303:	6f 65 6d 3a 20 20 20 20 00                          oem:    .

0000030c <__c.2245>:
     30c:	6d 61 6e 75 66 3a 20 20 30 78 00 00                 manuf:  0x..

00000318 <__ctors_end>:
     318:	11 24       	eor	r1, r1
     31a:	1f be       	out	0x3f, r1	; 63
     31c:	cf ef       	ldi	r28, 0xFF	; 255
     31e:	d8 e0       	ldi	r29, 0x08	; 8
     320:	de bf       	out	0x3e, r29	; 62
     322:	cd bf       	out	0x3d, r28	; 61

00000324 <__do_copy_data>:
     324:	12 e0       	ldi	r17, 0x02	; 2
     326:	a0 e0       	ldi	r26, 0x00	; 0
     328:	b1 e0       	ldi	r27, 0x01	; 1
     32a:	e4 e6       	ldi	r30, 0x64	; 100
     32c:	fe e4       	ldi	r31, 0x4E	; 78
     32e:	02 c0       	rjmp	.+4      	; 0x334 <.do_copy_data_start>

00000330 <.do_copy_data_loop>:
     330:	05 90       	lpm	r0, Z+
     332:	0d 92       	st	X+, r0

00000334 <.do_copy_data_start>:
     334:	a6 32       	cpi	r26, 0x26	; 38
     336:	b1 07       	cpc	r27, r17
     338:	d9 f7       	brne	.-10     	; 0x330 <.do_copy_data_loop>

0000033a <__do_clear_bss>:
     33a:	15 e0       	ldi	r17, 0x05	; 5
     33c:	a6 e2       	ldi	r26, 0x26	; 38
     33e:	b2 e0       	ldi	r27, 0x02	; 2
     340:	01 c0       	rjmp	.+2      	; 0x344 <.do_clear_bss_start>

00000342 <.do_clear_bss_loop>:
     342:	1d 92       	st	X+, r1

00000344 <.do_clear_bss_start>:
     344:	a4 30       	cpi	r26, 0x04	; 4
     346:	b1 07       	cpc	r27, r17
     348:	e1 f7       	brne	.-8      	; 0x342 <.do_clear_bss_loop>
     34a:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <main>
     34e:	0c 94 30 27 	jmp	0x4e60	; 0x4e60 <_exit>

00000352 <__bad_interrupt>:
     352:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000356 <uart_init>:
#define USE_SLEEP 1

void uart_init()
{
    /* set baud rate */
    UBRRH = UBRRVAL >> 8;
     356:	10 92 c5 00 	sts	0x00C5, r1
    UBRRL = UBRRVAL & 0xff;
     35a:	87 e6       	ldi	r24, 0x67	; 103
     35c:	80 93 c4 00 	sts	0x00C4, r24
    /* set frame format: 8 bit, no parity, 1 bit */
    UCSRC = UCSRC_SELECT | (1 << UCSZ1) | (1 << UCSZ0);
     360:	86 e0       	ldi	r24, 0x06	; 6
     362:	80 93 c2 00 	sts	0x00C2, r24
    /* enable serial receiver and transmitter */
#if !USE_SLEEP
    UCSRB = (1 << RXEN) | (1 << TXEN);
#else
    UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
     366:	88 e9       	ldi	r24, 0x98	; 152
     368:	80 93 c1 00 	sts	0x00C1, r24
#endif
}
     36c:	08 95       	ret

0000036e <uart_putc>:

void uart_putc(uint8_t c)
{
     36e:	1f 93       	push	r17
     370:	18 2f       	mov	r17, r24
    if(c == '\n')
     372:	8a 30       	cpi	r24, 0x0A	; 10
     374:	19 f4       	brne	.+6      	; 0x37c <uart_putc+0xe>
        uart_putc('\r');
     376:	8d e0       	ldi	r24, 0x0D	; 13
     378:	0e 94 b7 01 	call	0x36e	; 0x36e <uart_putc>

    /* wait until transmit buffer is empty */
    while(!(UCSRA & (1 << UDRE)));
     37c:	80 91 c0 00 	lds	r24, 0x00C0
     380:	85 ff       	sbrs	r24, 5
     382:	fc cf       	rjmp	.-8      	; 0x37c <uart_putc+0xe>

    /* send next byte */
    UDR = c;
     384:	10 93 c6 00 	sts	0x00C6, r17
}
     388:	1f 91       	pop	r17
     38a:	08 95       	ret

0000038c <uart_putc_hex>:

void uart_putc_hex(uint8_t b)
{
     38c:	1f 93       	push	r17
     38e:	18 2f       	mov	r17, r24
    /* upper nibble */
    if((b >> 4) < 0x0a)
     390:	82 95       	swap	r24
     392:	8f 70       	andi	r24, 0x0F	; 15
     394:	8a 30       	cpi	r24, 0x0A	; 10
     396:	10 f4       	brcc	.+4      	; 0x39c <uart_putc_hex+0x10>
        uart_putc((b >> 4) + '0');
     398:	80 5d       	subi	r24, 0xD0	; 208
     39a:	01 c0       	rjmp	.+2      	; 0x39e <uart_putc_hex+0x12>
    else
        uart_putc((b >> 4) - 0x0a + 'a');
     39c:	89 5a       	subi	r24, 0xA9	; 169
     39e:	0e 94 b7 01 	call	0x36e	; 0x36e <uart_putc>

    /* lower nibble */
    if((b & 0x0f) < 0x0a)
     3a2:	81 2f       	mov	r24, r17
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	8f 70       	andi	r24, 0x0F	; 15
     3a8:	90 70       	andi	r25, 0x00	; 0
     3aa:	21 2f       	mov	r18, r17
     3ac:	2f 70       	andi	r18, 0x0F	; 15
     3ae:	0a 97       	sbiw	r24, 0x0a	; 10
     3b0:	1c f4       	brge	.+6      	; 0x3b8 <uart_putc_hex+0x2c>
        uart_putc((b & 0x0f) + '0');
     3b2:	82 2f       	mov	r24, r18
     3b4:	80 5d       	subi	r24, 0xD0	; 208
     3b6:	02 c0       	rjmp	.+4      	; 0x3bc <uart_putc_hex+0x30>
    else
        uart_putc((b & 0x0f) - 0x0a + 'a');
     3b8:	82 2f       	mov	r24, r18
     3ba:	89 5a       	subi	r24, 0xA9	; 169
     3bc:	0e 94 b7 01 	call	0x36e	; 0x36e <uart_putc>
}
     3c0:	1f 91       	pop	r17
     3c2:	08 95       	ret

000003c4 <uart_putw_hex>:

void uart_putw_hex(uint16_t w)
{
     3c4:	1f 93       	push	r17
     3c6:	18 2f       	mov	r17, r24
    uart_putc_hex((uint8_t) (w >> 8));
     3c8:	89 2f       	mov	r24, r25
     3ca:	0e 94 c6 01 	call	0x38c	; 0x38c <uart_putc_hex>
    uart_putc_hex((uint8_t) (w & 0xff));
     3ce:	81 2f       	mov	r24, r17
     3d0:	0e 94 c6 01 	call	0x38c	; 0x38c <uart_putc_hex>
}
     3d4:	1f 91       	pop	r17
     3d6:	08 95       	ret

000003d8 <uart_putdw_hex>:

void uart_putdw_hex(uint32_t dw)
{
     3d8:	ef 92       	push	r14
     3da:	ff 92       	push	r15
     3dc:	0f 93       	push	r16
     3de:	1f 93       	push	r17
     3e0:	7b 01       	movw	r14, r22
     3e2:	8c 01       	movw	r16, r24
    uart_putw_hex((uint16_t) (dw >> 16));
     3e4:	c8 01       	movw	r24, r16
     3e6:	aa 27       	eor	r26, r26
     3e8:	bb 27       	eor	r27, r27
     3ea:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <uart_putw_hex>
    uart_putw_hex((uint16_t) (dw & 0xffff));
     3ee:	c7 01       	movw	r24, r14
     3f0:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <uart_putw_hex>
}
     3f4:	1f 91       	pop	r17
     3f6:	0f 91       	pop	r16
     3f8:	ff 90       	pop	r15
     3fa:	ef 90       	pop	r14
     3fc:	08 95       	ret

000003fe <uart_putw_dec>:

void uart_putw_dec(uint16_t w)
{
     3fe:	cf 92       	push	r12
     400:	df 92       	push	r13
     402:	ff 92       	push	r15
     404:	0f 93       	push	r16
     406:	1f 93       	push	r17
     408:	cf 93       	push	r28
     40a:	df 93       	push	r29
     40c:	6c 01       	movw	r12, r24
     40e:	c0 e1       	ldi	r28, 0x10	; 16
     410:	d7 e2       	ldi	r29, 0x27	; 39
     412:	40 e0       	ldi	r20, 0x00	; 0
     414:	00 e0       	ldi	r16, 0x00	; 0
     416:	10 e0       	ldi	r17, 0x00	; 0
    uint16_t num = 10000;
    uint8_t started = 0;

    while(num > 0)
    {
        uint8_t b = w / num;
     418:	c6 01       	movw	r24, r12
     41a:	be 01       	movw	r22, r28
     41c:	0e 94 34 26 	call	0x4c68	; 0x4c68 <__udivmodhi4>
     420:	f6 2e       	mov	r15, r22
        if(b > 0 || started || num == 1)
     422:	66 23       	and	r22, r22
     424:	29 f4       	brne	.+10     	; 0x430 <uart_putw_dec+0x32>
     426:	44 23       	and	r20, r20
     428:	19 f4       	brne	.+6      	; 0x430 <uart_putw_dec+0x32>
     42a:	c1 30       	cpi	r28, 0x01	; 1
     42c:	d1 05       	cpc	r29, r1
     42e:	29 f4       	brne	.+10     	; 0x43a <uart_putw_dec+0x3c>
        {
            uart_putc('0' + b);
     430:	8f 2d       	mov	r24, r15
     432:	80 5d       	subi	r24, 0xD0	; 208
     434:	0e 94 b7 01 	call	0x36e	; 0x36e <uart_putc>
     438:	41 e0       	ldi	r20, 0x01	; 1
            started = 1;
        }
        w -= b * num;

        num /= 10;
     43a:	ce 01       	movw	r24, r28
     43c:	6a e0       	ldi	r22, 0x0A	; 10
     43e:	70 e0       	ldi	r23, 0x00	; 0
     440:	0e 94 34 26 	call	0x4c68	; 0x4c68 <__udivmodhi4>
     444:	0f 5f       	subi	r16, 0xFF	; 255
     446:	1f 4f       	sbci	r17, 0xFF	; 255
void uart_putw_dec(uint16_t w)
{
    uint16_t num = 10000;
    uint8_t started = 0;

    while(num > 0)
     448:	05 30       	cpi	r16, 0x05	; 5
     44a:	11 05       	cpc	r17, r1
     44c:	71 f0       	breq	.+28     	; 0x46a <uart_putw_dec+0x6c>
        if(b > 0 || started || num == 1)
        {
            uart_putc('0' + b);
            started = 1;
        }
        w -= b * num;
     44e:	8f 2d       	mov	r24, r15
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	9c 01       	movw	r18, r24
     454:	2c 9f       	mul	r18, r28
     456:	c0 01       	movw	r24, r0
     458:	2d 9f       	mul	r18, r29
     45a:	90 0d       	add	r25, r0
     45c:	3c 9f       	mul	r19, r28
     45e:	90 0d       	add	r25, r0
     460:	11 24       	eor	r1, r1
     462:	c8 1a       	sub	r12, r24
     464:	d9 0a       	sbc	r13, r25
     466:	eb 01       	movw	r28, r22
     468:	d7 cf       	rjmp	.-82     	; 0x418 <uart_putw_dec+0x1a>

        num /= 10;
    }
}
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	1f 91       	pop	r17
     470:	0f 91       	pop	r16
     472:	ff 90       	pop	r15
     474:	df 90       	pop	r13
     476:	cf 90       	pop	r12
     478:	08 95       	ret

0000047a <uart_putdw_dec>:

void uart_putdw_dec(uint32_t dw)
{
     47a:	4f 92       	push	r4
     47c:	5f 92       	push	r5
     47e:	6f 92       	push	r6
     480:	7f 92       	push	r7
     482:	8f 92       	push	r8
     484:	9f 92       	push	r9
     486:	af 92       	push	r10
     488:	bf 92       	push	r11
     48a:	cf 92       	push	r12
     48c:	df 92       	push	r13
     48e:	ef 92       	push	r14
     490:	ff 92       	push	r15
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	5b 01       	movw	r10, r22
     49c:	6c 01       	movw	r12, r24
     49e:	e1 2c       	mov	r14, r1
     4a0:	9a ec       	ldi	r25, 0xCA	; 202
     4a2:	f9 2e       	mov	r15, r25
     4a4:	9a e9       	ldi	r25, 0x9A	; 154
     4a6:	09 2f       	mov	r16, r25
     4a8:	9b e3       	ldi	r25, 0x3B	; 59
     4aa:	19 2f       	mov	r17, r25
     4ac:	44 24       	eor	r4, r4
     4ae:	c0 e0       	ldi	r28, 0x00	; 0
     4b0:	d0 e0       	ldi	r29, 0x00	; 0
    uint32_t num = 1000000000;
    uint8_t started = 0;

    while(num > 0)
    {
        uint8_t b = dw / num;
     4b2:	c6 01       	movw	r24, r12
     4b4:	b5 01       	movw	r22, r10
     4b6:	a8 01       	movw	r20, r16
     4b8:	97 01       	movw	r18, r14
     4ba:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <__udivmodsi4>
     4be:	92 2e       	mov	r9, r18
        if(b > 0 || started || num == 1)
     4c0:	22 23       	and	r18, r18
     4c2:	41 f4       	brne	.+16     	; 0x4d4 <uart_putdw_dec+0x5a>
     4c4:	44 20       	and	r4, r4
     4c6:	31 f4       	brne	.+12     	; 0x4d4 <uart_putdw_dec+0x5a>
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	e8 16       	cp	r14, r24
     4cc:	f1 04       	cpc	r15, r1
     4ce:	01 05       	cpc	r16, r1
     4d0:	11 05       	cpc	r17, r1
     4d2:	31 f4       	brne	.+12     	; 0x4e0 <uart_putdw_dec+0x66>
        {
            uart_putc('0' + b);
     4d4:	89 2d       	mov	r24, r9
     4d6:	80 5d       	subi	r24, 0xD0	; 208
     4d8:	0e 94 b7 01 	call	0x36e	; 0x36e <uart_putc>
     4dc:	44 24       	eor	r4, r4
     4de:	43 94       	inc	r4
            started = 1;
        }
        dw -= b * num;

        num /= 10;
     4e0:	c8 01       	movw	r24, r16
     4e2:	b7 01       	movw	r22, r14
     4e4:	2a e0       	ldi	r18, 0x0A	; 10
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	40 e0       	ldi	r20, 0x00	; 0
     4ea:	50 e0       	ldi	r21, 0x00	; 0
     4ec:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <__udivmodsi4>
     4f0:	82 2e       	mov	r8, r18
     4f2:	73 2e       	mov	r7, r19
     4f4:	64 2e       	mov	r6, r20
     4f6:	55 2e       	mov	r5, r21
     4f8:	21 96       	adiw	r28, 0x01	; 1
void uart_putdw_dec(uint32_t dw)
{
    uint32_t num = 1000000000;
    uint8_t started = 0;

    while(num > 0)
     4fa:	ca 30       	cpi	r28, 0x0A	; 10
     4fc:	d1 05       	cpc	r29, r1
     4fe:	a9 f0       	breq	.+42     	; 0x52a <uart_putdw_dec+0xb0>
        if(b > 0 || started || num == 1)
        {
            uart_putc('0' + b);
            started = 1;
        }
        dw -= b * num;
     500:	69 2d       	mov	r22, r9
     502:	70 e0       	ldi	r23, 0x00	; 0
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	a8 01       	movw	r20, r16
     50a:	97 01       	movw	r18, r14
     50c:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <__mulsi3>
     510:	a6 1a       	sub	r10, r22
     512:	b7 0a       	sbc	r11, r23
     514:	c8 0a       	sbc	r12, r24
     516:	d9 0a       	sbc	r13, r25
     518:	28 2d       	mov	r18, r8
     51a:	37 2d       	mov	r19, r7
     51c:	46 2d       	mov	r20, r6
     51e:	55 2d       	mov	r21, r5
     520:	c9 01       	movw	r24, r18
     522:	da 01       	movw	r26, r20
     524:	7c 01       	movw	r14, r24
     526:	8d 01       	movw	r16, r26
     528:	c4 cf       	rjmp	.-120    	; 0x4b2 <uart_putdw_dec+0x38>

        num /= 10;
    }
}
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	1f 91       	pop	r17
     530:	0f 91       	pop	r16
     532:	ff 90       	pop	r15
     534:	ef 90       	pop	r14
     536:	df 90       	pop	r13
     538:	cf 90       	pop	r12
     53a:	bf 90       	pop	r11
     53c:	af 90       	pop	r10
     53e:	9f 90       	pop	r9
     540:	8f 90       	pop	r8
     542:	7f 90       	pop	r7
     544:	6f 90       	pop	r6
     546:	5f 90       	pop	r5
     548:	4f 90       	pop	r4
     54a:	08 95       	ret

0000054c <uart_puts>:

void uart_puts(const char* str)
{
     54c:	cf 93       	push	r28
     54e:	df 93       	push	r29
     550:	ec 01       	movw	r28, r24
     552:	03 c0       	rjmp	.+6      	; 0x55a <uart_puts+0xe>
    while(*str)
        uart_putc(*str++);
     554:	21 96       	adiw	r28, 0x01	; 1
     556:	0e 94 b7 01 	call	0x36e	; 0x36e <uart_putc>
    }
}

void uart_puts(const char* str)
{
    while(*str)
     55a:	88 81       	ld	r24, Y
     55c:	88 23       	and	r24, r24
     55e:	d1 f7       	brne	.-12     	; 0x554 <uart_puts+0x8>
        uart_putc(*str++);
}
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	08 95       	ret

00000566 <uart_puts_p>:

void uart_puts_p(PGM_P str)
{
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	ec 01       	movw	r28, r24
     56c:	fe 01       	movw	r30, r28
    while(1)
    {
        uint8_t b = pgm_read_byte_near(str++);
     56e:	21 96       	adiw	r28, 0x01	; 1
     570:	84 91       	lpm	r24, Z+
        if(!b)
     572:	88 23       	and	r24, r24
     574:	19 f0       	breq	.+6      	; 0x57c <uart_puts_p+0x16>
            break;

        uart_putc(b);
     576:	0e 94 b7 01 	call	0x36e	; 0x36e <uart_putc>
     57a:	f8 cf       	rjmp	.-16     	; 0x56c <uart_puts_p+0x6>
    }
}
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
     580:	08 95       	ret

00000582 <uart_getc>:

uint8_t uart_getc()
{
    /* wait until receive buffer is full */
#if USE_SLEEP
    uint8_t sreg = SREG;
     582:	9f b7       	in	r25, 0x3f	; 63
    sei();
     584:	78 94       	sei
     586:	07 c0       	rjmp	.+14     	; 0x596 <uart_getc+0x14>

    while(!(UCSRA & (1 << RXC)))
        sleep_mode();
     588:	83 b7       	in	r24, 0x33	; 51
     58a:	81 60       	ori	r24, 0x01	; 1
     58c:	83 bf       	out	0x33, r24	; 51
     58e:	88 95       	sleep
     590:	83 b7       	in	r24, 0x33	; 51
     592:	8e 7f       	andi	r24, 0xFE	; 254
     594:	83 bf       	out	0x33, r24	; 51
    /* wait until receive buffer is full */
#if USE_SLEEP
    uint8_t sreg = SREG;
    sei();

    while(!(UCSRA & (1 << RXC)))
     596:	80 91 c0 00 	lds	r24, 0x00C0
     59a:	87 ff       	sbrs	r24, 7
     59c:	f5 cf       	rjmp	.-22     	; 0x588 <uart_getc+0x6>
        sleep_mode();

    SREG = sreg;
     59e:	9f bf       	out	0x3f, r25	; 63
#else
    while(!(UCSRA & (1 << RXC)));
#endif

    uint8_t b = UDR;
     5a0:	80 91 c6 00 	lds	r24, 0x00C6
    if(b == '\r')
     5a4:	8d 30       	cpi	r24, 0x0D	; 13
     5a6:	09 f4       	brne	.+2      	; 0x5aa <uart_getc+0x28>
     5a8:	8a e0       	ldi	r24, 0x0A	; 10
        b = '\n';

    return b;
}
     5aa:	08 95       	ret

000005ac <__vector_18>:

EMPTY_INTERRUPT(USART_RXC_vect)
     5ac:	18 95       	reti

000005ae <fat_close>:
 *
 * \param[in] fs The filesystem to close.
 * \see fat_open
 */
void fat_close(struct fat_fs_struct* fs)
{
     5ae:	fc 01       	movw	r30, r24
    if(!fs)
     5b0:	00 97       	sbiw	r24, 0x00	; 0
     5b2:	11 f0       	breq	.+4      	; 0x5b8 <fat_close+0xa>
        return;

#if USE_DYNAMIC_MEMORY
    free(fs);
#else
    fs->partition = 0;
     5b4:	11 82       	std	Z+1, r1	; 0x01
     5b6:	10 82       	st	Z, r1
     5b8:	08 95       	ret

000005ba <fat_get_next_cluster>:
 * \param[in] fs The filesystem for which to determine the next cluster.
 * \param[in] cluster_num The number of the cluster for which to determine its successor.
 * \returns The wanted cluster number, or 0 on error.
 */
cluster_t fat_get_next_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
     5ba:	df 93       	push	r29
     5bc:	cf 93       	push	r28
     5be:	00 d0       	rcall	.+0      	; 0x5c0 <fat_get_next_cluster+0x6>
     5c0:	cd b7       	in	r28, 0x3d	; 61
     5c2:	de b7       	in	r29, 0x3e	; 62
     5c4:	dc 01       	movw	r26, r24
    if(!fs || cluster_num < 2)
     5c6:	00 97       	sbiw	r24, 0x00	; 0
     5c8:	81 f1       	breq	.+96     	; 0x62a <fat_get_next_cluster+0x70>
     5ca:	62 30       	cpi	r22, 0x02	; 2
     5cc:	71 05       	cpc	r23, r1
     5ce:	68 f1       	brcs	.+90     	; 0x62a <fat_get_next_cluster+0x70>
    else
#endif
    {
        /* read appropriate fat entry */
        uint16_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
     5d0:	ed 91       	ld	r30, X+
     5d2:	fc 91       	ld	r31, X
     5d4:	11 97       	sbiw	r26, 0x01	; 1
     5d6:	66 0f       	add	r22, r22
     5d8:	77 1f       	adc	r23, r23
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	16 96       	adiw	r26, 0x06	; 6
     5e0:	2d 91       	ld	r18, X+
     5e2:	3d 91       	ld	r19, X+
     5e4:	4d 91       	ld	r20, X+
     5e6:	5c 91       	ld	r21, X
     5e8:	19 97       	sbiw	r26, 0x09	; 9
     5ea:	62 0f       	add	r22, r18
     5ec:	73 1f       	adc	r23, r19
     5ee:	84 1f       	adc	r24, r20
     5f0:	95 1f       	adc	r25, r21
     5f2:	01 90       	ld	r0, Z+
     5f4:	f0 81       	ld	r31, Z
     5f6:	e0 2d       	mov	r30, r0
     5f8:	ae 01       	movw	r20, r28
     5fa:	4f 5f       	subi	r20, 0xFF	; 255
     5fc:	5f 4f       	sbci	r21, 0xFF	; 255
     5fe:	22 e0       	ldi	r18, 0x02	; 2
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	09 95       	icall
     604:	88 23       	and	r24, r24
     606:	89 f0       	breq	.+34     	; 0x62a <fat_get_next_cluster+0x70>
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh16(fat_entry);
     608:	29 81       	ldd	r18, Y+1	; 0x01
     60a:	3a 81       	ldd	r19, Y+2	; 0x02
        
        if(cluster_num == FAT16_CLUSTER_FREE ||
     60c:	21 15       	cp	r18, r1
     60e:	31 05       	cpc	r19, r1
     610:	71 f0       	breq	.+28     	; 0x62e <fat_get_next_cluster+0x74>
     612:	8f ef       	ldi	r24, 0xFF	; 255
     614:	27 3f       	cpi	r18, 0xF7	; 247
     616:	38 07       	cpc	r19, r24
     618:	41 f0       	breq	.+16     	; 0x62a <fat_get_next_cluster+0x70>
     61a:	c9 01       	movw	r24, r18
     61c:	40 96       	adiw	r24, 0x10	; 16
     61e:	07 97       	sbiw	r24, 0x07	; 7
     620:	20 f0       	brcs	.+8      	; 0x62a <fat_get_next_cluster+0x70>
     622:	8f ef       	ldi	r24, 0xFF	; 255
     624:	28 3f       	cpi	r18, 0xF8	; 248
     626:	38 07       	cpc	r19, r24
     628:	10 f0       	brcs	.+4      	; 0x62e <fat_get_next_cluster+0x74>
     62a:	20 e0       	ldi	r18, 0x00	; 0
     62c:	30 e0       	ldi	r19, 0x00	; 0
           (cluster_num >= FAT16_CLUSTER_LAST_MIN && cluster_num <= FAT16_CLUSTER_LAST_MAX))
            return 0;
    }

    return cluster_num;
}
     62e:	c9 01       	movw	r24, r18
     630:	0f 90       	pop	r0
     632:	0f 90       	pop	r0
     634:	cf 91       	pop	r28
     636:	df 91       	pop	r29
     638:	08 95       	ret

0000063a <fat_free_clusters>:
 * \param[in] cluster_num The starting cluster of the chain which to free.
 * \returns 0 on failure, 1 on success.
 * \see fat_terminate_clusters
 */
uint8_t fat_free_clusters(struct fat_fs_struct* fs, cluster_t cluster_num)
{
     63a:	4f 92       	push	r4
     63c:	5f 92       	push	r5
     63e:	6f 92       	push	r6
     640:	7f 92       	push	r7
     642:	8f 92       	push	r8
     644:	9f 92       	push	r9
     646:	af 92       	push	r10
     648:	bf 92       	push	r11
     64a:	cf 92       	push	r12
     64c:	df 92       	push	r13
     64e:	ef 92       	push	r14
     650:	ff 92       	push	r15
     652:	0f 93       	push	r16
     654:	1f 93       	push	r17
     656:	df 93       	push	r29
     658:	cf 93       	push	r28
     65a:	00 d0       	rcall	.+0      	; 0x65c <fat_free_clusters+0x22>
     65c:	cd b7       	in	r28, 0x3d	; 61
     65e:	de b7       	in	r29, 0x3e	; 62
     660:	5c 01       	movw	r10, r24
    if(!fs || cluster_num < 2)
     662:	00 97       	sbiw	r24, 0x00	; 0
     664:	09 f4       	brne	.+2      	; 0x668 <fat_free_clusters+0x2e>
     666:	49 c0       	rjmp	.+146    	; 0x6fa <fat_free_clusters+0xc0>
     668:	62 30       	cpi	r22, 0x02	; 2
     66a:	71 05       	cpc	r23, r1
     66c:	08 f4       	brcc	.+2      	; 0x670 <fat_free_clusters+0x36>
     66e:	45 c0       	rjmp	.+138    	; 0x6fa <fat_free_clusters+0xc0>
        return 0;

    offset_t fat_offset = fs->header.fat_offset;
     670:	dc 01       	movw	r26, r24
     672:	16 96       	adiw	r26, 0x06	; 6
     674:	6d 90       	ld	r6, X+
     676:	7d 90       	ld	r7, X+
     678:	8d 90       	ld	r8, X+
     67a:	9c 90       	ld	r9, X
     67c:	19 97       	sbiw	r26, 0x09	; 9
#endif
    {
        uint16_t fat_entry;
        while(cluster_num)
        {
            if(!fs->partition->device_read(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
     67e:	2e 01       	movw	r4, r28
     680:	08 94       	sec
     682:	41 1c       	adc	r4, r1
     684:	51 1c       	adc	r5, r1
     686:	66 0f       	add	r22, r22
     688:	77 1f       	adc	r23, r23
     68a:	7b 01       	movw	r14, r22
     68c:	00 e0       	ldi	r16, 0x00	; 0
     68e:	10 e0       	ldi	r17, 0x00	; 0
     690:	e6 0c       	add	r14, r6
     692:	f7 1c       	adc	r15, r7
     694:	08 1d       	adc	r16, r8
     696:	19 1d       	adc	r17, r9
     698:	d5 01       	movw	r26, r10
     69a:	ed 91       	ld	r30, X+
     69c:	fc 91       	ld	r31, X
     69e:	01 90       	ld	r0, Z+
     6a0:	f0 81       	ld	r31, Z
     6a2:	e0 2d       	mov	r30, r0
     6a4:	c8 01       	movw	r24, r16
     6a6:	b7 01       	movw	r22, r14
     6a8:	a2 01       	movw	r20, r4
     6aa:	22 e0       	ldi	r18, 0x02	; 2
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	09 95       	icall
     6b0:	88 23       	and	r24, r24
     6b2:	19 f1       	breq	.+70     	; 0x6fa <fat_free_clusters+0xc0>
                return 0;

            /* get next cluster of current cluster before freeing current cluster */
            uint16_t cluster_num_next = ltoh16(fat_entry);
     6b4:	c9 80       	ldd	r12, Y+1	; 0x01
     6b6:	da 80       	ldd	r13, Y+2	; 0x02

            if(cluster_num_next == FAT16_CLUSTER_FREE)
     6b8:	c1 14       	cp	r12, r1
     6ba:	d1 04       	cpc	r13, r1
     6bc:	01 f1       	breq	.+64     	; 0x6fe <fat_free_clusters+0xc4>
                return 1;
            if(cluster_num_next == FAT16_CLUSTER_BAD ||
     6be:	c6 01       	movw	r24, r12
     6c0:	40 96       	adiw	r24, 0x10	; 16
     6c2:	08 97       	sbiw	r24, 0x08	; 8
     6c4:	d0 f0       	brcs	.+52     	; 0x6fa <fat_free_clusters+0xc0>
               (cluster_num_next >= FAT16_CLUSTER_RESERVED_MIN &&
                cluster_num_next <= FAT16_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
            if(cluster_num_next >= FAT16_CLUSTER_LAST_MIN && cluster_num_next <= FAT16_CLUSTER_LAST_MAX)
     6c6:	b8 ef       	ldi	r27, 0xF8	; 248
     6c8:	cb 16       	cp	r12, r27
     6ca:	bf ef       	ldi	r27, 0xFF	; 255
     6cc:	db 06       	cpc	r13, r27
     6ce:	10 f0       	brcs	.+4      	; 0x6d4 <fat_free_clusters+0x9a>
     6d0:	cc 24       	eor	r12, r12
     6d2:	dd 24       	eor	r13, r13
                cluster_num_next = 0;

            /* free cluster */
            fat_entry = HTOL16(FAT16_CLUSTER_FREE);
     6d4:	1a 82       	std	Y+2, r1	; 0x02
     6d6:	19 82       	std	Y+1, r1	; 0x01
            fs->partition->device_write(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry));
     6d8:	d5 01       	movw	r26, r10
     6da:	ed 91       	ld	r30, X+
     6dc:	fc 91       	ld	r31, X
     6de:	04 80       	ldd	r0, Z+4	; 0x04
     6e0:	f5 81       	ldd	r31, Z+5	; 0x05
     6e2:	e0 2d       	mov	r30, r0
     6e4:	c8 01       	movw	r24, r16
     6e6:	b7 01       	movw	r22, r14
     6e8:	a2 01       	movw	r20, r4
     6ea:	22 e0       	ldi	r18, 0x02	; 2
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	09 95       	icall
     6f0:	b6 01       	movw	r22, r12
    }
    else
#endif
    {
        uint16_t fat_entry;
        while(cluster_num)
     6f2:	c1 14       	cp	r12, r1
     6f4:	d1 04       	cpc	r13, r1
     6f6:	39 f6       	brne	.-114    	; 0x686 <fat_free_clusters+0x4c>
     6f8:	02 c0       	rjmp	.+4      	; 0x6fe <fat_free_clusters+0xc4>
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	01 c0       	rjmp	.+2      	; 0x700 <fat_free_clusters+0xc6>
     6fe:	81 e0       	ldi	r24, 0x01	; 1
            cluster_num = cluster_num_next;
        }
    }

    return 1;
}
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	cf 91       	pop	r28
     706:	df 91       	pop	r29
     708:	1f 91       	pop	r17
     70a:	0f 91       	pop	r16
     70c:	ff 90       	pop	r15
     70e:	ef 90       	pop	r14
     710:	df 90       	pop	r13
     712:	cf 90       	pop	r12
     714:	bf 90       	pop	r11
     716:	af 90       	pop	r10
     718:	9f 90       	pop	r9
     71a:	8f 90       	pop	r8
     71c:	7f 90       	pop	r7
     71e:	6f 90       	pop	r6
     720:	5f 90       	pop	r5
     722:	4f 90       	pop	r4
     724:	08 95       	ret

00000726 <fat_append_clusters>:
 * \param[in] cluster_num The cluster to which to append the new chain.
 * \param[in] count The number of clusters to allocate.
 * \returns 0 on failure, the number of the first new cluster on success.
 */
cluster_t fat_append_clusters(struct fat_fs_struct* fs, cluster_t cluster_num, cluster_t count)
{
     726:	2f 92       	push	r2
     728:	3f 92       	push	r3
     72a:	4f 92       	push	r4
     72c:	5f 92       	push	r5
     72e:	6f 92       	push	r6
     730:	7f 92       	push	r7
     732:	8f 92       	push	r8
     734:	9f 92       	push	r9
     736:	af 92       	push	r10
     738:	bf 92       	push	r11
     73a:	cf 92       	push	r12
     73c:	df 92       	push	r13
     73e:	ef 92       	push	r14
     740:	ff 92       	push	r15
     742:	0f 93       	push	r16
     744:	1f 93       	push	r17
     746:	df 93       	push	r29
     748:	cf 93       	push	r28
     74a:	cd b7       	in	r28, 0x3d	; 61
     74c:	de b7       	in	r29, 0x3e	; 62
     74e:	2c 97       	sbiw	r28, 0x0c	; 12
     750:	0f b6       	in	r0, 0x3f	; 63
     752:	f8 94       	cli
     754:	de bf       	out	0x3e, r29	; 62
     756:	0f be       	out	0x3f, r0	; 63
     758:	cd bf       	out	0x3d, r28	; 61
     75a:	4c 01       	movw	r8, r24
     75c:	1b 01       	movw	r2, r22
     75e:	ca 01       	movw	r24, r20
    if(!fs)
     760:	81 14       	cp	r8, r1
     762:	91 04       	cpc	r9, r1
     764:	09 f4       	brne	.+2      	; 0x768 <fat_append_clusters+0x42>
     766:	ab c0       	rjmp	.+342    	; 0x8be <fat_append_clusters+0x198>
        return 0;

    device_read_t device_read = fs->partition->device_read;
     768:	d4 01       	movw	r26, r8
     76a:	ed 91       	ld	r30, X+
     76c:	fc 91       	ld	r31, X
     76e:	11 97       	sbiw	r26, 0x01	; 1
     770:	20 81       	ld	r18, Z
     772:	31 81       	ldd	r19, Z+1	; 0x01
     774:	3c 87       	std	Y+12, r19	; 0x0c
     776:	2b 87       	std	Y+11, r18	; 0x0b
    device_write_t device_write = fs->partition->device_write;
     778:	44 81       	ldd	r20, Z+4	; 0x04
     77a:	55 81       	ldd	r21, Z+5	; 0x05
     77c:	5a 87       	std	Y+10, r21	; 0x0a
     77e:	49 87       	std	Y+9, r20	; 0x09
    offset_t fat_offset = fs->header.fat_offset;
     780:	16 96       	adiw	r26, 0x06	; 6
     782:	2d 91       	ld	r18, X+
     784:	3d 91       	ld	r19, X+
     786:	4d 91       	ld	r20, X+
     788:	5c 91       	ld	r21, X
     78a:	19 97       	sbiw	r26, 0x09	; 9
     78c:	2d 83       	std	Y+5, r18	; 0x05
     78e:	3e 83       	std	Y+6, r19	; 0x06
     790:	4f 83       	std	Y+7, r20	; 0x07
     792:	58 87       	std	Y+8, r21	; 0x08
    cluster_t count_left = count;
    cluster_t cluster_current = fs->cluster_free;
     794:	5a 96       	adiw	r26, 0x1a	; 26
     796:	ad 90       	ld	r10, X+
     798:	bc 90       	ld	r11, X
     79a:	5b 97       	sbiw	r26, 0x1b	; 27

    if(is_fat32)
        cluster_count = fs->header.fat_size / sizeof(fat_entry32);
    else
#endif
        cluster_count = fs->header.fat_size / sizeof(fat_entry16);
     79c:	1a 96       	adiw	r26, 0x0a	; 10
     79e:	2d 91       	ld	r18, X+
     7a0:	3d 91       	ld	r19, X+
     7a2:	4d 91       	ld	r20, X+
     7a4:	5c 91       	ld	r21, X
     7a6:	1d 97       	sbiw	r26, 0x0d	; 13
     7a8:	56 95       	lsr	r21
     7aa:	47 95       	ror	r20
     7ac:	37 95       	ror	r19
     7ae:	27 95       	ror	r18
     7b0:	3c 83       	std	Y+4, r19	; 0x04
     7b2:	2b 83       	std	Y+3, r18	; 0x03

    fs->cluster_free = 0;
     7b4:	5b 96       	adiw	r26, 0x1b	; 27
     7b6:	1c 92       	st	X, r1
     7b8:	1e 92       	st	-X, r1
     7ba:	5a 97       	sbiw	r26, 0x1a	; 26
     7bc:	3c 01       	movw	r6, r24
     7be:	29 01       	movw	r4, r18
     7c0:	cc 24       	eor	r12, r12
     7c2:	dd 24       	eor	r13, r13
     7c4:	54 c0       	rjmp	.+168    	; 0x86e <fat_append_clusters+0x148>
    for(cluster_t cluster_left = cluster_count; cluster_left > 0; --cluster_left, ++cluster_current)
    {
        if(cluster_current < 2 || cluster_current >= cluster_count)
     7c6:	b2 e0       	ldi	r27, 0x02	; 2
     7c8:	ab 16       	cp	r10, r27
     7ca:	b1 04       	cpc	r11, r1
     7cc:	28 f0       	brcs	.+10     	; 0x7d8 <fat_append_clusters+0xb2>
     7ce:	eb 81       	ldd	r30, Y+3	; 0x03
     7d0:	fc 81       	ldd	r31, Y+4	; 0x04
     7d2:	ae 16       	cp	r10, r30
     7d4:	bf 06       	cpc	r11, r31
     7d6:	18 f0       	brcs	.+6      	; 0x7de <fat_append_clusters+0xb8>
     7d8:	62 e0       	ldi	r22, 0x02	; 2
     7da:	a6 2e       	mov	r10, r22
     7dc:	b1 2c       	mov	r11, r1
                return 0;
        }
        else
#endif
        {
            if(!device_read(fat_offset + cluster_current * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
     7de:	c5 01       	movw	r24, r10
     7e0:	88 0f       	add	r24, r24
     7e2:	99 1f       	adc	r25, r25
     7e4:	7c 01       	movw	r14, r24
     7e6:	00 e0       	ldi	r16, 0x00	; 0
     7e8:	10 e0       	ldi	r17, 0x00	; 0
     7ea:	2d 81       	ldd	r18, Y+5	; 0x05
     7ec:	3e 81       	ldd	r19, Y+6	; 0x06
     7ee:	4f 81       	ldd	r20, Y+7	; 0x07
     7f0:	58 85       	ldd	r21, Y+8	; 0x08
     7f2:	e2 0e       	add	r14, r18
     7f4:	f3 1e       	adc	r15, r19
     7f6:	04 1f       	adc	r16, r20
     7f8:	15 1f       	adc	r17, r21
     7fa:	c8 01       	movw	r24, r16
     7fc:	b7 01       	movw	r22, r14
     7fe:	ae 01       	movw	r20, r28
     800:	4f 5f       	subi	r20, 0xFF	; 255
     802:	5f 4f       	sbci	r21, 0xFF	; 255
     804:	22 e0       	ldi	r18, 0x02	; 2
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	ab 85       	ldd	r26, Y+11	; 0x0b
     80a:	bc 85       	ldd	r27, Y+12	; 0x0c
     80c:	fd 01       	movw	r30, r26
     80e:	09 95       	icall
     810:	88 23       	and	r24, r24
     812:	09 f4       	brne	.+2      	; 0x816 <fat_append_clusters+0xf0>
     814:	54 c0       	rjmp	.+168    	; 0x8be <fat_append_clusters+0x198>
        }
        else
#endif
        {
            /* check if this is a free cluster */
            if(fat_entry16 != HTOL16(FAT16_CLUSTER_FREE))
     816:	89 81       	ldd	r24, Y+1	; 0x01
     818:	9a 81       	ldd	r25, Y+2	; 0x02
     81a:	89 2b       	or	r24, r25
     81c:	11 f5       	brne	.+68     	; 0x862 <fat_append_clusters+0x13c>

            /* If we don't need this free cluster for the
             * current allocation, we keep it in mind for
             * the next time.
             */
            if(count_left == 0)
     81e:	61 14       	cp	r6, r1
     820:	71 04       	cpc	r7, r1
     822:	21 f4       	brne	.+8      	; 0x82c <fat_append_clusters+0x106>
            {
                fs->cluster_free = cluster_current;
     824:	f4 01       	movw	r30, r8
     826:	b3 8e       	std	Z+27, r11	; 0x1b
     828:	a2 8e       	std	Z+26, r10	; 0x1a
     82a:	27 c0       	rjmp	.+78     	; 0x87a <fat_append_clusters+0x154>
                break;
            }

            /* allocate cluster */
            if(cluster_next == 0)
     82c:	c1 14       	cp	r12, r1
     82e:	d1 04       	cpc	r13, r1
     830:	29 f4       	brne	.+10     	; 0x83c <fat_append_clusters+0x116>
                fat_entry16 = HTOL16(FAT16_CLUSTER_LAST_MAX);
     832:	2f ef       	ldi	r18, 0xFF	; 255
     834:	3f ef       	ldi	r19, 0xFF	; 255
     836:	3a 83       	std	Y+2, r19	; 0x02
     838:	29 83       	std	Y+1, r18	; 0x01
     83a:	02 c0       	rjmp	.+4      	; 0x840 <fat_append_clusters+0x11a>
            else
                fat_entry16 = htol16((uint16_t) cluster_next);
     83c:	da 82       	std	Y+2, r13	; 0x02
     83e:	c9 82       	std	Y+1, r12	; 0x01

            if(!device_write(fat_offset + cluster_current * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
     840:	c8 01       	movw	r24, r16
     842:	b7 01       	movw	r22, r14
     844:	ae 01       	movw	r20, r28
     846:	4f 5f       	subi	r20, 0xFF	; 255
     848:	5f 4f       	sbci	r21, 0xFF	; 255
     84a:	22 e0       	ldi	r18, 0x02	; 2
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	a9 85       	ldd	r26, Y+9	; 0x09
     850:	ba 85       	ldd	r27, Y+10	; 0x0a
     852:	fd 01       	movw	r30, r26
     854:	09 95       	icall
     856:	88 23       	and	r24, r24
     858:	71 f1       	breq	.+92     	; 0x8b6 <fat_append_clusters+0x190>
                break;
        }

        cluster_next = cluster_current;
        --count_left;
     85a:	08 94       	sec
     85c:	61 08       	sbc	r6, r1
     85e:	71 08       	sbc	r7, r1
     860:	65 01       	movw	r12, r10
    else
#endif
        cluster_count = fs->header.fat_size / sizeof(fat_entry16);

    fs->cluster_free = 0;
    for(cluster_t cluster_left = cluster_count; cluster_left > 0; --cluster_left, ++cluster_current)
     862:	08 94       	sec
     864:	41 08       	sbc	r4, r1
     866:	51 08       	sbc	r5, r1
     868:	08 94       	sec
     86a:	a1 1c       	adc	r10, r1
     86c:	b1 1c       	adc	r11, r1
     86e:	41 14       	cp	r4, r1
     870:	51 04       	cpc	r5, r1
     872:	09 f0       	breq	.+2      	; 0x876 <fat_append_clusters+0x150>
     874:	a8 cf       	rjmp	.-176    	; 0x7c6 <fat_append_clusters+0xa0>
        --count_left;
    }

    do
    {
        if(count_left > 0)
     876:	67 28       	or	r6, r7
     878:	f1 f4       	brne	.+60     	; 0x8b6 <fat_append_clusters+0x190>
            break;

        /* We allocated a new cluster chain. Now join
         * it with the existing one (if any).
         */
        if(cluster_num >= 2)
     87a:	b2 e0       	ldi	r27, 0x02	; 2
     87c:	2b 16       	cp	r2, r27
     87e:	31 04       	cpc	r3, r1
     880:	00 f1       	brcs	.+64     	; 0x8c2 <fat_append_clusters+0x19c>
                    break;
            }
            else
#endif
            {
                fat_entry16 = htol16((uint16_t) cluster_next);
     882:	c9 82       	std	Y+1, r12	; 0x01
     884:	da 82       	std	Y+2, r13	; 0x02

                if(!device_write(fat_offset + cluster_num * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
     886:	22 0c       	add	r2, r2
     888:	33 1c       	adc	r3, r3
     88a:	b1 01       	movw	r22, r2
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	2d 81       	ldd	r18, Y+5	; 0x05
     892:	3e 81       	ldd	r19, Y+6	; 0x06
     894:	4f 81       	ldd	r20, Y+7	; 0x07
     896:	58 85       	ldd	r21, Y+8	; 0x08
     898:	62 0f       	add	r22, r18
     89a:	73 1f       	adc	r23, r19
     89c:	84 1f       	adc	r24, r20
     89e:	95 1f       	adc	r25, r21
     8a0:	ae 01       	movw	r20, r28
     8a2:	4f 5f       	subi	r20, 0xFF	; 255
     8a4:	5f 4f       	sbci	r21, 0xFF	; 255
     8a6:	22 e0       	ldi	r18, 0x02	; 2
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	a9 85       	ldd	r26, Y+9	; 0x09
     8ac:	ba 85       	ldd	r27, Y+10	; 0x0a
     8ae:	fd 01       	movw	r30, r26
     8b0:	09 95       	icall
     8b2:	88 23       	and	r24, r24
     8b4:	31 f4       	brne	.+12     	; 0x8c2 <fat_append_clusters+0x19c>
    } while(0);

    /* No space left on device or writing error.
     * Free up all clusters already allocated.
     */
    fat_free_clusters(fs, cluster_next);
     8b6:	c4 01       	movw	r24, r8
     8b8:	b6 01       	movw	r22, r12
     8ba:	0e 94 1d 03 	call	0x63a	; 0x63a <fat_free_clusters>

    return 0;
     8be:	cc 24       	eor	r12, r12
     8c0:	dd 24       	eor	r13, r13
}
     8c2:	c6 01       	movw	r24, r12
     8c4:	2c 96       	adiw	r28, 0x0c	; 12
     8c6:	0f b6       	in	r0, 0x3f	; 63
     8c8:	f8 94       	cli
     8ca:	de bf       	out	0x3e, r29	; 62
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	cd bf       	out	0x3d, r28	; 61
     8d0:	cf 91       	pop	r28
     8d2:	df 91       	pop	r29
     8d4:	1f 91       	pop	r17
     8d6:	0f 91       	pop	r16
     8d8:	ff 90       	pop	r15
     8da:	ef 90       	pop	r14
     8dc:	df 90       	pop	r13
     8de:	cf 90       	pop	r12
     8e0:	bf 90       	pop	r11
     8e2:	af 90       	pop	r10
     8e4:	9f 90       	pop	r9
     8e6:	8f 90       	pop	r8
     8e8:	7f 90       	pop	r7
     8ea:	6f 90       	pop	r6
     8ec:	5f 90       	pop	r5
     8ee:	4f 90       	pop	r4
     8f0:	3f 90       	pop	r3
     8f2:	2f 90       	pop	r2
     8f4:	08 95       	ret

000008f6 <fat_clear_cluster_callback>:
 * Callback function for clearing a cluster.
 */
uintptr_t fat_clear_cluster_callback(uint8_t* buffer, offset_t offset, void* p)
{
    return 16;
}
     8f6:	80 e1       	ldi	r24, 0x10	; 16
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	08 95       	ret

000008fc <fat_close_file>:
 *
 * \param[in] fd The file handle of the file to close.
 * \see fat_open_file
 */
void fat_close_file(struct fat_file_struct* fd)
{
     8fc:	fc 01       	movw	r30, r24
    if(fd)
     8fe:	00 97       	sbiw	r24, 0x00	; 0
     900:	11 f0       	breq	.+4      	; 0x906 <__stack+0x7>
#endif

#if USE_DYNAMIC_MEMORY
        free(fd);
#else
        fd->fs = 0;
     902:	11 82       	std	Z+1, r1	; 0x01
     904:	10 82       	st	Z, r1
     906:	08 95       	ret

00000908 <fat_read_file>:
 * \param[in] buffer_len The amount of data to read.
 * \returns The number of bytes read, 0 on end of file, or -1 on failure.
 * \see fat_write_file
 */
intptr_t fat_read_file(struct fat_file_struct* fd, uint8_t* buffer, uintptr_t buffer_len)
{
     908:	2f 92       	push	r2
     90a:	3f 92       	push	r3
     90c:	4f 92       	push	r4
     90e:	5f 92       	push	r5
     910:	6f 92       	push	r6
     912:	7f 92       	push	r7
     914:	8f 92       	push	r8
     916:	9f 92       	push	r9
     918:	af 92       	push	r10
     91a:	bf 92       	push	r11
     91c:	cf 92       	push	r12
     91e:	df 92       	push	r13
     920:	ef 92       	push	r14
     922:	ff 92       	push	r15
     924:	0f 93       	push	r16
     926:	1f 93       	push	r17
     928:	df 93       	push	r29
     92a:	cf 93       	push	r28
     92c:	cd b7       	in	r28, 0x3d	; 61
     92e:	de b7       	in	r29, 0x3e	; 62
     930:	2a 97       	sbiw	r28, 0x0a	; 10
     932:	0f b6       	in	r0, 0x3f	; 63
     934:	f8 94       	cli
     936:	de bf       	out	0x3e, r29	; 62
     938:	0f be       	out	0x3f, r0	; 63
     93a:	cd bf       	out	0x3d, r28	; 61
     93c:	2c 01       	movw	r4, r24
     93e:	7a 83       	std	Y+2, r23	; 0x02
     940:	69 83       	std	Y+1, r22	; 0x01
     942:	5c 83       	std	Y+4, r21	; 0x04
     944:	4b 83       	std	Y+3, r20	; 0x03
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
     946:	00 97       	sbiw	r24, 0x00	; 0
     948:	09 f4       	brne	.+2      	; 0x94c <fat_read_file+0x44>
     94a:	09 c1       	rjmp	.+530    	; 0xb5e <fat_read_file+0x256>
     94c:	67 2b       	or	r22, r23
     94e:	09 f4       	brne	.+2      	; 0x952 <fat_read_file+0x4a>
     950:	06 c1       	rjmp	.+524    	; 0xb5e <fat_read_file+0x256>
     952:	45 2b       	or	r20, r21
     954:	09 f4       	brne	.+2      	; 0x958 <fat_read_file+0x50>
     956:	03 c1       	rjmp	.+518    	; 0xb5e <fat_read_file+0x256>
        return -1;

    /* determine number of bytes to read */
    if(fd->pos + buffer_len > fd->dir_entry.file_size)
     958:	dc 01       	movw	r26, r24
     95a:	9d 96       	adiw	r26, 0x2d	; 45
     95c:	ad 90       	ld	r10, X+
     95e:	bd 90       	ld	r11, X+
     960:	cd 90       	ld	r12, X+
     962:	dc 90       	ld	r13, X
     964:	d0 97       	sbiw	r26, 0x30	; 48
     966:	95 96       	adiw	r26, 0x25	; 37
     968:	2d 91       	ld	r18, X+
     96a:	3d 91       	ld	r19, X+
     96c:	4d 91       	ld	r20, X+
     96e:	5c 91       	ld	r21, X
     970:	98 97       	sbiw	r26, 0x28	; 40
     972:	eb 81       	ldd	r30, Y+3	; 0x03
     974:	fc 81       	ldd	r31, Y+4	; 0x04
     976:	cf 01       	movw	r24, r30
     978:	a0 e0       	ldi	r26, 0x00	; 0
     97a:	b0 e0       	ldi	r27, 0x00	; 0
     97c:	8a 0d       	add	r24, r10
     97e:	9b 1d       	adc	r25, r11
     980:	ac 1d       	adc	r26, r12
     982:	bd 1d       	adc	r27, r13
     984:	28 17       	cp	r18, r24
     986:	39 07       	cpc	r19, r25
     988:	4a 07       	cpc	r20, r26
     98a:	5b 07       	cpc	r21, r27
     98c:	40 f4       	brcc	.+16     	; 0x99e <fat_read_file+0x96>
        buffer_len = fd->dir_entry.file_size - fd->pos;
     98e:	b9 01       	movw	r22, r18
     990:	6a 19       	sub	r22, r10
     992:	7b 09       	sbc	r23, r11
     994:	7c 83       	std	Y+4, r23	; 0x04
     996:	6b 83       	std	Y+3, r22	; 0x03
    if(buffer_len == 0)
     998:	67 2b       	or	r22, r23
     99a:	09 f4       	brne	.+2      	; 0x99e <fat_read_file+0x96>
     99c:	e3 c0       	rjmp	.+454    	; 0xb64 <fat_read_file+0x25c>
        return 0;
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
     99e:	d2 01       	movw	r26, r4
     9a0:	ed 91       	ld	r30, X+
     9a2:	fc 91       	ld	r31, X
     9a4:	11 97       	sbiw	r26, 0x01	; 1
     9a6:	20 88       	ldd	r2, Z+16	; 0x10
     9a8:	31 88       	ldd	r3, Z+17	; 0x11
    cluster_t cluster_num = fd->pos_cluster;
     9aa:	d1 96       	adiw	r26, 0x31	; 49
     9ac:	ed 91       	ld	r30, X+
     9ae:	fc 91       	ld	r31, X
     9b0:	d2 97       	sbiw	r26, 0x32	; 50
     9b2:	fa 87       	std	Y+10, r31	; 0x0a
     9b4:	e9 87       	std	Y+9, r30	; 0x09
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));

    /* find cluster in which to start reading */
    if(!cluster_num)
     9b6:	ef 2b       	or	r30, r31
     9b8:	f1 f5       	brne	.+124    	; 0xa36 <fat_read_file+0x12e>
    {
        cluster_num = fd->dir_entry.cluster;
     9ba:	93 96       	adiw	r26, 0x23	; 35
     9bc:	2d 91       	ld	r18, X+
     9be:	3c 91       	ld	r19, X
     9c0:	94 97       	sbiw	r26, 0x24	; 36
     9c2:	3a 87       	std	Y+10, r19	; 0x0a
     9c4:	29 87       	std	Y+9, r18	; 0x09
        
        if(!cluster_num)
     9c6:	23 2b       	or	r18, r19
     9c8:	39 f4       	brne	.+14     	; 0x9d8 <fat_read_file+0xd0>
        {
            if(!fd->pos)
     9ca:	a1 14       	cp	r10, r1
     9cc:	b1 04       	cpc	r11, r1
     9ce:	c1 04       	cpc	r12, r1
     9d0:	d1 04       	cpc	r13, r1
     9d2:	09 f4       	brne	.+2      	; 0x9d6 <fat_read_file+0xce>
     9d4:	c7 c0       	rjmp	.+398    	; 0xb64 <fat_read_file+0x25c>
     9d6:	c3 c0       	rjmp	.+390    	; 0xb5e <fat_read_file+0x256>
                return 0;
            else
                return -1;
        }

        if(fd->pos)
     9d8:	a1 14       	cp	r10, r1
     9da:	b1 04       	cpc	r11, r1
     9dc:	c1 04       	cpc	r12, r1
     9de:	d1 04       	cpc	r13, r1
     9e0:	51 f1       	breq	.+84     	; 0xa36 <fat_read_file+0x12e>
     9e2:	86 01       	movw	r16, r12
     9e4:	75 01       	movw	r14, r10
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
     9e6:	31 01       	movw	r6, r2
     9e8:	88 24       	eor	r8, r8
     9ea:	99 24       	eor	r9, r9
            {
                pos -= cluster_size;
                cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
                if(!cluster_num)
     9ec:	66 27       	eor	r22, r22
     9ee:	77 27       	eor	r23, r23
     9f0:	cb 01       	movw	r24, r22
     9f2:	66 19       	sub	r22, r6
     9f4:	77 09       	sbc	r23, r7
     9f6:	88 09       	sbc	r24, r8
     9f8:	99 09       	sbc	r25, r9
     9fa:	6d 83       	std	Y+5, r22	; 0x05
     9fc:	7e 83       	std	Y+6, r23	; 0x06
     9fe:	8f 83       	std	Y+7, r24	; 0x07
     a00:	98 87       	std	Y+8, r25	; 0x08
     a02:	14 c0       	rjmp	.+40     	; 0xa2c <fat_read_file+0x124>
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
                cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
     a04:	d2 01       	movw	r26, r4
     a06:	8d 91       	ld	r24, X+
     a08:	9c 91       	ld	r25, X
     a0a:	69 85       	ldd	r22, Y+9	; 0x09
     a0c:	7a 85       	ldd	r23, Y+10	; 0x0a
     a0e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <fat_get_next_cluster>
     a12:	9a 87       	std	Y+10, r25	; 0x0a
     a14:	89 87       	std	Y+9, r24	; 0x09
                if(!cluster_num)
     a16:	89 2b       	or	r24, r25
     a18:	09 f4       	brne	.+2      	; 0xa1c <fat_read_file+0x114>
     a1a:	a1 c0       	rjmp	.+322    	; 0xb5e <fat_read_file+0x256>
     a1c:	6d 81       	ldd	r22, Y+5	; 0x05
     a1e:	7e 81       	ldd	r23, Y+6	; 0x06
     a20:	8f 81       	ldd	r24, Y+7	; 0x07
     a22:	98 85       	ldd	r25, Y+8	; 0x08
     a24:	e6 0e       	add	r14, r22
     a26:	f7 1e       	adc	r15, r23
     a28:	08 1f       	adc	r16, r24
     a2a:	19 1f       	adc	r17, r25
        }

        if(fd->pos)
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
     a2c:	e6 14       	cp	r14, r6
     a2e:	f7 04       	cpc	r15, r7
     a30:	08 05       	cpc	r16, r8
     a32:	19 05       	cpc	r17, r9
     a34:	38 f7       	brcc	.-50     	; 0xa04 <fat_read_file+0xfc>
        return 0;
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
    cluster_t cluster_num = fd->pos_cluster;
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
     a36:	08 94       	sec
     a38:	21 08       	sbc	r2, r1
     a3a:	31 08       	sbc	r3, r1
     a3c:	a2 20       	and	r10, r2
     a3e:	b3 20       	and	r11, r3
     a40:	08 94       	sec
     a42:	21 1c       	adc	r2, r1
     a44:	31 1c       	adc	r3, r1
     a46:	cb 80       	ldd	r12, Y+3	; 0x03
     a48:	dc 80       	ldd	r13, Y+4	; 0x04
    
    /* read data */
    do
    {
        /* calculate data size to copy from cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
     a4a:	d2 01       	movw	r26, r4
     a4c:	ed 90       	ld	r14, X+
     a4e:	fc 90       	ld	r15, X
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
     a50:	e1 14       	cp	r14, r1
     a52:	f1 04       	cpc	r15, r1
     a54:	09 f1       	breq	.+66     	; 0xa98 <fat_read_file+0x190>
     a56:	e9 85       	ldd	r30, Y+9	; 0x09
     a58:	fa 85       	ldd	r31, Y+10	; 0x0a
     a5a:	e2 30       	cpi	r30, 0x02	; 2
     a5c:	f1 05       	cpc	r31, r1
     a5e:	e0 f0       	brcs	.+56     	; 0xa98 <fat_read_file+0x190>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
     a60:	32 97       	sbiw	r30, 0x02	; 2
     a62:	bf 01       	movw	r22, r30
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	32 96       	adiw	r30, 0x02	; 2
     a6a:	fa 87       	std	Y+10, r31	; 0x0a
     a6c:	e9 87       	std	Y+9, r30	; 0x09
     a6e:	d7 01       	movw	r26, r14
     a70:	50 96       	adiw	r26, 0x10	; 16
     a72:	2d 91       	ld	r18, X+
     a74:	3c 91       	ld	r19, X
     a76:	51 97       	sbiw	r26, 0x11	; 17
     a78:	40 e0       	ldi	r20, 0x00	; 0
     a7a:	50 e0       	ldi	r21, 0x00	; 0
     a7c:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <__mulsi3>
     a80:	9b 01       	movw	r18, r22
     a82:	ac 01       	movw	r20, r24
     a84:	f7 01       	movw	r30, r14
     a86:	82 89       	ldd	r24, Z+18	; 0x12
     a88:	93 89       	ldd	r25, Z+19	; 0x13
     a8a:	a4 89       	ldd	r26, Z+20	; 0x14
     a8c:	b5 89       	ldd	r27, Z+21	; 0x15
     a8e:	28 0f       	add	r18, r24
     a90:	39 1f       	adc	r19, r25
     a92:	4a 1f       	adc	r20, r26
     a94:	5b 1f       	adc	r21, r27
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <fat_read_file+0x198>
     a98:	20 e0       	ldi	r18, 0x00	; 0
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
    /* read data */
    do
    {
        /* calculate data size to copy from cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
        uint16_t copy_length = cluster_size - first_cluster_offset;
     aa0:	81 01       	movw	r16, r2
     aa2:	0a 19       	sub	r16, r10
     aa4:	1b 09       	sbc	r17, r11
     aa6:	c0 16       	cp	r12, r16
     aa8:	d1 06       	cpc	r13, r17
     aaa:	08 f4       	brcc	.+2      	; 0xaae <fat_read_file+0x1a6>
     aac:	86 01       	movw	r16, r12
        if(copy_length > buffer_left)
            copy_length = buffer_left;

        /* read data */
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
     aae:	d7 01       	movw	r26, r14
     ab0:	ed 91       	ld	r30, X+
     ab2:	fc 91       	ld	r31, X
     ab4:	c5 01       	movw	r24, r10
     ab6:	a0 e0       	ldi	r26, 0x00	; 0
     ab8:	b0 e0       	ldi	r27, 0x00	; 0
     aba:	28 0f       	add	r18, r24
     abc:	39 1f       	adc	r19, r25
     abe:	4a 1f       	adc	r20, r26
     ac0:	5b 1f       	adc	r21, r27
     ac2:	01 90       	ld	r0, Z+
     ac4:	f0 81       	ld	r31, Z
     ac6:	e0 2d       	mov	r30, r0
     ac8:	ca 01       	movw	r24, r20
     aca:	b9 01       	movw	r22, r18
     acc:	49 81       	ldd	r20, Y+1	; 0x01
     ace:	5a 81       	ldd	r21, Y+2	; 0x02
     ad0:	98 01       	movw	r18, r16
     ad2:	09 95       	icall
     ad4:	88 23       	and	r24, r24
     ad6:	41 f1       	breq	.+80     	; 0xb28 <fat_read_file+0x220>
            return buffer_len - buffer_left;

        /* calculate new file position */
        buffer += copy_length;
        buffer_left -= copy_length;
     ad8:	c0 1a       	sub	r12, r16
     ada:	d1 0a       	sbc	r13, r17
        fd->pos += copy_length;
     adc:	c8 01       	movw	r24, r16
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	f2 01       	movw	r30, r4
     ae4:	25 a5       	ldd	r18, Z+45	; 0x2d
     ae6:	36 a5       	ldd	r19, Z+46	; 0x2e
     ae8:	47 a5       	ldd	r20, Z+47	; 0x2f
     aea:	50 a9       	ldd	r21, Z+48	; 0x30
     aec:	28 0f       	add	r18, r24
     aee:	39 1f       	adc	r19, r25
     af0:	4a 1f       	adc	r20, r26
     af2:	5b 1f       	adc	r21, r27
     af4:	d2 01       	movw	r26, r4
     af6:	9d 96       	adiw	r26, 0x2d	; 45
     af8:	2d 93       	st	X+, r18
     afa:	3d 93       	st	X+, r19
     afc:	4d 93       	st	X+, r20
     afe:	5c 93       	st	X, r21
     b00:	d0 97       	sbiw	r26, 0x30	; 48

        if(first_cluster_offset + copy_length >= cluster_size)
     b02:	c8 01       	movw	r24, r16
     b04:	8a 0d       	add	r24, r10
     b06:	9b 1d       	adc	r25, r11
     b08:	82 15       	cp	r24, r2
     b0a:	93 05       	cpc	r25, r3
     b0c:	a0 f0       	brcs	.+40     	; 0xb36 <fat_read_file+0x22e>
        {
            /* we are on a cluster boundary, so get the next cluster */
            if((cluster_num = fat_get_next_cluster(fd->fs, cluster_num)))
     b0e:	8d 91       	ld	r24, X+
     b10:	9c 91       	ld	r25, X
     b12:	69 85       	ldd	r22, Y+9	; 0x09
     b14:	7a 85       	ldd	r23, Y+10	; 0x0a
     b16:	0e 94 dd 02 	call	0x5ba	; 0x5ba <fat_get_next_cluster>
     b1a:	9a 87       	std	Y+10, r25	; 0x0a
     b1c:	89 87       	std	Y+9, r24	; 0x09
     b1e:	89 2b       	or	r24, r25
     b20:	41 f4       	brne	.+16     	; 0xb32 <fat_read_file+0x22a>
            {
                first_cluster_offset = 0;
            }
            else
            {
                fd->pos_cluster = 0;
     b22:	f2 01       	movw	r30, r4
     b24:	12 aa       	std	Z+50, r1	; 0x32
     b26:	11 aa       	std	Z+49, r1	; 0x31
                return buffer_len - buffer_left;
     b28:	4b 81       	ldd	r20, Y+3	; 0x03
     b2a:	5c 81       	ldd	r21, Y+4	; 0x04
     b2c:	4c 19       	sub	r20, r12
     b2e:	5d 09       	sbc	r21, r13
     b30:	1b c0       	rjmp	.+54     	; 0xb68 <fat_read_file+0x260>
     b32:	aa 24       	eor	r10, r10
     b34:	bb 24       	eor	r11, r11
            }
        }

        fd->pos_cluster = cluster_num;
     b36:	e9 85       	ldd	r30, Y+9	; 0x09
     b38:	fa 85       	ldd	r31, Y+10	; 0x0a
     b3a:	d2 01       	movw	r26, r4
     b3c:	d2 96       	adiw	r26, 0x32	; 50
     b3e:	fc 93       	st	X, r31
     b40:	ee 93       	st	-X, r30
     b42:	d1 97       	sbiw	r26, 0x31	; 49

    } while(buffer_left > 0); /* check if we are done */
     b44:	c1 14       	cp	r12, r1
     b46:	d1 04       	cpc	r13, r1
     b48:	39 f0       	breq	.+14     	; 0xb58 <fat_read_file+0x250>
        /* read data */
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
            return buffer_len - buffer_left;

        /* calculate new file position */
        buffer += copy_length;
     b4a:	29 81       	ldd	r18, Y+1	; 0x01
     b4c:	3a 81       	ldd	r19, Y+2	; 0x02
     b4e:	20 0f       	add	r18, r16
     b50:	31 1f       	adc	r19, r17
     b52:	3a 83       	std	Y+2, r19	; 0x02
     b54:	29 83       	std	Y+1, r18	; 0x01
     b56:	79 cf       	rjmp	.-270    	; 0xa4a <fat_read_file+0x142>

        fd->pos_cluster = cluster_num;

    } while(buffer_left > 0); /* check if we are done */

    return buffer_len;
     b58:	4b 81       	ldd	r20, Y+3	; 0x03
     b5a:	5c 81       	ldd	r21, Y+4	; 0x04
     b5c:	05 c0       	rjmp	.+10     	; 0xb68 <fat_read_file+0x260>
     b5e:	4f ef       	ldi	r20, 0xFF	; 255
     b60:	5f ef       	ldi	r21, 0xFF	; 255
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <fat_read_file+0x260>
     b64:	40 e0       	ldi	r20, 0x00	; 0
     b66:	50 e0       	ldi	r21, 0x00	; 0
}
     b68:	ca 01       	movw	r24, r20
     b6a:	2a 96       	adiw	r28, 0x0a	; 10
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	f8 94       	cli
     b70:	de bf       	out	0x3e, r29	; 62
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	cd bf       	out	0x3d, r28	; 61
     b76:	cf 91       	pop	r28
     b78:	df 91       	pop	r29
     b7a:	1f 91       	pop	r17
     b7c:	0f 91       	pop	r16
     b7e:	ff 90       	pop	r15
     b80:	ef 90       	pop	r14
     b82:	df 90       	pop	r13
     b84:	cf 90       	pop	r12
     b86:	bf 90       	pop	r11
     b88:	af 90       	pop	r10
     b8a:	9f 90       	pop	r9
     b8c:	8f 90       	pop	r8
     b8e:	7f 90       	pop	r7
     b90:	6f 90       	pop	r6
     b92:	5f 90       	pop	r5
     b94:	4f 90       	pop	r4
     b96:	3f 90       	pop	r3
     b98:	2f 90       	pop	r2
     b9a:	08 95       	ret

00000b9c <fat_close_dir>:
 *
 * \param[in] dd The directory descriptor to close.
 * \see fat_open_dir
 */
void fat_close_dir(struct fat_dir_struct* dd)
{
     b9c:	fc 01       	movw	r30, r24
    if(dd)
     b9e:	00 97       	sbiw	r24, 0x00	; 0
     ba0:	11 f0       	breq	.+4      	; 0xba6 <fat_close_dir+0xa>
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
     ba2:	11 82       	std	Z+1, r1	; 0x01
     ba4:	10 82       	st	Z, r1
     ba6:	08 95       	ret

00000ba8 <fat_reset_dir>:
 * \param[in] dd The directory handle to reset.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
     ba8:	fc 01       	movw	r30, r24
    if(!dd)
     baa:	00 97       	sbiw	r24, 0x00	; 0
     bac:	11 f4       	brne	.+4      	; 0xbb2 <fat_reset_dir+0xa>
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	08 95       	ret
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
     bb2:	83 a1       	ldd	r24, Z+35	; 0x23
     bb4:	94 a1       	ldd	r25, Z+36	; 0x24
     bb6:	96 a7       	std	Z+46, r25	; 0x2e
     bb8:	85 a7       	std	Z+45, r24	; 0x2d
    dd->entry_offset = 0;
     bba:	10 aa       	std	Z+48, r1	; 0x30
     bbc:	17 a6       	std	Z+47, r1	; 0x2f
     bbe:	81 e0       	ldi	r24, 0x01	; 1
    return 1;
}
     bc0:	08 95       	ret

00000bc2 <fat_delete_file>:
 * \param[in] dir_entry The directory entry of the file to delete.
 * \returns 0 on failure, 1 on success.
 * \see fat_create_file
 */
uint8_t fat_delete_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
     bc2:	7f 92       	push	r7
     bc4:	8f 92       	push	r8
     bc6:	9f 92       	push	r9
     bc8:	af 92       	push	r10
     bca:	bf 92       	push	r11
     bcc:	cf 92       	push	r12
     bce:	df 92       	push	r13
     bd0:	ef 92       	push	r14
     bd2:	ff 92       	push	r15
     bd4:	0f 93       	push	r16
     bd6:	1f 93       	push	r17
     bd8:	df 93       	push	r29
     bda:	cf 93       	push	r28
     bdc:	cd b7       	in	r28, 0x3d	; 61
     bde:	de b7       	in	r29, 0x3e	; 62
     be0:	2c 97       	sbiw	r28, 0x0c	; 12
     be2:	0f b6       	in	r0, 0x3f	; 63
     be4:	f8 94       	cli
     be6:	de bf       	out	0x3e, r29	; 62
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	cd bf       	out	0x3d, r28	; 61
     bec:	6c 01       	movw	r12, r24
     bee:	5b 01       	movw	r10, r22
    if(!fs || !dir_entry)
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <fat_delete_file+0x34>
     bf4:	53 c0       	rjmp	.+166    	; 0xc9c <fat_delete_file+0xda>
     bf6:	61 15       	cp	r22, r1
     bf8:	71 05       	cpc	r23, r1
     bfa:	09 f4       	brne	.+2      	; 0xbfe <fat_delete_file+0x3c>
     bfc:	4f c0       	rjmp	.+158    	; 0xc9c <fat_delete_file+0xda>
        return 0;

    /* get offset of the file's directory entry */
    offset_t dir_entry_offset = dir_entry->entry_offset;
     bfe:	db 01       	movw	r26, r22
     c00:	97 96       	adiw	r26, 0x27	; 39
     c02:	ed 90       	ld	r14, X+
     c04:	fd 90       	ld	r15, X+
     c06:	0d 91       	ld	r16, X+
     c08:	1c 91       	ld	r17, X
     c0a:	9a 97       	sbiw	r26, 0x2a	; 42
    if(!dir_entry_offset)
     c0c:	e1 14       	cp	r14, r1
     c0e:	f1 04       	cpc	r15, r1
     c10:	01 05       	cpc	r16, r1
     c12:	11 05       	cpc	r17, r1
     c14:	09 f4       	brne	.+2      	; 0xc18 <fat_delete_file+0x56>
     c16:	42 c0       	rjmp	.+132    	; 0xc9c <fat_delete_file+0xda>
#if FAT_LFN_SUPPORT
    uint8_t buffer[12];
    while(1)
    {
        /* read directory entry */
        if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
     c18:	4e 01       	movw	r8, r28
     c1a:	08 94       	sec
     c1c:	81 1c       	adc	r8, r1
     c1e:	91 1c       	adc	r9, r1
            return 0;
        
        /* mark the directory entry as deleted */
        buffer[0] = FAT_DIRENTRY_DELETED;
     c20:	e5 ee       	ldi	r30, 0xE5	; 229
     c22:	7e 2e       	mov	r7, r30
#if FAT_LFN_SUPPORT
    uint8_t buffer[12];
    while(1)
    {
        /* read directory entry */
        if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
     c24:	d6 01       	movw	r26, r12
     c26:	ed 91       	ld	r30, X+
     c28:	fc 91       	ld	r31, X
     c2a:	01 90       	ld	r0, Z+
     c2c:	f0 81       	ld	r31, Z
     c2e:	e0 2d       	mov	r30, r0
     c30:	c8 01       	movw	r24, r16
     c32:	b7 01       	movw	r22, r14
     c34:	a4 01       	movw	r20, r8
     c36:	2c e0       	ldi	r18, 0x0C	; 12
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	09 95       	icall
     c3c:	88 23       	and	r24, r24
     c3e:	71 f1       	breq	.+92     	; 0xc9c <fat_delete_file+0xda>
            return 0;
        
        /* mark the directory entry as deleted */
        buffer[0] = FAT_DIRENTRY_DELETED;
     c40:	79 82       	std	Y+1, r7	; 0x01
        
        /* write back entry */
        if(!fs->partition->device_write(dir_entry_offset, buffer, sizeof(buffer)))
     c42:	d6 01       	movw	r26, r12
     c44:	ed 91       	ld	r30, X+
     c46:	fc 91       	ld	r31, X
     c48:	04 80       	ldd	r0, Z+4	; 0x04
     c4a:	f5 81       	ldd	r31, Z+5	; 0x05
     c4c:	e0 2d       	mov	r30, r0
     c4e:	c8 01       	movw	r24, r16
     c50:	b7 01       	movw	r22, r14
     c52:	a4 01       	movw	r20, r8
     c54:	2c e0       	ldi	r18, 0x0C	; 12
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	09 95       	icall
     c5a:	88 23       	and	r24, r24
     c5c:	f9 f0       	breq	.+62     	; 0xc9c <fat_delete_file+0xda>
            return 0;

        /* check if we deleted the whole entry */
        if(buffer[11] != 0x0f)
     c5e:	8c 85       	ldd	r24, Y+12	; 0x0c
     c60:	8f 30       	cpi	r24, 0x0F	; 15
     c62:	49 f4       	brne	.+18     	; 0xc76 <fat_delete_file+0xb4>
            break;

        dir_entry_offset += 32;
     c64:	80 e2       	ldi	r24, 0x20	; 32
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	a0 e0       	ldi	r26, 0x00	; 0
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	e8 0e       	add	r14, r24
     c6e:	f9 1e       	adc	r15, r25
     c70:	0a 1f       	adc	r16, r26
     c72:	1b 1f       	adc	r17, r27
     c74:	d7 cf       	rjmp	.-82     	; 0xc24 <fat_delete_file+0x62>
#endif

    /* We deleted the directory entry. The next thing to do is
     * marking all occupied clusters as free.
     */
    return (dir_entry->cluster == 0 || fat_free_clusters(fs, dir_entry->cluster));
     c76:	d5 01       	movw	r26, r10
     c78:	91 96       	adiw	r26, 0x21	; 33
     c7a:	6d 91       	ld	r22, X+
     c7c:	7c 91       	ld	r23, X
     c7e:	92 97       	sbiw	r26, 0x22	; 34
     c80:	61 15       	cp	r22, r1
     c82:	71 05       	cpc	r23, r1
     c84:	39 f0       	breq	.+14     	; 0xc94 <fat_delete_file+0xd2>
     c86:	c6 01       	movw	r24, r12
     c88:	0e 94 1d 03 	call	0x63a	; 0x63a <fat_free_clusters>
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	88 23       	and	r24, r24
     c92:	11 f0       	breq	.+4      	; 0xc98 <fat_delete_file+0xd6>
     c94:	21 e0       	ldi	r18, 0x01	; 1
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	82 2f       	mov	r24, r18
     c9a:	01 c0       	rjmp	.+2      	; 0xc9e <fat_delete_file+0xdc>
     c9c:	80 e0       	ldi	r24, 0x00	; 0
}
     c9e:	2c 96       	adiw	r28, 0x0c	; 12
     ca0:	0f b6       	in	r0, 0x3f	; 63
     ca2:	f8 94       	cli
     ca4:	de bf       	out	0x3e, r29	; 62
     ca6:	0f be       	out	0x3f, r0	; 63
     ca8:	cd bf       	out	0x3d, r28	; 61
     caa:	cf 91       	pop	r28
     cac:	df 91       	pop	r29
     cae:	1f 91       	pop	r17
     cb0:	0f 91       	pop	r16
     cb2:	ff 90       	pop	r15
     cb4:	ef 90       	pop	r14
     cb6:	df 90       	pop	r13
     cb8:	cf 90       	pop	r12
     cba:	bf 90       	pop	r11
     cbc:	af 90       	pop	r10
     cbe:	9f 90       	pop	r9
     cc0:	8f 90       	pop	r8
     cc2:	7f 90       	pop	r7
     cc4:	08 95       	ret

00000cc6 <fat_get_fs_size>:
 *
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the filesystem size in bytes otherwise.
 */
offset_t fat_get_fs_size(const struct fat_fs_struct* fs)
{
     cc6:	fc 01       	movw	r30, r24
    if(!fs)
     cc8:	00 97       	sbiw	r24, 0x00	; 0
     cca:	29 f4       	brne	.+10     	; 0xcd6 <fat_get_fs_size+0x10>
     ccc:	20 e0       	ldi	r18, 0x00	; 0
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	40 e0       	ldi	r20, 0x00	; 0
     cd2:	50 e0       	ldi	r21, 0x00	; 0
     cd4:	14 c0       	rjmp	.+40     	; 0xcfe <fat_get_fs_size+0x38>
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
        return (offset_t) (fs->header.fat_size / 4 - 2) * fs->header.cluster_size;
    else
#endif
        return (offset_t) (fs->header.fat_size / 2 - 2) * fs->header.cluster_size;
     cd6:	62 85       	ldd	r22, Z+10	; 0x0a
     cd8:	73 85       	ldd	r23, Z+11	; 0x0b
     cda:	84 85       	ldd	r24, Z+12	; 0x0c
     cdc:	95 85       	ldd	r25, Z+13	; 0x0d
     cde:	96 95       	lsr	r25
     ce0:	87 95       	ror	r24
     ce2:	77 95       	ror	r23
     ce4:	67 95       	ror	r22
     ce6:	62 50       	subi	r22, 0x02	; 2
     ce8:	70 40       	sbci	r23, 0x00	; 0
     cea:	80 40       	sbci	r24, 0x00	; 0
     cec:	90 40       	sbci	r25, 0x00	; 0
     cee:	20 89       	ldd	r18, Z+16	; 0x10
     cf0:	31 89       	ldd	r19, Z+17	; 0x11
     cf2:	40 e0       	ldi	r20, 0x00	; 0
     cf4:	50 e0       	ldi	r21, 0x00	; 0
     cf6:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <__mulsi3>
     cfa:	9b 01       	movw	r18, r22
     cfc:	ac 01       	movw	r20, r24
}
     cfe:	b9 01       	movw	r22, r18
     d00:	ca 01       	movw	r24, r20
     d02:	08 95       	ret

00000d04 <fat_get_fs_free>:
 *
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the free filesystem space in bytes otherwise.
 */
offset_t fat_get_fs_free(const struct fat_fs_struct* fs)
{
     d04:	2f 92       	push	r2
     d06:	3f 92       	push	r3
     d08:	4f 92       	push	r4
     d0a:	5f 92       	push	r5
     d0c:	6f 92       	push	r6
     d0e:	7f 92       	push	r7
     d10:	8f 92       	push	r8
     d12:	9f 92       	push	r9
     d14:	af 92       	push	r10
     d16:	bf 92       	push	r11
     d18:	cf 92       	push	r12
     d1a:	df 92       	push	r13
     d1c:	ef 92       	push	r14
     d1e:	ff 92       	push	r15
     d20:	0f 93       	push	r16
     d22:	1f 93       	push	r17
     d24:	df 93       	push	r29
     d26:	cf 93       	push	r28
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
     d2c:	a6 97       	sbiw	r28, 0x26	; 38
     d2e:	0f b6       	in	r0, 0x3f	; 63
     d30:	f8 94       	cli
     d32:	de bf       	out	0x3e, r29	; 62
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	cd bf       	out	0x3d, r28	; 61
     d38:	9e a3       	std	Y+38, r25	; 0x26
     d3a:	8d a3       	std	Y+37, r24	; 0x25
    if(!fs)
     d3c:	89 2b       	or	r24, r25
     d3e:	09 f4       	brne	.+2      	; 0xd42 <fat_get_fs_free+0x3e>
     d40:	5d c0       	rjmp	.+186    	; 0xdfc <fat_get_fs_free+0xf8>
        return 0;

    uint8_t fat[32];
    struct fat_usage_count_callback_arg count_arg;
    count_arg.cluster_count = 0;
     d42:	1a 82       	std	Y+2, r1	; 0x02
     d44:	19 82       	std	Y+1, r1	; 0x01
    count_arg.buffer_size = sizeof(fat);
     d46:	80 e2       	ldi	r24, 0x20	; 32
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	9c 83       	std	Y+4, r25	; 0x04
     d4c:	8b 83       	std	Y+3, r24	; 0x03

    offset_t fat_offset = fs->header.fat_offset;
     d4e:	ad a1       	ldd	r26, Y+37	; 0x25
     d50:	be a1       	ldd	r27, Y+38	; 0x26
     d52:	16 96       	adiw	r26, 0x06	; 6
     d54:	4d 90       	ld	r4, X+
     d56:	5d 90       	ld	r5, X+
     d58:	6d 90       	ld	r6, X+
     d5a:	7c 90       	ld	r7, X
     d5c:	19 97       	sbiw	r26, 0x09	; 9
    uint32_t fat_size = fs->header.fat_size;
     d5e:	1a 96       	adiw	r26, 0x0a	; 10
     d60:	8d 90       	ld	r8, X+
     d62:	9d 90       	ld	r9, X+
     d64:	ad 90       	ld	r10, X+
     d66:	bc 90       	ld	r11, X
     d68:	1d 97       	sbiw	r26, 0x0d	; 13
     d6a:	34 c0       	rjmp	.+104    	; 0xdd4 <fat_get_fs_free+0xd0>
    while(fat_size > 0)
    {
        uintptr_t length = UINTPTR_MAX - 1;
        if(fat_size < length)
     d6c:	be ef       	ldi	r27, 0xFE	; 254
     d6e:	8b 16       	cp	r8, r27
     d70:	bf ef       	ldi	r27, 0xFF	; 255
     d72:	9b 06       	cpc	r9, r27
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	ab 06       	cpc	r10, r27
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	bb 06       	cpc	r11, r27
     d7c:	28 f0       	brcs	.+10     	; 0xd88 <fat_get_fs_free+0x84>
     d7e:	1e ef       	ldi	r17, 0xFE	; 254
     d80:	21 2e       	mov	r2, r17
     d82:	1f ef       	ldi	r17, 0xFF	; 255
     d84:	31 2e       	mov	r3, r17
     d86:	01 c0       	rjmp	.+2      	; 0xd8a <fat_get_fs_free+0x86>
            length = fat_size;
     d88:	14 01       	movw	r2, r8

        if(!fs->partition->device_read_interval(fat_offset,
     d8a:	ad a1       	ldd	r26, Y+37	; 0x25
     d8c:	be a1       	ldd	r27, Y+38	; 0x26
     d8e:	ed 91       	ld	r30, X+
     d90:	fc 91       	ld	r31, X
     d92:	02 80       	ldd	r0, Z+2	; 0x02
     d94:	f3 81       	ldd	r31, Z+3	; 0x03
     d96:	e0 2d       	mov	r30, r0
     d98:	c3 01       	movw	r24, r6
     d9a:	b2 01       	movw	r22, r4
     d9c:	ae 01       	movw	r20, r28
     d9e:	4b 5f       	subi	r20, 0xFB	; 251
     da0:	5f 4f       	sbci	r21, 0xFF	; 255
     da2:	20 e2       	ldi	r18, 0x20	; 32
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	81 01       	movw	r16, r2
     da8:	bd e1       	ldi	r27, 0x1D	; 29
     daa:	eb 2e       	mov	r14, r27
     dac:	b7 e0       	ldi	r27, 0x07	; 7
     dae:	fb 2e       	mov	r15, r27
     db0:	6e 01       	movw	r12, r28
     db2:	08 94       	sec
     db4:	c1 1c       	adc	r12, r1
     db6:	d1 1c       	adc	r13, r1
     db8:	09 95       	icall
     dba:	88 23       	and	r24, r24
     dbc:	f9 f0       	breq	.+62     	; 0xdfc <fat_get_fs_free+0xf8>
                                                &count_arg
                                               )
          )
            return 0;

        fat_offset += length;
     dbe:	c1 01       	movw	r24, r2
     dc0:	a0 e0       	ldi	r26, 0x00	; 0
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	48 0e       	add	r4, r24
     dc6:	59 1e       	adc	r5, r25
     dc8:	6a 1e       	adc	r6, r26
     dca:	7b 1e       	adc	r7, r27
        fat_size -= length;
     dcc:	88 1a       	sub	r8, r24
     dce:	99 0a       	sbc	r9, r25
     dd0:	aa 0a       	sbc	r10, r26
     dd2:	bb 0a       	sbc	r11, r27
    count_arg.cluster_count = 0;
    count_arg.buffer_size = sizeof(fat);

    offset_t fat_offset = fs->header.fat_offset;
    uint32_t fat_size = fs->header.fat_size;
    while(fat_size > 0)
     dd4:	81 14       	cp	r8, r1
     dd6:	91 04       	cpc	r9, r1
     dd8:	a1 04       	cpc	r10, r1
     dda:	b1 04       	cpc	r11, r1
     ddc:	39 f6       	brne	.-114    	; 0xd6c <fat_get_fs_free+0x68>

        fat_offset += length;
        fat_size -= length;
    }

    return (offset_t) count_arg.cluster_count * fs->header.cluster_size;
     dde:	ed a1       	ldd	r30, Y+37	; 0x25
     de0:	fe a1       	ldd	r31, Y+38	; 0x26
     de2:	60 89       	ldd	r22, Z+16	; 0x10
     de4:	71 89       	ldd	r23, Z+17	; 0x11
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	29 81       	ldd	r18, Y+1	; 0x01
     dec:	3a 81       	ldd	r19, Y+2	; 0x02
     dee:	40 e0       	ldi	r20, 0x00	; 0
     df0:	50 e0       	ldi	r21, 0x00	; 0
     df2:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <__mulsi3>
     df6:	9b 01       	movw	r18, r22
     df8:	ac 01       	movw	r20, r24
     dfa:	04 c0       	rjmp	.+8      	; 0xe04 <fat_get_fs_free+0x100>
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	40 e0       	ldi	r20, 0x00	; 0
     e02:	50 e0       	ldi	r21, 0x00	; 0
}
     e04:	b9 01       	movw	r22, r18
     e06:	ca 01       	movw	r24, r20
     e08:	a6 96       	adiw	r28, 0x26	; 38
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	f8 94       	cli
     e0e:	de bf       	out	0x3e, r29	; 62
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	cd bf       	out	0x3d, r28	; 61
     e14:	cf 91       	pop	r28
     e16:	df 91       	pop	r29
     e18:	1f 91       	pop	r17
     e1a:	0f 91       	pop	r16
     e1c:	ff 90       	pop	r15
     e1e:	ef 90       	pop	r14
     e20:	df 90       	pop	r13
     e22:	cf 90       	pop	r12
     e24:	bf 90       	pop	r11
     e26:	af 90       	pop	r10
     e28:	9f 90       	pop	r9
     e2a:	8f 90       	pop	r8
     e2c:	7f 90       	pop	r7
     e2e:	6f 90       	pop	r6
     e30:	5f 90       	pop	r5
     e32:	4f 90       	pop	r4
     e34:	3f 90       	pop	r3
     e36:	2f 90       	pop	r2
     e38:	08 95       	ret

00000e3a <fat_get_fs_free_16_callback>:
/**
 * \ingroup fat_fs
 * Callback function used for counting free clusters in a FAT.
 */
uint8_t fat_get_fs_free_16_callback(uint8_t* buffer, offset_t offset, void* p)
{
     e3a:	dc 01       	movw	r26, r24
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
     e3c:	f9 01       	movw	r30, r18
    uintptr_t buffer_size = count_arg->buffer_size;
     e3e:	42 81       	ldd	r20, Z+2	; 0x02
     e40:	53 81       	ldd	r21, Z+3	; 0x03
     e42:	20 e0       	ldi	r18, 0x00	; 0
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	0d c0       	rjmp	.+26     	; 0xe62 <fat_get_fs_free_16_callback+0x28>

    for(uintptr_t i = 0; i < buffer_size; i += 2, buffer += 2)
    {
        uint16_t cluster = *((uint16_t*) &buffer[0]);
        if(cluster == HTOL16(FAT16_CLUSTER_FREE))
     e48:	8d 91       	ld	r24, X+
     e4a:	9c 91       	ld	r25, X
     e4c:	11 97       	sbiw	r26, 0x01	; 1
     e4e:	89 2b       	or	r24, r25
     e50:	29 f4       	brne	.+10     	; 0xe5c <fat_get_fs_free_16_callback+0x22>
            ++(count_arg->cluster_count);
     e52:	80 81       	ld	r24, Z
     e54:	91 81       	ldd	r25, Z+1	; 0x01
     e56:	01 96       	adiw	r24, 0x01	; 1
     e58:	91 83       	std	Z+1, r25	; 0x01
     e5a:	80 83       	st	Z, r24
uint8_t fat_get_fs_free_16_callback(uint8_t* buffer, offset_t offset, void* p)
{
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    uintptr_t buffer_size = count_arg->buffer_size;

    for(uintptr_t i = 0; i < buffer_size; i += 2, buffer += 2)
     e5c:	2e 5f       	subi	r18, 0xFE	; 254
     e5e:	3f 4f       	sbci	r19, 0xFF	; 255
     e60:	12 96       	adiw	r26, 0x02	; 2
     e62:	24 17       	cp	r18, r20
     e64:	35 07       	cpc	r19, r21
     e66:	80 f3       	brcs	.-32     	; 0xe48 <fat_get_fs_free_16_callback+0xe>
        if(cluster == HTOL16(FAT16_CLUSTER_FREE))
            ++(count_arg->cluster_count);
    }

    return 1;
}
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	08 95       	ret

00000e6c <sd_raw_available>:
 * \returns 1 if the card is available, 0 if it is not.
 */
uint8_t sd_raw_available()
{
    return get_pin_available() == 0x00;
}
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	08 95       	ret

00000e70 <sd_raw_locked>:
 * \returns 1 if the card is locked, 0 if it is not.
 */
uint8_t sd_raw_locked()
{
    return get_pin_locked() == 0x00;
}
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	08 95       	ret

00000e74 <sd_raw_send_command>:
 * \param[in] command The command to send.
 * \param[in] arg The argument for command.
 * \returns The command answer.
 */
uint8_t sd_raw_send_command(uint8_t command, uint32_t arg)
{
     e74:	28 2f       	mov	r18, r24
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
     e76:	8f ef       	ldi	r24, 0xFF	; 255
     e78:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
     e7a:	0d b4       	in	r0, 0x2d	; 45
     e7c:	07 fe       	sbrs	r0, 7
     e7e:	fd cf       	rjmp	.-6      	; 0xe7a <sd_raw_send_command+0x6>
    SPSR &= ~(1 << SPIF);
     e80:	8d b5       	in	r24, 0x2d	; 45
     e82:	8f 77       	andi	r24, 0x7F	; 127
     e84:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
     e86:	8e b5       	in	r24, 0x2e	; 46

    /* wait some clock cycles */
    sd_raw_rec_byte();

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
     e88:	82 2f       	mov	r24, r18
     e8a:	80 64       	ori	r24, 0x40	; 64
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
     e8c:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
     e8e:	0d b4       	in	r0, 0x2d	; 45
     e90:	07 fe       	sbrs	r0, 7
     e92:	fd cf       	rjmp	.-6      	; 0xe8e <sd_raw_send_command+0x1a>
    SPSR &= ~(1 << SPIF);
     e94:	8d b5       	in	r24, 0x2d	; 45
     e96:	8f 77       	andi	r24, 0x7F	; 127
     e98:	8d bd       	out	0x2d, r24	; 45
    /* wait some clock cycles */
    sd_raw_rec_byte();

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
     e9a:	87 2f       	mov	r24, r23
     e9c:	99 27       	eor	r25, r25
     e9e:	aa 27       	eor	r26, r26
     ea0:	bb 27       	eor	r27, r27
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
     ea2:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
     ea4:	0d b4       	in	r0, 0x2d	; 45
     ea6:	07 fe       	sbrs	r0, 7
     ea8:	fd cf       	rjmp	.-6      	; 0xea4 <sd_raw_send_command+0x30>
    SPSR &= ~(1 << SPIF);
     eaa:	8d b5       	in	r24, 0x2d	; 45
     eac:	8f 77       	andi	r24, 0x7F	; 127
     eae:	8d bd       	out	0x2d, r24	; 45
    sd_raw_rec_byte();

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
     eb0:	cb 01       	movw	r24, r22
     eb2:	aa 27       	eor	r26, r26
     eb4:	bb 27       	eor	r27, r27
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
     eb6:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
     eb8:	0d b4       	in	r0, 0x2d	; 45
     eba:	07 fe       	sbrs	r0, 7
     ebc:	fd cf       	rjmp	.-6      	; 0xeb8 <sd_raw_send_command+0x44>
    SPSR &= ~(1 << SPIF);
     ebe:	8d b5       	in	r24, 0x2d	; 45
     ec0:	8f 77       	andi	r24, 0x7F	; 127
     ec2:	8d bd       	out	0x2d, r24	; 45

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
    sd_raw_send_byte((arg >> 8) & 0xff);
     ec4:	bb 27       	eor	r27, r27
     ec6:	a7 2f       	mov	r26, r23
     ec8:	96 2f       	mov	r25, r22
     eca:	85 2f       	mov	r24, r21
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
     ecc:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
     ece:	0d b4       	in	r0, 0x2d	; 45
     ed0:	07 fe       	sbrs	r0, 7
     ed2:	fd cf       	rjmp	.-6      	; 0xece <sd_raw_send_command+0x5a>
    SPSR &= ~(1 << SPIF);
     ed4:	8d b5       	in	r24, 0x2d	; 45
     ed6:	8f 77       	andi	r24, 0x7F	; 127
     ed8:	8d bd       	out	0x2d, r24	; 45
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
     eda:	4e bd       	out	0x2e, r20	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
     edc:	0d b4       	in	r0, 0x2d	; 45
     ede:	07 fe       	sbrs	r0, 7
     ee0:	fd cf       	rjmp	.-6      	; 0xedc <sd_raw_send_command+0x68>
    SPSR &= ~(1 << SPIF);
     ee2:	8d b5       	in	r24, 0x2d	; 45
     ee4:	8f 77       	andi	r24, 0x7F	; 127
     ee6:	8d bd       	out	0x2d, r24	; 45
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
    sd_raw_send_byte((arg >> 8) & 0xff);
    sd_raw_send_byte((arg >> 0) & 0xff);
    switch(command)
     ee8:	22 23       	and	r18, r18
     eea:	19 f0       	breq	.+6      	; 0xef2 <sd_raw_send_command+0x7e>
     eec:	28 30       	cpi	r18, 0x08	; 8
     eee:	69 f4       	brne	.+26     	; 0xf0a <sd_raw_send_command+0x96>
     ef0:	06 c0       	rjmp	.+12     	; 0xefe <sd_raw_send_command+0x8a>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
     ef2:	85 e9       	ldi	r24, 0x95	; 149
     ef4:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
     ef6:	0d b4       	in	r0, 0x2d	; 45
     ef8:	07 fe       	sbrs	r0, 7
     efa:	fd cf       	rjmp	.-6      	; 0xef6 <sd_raw_send_command+0x82>
     efc:	0b c0       	rjmp	.+22     	; 0xf14 <sd_raw_send_command+0xa0>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
     efe:	87 e8       	ldi	r24, 0x87	; 135
     f00:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
     f02:	0d b4       	in	r0, 0x2d	; 45
     f04:	07 fe       	sbrs	r0, 7
     f06:	fd cf       	rjmp	.-6      	; 0xf02 <sd_raw_send_command+0x8e>
     f08:	05 c0       	rjmp	.+10     	; 0xf14 <sd_raw_send_command+0xa0>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
     f0a:	8f ef       	ldi	r24, 0xFF	; 255
     f0c:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
     f0e:	0d b4       	in	r0, 0x2d	; 45
     f10:	07 fe       	sbrs	r0, 7
     f12:	fd cf       	rjmp	.-6      	; 0xf0e <sd_raw_send_command+0x9a>
    SPSR &= ~(1 << SPIF);
     f14:	8d b5       	in	r24, 0x2d	; 45
     f16:	8f 77       	andi	r24, 0x7F	; 127
     f18:	8d bd       	out	0x2d, r24	; 45
     f1a:	90 e0       	ldi	r25, 0x00	; 0
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
     f1c:	2f ef       	ldi	r18, 0xFF	; 255
     f1e:	2e bd       	out	0x2e, r18	; 46
    while(!(SPSR & (1 << SPIF)));
     f20:	0d b4       	in	r0, 0x2d	; 45
     f22:	07 fe       	sbrs	r0, 7
     f24:	fd cf       	rjmp	.-6      	; 0xf20 <sd_raw_send_command+0xac>
    SPSR &= ~(1 << SPIF);
     f26:	8d b5       	in	r24, 0x2d	; 45
     f28:	8f 77       	andi	r24, 0x7F	; 127
     f2a:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
     f2c:	8e b5       	in	r24, 0x2e	; 46
    
    /* receive response */
    for(uint8_t i = 0; i < 10; ++i)
    {
        response = sd_raw_rec_byte();
        if(response != 0xff)
     f2e:	8f 3f       	cpi	r24, 0xFF	; 255
     f30:	19 f4       	brne	.+6      	; 0xf38 <sd_raw_send_command+0xc4>
           sd_raw_send_byte(0xff);
           break;
    }
    
    /* receive response */
    for(uint8_t i = 0; i < 10; ++i)
     f32:	9f 5f       	subi	r25, 0xFF	; 255
     f34:	9a 30       	cpi	r25, 0x0A	; 10
     f36:	99 f7       	brne	.-26     	; 0xf1e <sd_raw_send_command+0xaa>
        if(response != 0xff)
            break;
    }

    return response;
}
     f38:	08 95       	ret

00000f3a <partition_close>:
 * \param[in] partition The partition descriptor to destroy.
 * \returns 0 on failure, 1 on success.
 * \see partition_open
 */
uint8_t partition_close(struct partition_struct* partition)
{
     f3a:	fc 01       	movw	r30, r24
    if(!partition)
     f3c:	00 97       	sbiw	r24, 0x00	; 0
     f3e:	11 f4       	brne	.+4      	; 0xf44 <partition_close+0xa>
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	08 95       	ret

    /* destroy partition descriptor */
#if USE_DYNAMIC_MEMORY
    free(partition);
#else
    partition->type = PARTITION_TYPE_FREE;
     f44:	10 86       	std	Z+8, r1	; 0x08
     f46:	81 e0       	ldi	r24, 0x01	; 1
#endif

    return 1;
}
     f48:	08 95       	ret

00000f4a <partition_open>:
 *                  as a single partition (e.g. for "super floppy" use).
 * \returns 0 on failure, a partition descriptor on success.
 * \see partition_close
 */
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, device_write_interval_t device_write_interval, int8_t index)
{
     f4a:	8f 92       	push	r8
     f4c:	9f 92       	push	r9
     f4e:	af 92       	push	r10
     f50:	bf 92       	push	r11
     f52:	cf 92       	push	r12
     f54:	df 92       	push	r13
     f56:	ef 92       	push	r14
     f58:	ff 92       	push	r15
     f5a:	0f 93       	push	r16
     f5c:	df 93       	push	r29
     f5e:	cf 93       	push	r28
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	60 97       	sbiw	r28, 0x10	; 16
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	de bf       	out	0x3e, r29	; 62
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	cd bf       	out	0x3d, r28	; 61
     f70:	7c 01       	movw	r14, r24
     f72:	6b 01       	movw	r12, r22
     f74:	5a 01       	movw	r10, r20
     f76:	49 01       	movw	r8, r18
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
     f78:	00 97       	sbiw	r24, 0x00	; 0
     f7a:	09 f4       	brne	.+2      	; 0xf7e <partition_open+0x34>
     f7c:	93 c0       	rjmp	.+294    	; 0x10a4 <partition_open+0x15a>
     f7e:	61 15       	cp	r22, r1
     f80:	71 05       	cpc	r23, r1
     f82:	09 f4       	brne	.+2      	; 0xf86 <partition_open+0x3c>
     f84:	8f c0       	rjmp	.+286    	; 0x10a4 <partition_open+0x15a>
     f86:	04 30       	cpi	r16, 0x04	; 4
     f88:	0c f0       	brlt	.+2      	; 0xf8c <partition_open+0x42>
     f8a:	8c c0       	rjmp	.+280    	; 0x10a4 <partition_open+0x15a>
        return 0;

    if(index >= 0)
     f8c:	07 fd       	sbrc	r16, 7
     f8e:	1d c0       	rjmp	.+58     	; 0xfca <partition_open+0x80>
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
     f90:	60 2f       	mov	r22, r16
     f92:	77 27       	eor	r23, r23
     f94:	67 fd       	sbrc	r22, 7
     f96:	70 95       	com	r23
     f98:	e4 e0       	ldi	r30, 0x04	; 4
     f9a:	66 0f       	add	r22, r22
     f9c:	77 1f       	adc	r23, r23
     f9e:	ea 95       	dec	r30
     fa0:	e1 f7       	brne	.-8      	; 0xf9a <partition_open+0x50>
     fa2:	62 54       	subi	r22, 0x42	; 66
     fa4:	7e 4f       	sbci	r23, 0xFE	; 254
     fa6:	88 27       	eor	r24, r24
     fa8:	77 fd       	sbrc	r23, 7
     faa:	80 95       	com	r24
     fac:	98 2f       	mov	r25, r24
     fae:	ae 01       	movw	r20, r28
     fb0:	4f 5f       	subi	r20, 0xFF	; 255
     fb2:	5f 4f       	sbci	r21, 0xFF	; 255
     fb4:	20 e1       	ldi	r18, 0x10	; 16
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	f7 01       	movw	r30, r14
     fba:	09 95       	icall
     fbc:	88 23       	and	r24, r24
     fbe:	09 f4       	brne	.+2      	; 0xfc2 <partition_open+0x78>
     fc0:	71 c0       	rjmp	.+226    	; 0x10a4 <partition_open+0x15a>
            return 0;

        /* abort on empty partition entry */
        if(buffer[4] == 0x00)
     fc2:	8d 81       	ldd	r24, Y+5	; 0x05
     fc4:	88 23       	and	r24, r24
     fc6:	09 f4       	brne	.+2      	; 0xfca <partition_open+0x80>
     fc8:	6d c0       	rjmp	.+218    	; 0x10a4 <partition_open+0x15a>
#else
    new_partition = partition_handles;
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
     fca:	80 91 f5 04 	lds	r24, 0x04F5
     fce:	88 23       	and	r24, r24
     fd0:	09 f0       	breq	.+2      	; 0xfd4 <partition_open+0x8a>
     fd2:	68 c0       	rjmp	.+208    	; 0x10a4 <partition_open+0x15a>
     fd4:	7c c0       	rjmp	.+248    	; 0x10ce <partition_open+0x184>
    new_partition->device_write = device_write;
    new_partition->device_write_interval = device_write_interval;

    if(index >= 0)
    {
        new_partition->type = buffer[4];
     fd6:	8d 81       	ldd	r24, Y+5	; 0x05
     fd8:	80 93 f5 04 	sts	0x04F5, r24
        new_partition->offset = ((uint32_t) buffer[8]) |
     fdc:	2a 85       	ldd	r18, Y+10	; 0x0a
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	40 e0       	ldi	r20, 0x00	; 0
     fe2:	50 e0       	ldi	r21, 0x00	; 0
     fe4:	54 2f       	mov	r21, r20
     fe6:	43 2f       	mov	r20, r19
     fe8:	32 2f       	mov	r19, r18
     fea:	22 27       	eor	r18, r18
     fec:	8b 85       	ldd	r24, Y+11	; 0x0b
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	a0 e0       	ldi	r26, 0x00	; 0
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	dc 01       	movw	r26, r24
     ff6:	99 27       	eor	r25, r25
     ff8:	88 27       	eor	r24, r24
     ffa:	28 2b       	or	r18, r24
     ffc:	39 2b       	or	r19, r25
     ffe:	4a 2b       	or	r20, r26
    1000:	5b 2b       	or	r21, r27
    1002:	89 85       	ldd	r24, Y+9	; 0x09
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	a0 e0       	ldi	r26, 0x00	; 0
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	28 2b       	or	r18, r24
    100c:	39 2b       	or	r19, r25
    100e:	4a 2b       	or	r20, r26
    1010:	5b 2b       	or	r21, r27
    1012:	8c 85       	ldd	r24, Y+12	; 0x0c
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	a0 e0       	ldi	r26, 0x00	; 0
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	b8 2f       	mov	r27, r24
    101c:	aa 27       	eor	r26, r26
    101e:	99 27       	eor	r25, r25
    1020:	88 27       	eor	r24, r24
    1022:	28 2b       	or	r18, r24
    1024:	39 2b       	or	r19, r25
    1026:	4a 2b       	or	r20, r26
    1028:	5b 2b       	or	r21, r27
    102a:	20 93 f6 04 	sts	0x04F6, r18
    102e:	30 93 f7 04 	sts	0x04F7, r19
    1032:	40 93 f8 04 	sts	0x04F8, r20
    1036:	50 93 f9 04 	sts	0x04F9, r21
                                ((uint32_t) buffer[9] << 8) |
                                ((uint32_t) buffer[10] << 16) |
                                ((uint32_t) buffer[11] << 24);
        new_partition->length = ((uint32_t) buffer[12]) |
    103a:	2e 85       	ldd	r18, Y+14	; 0x0e
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	40 e0       	ldi	r20, 0x00	; 0
    1040:	50 e0       	ldi	r21, 0x00	; 0
    1042:	54 2f       	mov	r21, r20
    1044:	43 2f       	mov	r20, r19
    1046:	32 2f       	mov	r19, r18
    1048:	22 27       	eor	r18, r18
    104a:	8f 85       	ldd	r24, Y+15	; 0x0f
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	a0 e0       	ldi	r26, 0x00	; 0
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	dc 01       	movw	r26, r24
    1054:	99 27       	eor	r25, r25
    1056:	88 27       	eor	r24, r24
    1058:	28 2b       	or	r18, r24
    105a:	39 2b       	or	r19, r25
    105c:	4a 2b       	or	r20, r26
    105e:	5b 2b       	or	r21, r27
    1060:	8d 85       	ldd	r24, Y+13	; 0x0d
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	a0 e0       	ldi	r26, 0x00	; 0
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	28 2b       	or	r18, r24
    106a:	39 2b       	or	r19, r25
    106c:	4a 2b       	or	r20, r26
    106e:	5b 2b       	or	r21, r27
    1070:	88 89       	ldd	r24, Y+16	; 0x10
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	a0 e0       	ldi	r26, 0x00	; 0
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	b8 2f       	mov	r27, r24
    107a:	aa 27       	eor	r26, r26
    107c:	99 27       	eor	r25, r25
    107e:	88 27       	eor	r24, r24
    1080:	28 2b       	or	r18, r24
    1082:	39 2b       	or	r19, r25
    1084:	4a 2b       	or	r20, r26
    1086:	5b 2b       	or	r21, r27
    1088:	20 93 fa 04 	sts	0x04FA, r18
    108c:	30 93 fb 04 	sts	0x04FB, r19
    1090:	40 93 fc 04 	sts	0x04FC, r20
    1094:	50 93 fd 04 	sts	0x04FD, r21
    1098:	03 c0       	rjmp	.+6      	; 0x10a0 <partition_open+0x156>
                                ((uint32_t) buffer[14] << 16) |
                                ((uint32_t) buffer[15] << 24);
    }
    else
    {
        new_partition->type = 0xff;
    109a:	8f ef       	ldi	r24, 0xFF	; 255
    109c:	80 93 f5 04 	sts	0x04F5, r24
    10a0:	9f 01       	movw	r18, r30
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <partition_open+0x15e>
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    }

    return new_partition;
}
    10a8:	c9 01       	movw	r24, r18
    10aa:	60 96       	adiw	r28, 0x10	; 16
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	de bf       	out	0x3e, r29	; 62
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	cd bf       	out	0x3d, r28	; 61
    10b6:	cf 91       	pop	r28
    10b8:	df 91       	pop	r29
    10ba:	0f 91       	pop	r16
    10bc:	ff 90       	pop	r15
    10be:	ef 90       	pop	r14
    10c0:	df 90       	pop	r13
    10c2:	cf 90       	pop	r12
    10c4:	bf 90       	pop	r11
    10c6:	af 90       	pop	r10
    10c8:	9f 90       	pop	r9
    10ca:	8f 90       	pop	r8
    10cc:	08 95       	ret
    }
    if(i >= PARTITION_COUNT)
        return 0;
#endif

    memset(new_partition, 0, sizeof(*new_partition));
    10ce:	ed ee       	ldi	r30, 0xED	; 237
    10d0:	f4 e0       	ldi	r31, 0x04	; 4
    10d2:	81 e1       	ldi	r24, 0x11	; 17
    10d4:	df 01       	movw	r26, r30
    10d6:	1d 92       	st	X+, r1
    10d8:	8a 95       	dec	r24
    10da:	e9 f7       	brne	.-6      	; 0x10d6 <partition_open+0x18c>

    /* fill partition descriptor */
    new_partition->device_read = device_read;
    10dc:	f0 92 ee 04 	sts	0x04EE, r15
    10e0:	e0 92 ed 04 	sts	0x04ED, r14
    new_partition->device_read_interval = device_read_interval;
    10e4:	d0 92 f0 04 	sts	0x04F0, r13
    10e8:	c0 92 ef 04 	sts	0x04EF, r12
    new_partition->device_write = device_write;
    10ec:	b0 92 f2 04 	sts	0x04F2, r11
    10f0:	a0 92 f1 04 	sts	0x04F1, r10
    new_partition->device_write_interval = device_write_interval;
    10f4:	90 92 f4 04 	sts	0x04F4, r9
    10f8:	80 92 f3 04 	sts	0x04F3, r8

    if(index >= 0)
    10fc:	07 ff       	sbrs	r16, 7
    10fe:	6b cf       	rjmp	.-298    	; 0xfd6 <partition_open+0x8c>
    1100:	cc cf       	rjmp	.-104    	; 0x109a <partition_open+0x150>

00001102 <sd_raw_get_info>:
 *
 * \param[in] info A pointer to the structure into which to save the information.
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_get_info(struct sd_raw_info* info)
{
    1102:	cf 92       	push	r12
    1104:	df 92       	push	r13
    1106:	ef 92       	push	r14
    1108:	ff 92       	push	r15
    110a:	0f 93       	push	r16
    110c:	1f 93       	push	r17
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
    1112:	ec 01       	movw	r28, r24
    if(!info || !sd_raw_available())
    1114:	00 97       	sbiw	r24, 0x00	; 0
    1116:	81 f0       	breq	.+32     	; 0x1138 <sd_raw_get_info+0x36>
        return 0;

    memset(info, 0, sizeof(*info));
    1118:	89 e1       	ldi	r24, 0x19	; 25
    111a:	fe 01       	movw	r30, r28
    111c:	11 92       	st	Z+, r1
    111e:	8a 95       	dec	r24
    1120:	e9 f7       	brne	.-6      	; 0x111c <sd_raw_get_info+0x1a>

    select_card();
    1122:	2a 98       	cbi	0x05, 2	; 5

    /* read cid register */
    if(sd_raw_send_command(CMD_SEND_CID, 0))
    1124:	8a e0       	ldi	r24, 0x0A	; 10
    1126:	40 e0       	ldi	r20, 0x00	; 0
    1128:	50 e0       	ldi	r21, 0x00	; 0
    112a:	60 e0       	ldi	r22, 0x00	; 0
    112c:	70 e0       	ldi	r23, 0x00	; 0
    112e:	0e 94 3a 07 	call	0xe74	; 0xe74 <sd_raw_send_command>
    1132:	88 23       	and	r24, r24
    1134:	19 f0       	breq	.+6      	; 0x113c <sd_raw_get_info+0x3a>
    {
        unselect_card();
    1136:	2a 9a       	sbi	0x05, 2	; 5
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	f7 c0       	rjmp	.+494    	; 0x132a <sd_raw_get_info+0x228>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    113c:	9f ef       	ldi	r25, 0xFF	; 255
    113e:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR & (1 << SPIF)));
    1140:	0d b4       	in	r0, 0x2d	; 45
    1142:	07 fe       	sbrs	r0, 7
    1144:	fd cf       	rjmp	.-6      	; 0x1140 <sd_raw_get_info+0x3e>
    SPSR &= ~(1 << SPIF);
    1146:	8d b5       	in	r24, 0x2d	; 45
    1148:	8f 77       	andi	r24, 0x7F	; 127
    114a:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    114c:	8e b5       	in	r24, 0x2e	; 46
    if(sd_raw_send_command(CMD_SEND_CID, 0))
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    114e:	8e 3f       	cpi	r24, 0xFE	; 254
    1150:	b1 f7       	brne	.-20     	; 0x113e <sd_raw_get_info+0x3c>
    1152:	1c 2f       	mov	r17, r28
    1154:	ce 01       	movw	r24, r28
    1156:	fc 01       	movw	r30, r24
    1158:	60 e6       	ldi	r22, 0x60	; 96
    115a:	70 e0       	ldi	r23, 0x00	; 0
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    115c:	0f ef       	ldi	r16, 0xFF	; 255
    if(sd_raw_send_command(CMD_SEND_CID, 0))
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    115e:	9e 2f       	mov	r25, r30
    1160:	91 1b       	sub	r25, r17
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    1162:	0e bd       	out	0x2e, r16	; 46
    while(!(SPSR & (1 << SPIF)));
    1164:	0d b4       	in	r0, 0x2d	; 45
    1166:	07 fe       	sbrs	r0, 7
    1168:	fd cf       	rjmp	.-6      	; 0x1164 <sd_raw_get_info+0x62>
    SPSR &= ~(1 << SPIF);
    116a:	8d b5       	in	r24, 0x2d	; 45
    116c:	8f 77       	andi	r24, 0x7F	; 127
    116e:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    1170:	2e b5       	in	r18, 0x2e	; 46
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    {
        uint8_t b = sd_raw_rec_byte();

        switch(i)
    1172:	98 30       	cpi	r25, 0x08	; 8
    1174:	28 f4       	brcc	.+10     	; 0x1180 <sd_raw_get_info+0x7e>
    1176:	93 30       	cpi	r25, 0x03	; 3
    1178:	88 f4       	brcc	.+34     	; 0x119c <sd_raw_get_info+0x9a>
    117a:	99 23       	and	r25, r25
    117c:	59 f0       	breq	.+22     	; 0x1194 <sd_raw_get_info+0x92>
    117e:	0c c0       	rjmp	.+24     	; 0x1198 <sd_raw_get_info+0x96>
    1180:	9d 30       	cpi	r25, 0x0D	; 13
    1182:	18 f4       	brcc	.+6      	; 0x118a <sd_raw_get_info+0x88>
    1184:	99 30       	cpi	r25, 0x09	; 9
    1186:	70 f4       	brcc	.+28     	; 0x11a4 <sd_raw_get_info+0xa2>
    1188:	0b c0       	rjmp	.+22     	; 0x11a0 <sd_raw_get_info+0x9e>
    118a:	9d 30       	cpi	r25, 0x0D	; 13
    118c:	19 f1       	breq	.+70     	; 0x11d4 <sd_raw_get_info+0xd2>
    118e:	9e 30       	cpi	r25, 0x0E	; 14
    1190:	69 f5       	brne	.+90     	; 0x11ec <sd_raw_get_info+0xea>
    1192:	24 c0       	rjmp	.+72     	; 0x11dc <sd_raw_get_info+0xda>
        {
            case 0:
                info->manufacturer = b;
    1194:	28 83       	st	Y, r18
    1196:	2a c0       	rjmp	.+84     	; 0x11ec <sd_raw_get_info+0xea>
                break;
            case 1:
            case 2:
                info->oem[i - 1] = b;
    1198:	20 83       	st	Z, r18
    119a:	28 c0       	rjmp	.+80     	; 0x11ec <sd_raw_get_info+0xea>
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
                info->product[i - 3] = b;
    119c:	21 83       	std	Z+1, r18	; 0x01
    119e:	26 c0       	rjmp	.+76     	; 0x11ec <sd_raw_get_info+0xea>
                break;
            case 8:
                info->revision = b;
    11a0:	2a 87       	std	Y+10, r18	; 0x0a
    11a2:	24 c0       	rjmp	.+72     	; 0x11ec <sd_raw_get_info+0xea>
                break;
            case 9:
            case 10:
            case 11:
            case 12:
                info->serial |= (uint32_t) b << ((12 - i) * 8);
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	40 e0       	ldi	r20, 0x00	; 0
    11a8:	50 e0       	ldi	r21, 0x00	; 0
    11aa:	06 2e       	mov	r0, r22
    11ac:	04 c0       	rjmp	.+8      	; 0x11b6 <sd_raw_get_info+0xb4>
    11ae:	22 0f       	add	r18, r18
    11b0:	33 1f       	adc	r19, r19
    11b2:	44 1f       	adc	r20, r20
    11b4:	55 1f       	adc	r21, r21
    11b6:	0a 94       	dec	r0
    11b8:	d2 f7       	brpl	.-12     	; 0x11ae <sd_raw_get_info+0xac>
    11ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    11bc:	9c 85       	ldd	r25, Y+12	; 0x0c
    11be:	ad 85       	ldd	r26, Y+13	; 0x0d
    11c0:	be 85       	ldd	r27, Y+14	; 0x0e
    11c2:	82 2b       	or	r24, r18
    11c4:	93 2b       	or	r25, r19
    11c6:	a4 2b       	or	r26, r20
    11c8:	b5 2b       	or	r27, r21
    11ca:	8b 87       	std	Y+11, r24	; 0x0b
    11cc:	9c 87       	std	Y+12, r25	; 0x0c
    11ce:	ad 87       	std	Y+13, r26	; 0x0d
    11d0:	be 87       	std	Y+14, r27	; 0x0e
    11d2:	0c c0       	rjmp	.+24     	; 0x11ec <sd_raw_get_info+0xea>
                break;
            case 13:
                info->manufacturing_year = b << 4;
    11d4:	22 95       	swap	r18
    11d6:	20 7f       	andi	r18, 0xF0	; 240
    11d8:	2f 87       	std	Y+15, r18	; 0x0f
    11da:	08 c0       	rjmp	.+16     	; 0x11ec <sd_raw_get_info+0xea>
                break;
            case 14:
                info->manufacturing_year |= b >> 4;
    11dc:	92 2f       	mov	r25, r18
    11de:	92 95       	swap	r25
    11e0:	9f 70       	andi	r25, 0x0F	; 15
    11e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    11e4:	89 2b       	or	r24, r25
    11e6:	8f 87       	std	Y+15, r24	; 0x0f
                info->manufacturing_month = b & 0x0f;
    11e8:	2f 70       	andi	r18, 0x0F	; 15
    11ea:	28 8b       	std	Y+16, r18	; 0x10
    11ec:	31 96       	adiw	r30, 0x01	; 1
    11ee:	68 50       	subi	r22, 0x08	; 8
    11f0:	70 40       	sbci	r23, 0x00	; 0
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    11f2:	8f ef       	ldi	r24, 0xFF	; 255
    11f4:	60 3d       	cpi	r22, 0xD0	; 208
    11f6:	78 07       	cpc	r23, r24
    11f8:	09 f0       	breq	.+2      	; 0x11fc <sd_raw_get_info+0xfa>
    11fa:	b1 cf       	rjmp	.-158    	; 0x115e <sd_raw_get_info+0x5c>
#if SD_RAW_SDHC
    uint16_t csd_c_size = 0;
#else
    uint32_t csd_c_size = 0;
#endif
    if(sd_raw_send_command(CMD_SEND_CSD, 0))
    11fc:	89 e0       	ldi	r24, 0x09	; 9
    11fe:	40 e0       	ldi	r20, 0x00	; 0
    1200:	50 e0       	ldi	r21, 0x00	; 0
    1202:	60 e0       	ldi	r22, 0x00	; 0
    1204:	70 e0       	ldi	r23, 0x00	; 0
    1206:	0e 94 3a 07 	call	0xe74	; 0xe74 <sd_raw_send_command>
    120a:	88 23       	and	r24, r24
    120c:	09 f0       	breq	.+2      	; 0x1210 <sd_raw_get_info+0x10e>
    120e:	93 cf       	rjmp	.-218    	; 0x1136 <sd_raw_get_info+0x34>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    1210:	9f ef       	ldi	r25, 0xFF	; 255
    1212:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR & (1 << SPIF)));
    1214:	0d b4       	in	r0, 0x2d	; 45
    1216:	07 fe       	sbrs	r0, 7
    1218:	fd cf       	rjmp	.-6      	; 0x1214 <sd_raw_get_info+0x112>
    SPSR &= ~(1 << SPIF);
    121a:	8d b5       	in	r24, 0x2d	; 45
    121c:	8f 77       	andi	r24, 0x7F	; 127
    121e:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    1220:	8e b5       	in	r24, 0x2e	; 46
    if(sd_raw_send_command(CMD_SEND_CSD, 0))
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    1222:	8e 3f       	cpi	r24, 0xFE	; 254
    1224:	b1 f7       	brne	.-20     	; 0x1212 <sd_raw_get_info+0x110>
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	70 e0       	ldi	r23, 0x00	; 0
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	40 e0       	ldi	r20, 0x00	; 0
    1230:	50 e0       	ldi	r21, 0x00	; 0
    1232:	60 e0       	ldi	r22, 0x00	; 0
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    1234:	1f ef       	ldi	r17, 0xFF	; 255
            if(b & 0x40)
                info->flag_copy = 1;
            if(b & 0x20)
                info->flag_write_protect = 1;
            if(b & 0x10)
                info->flag_write_protect_temp = 1;
    1236:	e1 e0       	ldi	r30, 0x01	; 1
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    1238:	1e bd       	out	0x2e, r17	; 46
    while(!(SPSR & (1 << SPIF)));
    123a:	0d b4       	in	r0, 0x2d	; 45
    123c:	07 fe       	sbrs	r0, 7
    123e:	fd cf       	rjmp	.-6      	; 0x123a <sd_raw_get_info+0x138>
    SPSR &= ~(1 << SPIF);
    1240:	8d b5       	in	r24, 0x2d	; 45
    1242:	8f 77       	andi	r24, 0x7F	; 127
    1244:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    1246:	8e b5       	in	r24, 0x2e	; 46
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    {
        uint8_t b = sd_raw_rec_byte();

        if(i == 14)
    1248:	6e 30       	cpi	r22, 0x0E	; 14
    124a:	79 f4       	brne	.+30     	; 0x126a <sd_raw_get_info+0x168>
        {
            if(b & 0x40)
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	86 fd       	sbrc	r24, 6
                info->flag_copy = 1;
    1250:	ed 8b       	std	Y+21, r30	; 0x15
            if(b & 0x20)
    1252:	85 fd       	sbrc	r24, 5
                info->flag_write_protect = 1;
    1254:	ee 8b       	std	Y+22, r30	; 0x16
            if(b & 0x10)
    1256:	84 fd       	sbrc	r24, 4
                info->flag_write_protect_temp = 1;
    1258:	ef 8b       	std	Y+23, r30	; 0x17
            info->format = (b & 0x0c) >> 2;
    125a:	8c 70       	andi	r24, 0x0C	; 12
    125c:	90 70       	andi	r25, 0x00	; 0
    125e:	95 95       	asr	r25
    1260:	87 95       	ror	r24
    1262:	95 95       	asr	r25
    1264:	87 95       	ror	r24
    1266:	88 8f       	std	Y+24, r24	; 0x18
    1268:	5a c0       	rjmp	.+180    	; 0x131e <sd_raw_get_info+0x21c>
                }
            }
            else
#endif
            {
                switch(i)
    126a:	67 30       	cpi	r22, 0x07	; 7
    126c:	f9 f0       	breq	.+62     	; 0x12ac <sd_raw_get_info+0x1aa>
    126e:	68 30       	cpi	r22, 0x08	; 8
    1270:	30 f4       	brcc	.+12     	; 0x127e <sd_raw_get_info+0x17c>
    1272:	65 30       	cpi	r22, 0x05	; 5
    1274:	61 f0       	breq	.+24     	; 0x128e <sd_raw_get_info+0x18c>
    1276:	66 30       	cpi	r22, 0x06	; 6
    1278:	09 f0       	breq	.+2      	; 0x127c <sd_raw_get_info+0x17a>
    127a:	51 c0       	rjmp	.+162    	; 0x131e <sd_raw_get_info+0x21c>
    127c:	0b c0       	rjmp	.+22     	; 0x1294 <sd_raw_get_info+0x192>
    127e:	69 30       	cpi	r22, 0x09	; 9
    1280:	a1 f1       	breq	.+104    	; 0x12ea <sd_raw_get_info+0x1e8>
    1282:	69 30       	cpi	r22, 0x09	; 9
    1284:	10 f1       	brcs	.+68     	; 0x12ca <sd_raw_get_info+0x1c8>
    1286:	6a 30       	cpi	r22, 0x0A	; 10
    1288:	09 f0       	breq	.+2      	; 0x128c <sd_raw_get_info+0x18a>
    128a:	49 c0       	rjmp	.+146    	; 0x131e <sd_raw_get_info+0x21c>
    128c:	32 c0       	rjmp	.+100    	; 0x12f2 <sd_raw_get_info+0x1f0>
                {
                    case 5:
                        csd_read_bl_len = b & 0x0f;
    128e:	f8 2f       	mov	r31, r24
    1290:	ff 70       	andi	r31, 0x0F	; 15
    1292:	45 c0       	rjmp	.+138    	; 0x131e <sd_raw_get_info+0x21c>
                        break;
                    case 6:
                        csd_c_size = b & 0x03;
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	a0 e0       	ldi	r26, 0x00	; 0
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	83 70       	andi	r24, 0x03	; 3
    129c:	90 70       	andi	r25, 0x00	; 0
    129e:	a0 70       	andi	r26, 0x00	; 0
    12a0:	b0 70       	andi	r27, 0x00	; 0
                        csd_c_size <<= 8;
    12a2:	22 27       	eor	r18, r18
    12a4:	38 2f       	mov	r19, r24
    12a6:	49 2f       	mov	r20, r25
    12a8:	5a 2f       	mov	r21, r26
    12aa:	39 c0       	rjmp	.+114    	; 0x131e <sd_raw_get_info+0x21c>
                        break;
                    case 7:
                        csd_c_size |= b;
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	a0 e0       	ldi	r26, 0x00	; 0
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	28 2b       	or	r18, r24
    12b4:	39 2b       	or	r19, r25
    12b6:	4a 2b       	or	r20, r26
    12b8:	5b 2b       	or	r21, r27
                        csd_c_size <<= 2;
    12ba:	a2 e0       	ldi	r26, 0x02	; 2
    12bc:	22 0f       	add	r18, r18
    12be:	33 1f       	adc	r19, r19
    12c0:	44 1f       	adc	r20, r20
    12c2:	55 1f       	adc	r21, r21
    12c4:	aa 95       	dec	r26
    12c6:	d1 f7       	brne	.-12     	; 0x12bc <sd_raw_get_info+0x1ba>
    12c8:	2a c0       	rjmp	.+84     	; 0x131e <sd_raw_get_info+0x21c>
                        break;
                    case 8:
                        csd_c_size |= b >> 6;
    12ca:	82 95       	swap	r24
    12cc:	86 95       	lsr	r24
    12ce:	86 95       	lsr	r24
    12d0:	83 70       	andi	r24, 0x03	; 3
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	a0 e0       	ldi	r26, 0x00	; 0
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	28 2b       	or	r18, r24
    12da:	39 2b       	or	r19, r25
    12dc:	4a 2b       	or	r20, r26
    12de:	5b 2b       	or	r21, r27
                        ++csd_c_size;
    12e0:	2f 5f       	subi	r18, 0xFF	; 255
    12e2:	3f 4f       	sbci	r19, 0xFF	; 255
    12e4:	4f 4f       	sbci	r20, 0xFF	; 255
    12e6:	5f 4f       	sbci	r21, 0xFF	; 255
    12e8:	1a c0       	rjmp	.+52     	; 0x131e <sd_raw_get_info+0x21c>
                        break;
                    case 9:
                        csd_c_size_mult = b & 0x03;
    12ea:	78 2f       	mov	r23, r24
    12ec:	73 70       	andi	r23, 0x03	; 3
                        csd_c_size_mult <<= 1;
    12ee:	77 0f       	add	r23, r23
    12f0:	16 c0       	rjmp	.+44     	; 0x131e <sd_raw_get_info+0x21c>
                        break;
                    case 10:
                        csd_c_size_mult |= b >> 7;
    12f2:	88 1f       	adc	r24, r24
    12f4:	88 27       	eor	r24, r24
    12f6:	88 1f       	adc	r24, r24
    12f8:	78 2b       	or	r23, r24

                        info->capacity = (uint32_t) csd_c_size << (csd_c_size_mult + csd_read_bl_len + 2);
    12fa:	8f 2f       	mov	r24, r31
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	02 96       	adiw	r24, 0x02	; 2
    1300:	87 0f       	add	r24, r23
    1302:	91 1d       	adc	r25, r1
    1304:	69 01       	movw	r12, r18
    1306:	7a 01       	movw	r14, r20
    1308:	04 c0       	rjmp	.+8      	; 0x1312 <sd_raw_get_info+0x210>
    130a:	cc 0c       	add	r12, r12
    130c:	dd 1c       	adc	r13, r13
    130e:	ee 1c       	adc	r14, r14
    1310:	ff 1c       	adc	r15, r15
    1312:	8a 95       	dec	r24
    1314:	d2 f7       	brpl	.-12     	; 0x130a <sd_raw_get_info+0x208>
    1316:	c9 8a       	std	Y+17, r12	; 0x11
    1318:	da 8a       	std	Y+18, r13	; 0x12
    131a:	eb 8a       	std	Y+19, r14	; 0x13
    131c:	fc 8a       	std	Y+20, r15	; 0x14
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    131e:	6f 5f       	subi	r22, 0xFF	; 255
    1320:	62 31       	cpi	r22, 0x12	; 18
    1322:	09 f0       	breq	.+2      	; 0x1326 <sd_raw_get_info+0x224>
    1324:	89 cf       	rjmp	.-238    	; 0x1238 <sd_raw_get_info+0x136>
                }
            }
        }
    }

    unselect_card();
    1326:	2a 9a       	sbi	0x05, 2	; 5
    1328:	81 e0       	ldi	r24, 0x01	; 1

    return 1;
}
    132a:	df 91       	pop	r29
    132c:	cf 91       	pop	r28
    132e:	1f 91       	pop	r17
    1330:	0f 91       	pop	r16
    1332:	ff 90       	pop	r15
    1334:	ef 90       	pop	r14
    1336:	df 90       	pop	r13
    1338:	cf 90       	pop	r12
    133a:	08 95       	ret

0000133c <fat_clear_cluster>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] cluster_num The cluster to clear.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_clear_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    133c:	cf 92       	push	r12
    133e:	df 92       	push	r13
    1340:	ef 92       	push	r14
    1342:	ff 92       	push	r15
    1344:	0f 93       	push	r16
    1346:	1f 93       	push	r17
    1348:	df 93       	push	r29
    134a:	cf 93       	push	r28
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
    1350:	60 97       	sbiw	r28, 0x10	; 16
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	8c 01       	movw	r16, r24
    if(cluster_num < 2)
    135e:	62 30       	cpi	r22, 0x02	; 2
    1360:	71 05       	cpc	r23, r1
    1362:	10 f4       	brcc	.+4      	; 0x1368 <fat_clear_cluster+0x2c>
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	35 c0       	rjmp	.+106    	; 0x13d2 <fat_clear_cluster+0x96>
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    1368:	00 97       	sbiw	r24, 0x00	; 0
    136a:	29 f4       	brne	.+10     	; 0x1376 <fat_clear_cluster+0x3a>
    136c:	40 e0       	ldi	r20, 0x00	; 0
    136e:	50 e0       	ldi	r21, 0x00	; 0
    1370:	60 e0       	ldi	r22, 0x00	; 0
    1372:	70 e0       	ldi	r23, 0x00	; 0
    1374:	16 c0       	rjmp	.+44     	; 0x13a2 <fat_clear_cluster+0x66>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    1376:	62 50       	subi	r22, 0x02	; 2
    1378:	70 40       	sbci	r23, 0x00	; 0
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	f8 01       	movw	r30, r16
    1380:	20 89       	ldd	r18, Z+16	; 0x10
    1382:	31 89       	ldd	r19, Z+17	; 0x11
    1384:	40 e0       	ldi	r20, 0x00	; 0
    1386:	50 e0       	ldi	r21, 0x00	; 0
    1388:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <__mulsi3>
    138c:	ab 01       	movw	r20, r22
    138e:	bc 01       	movw	r22, r24
    1390:	f8 01       	movw	r30, r16
    1392:	82 89       	ldd	r24, Z+18	; 0x12
    1394:	93 89       	ldd	r25, Z+19	; 0x13
    1396:	a4 89       	ldd	r26, Z+20	; 0x14
    1398:	b5 89       	ldd	r27, Z+21	; 0x15
    139a:	48 0f       	add	r20, r24
    139c:	59 1f       	adc	r21, r25
    139e:	6a 1f       	adc	r22, r26
    13a0:	7b 1f       	adc	r23, r27
        return 0;

    offset_t cluster_offset = fat_cluster_offset(fs, cluster_num);

    uint8_t zero[16];
    memset(zero, 0, sizeof(zero));
    13a2:	de 01       	movw	r26, r28
    13a4:	11 96       	adiw	r26, 0x01	; 1
    13a6:	80 e1       	ldi	r24, 0x10	; 16
    13a8:	fd 01       	movw	r30, r26
    13aa:	11 92       	st	Z+, r1
    13ac:	8a 95       	dec	r24
    13ae:	e9 f7       	brne	.-6      	; 0x13aa <fat_clear_cluster+0x6e>
    return fs->partition->device_write_interval(cluster_offset,
    13b0:	f8 01       	movw	r30, r16
    13b2:	80 81       	ld	r24, Z
    13b4:	91 81       	ldd	r25, Z+1	; 0x01
    13b6:	20 89       	ldd	r18, Z+16	; 0x10
    13b8:	31 89       	ldd	r19, Z+17	; 0x11
    13ba:	fc 01       	movw	r30, r24
    13bc:	c6 80       	ldd	r12, Z+6	; 0x06
    13be:	d7 80       	ldd	r13, Z+7	; 0x07
    13c0:	cb 01       	movw	r24, r22
    13c2:	ba 01       	movw	r22, r20
    13c4:	ad 01       	movw	r20, r26
    13c6:	0b e7       	ldi	r16, 0x7B	; 123
    13c8:	14 e0       	ldi	r17, 0x04	; 4
    13ca:	ee 24       	eor	r14, r14
    13cc:	ff 24       	eor	r15, r15
    13ce:	f6 01       	movw	r30, r12
    13d0:	09 95       	icall
                                                zero,
                                                fs->header.cluster_size,
                                                fat_clear_cluster_callback,
                                                0
                                               );
}
    13d2:	60 96       	adiw	r28, 0x10	; 16
    13d4:	0f b6       	in	r0, 0x3f	; 63
    13d6:	f8 94       	cli
    13d8:	de bf       	out	0x3e, r29	; 62
    13da:	0f be       	out	0x3f, r0	; 63
    13dc:	cd bf       	out	0x3d, r28	; 61
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	1f 91       	pop	r17
    13e4:	0f 91       	pop	r16
    13e6:	ff 90       	pop	r15
    13e8:	ef 90       	pop	r14
    13ea:	df 90       	pop	r13
    13ec:	cf 90       	pop	r12
    13ee:	08 95       	ret

000013f0 <fat_read_dir>:
 * \param[out] dir_entry Pointer to a buffer into which to write the directory entry information.
 * \returns 0 on failure, 1 on success.
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
    13f0:	2f 92       	push	r2
    13f2:	3f 92       	push	r3
    13f4:	4f 92       	push	r4
    13f6:	5f 92       	push	r5
    13f8:	6f 92       	push	r6
    13fa:	7f 92       	push	r7
    13fc:	8f 92       	push	r8
    13fe:	9f 92       	push	r9
    1400:	af 92       	push	r10
    1402:	bf 92       	push	r11
    1404:	cf 92       	push	r12
    1406:	df 92       	push	r13
    1408:	ef 92       	push	r14
    140a:	ff 92       	push	r15
    140c:	0f 93       	push	r16
    140e:	1f 93       	push	r17
    1410:	df 93       	push	r29
    1412:	cf 93       	push	r28
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	aa 97       	sbiw	r28, 0x2a	; 42
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
    1424:	4c 01       	movw	r8, r24
    1426:	db 01       	movw	r26, r22
    if(!dd || !dir_entry)
    1428:	00 97       	sbiw	r24, 0x00	; 0
    142a:	09 f4       	brne	.+2      	; 0x142e <fat_read_dir+0x3e>
    142c:	b5 c0       	rjmp	.+362    	; 0x1598 <fat_read_dir+0x1a8>
    142e:	61 15       	cp	r22, r1
    1430:	71 05       	cpc	r23, r1
    1432:	09 f4       	brne	.+2      	; 0x1436 <fat_read_dir+0x46>
    1434:	b1 c0       	rjmp	.+354    	; 0x1598 <fat_read_dir+0x1a8>
        return 0;

    /* get current position of directory handle */
    struct fat_fs_struct* fs = dd->fs;
    1436:	fc 01       	movw	r30, r24
    1438:	60 80       	ld	r6, Z
    143a:	71 80       	ldd	r7, Z+1	; 0x01
    const struct fat_header_struct* header = &fs->header;
    uint16_t cluster_size = header->cluster_size;
    143c:	f3 01       	movw	r30, r6
    143e:	20 88       	ldd	r2, Z+16	; 0x10
    1440:	31 88       	ldd	r3, Z+17	; 0x11
    cluster_t cluster_num = dd->entry_cluster;
    1442:	fc 01       	movw	r30, r24
    1444:	a5 a4       	ldd	r10, Z+45	; 0x2d
    1446:	b6 a4       	ldd	r11, Z+46	; 0x2e
    uint16_t cluster_offset = dd->entry_offset;
    1448:	27 a5       	ldd	r18, Z+47	; 0x2f
    144a:	30 a9       	ldd	r19, Z+48	; 0x30
    struct fat_read_dir_callback_arg arg;

    if(cluster_offset >= cluster_size)
    144c:	22 15       	cp	r18, r2
    144e:	33 05       	cpc	r19, r3
    1450:	08 f0       	brcs	.+2      	; 0x1454 <fat_read_dir+0x64>
    1452:	7e c0       	rjmp	.+252    	; 0x1550 <fat_read_dir+0x160>
        fat_reset_dir(dd);
        return 0;
    }

    /* reset callback arguments */
    memset(&arg, 0, sizeof(arg));
    1454:	ae 01       	movw	r20, r28
    1456:	4f 5f       	subi	r20, 0xFF	; 255
    1458:	5f 4f       	sbci	r21, 0xFF	; 255
    145a:	86 e0       	ldi	r24, 0x06	; 6
    145c:	fa 01       	movw	r30, r20
    145e:	11 92       	st	Z+, r1
    1460:	8a 95       	dec	r24
    1462:	e9 f7       	brne	.-6      	; 0x145e <fat_read_dir+0x6e>
    memset(dir_entry, 0, sizeof(*dir_entry));
    1464:	8b e2       	ldi	r24, 0x2B	; 43
    1466:	fb 01       	movw	r30, r22
    1468:	11 92       	st	Z+, r1
    146a:	8a 95       	dec	r24
    146c:	e9 f7       	brne	.-6      	; 0x1468 <fat_read_dir+0x78>
    arg.dir_entry = dir_entry;

    /* check if we read from the root directory */
    if(cluster_num == 0)
    146e:	a1 14       	cp	r10, r1
    1470:	b1 04       	cpc	r11, r1
    1472:	09 f0       	breq	.+2      	; 0x1476 <fat_read_dir+0x86>
    1474:	74 c0       	rjmp	.+232    	; 0x155e <fat_read_dir+0x16e>
#if FAT_FAT32_SUPPORT
        if(fs->partition->type == PARTITION_TYPE_FAT32)
            cluster_num = header->root_dir_cluster;
        else
#endif
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    1476:	f3 01       	movw	r30, r6
    1478:	22 88       	ldd	r2, Z+18	; 0x12
    147a:	33 88       	ldd	r3, Z+19	; 0x13
    147c:	86 89       	ldd	r24, Z+22	; 0x16
    147e:	97 89       	ldd	r25, Z+23	; 0x17
    1480:	28 1a       	sub	r2, r24
    1482:	39 0a       	sbc	r3, r25
    1484:	6c c0       	rjmp	.+216    	; 0x155e <fat_read_dir+0x16e>
    uint8_t buffer[32];
    while(!arg.finished)
    {
        /* read directory entries up to the cluster border */
        uint16_t cluster_left = cluster_size - cluster_offset;
        offset_t pos = cluster_offset;
    1486:	72 01       	movw	r14, r4
    1488:	00 e0       	ldi	r16, 0x00	; 0
    148a:	10 e0       	ldi	r17, 0x00	; 0
        if(cluster_num == 0)
    148c:	a1 14       	cp	r10, r1
    148e:	b1 04       	cpc	r11, r1
    1490:	41 f4       	brne	.+16     	; 0x14a2 <fat_read_dir+0xb2>
            pos += header->root_dir_offset;
    1492:	d3 01       	movw	r26, r6
    1494:	56 96       	adiw	r26, 0x16	; 22
    1496:	6d 91       	ld	r22, X+
    1498:	7d 91       	ld	r23, X+
    149a:	8d 91       	ld	r24, X+
    149c:	9c 91       	ld	r25, X
    149e:	59 97       	sbiw	r26, 0x19	; 25
    14a0:	24 c0       	rjmp	.+72     	; 0x14ea <fat_read_dir+0xfa>
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    14a2:	61 14       	cp	r6, r1
    14a4:	71 04       	cpc	r7, r1
    14a6:	d9 f0       	breq	.+54     	; 0x14de <fat_read_dir+0xee>
    14a8:	b2 e0       	ldi	r27, 0x02	; 2
    14aa:	ab 16       	cp	r10, r27
    14ac:	b1 04       	cpc	r11, r1
    14ae:	b8 f0       	brcs	.+46     	; 0x14de <fat_read_dir+0xee>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    14b0:	f3 01       	movw	r30, r6
    14b2:	20 89       	ldd	r18, Z+16	; 0x10
    14b4:	31 89       	ldd	r19, Z+17	; 0x11
    14b6:	40 e0       	ldi	r20, 0x00	; 0
    14b8:	50 e0       	ldi	r21, 0x00	; 0
    14ba:	6f a1       	ldd	r22, Y+39	; 0x27
    14bc:	78 a5       	ldd	r23, Y+40	; 0x28
    14be:	89 a5       	ldd	r24, Y+41	; 0x29
    14c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    14c2:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <__mulsi3>
    14c6:	9b 01       	movw	r18, r22
    14c8:	ac 01       	movw	r20, r24
    14ca:	f3 01       	movw	r30, r6
    14cc:	82 89       	ldd	r24, Z+18	; 0x12
    14ce:	93 89       	ldd	r25, Z+19	; 0x13
    14d0:	a4 89       	ldd	r26, Z+20	; 0x14
    14d2:	b5 89       	ldd	r27, Z+21	; 0x15
    14d4:	28 0f       	add	r18, r24
    14d6:	39 1f       	adc	r19, r25
    14d8:	4a 1f       	adc	r20, r26
    14da:	5b 1f       	adc	r21, r27
    14dc:	04 c0       	rjmp	.+8      	; 0x14e6 <fat_read_dir+0xf6>
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	40 e0       	ldi	r20, 0x00	; 0
    14e4:	50 e0       	ldi	r21, 0x00	; 0
        uint16_t cluster_left = cluster_size - cluster_offset;
        offset_t pos = cluster_offset;
        if(cluster_num == 0)
            pos += header->root_dir_offset;
        else
            pos += fat_cluster_offset(fs, cluster_num);
    14e6:	ca 01       	movw	r24, r20
    14e8:	b9 01       	movw	r22, r18
    14ea:	6e 0d       	add	r22, r14
    14ec:	7f 1d       	adc	r23, r15
    14ee:	80 1f       	adc	r24, r16
    14f0:	91 1f       	adc	r25, r17

        arg.bytes_read = 0;
    14f2:	1c 82       	std	Y+4, r1	; 0x04
    14f4:	1b 82       	std	Y+3, r1	; 0x03
        if(!fs->partition->device_read_interval(pos,
    14f6:	d3 01       	movw	r26, r6
    14f8:	ed 91       	ld	r30, X+
    14fa:	fc 91       	ld	r31, X
    14fc:	81 01       	movw	r16, r2
    14fe:	04 19       	sub	r16, r4
    1500:	15 09       	sbc	r17, r5
    1502:	02 80       	ldd	r0, Z+2	; 0x02
    1504:	f3 81       	ldd	r31, Z+3	; 0x03
    1506:	e0 2d       	mov	r30, r0
    1508:	ae 01       	movw	r20, r28
    150a:	49 5f       	subi	r20, 0xF9	; 249
    150c:	5f 4f       	sbci	r21, 0xFF	; 255
    150e:	20 e2       	ldi	r18, 0x20	; 32
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	b6 ee       	ldi	r27, 0xE6	; 230
    1514:	eb 2e       	mov	r14, r27
    1516:	ba e0       	ldi	r27, 0x0A	; 10
    1518:	fb 2e       	mov	r15, r27
    151a:	6e 01       	movw	r12, r28
    151c:	08 94       	sec
    151e:	c1 1c       	adc	r12, r1
    1520:	d1 1c       	adc	r13, r1
    1522:	09 95       	icall
    1524:	88 23       	and	r24, r24
    1526:	c1 f1       	breq	.+112    	; 0x1598 <fat_read_dir+0x1a8>
                                                fat_dir_entry_read_callback,
                                                &arg)
          )
            return 0;

        cluster_offset += arg.bytes_read;
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	9c 81       	ldd	r25, Y+4	; 0x04
    152c:	48 0e       	add	r4, r24
    152e:	59 1e       	adc	r5, r25

        if(cluster_offset >= cluster_size)
    1530:	42 14       	cp	r4, r2
    1532:	53 04       	cpc	r5, r3
    1534:	30 f1       	brcs	.+76     	; 0x1582 <fat_read_dir+0x192>
        {
            /* we reached the cluster border and switch to the next cluster */

            /* get number of next cluster */
            if((cluster_num = fat_get_next_cluster(fs, cluster_num)) != 0)
    1536:	c3 01       	movw	r24, r6
    1538:	b5 01       	movw	r22, r10
    153a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <fat_get_next_cluster>
    153e:	5c 01       	movw	r10, r24
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	00 97       	sbiw	r24, 0x00	; 0
    1546:	69 f4       	brne	.+26     	; 0x1562 <fat_read_dir+0x172>
                cluster_offset = 0;
                continue;
            }

            /* we are at the end of the cluster chain */
            if(!arg.finished)
    1548:	8e 81       	ldd	r24, Y+6	; 0x06
    154a:	88 23       	and	r24, r24
    154c:	f1 f4       	brne	.+60     	; 0x158a <fat_read_dir+0x19a>
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    154e:	f4 01       	movw	r30, r8
    1550:	83 a1       	ldd	r24, Z+35	; 0x23
    1552:	94 a1       	ldd	r25, Z+36	; 0x24
    1554:	96 a7       	std	Z+46, r25	; 0x2e
    1556:	85 a7       	std	Z+45, r24	; 0x2d
    dd->entry_offset = 0;
    1558:	10 aa       	std	Z+48, r1	; 0x30
    155a:	17 a6       	std	Z+47, r1	; 0x2f
    155c:	1d c0       	rjmp	.+58     	; 0x1598 <fat_read_dir+0x1a8>
    }

    /* reset callback arguments */
    memset(&arg, 0, sizeof(arg));
    memset(dir_entry, 0, sizeof(*dir_entry));
    arg.dir_entry = dir_entry;
    155e:	ba 83       	std	Y+2, r27	; 0x02
    1560:	a9 83       	std	Y+1, r26	; 0x01
    1562:	29 01       	movw	r4, r18
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    1564:	8e ef       	ldi	r24, 0xFE	; 254
    1566:	9f ef       	ldi	r25, 0xFF	; 255
    1568:	a8 0e       	add	r10, r24
    156a:	b9 1e       	adc	r11, r25
    156c:	c5 01       	movw	r24, r10
    156e:	a0 e0       	ldi	r26, 0x00	; 0
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	8f a3       	std	Y+39, r24	; 0x27
    1574:	98 a7       	std	Y+40, r25	; 0x28
    1576:	a9 a7       	std	Y+41, r26	; 0x29
    1578:	ba a7       	std	Y+42, r27	; 0x2a
    157a:	a2 e0       	ldi	r26, 0x02	; 2
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	aa 0e       	add	r10, r26
    1580:	bb 1e       	adc	r11, r27
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    }

    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    1582:	8e 81       	ldd	r24, Y+6	; 0x06
    1584:	88 23       	and	r24, r24
    1586:	09 f4       	brne	.+2      	; 0x158a <fat_read_dir+0x19a>
    1588:	7e cf       	rjmp	.-260    	; 0x1486 <fat_read_dir+0x96>

            break;
        }
    }

    dd->entry_cluster = cluster_num;
    158a:	f4 01       	movw	r30, r8
    158c:	b6 a6       	std	Z+46, r11	; 0x2e
    158e:	a5 a6       	std	Z+45, r10	; 0x2d
    dd->entry_offset = cluster_offset;
    1590:	50 aa       	std	Z+48, r5	; 0x30
    1592:	47 a6       	std	Z+47, r4	; 0x2f

    return arg.finished;
    1594:	8e 81       	ldd	r24, Y+6	; 0x06
    1596:	01 c0       	rjmp	.+2      	; 0x159a <fat_read_dir+0x1aa>
    1598:	80 e0       	ldi	r24, 0x00	; 0
}
    159a:	aa 96       	adiw	r28, 0x2a	; 42
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	de bf       	out	0x3e, r29	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	cd bf       	out	0x3d, r28	; 61
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	1f 91       	pop	r17
    15ac:	0f 91       	pop	r16
    15ae:	ff 90       	pop	r15
    15b0:	ef 90       	pop	r14
    15b2:	df 90       	pop	r13
    15b4:	cf 90       	pop	r12
    15b6:	bf 90       	pop	r11
    15b8:	af 90       	pop	r10
    15ba:	9f 90       	pop	r9
    15bc:	8f 90       	pop	r8
    15be:	7f 90       	pop	r7
    15c0:	6f 90       	pop	r6
    15c2:	5f 90       	pop	r5
    15c4:	4f 90       	pop	r4
    15c6:	3f 90       	pop	r3
    15c8:	2f 90       	pop	r2
    15ca:	08 95       	ret

000015cc <fat_dir_entry_read_callback>:
 * \param[in,out] p An argument structure controlling operation.
 * \returns 0 on failure or completion, 1 if reading has
 *          to be continued
 */
uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
{
    15cc:	cf 92       	push	r12
    15ce:	df 92       	push	r13
    15d0:	ef 92       	push	r14
    15d2:	ff 92       	push	r15
    15d4:	0f 93       	push	r16
    15d6:	1f 93       	push	r17
    15d8:	cf 93       	push	r28
    15da:	df 93       	push	r29
    15dc:	8c 01       	movw	r16, r24
    15de:	6a 01       	movw	r12, r20
    15e0:	7b 01       	movw	r14, r22
    struct fat_read_dir_callback_arg* arg = p;
    15e2:	a9 01       	movw	r20, r18
    struct fat_dir_entry_struct* dir_entry = arg->dir_entry;
    15e4:	d9 01       	movw	r26, r18
    15e6:	cd 91       	ld	r28, X+
    15e8:	dc 91       	ld	r29, X
    15ea:	11 97       	sbiw	r26, 0x01	; 1

    arg->bytes_read += 32;
    15ec:	12 96       	adiw	r26, 0x02	; 2
    15ee:	8d 91       	ld	r24, X+
    15f0:	9c 91       	ld	r25, X
    15f2:	13 97       	sbiw	r26, 0x03	; 3
    15f4:	80 96       	adiw	r24, 0x20	; 32
    15f6:	13 96       	adiw	r26, 0x03	; 3
    15f8:	9c 93       	st	X, r25
    15fa:	8e 93       	st	-X, r24
    15fc:	12 97       	sbiw	r26, 0x02	; 2

    /* skip deleted or empty entries */
    if(buffer[0] == FAT_DIRENTRY_DELETED || !buffer[0])
    15fe:	f8 01       	movw	r30, r16
    1600:	90 81       	ld	r25, Z
    1602:	95 3e       	cpi	r25, 0xE5	; 229
    1604:	11 f0       	breq	.+4      	; 0x160a <fat_dir_entry_read_callback+0x3e>
    1606:	99 23       	and	r25, r25
    1608:	21 f4       	brne	.+8      	; 0x1612 <fat_dir_entry_read_callback+0x46>
    {
#if FAT_LFN_SUPPORT
        arg->checksum = 0;
    160a:	da 01       	movw	r26, r20
    160c:	14 96       	adiw	r26, 0x04	; 4
    160e:	1c 92       	st	X, r1
    1610:	c3 c0       	rjmp	.+390    	; 0x1798 <fat_dir_entry_read_callback+0x1cc>
        return 1;
#endif

    char* long_name = dir_entry->long_name;
#if FAT_LFN_SUPPORT
    if(buffer[11] == 0x0f)
    1612:	f8 01       	movw	r30, r16
    1614:	83 85       	ldd	r24, Z+11	; 0x0b
    1616:	8f 30       	cpi	r24, 0x0F	; 15
    1618:	e1 f5       	brne	.+120    	; 0x1692 <fat_dir_entry_read_callback+0xc6>
    {
        /* checksum validation */
        if(arg->checksum == 0 || arg->checksum != buffer[13])
    161a:	d9 01       	movw	r26, r18
    161c:	14 96       	adiw	r26, 0x04	; 4
    161e:	9c 91       	ld	r25, X
    1620:	99 23       	and	r25, r25
    1622:	19 f0       	breq	.+6      	; 0x162a <fat_dir_entry_read_callback+0x5e>
    1624:	85 85       	ldd	r24, Z+13	; 0x0d
    1626:	98 17       	cp	r25, r24
    1628:	71 f0       	breq	.+28     	; 0x1646 <fat_dir_entry_read_callback+0x7a>
        {
            /* reset directory entry */
            memset(dir_entry, 0, sizeof(*dir_entry));
    162a:	8b e2       	ldi	r24, 0x2B	; 43
    162c:	fe 01       	movw	r30, r28
    162e:	11 92       	st	Z+, r1
    1630:	8a 95       	dec	r24
    1632:	e9 f7       	brne	.-6      	; 0x162e <fat_dir_entry_read_callback+0x62>

            arg->checksum = buffer[13];
    1634:	d8 01       	movw	r26, r16
    1636:	1d 96       	adiw	r26, 0x0d	; 13
    1638:	8c 91       	ld	r24, X
    163a:	fa 01       	movw	r30, r20
    163c:	84 83       	std	Z+4, r24	; 0x04
            dir_entry->entry_offset = offset;
    163e:	cf a2       	std	Y+39, r12	; 0x27
    1640:	d8 a6       	std	Y+40, r13	; 0x28
    1642:	e9 a6       	std	Y+41, r14	; 0x29
    1644:	fa a6       	std	Y+42, r15	; 0x2a

        /* lfn supports unicode, but we do not, for now.
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
    1646:	d8 01       	movw	r26, r16
    1648:	8c 91       	ld	r24, X
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	8f 73       	andi	r24, 0x3F	; 63
    164e:	90 70       	andi	r25, 0x00	; 0
    1650:	2d e0       	ldi	r18, 0x0D	; 13
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	82 9f       	mul	r24, r18
    1656:	a0 01       	movw	r20, r0
    1658:	83 9f       	mul	r24, r19
    165a:	50 0d       	add	r21, r0
    165c:	92 9f       	mul	r25, r18
    165e:	50 0d       	add	r21, r0
    1660:	11 24       	eor	r1, r1
    1662:	4d 50       	subi	r20, 0x0D	; 13
    1664:	50 40       	sbci	r21, 0x00	; 0
    1666:	a0 e1       	ldi	r26, 0x10	; 16
    1668:	b1 e0       	ldi	r27, 0x01	; 1
    166a:	c4 0f       	add	r28, r20
    166c:	d5 1f       	adc	r29, r21
    166e:	0d c0       	rjmp	.+26     	; 0x168a <fat_dir_entry_read_callback+0xbe>
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
            long_name[char_offset + i] = buffer[char_mapping[i]];
    1670:	8d 91       	ld	r24, X+
    1672:	f8 01       	movw	r30, r16
    1674:	e8 0f       	add	r30, r24
    1676:	f1 1d       	adc	r31, r1
    1678:	80 81       	ld	r24, Z
    167a:	89 93       	st	Y+, r24
    167c:	4f 5f       	subi	r20, 0xFF	; 255
    167e:	5f 4f       	sbci	r21, 0xFF	; 255
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
    1680:	e1 e0       	ldi	r30, 0x01	; 1
    1682:	ad 31       	cpi	r26, 0x1D	; 29
    1684:	be 07       	cpc	r27, r30
    1686:	09 f4       	brne	.+2      	; 0x168a <fat_dir_entry_read_callback+0xbe>
    1688:	87 c0       	rjmp	.+270    	; 0x1798 <fat_dir_entry_read_callback+0x1cc>
    168a:	4f 31       	cpi	r20, 0x1F	; 31
    168c:	51 05       	cpc	r21, r1
    168e:	80 f3       	brcs	.-32     	; 0x1670 <fat_dir_entry_read_callback+0xa4>
    1690:	83 c0       	rjmp	.+262    	; 0x1798 <fat_dir_entry_read_callback+0x1cc>
    else
#endif
    {
#if FAT_LFN_SUPPORT
        /* if we do not have a long name or the previous lfn does not match, take the 8.3 name */
        if(long_name[0] == '\0' || arg->checksum != fat_calc_83_checksum(buffer))
    1692:	88 81       	ld	r24, Y
    1694:	88 23       	and	r24, r24
    1696:	a1 f0       	breq	.+40     	; 0x16c0 <fat_dir_entry_read_callback+0xf4>
    1698:	d9 01       	movw	r26, r18
    169a:	14 96       	adiw	r26, 0x04	; 4
    169c:	3c 91       	ld	r19, X
    169e:	f8 01       	movw	r30, r16
    16a0:	21 e0       	ldi	r18, 0x01	; 1
 */
uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
{
    uint8_t checksum = file_name_83[0];
    for(uint8_t i = 1; i < 11; ++i)
        checksum = ((checksum >> 1) | (checksum << 7)) + file_name_83[i];
    16a2:	89 2f       	mov	r24, r25
    16a4:	86 95       	lsr	r24
    16a6:	97 95       	ror	r25
    16a8:	99 27       	eor	r25, r25
    16aa:	97 95       	ror	r25
    16ac:	98 2b       	or	r25, r24
    16ae:	81 81       	ldd	r24, Z+1	; 0x01
    16b0:	98 0f       	add	r25, r24
 * \returns The checksum of the given file name.
 */
uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
{
    uint8_t checksum = file_name_83[0];
    for(uint8_t i = 1; i < 11; ++i)
    16b2:	2f 5f       	subi	r18, 0xFF	; 255
    16b4:	31 96       	adiw	r30, 0x01	; 1
    16b6:	2b 30       	cpi	r18, 0x0B	; 11
    16b8:	a1 f7       	brne	.-24     	; 0x16a2 <fat_dir_entry_read_callback+0xd6>
    else
#endif
    {
#if FAT_LFN_SUPPORT
        /* if we do not have a long name or the previous lfn does not match, take the 8.3 name */
        if(long_name[0] == '\0' || arg->checksum != fat_calc_83_checksum(buffer))
    16ba:	39 17       	cp	r19, r25
    16bc:	09 f4       	brne	.+2      	; 0x16c0 <fat_dir_entry_read_callback+0xf4>
    16be:	57 c0       	rjmp	.+174    	; 0x176e <fat_dir_entry_read_callback+0x1a2>
#endif
        {
            /* reset directory entry */
            memset(dir_entry, 0, sizeof(*dir_entry));
    16c0:	8b e2       	ldi	r24, 0x2B	; 43
    16c2:	fe 01       	movw	r30, r28
    16c4:	11 92       	st	Z+, r1
    16c6:	8a 95       	dec	r24
    16c8:	e9 f7       	brne	.-6      	; 0x16c4 <fat_dir_entry_read_callback+0xf8>
            dir_entry->entry_offset = offset;
    16ca:	cf a2       	std	Y+39, r12	; 0x27
    16cc:	d8 a6       	std	Y+40, r13	; 0x28
    16ce:	e9 a6       	std	Y+41, r14	; 0x29
    16d0:	fa a6       	std	Y+42, r15	; 0x2a
    16d2:	b8 01       	movw	r22, r16
    16d4:	de 01       	movw	r26, r28
    16d6:	78 01       	movw	r14, r16
    16d8:	20 e0       	ldi	r18, 0x00	; 0

            uint8_t i;
            for(i = 0; i < 8; ++i)
            {
                if(buffer[i] == ' ')
    16da:	f7 01       	movw	r30, r14
    16dc:	90 81       	ld	r25, Z
    16de:	90 32       	cpi	r25, 0x20	; 32
    16e0:	a1 f0       	breq	.+40     	; 0x170a <fat_dir_entry_read_callback+0x13e>
                    break;
                long_name[i] = buffer[i];
    16e2:	9c 93       	st	X, r25
                /* Windows NT and later versions do not store lfn entries
                 * for 8.3 names which have a lowercase basename, extension
                 * or both when everything else is uppercase. They use two
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((buffer[12] & 0x08) && buffer[i] >= 'A' && buffer[i] <= 'Z')
    16e4:	f8 01       	movw	r30, r16
    16e6:	84 85       	ldd	r24, Z+12	; 0x0c
    16e8:	83 ff       	sbrs	r24, 3
    16ea:	08 c0       	rjmp	.+16     	; 0x16fc <fat_dir_entry_read_callback+0x130>
    16ec:	f7 01       	movw	r30, r14
    16ee:	80 81       	ld	r24, Z
    16f0:	81 34       	cpi	r24, 0x41	; 65
    16f2:	20 f0       	brcs	.+8      	; 0x16fc <fat_dir_entry_read_callback+0x130>
    16f4:	8b 35       	cpi	r24, 0x5B	; 91
    16f6:	10 f4       	brcc	.+4      	; 0x16fc <fat_dir_entry_read_callback+0x130>
                    long_name[i] += 'a' - 'A';
    16f8:	90 5e       	subi	r25, 0xE0	; 224
    16fa:	9c 93       	st	X, r25
            /* reset directory entry */
            memset(dir_entry, 0, sizeof(*dir_entry));
            dir_entry->entry_offset = offset;

            uint8_t i;
            for(i = 0; i < 8; ++i)
    16fc:	2f 5f       	subi	r18, 0xFF	; 255
    16fe:	08 94       	sec
    1700:	e1 1c       	adc	r14, r1
    1702:	f1 1c       	adc	r15, r1
    1704:	11 96       	adiw	r26, 0x01	; 1
    1706:	28 30       	cpi	r18, 0x08	; 8
    1708:	41 f7       	brne	.-48     	; 0x16da <fat_dir_entry_read_callback+0x10e>
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((buffer[12] & 0x08) && buffer[i] >= 'A' && buffer[i] <= 'Z')
                    long_name[i] += 'a' - 'A';
            }
            if(long_name[0] == 0x05)
    170a:	88 81       	ld	r24, Y
    170c:	85 30       	cpi	r24, 0x05	; 5
    170e:	11 f4       	brne	.+4      	; 0x1714 <fat_dir_entry_read_callback+0x148>
                long_name[0] = (char) FAT_DIRENTRY_DELETED;
    1710:	85 ee       	ldi	r24, 0xE5	; 229
    1712:	88 83       	st	Y, r24

            if(buffer[8] != ' ')
    1714:	d8 01       	movw	r26, r16
    1716:	18 96       	adiw	r26, 0x08	; 8
    1718:	8c 91       	ld	r24, X
    171a:	80 32       	cpi	r24, 0x20	; 32
    171c:	21 f1       	breq	.+72     	; 0x1766 <fat_dir_entry_read_callback+0x19a>
            {
                long_name[i++] = '.';
    171e:	fe 01       	movw	r30, r28
    1720:	e2 0f       	add	r30, r18
    1722:	f1 1d       	adc	r31, r1
    1724:	8e e2       	ldi	r24, 0x2E	; 46
    1726:	80 83       	st	Z, r24
    1728:	32 2f       	mov	r19, r18
    172a:	3f 5f       	subi	r19, 0xFF	; 255

                uint8_t j = 8;
                for(; j < 11; ++j)
    172c:	2c 5f       	subi	r18, 0xFC	; 252
                {
                    if(buffer[j] == ' ')
    172e:	fb 01       	movw	r30, r22
    1730:	90 85       	ldd	r25, Z+8	; 0x08
    1732:	90 32       	cpi	r25, 0x20	; 32
    1734:	b9 f0       	breq	.+46     	; 0x1764 <fat_dir_entry_read_callback+0x198>
                        break;
                    long_name[i] = buffer[j];
    1736:	fe 01       	movw	r30, r28
    1738:	e3 0f       	add	r30, r19
    173a:	f1 1d       	adc	r31, r1
    173c:	90 83       	st	Z, r25

                    /* See above for the lowercase 8.3 name handling of
                     * Windows NT and later.
                     */
                    if((buffer[12] & 0x10) && buffer[j] >= 'A' && buffer[j] <= 'Z')
    173e:	d8 01       	movw	r26, r16
    1740:	1c 96       	adiw	r26, 0x0c	; 12
    1742:	8c 91       	ld	r24, X
    1744:	84 ff       	sbrs	r24, 4
    1746:	09 c0       	rjmp	.+18     	; 0x175a <fat_dir_entry_read_callback+0x18e>
    1748:	db 01       	movw	r26, r22
    174a:	18 96       	adiw	r26, 0x08	; 8
    174c:	8c 91       	ld	r24, X
    174e:	81 34       	cpi	r24, 0x41	; 65
    1750:	20 f0       	brcs	.+8      	; 0x175a <fat_dir_entry_read_callback+0x18e>
    1752:	8b 35       	cpi	r24, 0x5B	; 91
    1754:	10 f4       	brcc	.+4      	; 0x175a <fat_dir_entry_read_callback+0x18e>
                        long_name[i] += 'a' - 'A';
    1756:	90 5e       	subi	r25, 0xE0	; 224
    1758:	90 83       	st	Z, r25

                    ++i;
    175a:	3f 5f       	subi	r19, 0xFF	; 255
    175c:	6f 5f       	subi	r22, 0xFF	; 255
    175e:	7f 4f       	sbci	r23, 0xFF	; 255
            if(buffer[8] != ' ')
            {
                long_name[i++] = '.';

                uint8_t j = 8;
                for(; j < 11; ++j)
    1760:	32 17       	cp	r19, r18
    1762:	29 f7       	brne	.-54     	; 0x172e <fat_dir_entry_read_callback+0x162>
    1764:	23 2f       	mov	r18, r19

                    ++i;
                }
            } 

            long_name[i] = '\0';
    1766:	fe 01       	movw	r30, r28
    1768:	e2 0f       	add	r30, r18
    176a:	f1 1d       	adc	r31, r1
    176c:	10 82       	st	Z, r1
        }
        
        /* extract properties of file and store them within the structure */
        dir_entry->attributes = buffer[11];
    176e:	f8 01       	movw	r30, r16
    1770:	83 85       	ldd	r24, Z+11	; 0x0b
    1772:	88 a3       	std	Y+32, r24	; 0x20
        dir_entry->cluster = ltoh16(*((uint16_t*) &buffer[26]));
    1774:	82 8d       	ldd	r24, Z+26	; 0x1a
    1776:	93 8d       	ldd	r25, Z+27	; 0x1b
    1778:	9a a3       	std	Y+34, r25	; 0x22
    177a:	89 a3       	std	Y+33, r24	; 0x21
#if FAT_FAT32_SUPPORT
        dir_entry->cluster |= ((cluster_t) ltoh16(*((uint16_t*) &buffer[20]))) << 16;
#endif
        dir_entry->file_size = ltoh32(*((uint32_t*) &buffer[28]));
    177c:	84 8d       	ldd	r24, Z+28	; 0x1c
    177e:	95 8d       	ldd	r25, Z+29	; 0x1d
    1780:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1782:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1784:	8b a3       	std	Y+35, r24	; 0x23
    1786:	9c a3       	std	Y+36, r25	; 0x24
    1788:	ad a3       	std	Y+37, r26	; 0x25
    178a:	be a3       	std	Y+38, r27	; 0x26
#if FAT_DATETIME_SUPPORT
        dir_entry->modification_time = ltoh16(*((uint16_t*) &buffer[22]));
        dir_entry->modification_date = ltoh16(*((uint16_t*) &buffer[24]));
#endif

        arg->finished = 1;
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	da 01       	movw	r26, r20
    1790:	15 96       	adiw	r26, 0x05	; 5
    1792:	8c 93       	st	X, r24
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	01 c0       	rjmp	.+2      	; 0x179a <fat_dir_entry_read_callback+0x1ce>
        return 0;
    1798:	81 e0       	ldi	r24, 0x01	; 1
    }
}
    179a:	df 91       	pop	r29
    179c:	cf 91       	pop	r28
    179e:	1f 91       	pop	r17
    17a0:	0f 91       	pop	r16
    17a2:	ff 90       	pop	r15
    17a4:	ef 90       	pop	r14
    17a6:	df 90       	pop	r13
    17a8:	cf 90       	pop	r12
    17aa:	08 95       	ret

000017ac <fat_open>:
 * \param[in] partition Discriptor of partition on which the filesystem resides.
 * \returns 0 on error, a FAT filesystem descriptor on success.
 * \see fat_close
 */
struct fat_fs_struct* fat_open(struct partition_struct* partition)
{
    17ac:	2f 92       	push	r2
    17ae:	3f 92       	push	r3
    17b0:	4f 92       	push	r4
    17b2:	5f 92       	push	r5
    17b4:	6f 92       	push	r6
    17b6:	7f 92       	push	r7
    17b8:	8f 92       	push	r8
    17ba:	9f 92       	push	r9
    17bc:	af 92       	push	r10
    17be:	bf 92       	push	r11
    17c0:	cf 92       	push	r12
    17c2:	df 92       	push	r13
    17c4:	ef 92       	push	r14
    17c6:	ff 92       	push	r15
    17c8:	0f 93       	push	r16
    17ca:	1f 93       	push	r17
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    17d4:	a8 97       	sbiw	r28, 0x28	; 40
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	f8 94       	cli
    17da:	de bf       	out	0x3e, r29	; 62
    17dc:	0f be       	out	0x3f, r0	; 63
    17de:	cd bf       	out	0x3d, r28	; 61
    17e0:	98 a7       	std	Y+40, r25	; 0x28
    17e2:	8f a3       	std	Y+39, r24	; 0x27
    if(!partition ||
    17e4:	00 97       	sbiw	r24, 0x00	; 0
    17e6:	09 f4       	brne	.+2      	; 0x17ea <fat_open+0x3e>
    17e8:	5c c1       	rjmp	.+696    	; 0x1aa2 <fat_open+0x2f6>
    17ea:	dc 01       	movw	r26, r24
    17ec:	14 96       	adiw	r26, 0x04	; 4
    17ee:	8d 91       	ld	r24, X+
    17f0:	9c 91       	ld	r25, X
    17f2:	15 97       	sbiw	r26, 0x05	; 5
    17f4:	89 2b       	or	r24, r25
    17f6:	09 f4       	brne	.+2      	; 0x17fa <fat_open+0x4e>
    17f8:	54 c1       	rjmp	.+680    	; 0x1aa2 <fat_open+0x2f6>
    17fa:	16 96       	adiw	r26, 0x06	; 6
    17fc:	8d 91       	ld	r24, X+
    17fe:	9c 91       	ld	r25, X
    1800:	17 97       	sbiw	r26, 0x07	; 7
    1802:	89 2b       	or	r24, r25
    1804:	09 f4       	brne	.+2      	; 0x1808 <fat_open+0x5c>
    1806:	4d c1       	rjmp	.+666    	; 0x1aa2 <fat_open+0x2f6>
    1808:	68 c1       	rjmp	.+720    	; 0x1ada <fat_open+0x32e>
    }
    if(i >= FAT_FS_COUNT)
        return 0;
#endif

    memset(fs, 0, sizeof(*fs));
    180a:	e6 e3       	ldi	r30, 0x36	; 54
    180c:	f2 e0       	ldi	r31, 0x02	; 2
    180e:	8c e1       	ldi	r24, 0x1C	; 28
    1810:	df 01       	movw	r26, r30
    1812:	1d 92       	st	X+, r1
    1814:	8a 95       	dec	r24
    1816:	e9 f7       	brne	.-6      	; 0x1812 <fat_open+0x66>

    fs->partition = partition;
    1818:	ef a1       	ldd	r30, Y+39	; 0x27
    181a:	f8 a5       	ldd	r31, Y+40	; 0x28
    181c:	f0 93 37 02 	sts	0x0237, r31
    1820:	e0 93 36 02 	sts	0x0236, r30
#if FAT_FAT32_SUPPORT
    uint8_t buffer[37];
#else
    uint8_t buffer[25];
#endif
    offset_t partition_offset = (offset_t) partition->offset * 512;
    1824:	21 84       	ldd	r2, Z+9	; 0x09
    1826:	32 84       	ldd	r3, Z+10	; 0x0a
    1828:	43 84       	ldd	r4, Z+11	; 0x0b
    182a:	54 84       	ldd	r5, Z+12	; 0x0c
    182c:	59 e0       	ldi	r21, 0x09	; 9
    182e:	22 0c       	add	r2, r2
    1830:	33 1c       	adc	r3, r3
    1832:	44 1c       	adc	r4, r4
    1834:	55 1c       	adc	r5, r5
    1836:	5a 95       	dec	r21
    1838:	d1 f7       	brne	.-12     	; 0x182e <fat_open+0x82>
    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
    183a:	c2 01       	movw	r24, r4
    183c:	b1 01       	movw	r22, r2
    183e:	65 5f       	subi	r22, 0xF5	; 245
    1840:	7f 4f       	sbci	r23, 0xFF	; 255
    1842:	8f 4f       	sbci	r24, 0xFF	; 255
    1844:	9f 4f       	sbci	r25, 0xFF	; 255
    1846:	01 90       	ld	r0, Z+
    1848:	f0 81       	ld	r31, Z
    184a:	e0 2d       	mov	r30, r0
    184c:	ae 01       	movw	r20, r28
    184e:	4f 5f       	subi	r20, 0xFF	; 255
    1850:	5f 4f       	sbci	r21, 0xFF	; 255
    1852:	29 e1       	ldi	r18, 0x19	; 25
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	09 95       	icall
    1858:	88 23       	and	r24, r24
    185a:	09 f4       	brne	.+2      	; 0x185e <fat_open+0xb2>
    185c:	45 c1       	rjmp	.+650    	; 0x1ae8 <fat_open+0x33c>
        return 0;

    uint16_t bytes_per_sector = ltoh16(*((uint16_t*) &buffer[0x00]));
    185e:	e9 81       	ldd	r30, Y+1	; 0x01
    1860:	fa 81       	ldd	r31, Y+2	; 0x02
    1862:	fb a3       	std	Y+35, r31	; 0x23
    1864:	ea a3       	std	Y+34, r30	; 0x22
    uint16_t reserved_sectors = ltoh16(*((uint16_t*) &buffer[0x03]));
    1866:	2c 81       	ldd	r18, Y+4	; 0x04
    1868:	3d 81       	ldd	r19, Y+5	; 0x05
    uint8_t sectors_per_cluster = buffer[0x02];
    186a:	fb 81       	ldd	r31, Y+3	; 0x03
    186c:	fc a3       	std	Y+36, r31	; 0x24
    uint8_t fat_copies = buffer[0x05];
    186e:	4e 81       	ldd	r20, Y+6	; 0x06
    uint16_t max_root_entries = ltoh16(*((uint16_t*) &buffer[0x06]));
    1870:	8f 81       	ldd	r24, Y+7	; 0x07
    1872:	98 85       	ldd	r25, Y+8	; 0x08
    1874:	9e a3       	std	Y+38, r25	; 0x26
    1876:	8d a3       	std	Y+37, r24	; 0x25
    uint16_t sector_count_16 = ltoh16(*((uint16_t*) &buffer[0x08]));
    1878:	e9 85       	ldd	r30, Y+9	; 0x09
    187a:	fa 85       	ldd	r31, Y+10	; 0x0a
    uint16_t sectors_per_fat = ltoh16(*((uint16_t*) &buffer[0x0b]));
    187c:	6c 85       	ldd	r22, Y+12	; 0x0c
    187e:	7d 85       	ldd	r23, Y+13	; 0x0d
    uint32_t sector_count = ltoh32(*((uint32_t*) &buffer[0x15]));
    1880:	6e 88       	ldd	r6, Y+22	; 0x16
    1882:	7f 88       	ldd	r7, Y+23	; 0x17
    1884:	88 8c       	ldd	r8, Y+24	; 0x18
    1886:	99 8c       	ldd	r9, Y+25	; 0x19
#if FAT_FAT32_SUPPORT
    uint32_t sectors_per_fat32 = ltoh32(*((uint32_t*) &buffer[0x19]));
    uint32_t cluster_root_dir = ltoh32(*((uint32_t*) &buffer[0x21]));
#endif

    if(sector_count == 0)
    1888:	61 14       	cp	r6, r1
    188a:	71 04       	cpc	r7, r1
    188c:	81 04       	cpc	r8, r1
    188e:	91 04       	cpc	r9, r1
    1890:	31 f4       	brne	.+12     	; 0x189e <fat_open+0xf2>
    {
        if(sector_count_16 == 0)
    1892:	30 97       	sbiw	r30, 0x00	; 0
    1894:	09 f4       	brne	.+2      	; 0x1898 <fat_open+0xec>
    1896:	28 c1       	rjmp	.+592    	; 0x1ae8 <fat_open+0x33c>
            /* illegal volume size */
            return 0;
        else
            sector_count = sector_count_16;
    1898:	3f 01       	movw	r6, r30
    189a:	88 24       	eor	r8, r8
    189c:	99 24       	eor	r9, r9
        sectors_per_fat32 = sectors_per_fat;
    else if(sectors_per_fat32 == 0)
        /* this is neither FAT16 nor FAT32 */
        return 0;
#else
    if(sectors_per_fat == 0)
    189e:	61 15       	cp	r22, r1
    18a0:	71 05       	cpc	r23, r1
    18a2:	09 f4       	brne	.+2      	; 0x18a6 <fat_open+0xfa>
    18a4:	21 c1       	rjmp	.+578    	; 0x1ae8 <fat_open+0x33c>
#if FAT_FAT32_SUPPORT
                                 - sectors_per_fat32 * fat_copies
#else
                                 - (uint32_t) sectors_per_fat * fat_copies
#endif
                                 - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
    18a6:	c9 01       	movw	r24, r18
    18a8:	a0 e0       	ldi	r26, 0x00	; 0
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	8e 8f       	std	Y+30, r24	; 0x1e
    18ae:	9f 8f       	std	Y+31, r25	; 0x1f
    18b0:	a8 a3       	std	Y+32, r26	; 0x20
    18b2:	b9 a3       	std	Y+33, r27	; 0x21
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	24 2f       	mov	r18, r20
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	40 e0       	ldi	r20, 0x00	; 0
    18be:	50 e0       	ldi	r21, 0x00	; 0
    18c0:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <__mulsi3>
    18c4:	6a 8f       	std	Y+26, r22	; 0x1a
    18c6:	7b 8f       	std	Y+27, r23	; 0x1b
    18c8:	8c 8f       	std	Y+28, r24	; 0x1c
    18ca:	9d 8f       	std	Y+29, r25	; 0x1d
    uint32_t data_cluster_count = data_sector_count / sectors_per_cluster;
    18cc:	84 01       	movw	r16, r8
    18ce:	73 01       	movw	r14, r6
    18d0:	2e 8d       	ldd	r18, Y+30	; 0x1e
    18d2:	3f 8d       	ldd	r19, Y+31	; 0x1f
    18d4:	48 a1       	ldd	r20, Y+32	; 0x20
    18d6:	59 a1       	ldd	r21, Y+33	; 0x21
    18d8:	e2 1a       	sub	r14, r18
    18da:	f3 0a       	sbc	r15, r19
    18dc:	04 0b       	sbc	r16, r20
    18de:	15 0b       	sbc	r17, r21
    18e0:	e6 1a       	sub	r14, r22
    18e2:	f7 0a       	sbc	r15, r23
    18e4:	08 0b       	sbc	r16, r24
    18e6:	19 0b       	sbc	r17, r25
    18e8:	8a a1       	ldd	r24, Y+34	; 0x22
    18ea:	9b a1       	ldd	r25, Y+35	; 0x23
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	2d a1       	ldd	r18, Y+37	; 0x25
    18f0:	3e a1       	ldd	r19, Y+38	; 0x26
    18f2:	45 e0       	ldi	r20, 0x05	; 5
    18f4:	22 0f       	add	r18, r18
    18f6:	33 1f       	adc	r19, r19
    18f8:	4a 95       	dec	r20
    18fa:	e1 f7       	brne	.-8      	; 0x18f4 <fat_open+0x148>
    18fc:	82 0f       	add	r24, r18
    18fe:	93 1f       	adc	r25, r19
    1900:	6a a1       	ldd	r22, Y+34	; 0x22
    1902:	7b a1       	ldd	r23, Y+35	; 0x23
    1904:	0e 94 34 26 	call	0x4c68	; 0x4c68 <__udivmodhi4>
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	e6 1a       	sub	r14, r22
    190e:	f7 0a       	sbc	r15, r23
    1910:	08 0b       	sbc	r16, r24
    1912:	19 0b       	sbc	r17, r25
    1914:	8c a1       	ldd	r24, Y+36	; 0x24
    1916:	28 2f       	mov	r18, r24
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	40 e0       	ldi	r20, 0x00	; 0
    191c:	50 e0       	ldi	r21, 0x00	; 0
    191e:	c8 01       	movw	r24, r16
    1920:	b7 01       	movw	r22, r14
    1922:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <__udivmodsi4>
    1926:	79 01       	movw	r14, r18
    1928:	8a 01       	movw	r16, r20
    if(data_cluster_count < 4085)
    192a:	95 ef       	ldi	r25, 0xF5	; 245
    192c:	e9 16       	cp	r14, r25
    192e:	9f e0       	ldi	r25, 0x0F	; 15
    1930:	f9 06       	cpc	r15, r25
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	09 07       	cpc	r16, r25
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	19 07       	cpc	r17, r25
    193a:	08 f4       	brcc	.+2      	; 0x193e <fat_open+0x192>
    193c:	d5 c0       	rjmp	.+426    	; 0x1ae8 <fat_open+0x33c>
        /* this is a FAT12, not supported */
        return 0;
    else if(data_cluster_count < 65525)
    193e:	a5 ef       	ldi	r26, 0xF5	; 245
    1940:	ea 16       	cp	r14, r26
    1942:	af ef       	ldi	r26, 0xFF	; 255
    1944:	fa 06       	cpc	r15, r26
    1946:	a0 e0       	ldi	r26, 0x00	; 0
    1948:	0a 07       	cpc	r16, r26
    194a:	a0 e0       	ldi	r26, 0x00	; 0
    194c:	1a 07       	cpc	r17, r26
    194e:	28 f4       	brcc	.+10     	; 0x195a <fat_open+0x1ae>
        /* this is a FAT16 */
        partition->type = PARTITION_TYPE_FAT16;
    1950:	86 e0       	ldi	r24, 0x06	; 6
    1952:	ef a1       	ldd	r30, Y+39	; 0x27
    1954:	f8 a5       	ldd	r31, Y+40	; 0x28
    1956:	80 87       	std	Z+8, r24	; 0x08
    1958:	05 c0       	rjmp	.+10     	; 0x1964 <fat_open+0x1b8>
    else
        /* this is a FAT32 */
        partition->type = PARTITION_TYPE_FAT32;
    195a:	8b e0       	ldi	r24, 0x0B	; 11
    195c:	af a1       	ldd	r26, Y+39	; 0x27
    195e:	b8 a5       	ldd	r27, Y+40	; 0x28
    1960:	18 96       	adiw	r26, 0x08	; 8
    1962:	8c 93       	st	X, r24

    /* fill header information */
    struct fat_header_struct* header = &fs->header;
    memset(header, 0, sizeof(*header));
    1964:	88 e1       	ldi	r24, 0x18	; 24
    1966:	e8 e3       	ldi	r30, 0x38	; 56
    1968:	f2 e0       	ldi	r31, 0x02	; 2
    196a:	df 01       	movw	r26, r30
    196c:	1d 92       	st	X+, r1
    196e:	8a 95       	dec	r24
    1970:	e9 f7       	brne	.-6      	; 0x196c <fat_open+0x1c0>
    
    header->size = (offset_t) sector_count * bytes_per_sector;
    1972:	ea a1       	ldd	r30, Y+34	; 0x22
    1974:	fb a1       	ldd	r31, Y+35	; 0x23
    1976:	5f 01       	movw	r10, r30
    1978:	cc 24       	eor	r12, r12
    197a:	dd 24       	eor	r13, r13
    197c:	c4 01       	movw	r24, r8
    197e:	b3 01       	movw	r22, r6
    1980:	a6 01       	movw	r20, r12
    1982:	95 01       	movw	r18, r10
    1984:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <__mulsi3>
    1988:	60 93 38 02 	sts	0x0238, r22
    198c:	70 93 39 02 	sts	0x0239, r23
    1990:	80 93 3a 02 	sts	0x023A, r24
    1994:	90 93 3b 02 	sts	0x023B, r25

    header->fat_offset = /* jump to partition */
    1998:	c6 01       	movw	r24, r12
    199a:	b5 01       	movw	r22, r10
    199c:	2e 8d       	ldd	r18, Y+30	; 0x1e
    199e:	3f 8d       	ldd	r19, Y+31	; 0x1f
    19a0:	48 a1       	ldd	r20, Y+32	; 0x20
    19a2:	59 a1       	ldd	r21, Y+33	; 0x21
    19a4:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <__mulsi3>
    19a8:	26 0e       	add	r2, r22
    19aa:	37 1e       	adc	r3, r23
    19ac:	48 1e       	adc	r4, r24
    19ae:	59 1e       	adc	r5, r25
    19b0:	20 92 3c 02 	sts	0x023C, r2
    19b4:	30 92 3d 02 	sts	0x023D, r3
    19b8:	40 92 3e 02 	sts	0x023E, r4
    19bc:	50 92 3f 02 	sts	0x023F, r5
                         partition_offset +
                         /* jump to fat */
                         (offset_t) reserved_sectors * bytes_per_sector;
    header->fat_size = (data_cluster_count + 2) * (partition->type == PARTITION_TYPE_FAT16 ? 2 : 4);
    19c0:	af a1       	ldd	r26, Y+39	; 0x27
    19c2:	b8 a5       	ldd	r27, Y+40	; 0x28
    19c4:	18 96       	adiw	r26, 0x08	; 8
    19c6:	8c 91       	ld	r24, X
    19c8:	86 30       	cpi	r24, 0x06	; 6
    19ca:	29 f0       	breq	.+10     	; 0x19d6 <fat_open+0x22a>
    19cc:	64 e0       	ldi	r22, 0x04	; 4
    19ce:	70 e0       	ldi	r23, 0x00	; 0
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	04 c0       	rjmp	.+8      	; 0x19de <fat_open+0x232>
    19d6:	62 e0       	ldi	r22, 0x02	; 2
    19d8:	70 e0       	ldi	r23, 0x00	; 0
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	22 e0       	ldi	r18, 0x02	; 2
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	40 e0       	ldi	r20, 0x00	; 0
    19e4:	50 e0       	ldi	r21, 0x00	; 0
    19e6:	e2 0e       	add	r14, r18
    19e8:	f3 1e       	adc	r15, r19
    19ea:	04 1f       	adc	r16, r20
    19ec:	15 1f       	adc	r17, r21
    19ee:	a8 01       	movw	r20, r16
    19f0:	97 01       	movw	r18, r14
    19f2:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <__mulsi3>
    19f6:	60 93 40 02 	sts	0x0240, r22
    19fa:	70 93 41 02 	sts	0x0241, r23
    19fe:	80 93 42 02 	sts	0x0242, r24
    1a02:	90 93 43 02 	sts	0x0243, r25

    header->sector_size = bytes_per_sector;
    1a06:	4a a1       	ldd	r20, Y+34	; 0x22
    1a08:	5b a1       	ldd	r21, Y+35	; 0x23
    1a0a:	50 93 45 02 	sts	0x0245, r21
    1a0e:	40 93 44 02 	sts	0x0244, r20
    header->cluster_size = (uint16_t) bytes_per_sector * sectors_per_cluster;
    1a12:	5c a1       	ldd	r21, Y+36	; 0x24
    1a14:	85 2f       	mov	r24, r21
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	dc 01       	movw	r26, r24
    1a1a:	ea a1       	ldd	r30, Y+34	; 0x22
    1a1c:	fb a1       	ldd	r31, Y+35	; 0x23
    1a1e:	ae 9f       	mul	r26, r30
    1a20:	c0 01       	movw	r24, r0
    1a22:	af 9f       	mul	r26, r31
    1a24:	90 0d       	add	r25, r0
    1a26:	be 9f       	mul	r27, r30
    1a28:	90 0d       	add	r25, r0
    1a2a:	11 24       	eor	r1, r1
    1a2c:	90 93 47 02 	sts	0x0247, r25
    1a30:	80 93 46 02 	sts	0x0246, r24

#if FAT_FAT32_SUPPORT
    if(partition->type == PARTITION_TYPE_FAT16)
#endif
    {
        header->root_dir_offset = /* jump to fats */
    1a34:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1a36:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1a38:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a3a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a3c:	a6 01       	movw	r20, r12
    1a3e:	95 01       	movw	r18, r10
    1a40:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <__mulsi3>
    1a44:	20 91 3c 02 	lds	r18, 0x023C
    1a48:	30 91 3d 02 	lds	r19, 0x023D
    1a4c:	40 91 3e 02 	lds	r20, 0x023E
    1a50:	50 91 3f 02 	lds	r21, 0x023F
    1a54:	62 0f       	add	r22, r18
    1a56:	73 1f       	adc	r23, r19
    1a58:	84 1f       	adc	r24, r20
    1a5a:	95 1f       	adc	r25, r21
    1a5c:	60 93 4c 02 	sts	0x024C, r22
    1a60:	70 93 4d 02 	sts	0x024D, r23
    1a64:	80 93 4e 02 	sts	0x024E, r24
    1a68:	90 93 4f 02 	sts	0x024F, r25
                                  header->fat_offset +
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
    1a6c:	ad a1       	ldd	r26, Y+37	; 0x25
    1a6e:	be a1       	ldd	r27, Y+38	; 0x26
    1a70:	9d 01       	movw	r18, r26
    1a72:	40 e0       	ldi	r20, 0x00	; 0
    1a74:	50 e0       	ldi	r21, 0x00	; 0
    1a76:	15 e0       	ldi	r17, 0x05	; 5
    1a78:	22 0f       	add	r18, r18
    1a7a:	33 1f       	adc	r19, r19
    1a7c:	44 1f       	adc	r20, r20
    1a7e:	55 1f       	adc	r21, r21
    1a80:	1a 95       	dec	r17
    1a82:	d1 f7       	brne	.-12     	; 0x1a78 <fat_open+0x2cc>
    1a84:	62 0f       	add	r22, r18
    1a86:	73 1f       	adc	r23, r19
    1a88:	84 1f       	adc	r24, r20
    1a8a:	95 1f       	adc	r25, r21
    1a8c:	60 93 48 02 	sts	0x0248, r22
    1a90:	70 93 49 02 	sts	0x0249, r23
    1a94:	80 93 4a 02 	sts	0x024A, r24
    1a98:	90 93 4b 02 	sts	0x024B, r25
    1a9c:	26 e3       	ldi	r18, 0x36	; 54
    1a9e:	32 e0       	ldi	r19, 0x02	; 2
    1aa0:	02 c0       	rjmp	.+4      	; 0x1aa6 <fat_open+0x2fa>
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
#endif
        return 0;
    }
    
    return fs;
}
    1aa6:	c9 01       	movw	r24, r18
    1aa8:	a8 96       	adiw	r28, 0x28	; 40
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	f8 94       	cli
    1aae:	de bf       	out	0x3e, r29	; 62
    1ab0:	0f be       	out	0x3f, r0	; 63
    1ab2:	cd bf       	out	0x3d, r28	; 61
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	1f 91       	pop	r17
    1aba:	0f 91       	pop	r16
    1abc:	ff 90       	pop	r15
    1abe:	ef 90       	pop	r14
    1ac0:	df 90       	pop	r13
    1ac2:	cf 90       	pop	r12
    1ac4:	bf 90       	pop	r11
    1ac6:	af 90       	pop	r10
    1ac8:	9f 90       	pop	r9
    1aca:	8f 90       	pop	r8
    1acc:	7f 90       	pop	r7
    1ace:	6f 90       	pop	r6
    1ad0:	5f 90       	pop	r5
    1ad2:	4f 90       	pop	r4
    1ad4:	3f 90       	pop	r3
    1ad6:	2f 90       	pop	r2
    1ad8:	08 95       	ret
#else
    struct fat_fs_struct* fs = fat_fs_handles;
    uint8_t i;
    for(i = 0; i < FAT_FS_COUNT; ++i)
    {
        if(!fs->partition)
    1ada:	80 91 36 02 	lds	r24, 0x0236
    1ade:	90 91 37 02 	lds	r25, 0x0237
    1ae2:	89 2b       	or	r24, r25
    1ae4:	f1 f6       	brne	.-68     	; 0x1aa2 <fat_open+0x2f6>
    1ae6:	91 ce       	rjmp	.-734    	; 0x180a <fat_open+0x5e>
    if(!fat_read_header(fs))
    {
#if USE_DYNAMIC_MEMORY
        free(fs);
#else
        fs->partition = 0;
    1ae8:	10 92 37 02 	sts	0x0237, r1
    1aec:	10 92 36 02 	sts	0x0236, r1
    1af0:	d8 cf       	rjmp	.-80     	; 0x1aa2 <fat_open+0x2f6>

00001af2 <sd_raw_write>:
 * \param[in] length The number of bytes to write.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_read_interval
 */
uint8_t sd_raw_write(offset_t offset, const uint8_t* buffer, uintptr_t length)
{
    1af2:	2f 92       	push	r2
    1af4:	3f 92       	push	r3
    1af6:	4f 92       	push	r4
    1af8:	5f 92       	push	r5
    1afa:	6f 92       	push	r6
    1afc:	7f 92       	push	r7
    1afe:	8f 92       	push	r8
    1b00:	9f 92       	push	r9
    1b02:	af 92       	push	r10
    1b04:	bf 92       	push	r11
    1b06:	cf 92       	push	r12
    1b08:	df 92       	push	r13
    1b0a:	ef 92       	push	r14
    1b0c:	ff 92       	push	r15
    1b0e:	0f 93       	push	r16
    1b10:	1f 93       	push	r17
    1b12:	cf 93       	push	r28
    1b14:	df 93       	push	r29
    1b16:	4b 01       	movw	r8, r22
    1b18:	5c 01       	movw	r10, r24
    1b1a:	2a 01       	movw	r4, r20
    1b1c:	39 01       	movw	r6, r18
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    1b1e:	33 24       	eor	r3, r3
    1b20:	3a 94       	dec	r3
        buffer += write_length;
        offset += write_length;
        length -= write_length;

#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
    1b22:	22 24       	eor	r2, r2
    1b24:	23 94       	inc	r2
    1b26:	a1 c0       	rjmp	.+322    	; 0x1c6a <sd_raw_write+0x178>
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    {
        /* determine byte count to write at once */
        block_offset = offset & 0x01ff;
    1b28:	e4 01       	movw	r28, r8
    1b2a:	d1 70       	andi	r29, 0x01	; 1
        block_address = offset - block_offset;
    1b2c:	ce 01       	movw	r24, r28
    1b2e:	a0 e0       	ldi	r26, 0x00	; 0
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	85 01       	movw	r16, r10
    1b34:	74 01       	movw	r14, r8
    1b36:	e8 1a       	sub	r14, r24
    1b38:	f9 0a       	sbc	r15, r25
    1b3a:	0a 0b       	sbc	r16, r26
    1b3c:	1b 0b       	sbc	r17, r27
        write_length = 512 - block_offset; /* write up to block border */
    1b3e:	c1 2c       	mov	r12, r1
    1b40:	62 e0       	ldi	r22, 0x02	; 2
    1b42:	d6 2e       	mov	r13, r22
    1b44:	cc 1a       	sub	r12, r28
    1b46:	dd 0a       	sbc	r13, r29
    1b48:	6c 14       	cp	r6, r12
    1b4a:	7d 04       	cpc	r7, r13
    1b4c:	08 f4       	brcc	.+2      	; 0x1b50 <sd_raw_write+0x5e>
    1b4e:	63 01       	movw	r12, r6
            write_length = length;
        
        /* Merge the data to write with the content of the block.
         * Use the cached block if available.
         */
        if(block_address != raw_block_address)
    1b50:	80 91 e7 04 	lds	r24, 0x04E7
    1b54:	90 91 e8 04 	lds	r25, 0x04E8
    1b58:	a0 91 e9 04 	lds	r26, 0x04E9
    1b5c:	b0 91 ea 04 	lds	r27, 0x04EA
    1b60:	e8 16       	cp	r14, r24
    1b62:	f9 06       	cpc	r15, r25
    1b64:	0a 07       	cpc	r16, r26
    1b66:	1b 07       	cpc	r17, r27
    1b68:	f9 f0       	breq	.+62     	; 0x1ba8 <sd_raw_write+0xb6>
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    1b6a:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <sd_raw_sync>
    1b6e:	88 23       	and	r24, r24
    1b70:	09 f4       	brne	.+2      	; 0x1b74 <sd_raw_write+0x82>
    1b72:	81 c0       	rjmp	.+258    	; 0x1c76 <sd_raw_write+0x184>
                return 0;
#endif

            if(block_offset || write_length < 512)
    1b74:	20 97       	sbiw	r28, 0x00	; 0
    1b76:	29 f4       	brne	.+10     	; 0x1b82 <sd_raw_write+0x90>
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	c8 16       	cp	r12, r24
    1b7c:	82 e0       	ldi	r24, 0x02	; 2
    1b7e:	d8 06       	cpc	r13, r24
    1b80:	58 f4       	brcc	.+22     	; 0x1b98 <sd_raw_write+0xa6>
            {
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
    1b82:	c8 01       	movw	r24, r16
    1b84:	b7 01       	movw	r22, r14
    1b86:	47 ee       	ldi	r20, 0xE7	; 231
    1b88:	52 e0       	ldi	r21, 0x02	; 2
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	32 e0       	ldi	r19, 0x02	; 2
    1b8e:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <sd_raw_read>
    1b92:	88 23       	and	r24, r24
    1b94:	09 f4       	brne	.+2      	; 0x1b98 <sd_raw_write+0xa6>
    1b96:	6f c0       	rjmp	.+222    	; 0x1c76 <sd_raw_write+0x184>
                    return 0;
            }
            raw_block_address = block_address;
    1b98:	e0 92 e7 04 	sts	0x04E7, r14
    1b9c:	f0 92 e8 04 	sts	0x04E8, r15
    1ba0:	00 93 e9 04 	sts	0x04E9, r16
    1ba4:	10 93 ea 04 	sts	0x04EA, r17
        }

        if(buffer != raw_block)
    1ba8:	87 ee       	ldi	r24, 0xE7	; 231
    1baa:	48 16       	cp	r4, r24
    1bac:	82 e0       	ldi	r24, 0x02	; 2
    1bae:	58 06       	cpc	r5, r24
    1bb0:	71 f0       	breq	.+28     	; 0x1bce <sd_raw_write+0xdc>
        {
            memcpy(raw_block + block_offset, buffer, write_length);
    1bb2:	9e 01       	movw	r18, r28
    1bb4:	29 51       	subi	r18, 0x19	; 25
    1bb6:	3d 4f       	sbci	r19, 0xFD	; 253
    1bb8:	c9 01       	movw	r24, r18
    1bba:	b2 01       	movw	r22, r4
    1bbc:	a6 01       	movw	r20, r12
    1bbe:	0e 94 28 23 	call	0x4650	; 0x4650 <memcpy>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;
    1bc2:	10 92 eb 04 	sts	0x04EB, r1

            if(length == write_length)
    1bc6:	6c 14       	cp	r6, r12
    1bc8:	7d 04       	cpc	r7, r13
    1bca:	09 f4       	brne	.+2      	; 0x1bce <sd_raw_write+0xdc>
    1bcc:	52 c0       	rjmp	.+164    	; 0x1c72 <sd_raw_write+0x180>
                return 1;
#endif
        }

        /* address card */
        select_card();
    1bce:	2a 98       	cbi	0x05, 2	; 5

        /* send single block request */
#if SD_RAW_SDHC
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
#else
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, block_address))
    1bd0:	88 e1       	ldi	r24, 0x18	; 24
    1bd2:	b8 01       	movw	r22, r16
    1bd4:	a7 01       	movw	r20, r14
    1bd6:	0e 94 3a 07 	call	0xe74	; 0xe74 <sd_raw_send_command>
    1bda:	88 23       	and	r24, r24
    1bdc:	11 f0       	breq	.+4      	; 0x1be2 <sd_raw_write+0xf0>
#endif
        {
            unselect_card();
    1bde:	2a 9a       	sbi	0x05, 2	; 5
    1be0:	4a c0       	rjmp	.+148    	; 0x1c76 <sd_raw_write+0x184>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    1be2:	8e ef       	ldi	r24, 0xFE	; 254
    1be4:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    1be6:	0d b4       	in	r0, 0x2d	; 45
    1be8:	07 fe       	sbrs	r0, 7
    1bea:	fd cf       	rjmp	.-6      	; 0x1be6 <sd_raw_write+0xf4>
    SPSR &= ~(1 << SPIF);
    1bec:	8d b5       	in	r24, 0x2d	; 45
    1bee:	8f 77       	andi	r24, 0x7F	; 127
    1bf0:	8d bd       	out	0x2d, r24	; 45
    1bf2:	e7 ee       	ldi	r30, 0xE7	; 231
    1bf4:	f2 e0       	ldi	r31, 0x02	; 2
        sd_raw_send_byte(0xfe);

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
            sd_raw_send_byte(*cache++);
    1bf6:	81 91       	ld	r24, Z+
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    1bf8:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    1bfa:	0d b4       	in	r0, 0x2d	; 45
    1bfc:	07 fe       	sbrs	r0, 7
    1bfe:	fd cf       	rjmp	.-6      	; 0x1bfa <sd_raw_write+0x108>
    SPSR &= ~(1 << SPIF);
    1c00:	8d b5       	in	r24, 0x2d	; 45
    1c02:	8f 77       	andi	r24, 0x7F	; 127
    1c04:	8d bd       	out	0x2d, r24	; 45
        /* send start byte */
        sd_raw_send_byte(0xfe);

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
    1c06:	84 e0       	ldi	r24, 0x04	; 4
    1c08:	e7 3e       	cpi	r30, 0xE7	; 231
    1c0a:	f8 07       	cpc	r31, r24
    1c0c:	a1 f7       	brne	.-24     	; 0x1bf6 <sd_raw_write+0x104>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    1c0e:	3e bc       	out	0x2e, r3	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    1c10:	0d b4       	in	r0, 0x2d	; 45
    1c12:	07 fe       	sbrs	r0, 7
    1c14:	fd cf       	rjmp	.-6      	; 0x1c10 <sd_raw_write+0x11e>
    SPSR &= ~(1 << SPIF);
    1c16:	8d b5       	in	r24, 0x2d	; 45
    1c18:	8f 77       	andi	r24, 0x7F	; 127
    1c1a:	8d bd       	out	0x2d, r24	; 45
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    1c1c:	3e bc       	out	0x2e, r3	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    1c1e:	0d b4       	in	r0, 0x2d	; 45
    1c20:	07 fe       	sbrs	r0, 7
    1c22:	fd cf       	rjmp	.-6      	; 0x1c1e <sd_raw_write+0x12c>
    SPSR &= ~(1 << SPIF);
    1c24:	8d b5       	in	r24, 0x2d	; 45
    1c26:	8f 77       	andi	r24, 0x7F	; 127
    1c28:	8d bd       	out	0x2d, r24	; 45
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    1c2a:	3e bc       	out	0x2e, r3	; 46
    while(!(SPSR & (1 << SPIF)));
    1c2c:	0d b4       	in	r0, 0x2d	; 45
    1c2e:	07 fe       	sbrs	r0, 7
    1c30:	fd cf       	rjmp	.-6      	; 0x1c2c <sd_raw_write+0x13a>
    SPSR &= ~(1 << SPIF);
    1c32:	8d b5       	in	r24, 0x2d	; 45
    1c34:	8f 77       	andi	r24, 0x7F	; 127
    1c36:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    1c38:	8e b5       	in	r24, 0x2e	; 46
        /* write dummy crc16 */
        sd_raw_send_byte(0xff);
        sd_raw_send_byte(0xff);

        /* wait while card is busy */
        while(sd_raw_rec_byte() != 0xff);
    1c3a:	8f 3f       	cpi	r24, 0xFF	; 255
    1c3c:	b1 f7       	brne	.-20     	; 0x1c2a <sd_raw_write+0x138>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    1c3e:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    1c40:	0d b4       	in	r0, 0x2d	; 45
    1c42:	07 fe       	sbrs	r0, 7
    1c44:	fd cf       	rjmp	.-6      	; 0x1c40 <sd_raw_write+0x14e>
    SPSR &= ~(1 << SPIF);
    1c46:	8d b5       	in	r24, 0x2d	; 45
    1c48:	8f 77       	andi	r24, 0x7F	; 127
    1c4a:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    1c4c:	8e b5       	in	r24, 0x2e	; 46
        /* wait while card is busy */
        while(sd_raw_rec_byte() != 0xff);
        sd_raw_rec_byte();

        /* deaddress card */
        unselect_card();
    1c4e:	2a 9a       	sbi	0x05, 2	; 5

        buffer += write_length;
    1c50:	4c 0c       	add	r4, r12
    1c52:	5d 1c       	adc	r5, r13
        offset += write_length;
    1c54:	c6 01       	movw	r24, r12
    1c56:	a0 e0       	ldi	r26, 0x00	; 0
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	88 0e       	add	r8, r24
    1c5c:	99 1e       	adc	r9, r25
    1c5e:	aa 1e       	adc	r10, r26
    1c60:	bb 1e       	adc	r11, r27
        length -= write_length;
    1c62:	6c 18       	sub	r6, r12
    1c64:	7d 08       	sbc	r7, r13

#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
    1c66:	20 92 eb 04 	sts	0x04EB, r2
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    1c6a:	61 14       	cp	r6, r1
    1c6c:	71 04       	cpc	r7, r1
    1c6e:	09 f0       	breq	.+2      	; 0x1c72 <sd_raw_write+0x180>
    1c70:	5b cf       	rjmp	.-330    	; 0x1b28 <sd_raw_write+0x36>
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	01 c0       	rjmp	.+2      	; 0x1c78 <sd_raw_write+0x186>
    1c76:	80 e0       	ldi	r24, 0x00	; 0
        raw_block_written = 1;
#endif
    }

    return 1;
}
    1c78:	df 91       	pop	r29
    1c7a:	cf 91       	pop	r28
    1c7c:	1f 91       	pop	r17
    1c7e:	0f 91       	pop	r16
    1c80:	ff 90       	pop	r15
    1c82:	ef 90       	pop	r14
    1c84:	df 90       	pop	r13
    1c86:	cf 90       	pop	r12
    1c88:	bf 90       	pop	r11
    1c8a:	af 90       	pop	r10
    1c8c:	9f 90       	pop	r9
    1c8e:	8f 90       	pop	r8
    1c90:	7f 90       	pop	r7
    1c92:	6f 90       	pop	r6
    1c94:	5f 90       	pop	r5
    1c96:	4f 90       	pop	r4
    1c98:	3f 90       	pop	r3
    1c9a:	2f 90       	pop	r2
    1c9c:	08 95       	ret

00001c9e <sd_raw_sync>:
 * \see sd_raw_write
 */
uint8_t sd_raw_sync()
{
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
    1c9e:	80 91 eb 04 	lds	r24, 0x04EB
    1ca2:	88 23       	and	r24, r24
    1ca4:	11 f0       	breq	.+4      	; 0x1caa <sd_raw_sync+0xc>
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	08 95       	ret
        return 1;
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
    1caa:	60 91 e7 04 	lds	r22, 0x04E7
    1cae:	70 91 e8 04 	lds	r23, 0x04E8
    1cb2:	80 91 e9 04 	lds	r24, 0x04E9
    1cb6:	90 91 ea 04 	lds	r25, 0x04EA
    1cba:	47 ee       	ldi	r20, 0xE7	; 231
    1cbc:	52 e0       	ldi	r21, 0x02	; 2
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	32 e0       	ldi	r19, 0x02	; 2
    1cc2:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <sd_raw_write>
    1cc6:	88 23       	and	r24, r24
    1cc8:	19 f0       	breq	.+6      	; 0x1cd0 <sd_raw_sync+0x32>
        return 0;
    raw_block_written = 1;
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	80 93 eb 04 	sts	0x04EB, r24
#endif
    return 1;
}
    1cd0:	08 95       	ret

00001cd2 <sd_raw_read>:
 * \param[in] length The number of bytes to read.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_write_interval
 */
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    1cd2:	3f 92       	push	r3
    1cd4:	4f 92       	push	r4
    1cd6:	5f 92       	push	r5
    1cd8:	6f 92       	push	r6
    1cda:	7f 92       	push	r7
    1cdc:	8f 92       	push	r8
    1cde:	9f 92       	push	r9
    1ce0:	af 92       	push	r10
    1ce2:	bf 92       	push	r11
    1ce4:	cf 92       	push	r12
    1ce6:	df 92       	push	r13
    1ce8:	ef 92       	push	r14
    1cea:	ff 92       	push	r15
    1cec:	0f 93       	push	r16
    1cee:	1f 93       	push	r17
    1cf0:	cf 93       	push	r28
    1cf2:	df 93       	push	r29
    1cf4:	3b 01       	movw	r6, r22
    1cf6:	4c 01       	movw	r8, r24
    1cf8:	6a 01       	movw	r12, r20
    1cfa:	29 01       	movw	r4, r18
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    1cfc:	33 24       	eor	r3, r3
    1cfe:	3a 94       	dec	r3
    1d00:	8f c0       	rjmp	.+286    	; 0x1e20 <sd_raw_read+0x14e>
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
    1d02:	7f ef       	ldi	r23, 0xFF	; 255
    1d04:	a7 2e       	mov	r10, r23
    1d06:	71 e0       	ldi	r23, 0x01	; 1
    1d08:	b7 2e       	mov	r11, r23
    1d0a:	a6 20       	and	r10, r6
    1d0c:	b7 20       	and	r11, r7
        block_address = offset - block_offset;
    1d0e:	c5 01       	movw	r24, r10
    1d10:	a0 e0       	ldi	r26, 0x00	; 0
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	84 01       	movw	r16, r8
    1d16:	73 01       	movw	r14, r6
    1d18:	e8 1a       	sub	r14, r24
    1d1a:	f9 0a       	sbc	r15, r25
    1d1c:	0a 0b       	sbc	r16, r26
    1d1e:	1b 0b       	sbc	r17, r27
        read_length = 512 - block_offset; /* read up to block border */
    1d20:	c0 e0       	ldi	r28, 0x00	; 0
    1d22:	d2 e0       	ldi	r29, 0x02	; 2
    1d24:	ca 19       	sub	r28, r10
    1d26:	db 09       	sbc	r29, r11
    1d28:	4c 16       	cp	r4, r28
    1d2a:	5d 06       	cpc	r5, r29
    1d2c:	08 f4       	brcc	.+2      	; 0x1d30 <sd_raw_read+0x5e>
    1d2e:	e2 01       	movw	r28, r4
        if(read_length > length)
            read_length = length;
        
#if !SD_RAW_SAVE_RAM
        /* check if the requested data is cached */
        if(block_address != raw_block_address)
    1d30:	80 91 e7 04 	lds	r24, 0x04E7
    1d34:	90 91 e8 04 	lds	r25, 0x04E8
    1d38:	a0 91 e9 04 	lds	r26, 0x04E9
    1d3c:	b0 91 ea 04 	lds	r27, 0x04EA
    1d40:	e8 16       	cp	r14, r24
    1d42:	f9 06       	cpc	r15, r25
    1d44:	0a 07       	cpc	r16, r26
    1d46:	1b 07       	cpc	r17, r27
    1d48:	09 f4       	brne	.+2      	; 0x1d4c <sd_raw_read+0x7a>
    1d4a:	57 c0       	rjmp	.+174    	; 0x1dfa <sd_raw_read+0x128>
#endif
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    1d4c:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <sd_raw_sync>
    1d50:	88 23       	and	r24, r24
    1d52:	09 f4       	brne	.+2      	; 0x1d56 <sd_raw_read+0x84>
    1d54:	6a c0       	rjmp	.+212    	; 0x1e2a <sd_raw_read+0x158>
                return 0;
#endif

            /* address card */
            select_card();
    1d56:	2a 98       	cbi	0x05, 2	; 5

            /* send single block request */
#if SD_RAW_SDHC
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
#else
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, block_address))
    1d58:	81 e1       	ldi	r24, 0x11	; 17
    1d5a:	b8 01       	movw	r22, r16
    1d5c:	a7 01       	movw	r20, r14
    1d5e:	0e 94 3a 07 	call	0xe74	; 0xe74 <sd_raw_send_command>
    1d62:	88 23       	and	r24, r24
    1d64:	19 f0       	breq	.+6      	; 0x1d6c <sd_raw_read+0x9a>
#endif
            {
                unselect_card();
    1d66:	2a 9a       	sbi	0x05, 2	; 5
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	5f c0       	rjmp	.+190    	; 0x1e2a <sd_raw_read+0x158>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    1d6c:	3e bc       	out	0x2e, r3	; 46
    while(!(SPSR & (1 << SPIF)));
    1d6e:	0d b4       	in	r0, 0x2d	; 45
    1d70:	07 fe       	sbrs	r0, 7
    1d72:	fd cf       	rjmp	.-6      	; 0x1d6e <sd_raw_read+0x9c>
    SPSR &= ~(1 << SPIF);
    1d74:	8d b5       	in	r24, 0x2d	; 45
    1d76:	8f 77       	andi	r24, 0x7F	; 127
    1d78:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    1d7a:	8e b5       	in	r24, 0x2e	; 46
                unselect_card();
                return 0;
            }

            /* wait for data block (start byte 0xfe) */
            while(sd_raw_rec_byte() != 0xfe);
    1d7c:	8e 3f       	cpi	r24, 0xFE	; 254
    1d7e:	b1 f7       	brne	.-20     	; 0x1d6c <sd_raw_read+0x9a>
    1d80:	e7 ee       	ldi	r30, 0xE7	; 231
    1d82:	f2 e0       	ldi	r31, 0x02	; 2
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    1d84:	3e bc       	out	0x2e, r3	; 46
    while(!(SPSR & (1 << SPIF)));
    1d86:	0d b4       	in	r0, 0x2d	; 45
    1d88:	07 fe       	sbrs	r0, 7
    1d8a:	fd cf       	rjmp	.-6      	; 0x1d86 <sd_raw_read+0xb4>
    SPSR &= ~(1 << SPIF);
    1d8c:	8d b5       	in	r24, 0x2d	; 45
    1d8e:	8f 77       	andi	r24, 0x7F	; 127
    1d90:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    1d92:	8e b5       	in	r24, 0x2e	; 46
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
    1d94:	80 83       	st	Z, r24
                    *buffer++ = b;
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
    1d96:	84 e0       	ldi	r24, 0x04	; 4
    1d98:	e6 3e       	cpi	r30, 0xE6	; 230
    1d9a:	f8 07       	cpc	r31, r24
    1d9c:	11 f0       	breq	.+4      	; 0x1da2 <sd_raw_read+0xd0>
                *cache++ = sd_raw_rec_byte();
    1d9e:	31 96       	adiw	r30, 0x01	; 1
    1da0:	f1 cf       	rjmp	.-30     	; 0x1d84 <sd_raw_read+0xb2>
            raw_block_address = block_address;
    1da2:	e0 92 e7 04 	sts	0x04E7, r14
    1da6:	f0 92 e8 04 	sts	0x04E8, r15
    1daa:	00 93 e9 04 	sts	0x04E9, r16
    1dae:	10 93 ea 04 	sts	0x04EA, r17

            memcpy(buffer, raw_block + block_offset, read_length);
    1db2:	95 01       	movw	r18, r10
    1db4:	29 51       	subi	r18, 0x19	; 25
    1db6:	3d 4f       	sbci	r19, 0xFD	; 253
    1db8:	c6 01       	movw	r24, r12
    1dba:	b9 01       	movw	r22, r18
    1dbc:	ae 01       	movw	r20, r28
    1dbe:	0e 94 28 23 	call	0x4650	; 0x4650 <memcpy>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    1dc2:	3e bc       	out	0x2e, r3	; 46
    while(!(SPSR & (1 << SPIF)));
    1dc4:	0d b4       	in	r0, 0x2d	; 45
    1dc6:	07 fe       	sbrs	r0, 7
    1dc8:	fd cf       	rjmp	.-6      	; 0x1dc4 <sd_raw_read+0xf2>
    SPSR &= ~(1 << SPIF);
    1dca:	8d b5       	in	r24, 0x2d	; 45
    1dcc:	8f 77       	andi	r24, 0x7F	; 127
    1dce:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    1dd0:	8e b5       	in	r24, 0x2e	; 46
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    1dd2:	3e bc       	out	0x2e, r3	; 46
    while(!(SPSR & (1 << SPIF)));
    1dd4:	0d b4       	in	r0, 0x2d	; 45
    1dd6:	07 fe       	sbrs	r0, 7
    1dd8:	fd cf       	rjmp	.-6      	; 0x1dd4 <sd_raw_read+0x102>
    SPSR &= ~(1 << SPIF);
    1dda:	8d b5       	in	r24, 0x2d	; 45
    1ddc:	8f 77       	andi	r24, 0x7F	; 127
    1dde:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    1de0:	8e b5       	in	r24, 0x2e	; 46
            /* read crc16 */
            sd_raw_rec_byte();
            sd_raw_rec_byte();
            
            /* deaddress card */
            unselect_card();
    1de2:	2a 9a       	sbi	0x05, 2	; 5
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    1de4:	3e bc       	out	0x2e, r3	; 46
    while(!(SPSR & (1 << SPIF)));
    1de6:	0d b4       	in	r0, 0x2d	; 45
    1de8:	07 fe       	sbrs	r0, 7
    1dea:	fd cf       	rjmp	.-6      	; 0x1de6 <sd_raw_read+0x114>
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
            raw_block_address = block_address;

            memcpy(buffer, raw_block + block_offset, read_length);
            buffer += read_length;
    1dec:	cc 0e       	add	r12, r28
    1dee:	dd 1e       	adc	r13, r29
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    while(!(SPSR & (1 << SPIF)));
    SPSR &= ~(1 << SPIF);
    1df0:	8d b5       	in	r24, 0x2d	; 45
    1df2:	8f 77       	andi	r24, 0x7F	; 127
    1df4:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    1df6:	8e b5       	in	r24, 0x2e	; 46
    1df8:	0a c0       	rjmp	.+20     	; 0x1e0e <sd_raw_read+0x13c>
        }
#if !SD_RAW_SAVE_RAM
        else
        {
            /* use cached data */
            memcpy(buffer, raw_block + block_offset, read_length);
    1dfa:	95 01       	movw	r18, r10
    1dfc:	29 51       	subi	r18, 0x19	; 25
    1dfe:	3d 4f       	sbci	r19, 0xFD	; 253
    1e00:	c6 01       	movw	r24, r12
    1e02:	b9 01       	movw	r22, r18
    1e04:	ae 01       	movw	r20, r28
    1e06:	0e 94 28 23 	call	0x4650	; 0x4650 <memcpy>
            buffer += read_length;
    1e0a:	cc 0e       	add	r12, r28
    1e0c:	dd 1e       	adc	r13, r29
        }
#endif

        length -= read_length;
    1e0e:	4c 1a       	sub	r4, r28
    1e10:	5d 0a       	sbc	r5, r29
        offset += read_length;
    1e12:	ce 01       	movw	r24, r28
    1e14:	a0 e0       	ldi	r26, 0x00	; 0
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	68 0e       	add	r6, r24
    1e1a:	79 1e       	adc	r7, r25
    1e1c:	8a 1e       	adc	r8, r26
    1e1e:	9b 1e       	adc	r9, r27
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    1e20:	41 14       	cp	r4, r1
    1e22:	51 04       	cpc	r5, r1
    1e24:	09 f0       	breq	.+2      	; 0x1e28 <sd_raw_read+0x156>
    1e26:	6d cf       	rjmp	.-294    	; 0x1d02 <sd_raw_read+0x30>
    1e28:	81 e0       	ldi	r24, 0x01	; 1
        length -= read_length;
        offset += read_length;
    }

    return 1;
}
    1e2a:	df 91       	pop	r29
    1e2c:	cf 91       	pop	r28
    1e2e:	1f 91       	pop	r17
    1e30:	0f 91       	pop	r16
    1e32:	ff 90       	pop	r15
    1e34:	ef 90       	pop	r14
    1e36:	df 90       	pop	r13
    1e38:	cf 90       	pop	r12
    1e3a:	bf 90       	pop	r11
    1e3c:	af 90       	pop	r10
    1e3e:	9f 90       	pop	r9
    1e40:	8f 90       	pop	r8
    1e42:	7f 90       	pop	r7
    1e44:	6f 90       	pop	r6
    1e46:	5f 90       	pop	r5
    1e48:	4f 90       	pop	r4
    1e4a:	3f 90       	pop	r3
    1e4c:	08 95       	ret

00001e4e <sd_raw_read_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    1e4e:	2f 92       	push	r2
    1e50:	3f 92       	push	r3
    1e52:	4f 92       	push	r4
    1e54:	5f 92       	push	r5
    1e56:	6f 92       	push	r6
    1e58:	7f 92       	push	r7
    1e5a:	8f 92       	push	r8
    1e5c:	9f 92       	push	r9
    1e5e:	af 92       	push	r10
    1e60:	bf 92       	push	r11
    1e62:	cf 92       	push	r12
    1e64:	df 92       	push	r13
    1e66:	ef 92       	push	r14
    1e68:	ff 92       	push	r15
    1e6a:	0f 93       	push	r16
    1e6c:	1f 93       	push	r17
    1e6e:	df 93       	push	r29
    1e70:	cf 93       	push	r28
    1e72:	00 d0       	rcall	.+0      	; 0x1e74 <sd_raw_read_interval+0x26>
    1e74:	00 d0       	rcall	.+0      	; 0x1e76 <sd_raw_read_interval+0x28>
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	4b 01       	movw	r8, r22
    1e7c:	5c 01       	movw	r10, r24
    1e7e:	3a 01       	movw	r6, r20
    1e80:	3c 83       	std	Y+4, r19	; 0x04
    1e82:	2b 83       	std	Y+3, r18	; 0x03
    1e84:	27 01       	movw	r4, r14
    1e86:	da 82       	std	Y+2, r13	; 0x02
    1e88:	c9 82       	std	Y+1, r12	; 0x01
    if(!buffer || interval == 0 || length < interval || !callback)
    1e8a:	41 15       	cp	r20, r1
    1e8c:	51 05       	cpc	r21, r1
    1e8e:	a9 f1       	breq	.+106    	; 0x1efa <sd_raw_read_interval+0xac>
    1e90:	21 15       	cp	r18, r1
    1e92:	31 05       	cpc	r19, r1
    1e94:	91 f1       	breq	.+100    	; 0x1efa <sd_raw_read_interval+0xac>
    1e96:	02 17       	cp	r16, r18
    1e98:	13 07       	cpc	r17, r19
    1e9a:	78 f1       	brcs	.+94     	; 0x1efa <sd_raw_read_interval+0xac>
    1e9c:	e1 14       	cp	r14, r1
    1e9e:	f1 04       	cpc	r15, r1
    1ea0:	61 f1       	breq	.+88     	; 0x1efa <sd_raw_read_interval+0xac>
    1ea2:	19 01       	movw	r2, r18
    1ea4:	30 94       	com	r3
    1ea6:	21 94       	neg	r2
    1ea8:	31 08       	sbc	r3, r1
    1eaa:	33 94       	inc	r3
    1eac:	02 1b       	sub	r16, r18
    1eae:	13 0b       	sbc	r17, r19
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
    1eb0:	69 01       	movw	r12, r18
    1eb2:	ee 24       	eor	r14, r14
    1eb4:	ff 24       	eor	r15, r15
    {
        /* as reading is now buffered, we directly
         * hand over the request to sd_raw_read()
         */
        if(!sd_raw_read(offset, buffer, interval))
    1eb6:	c5 01       	movw	r24, r10
    1eb8:	b4 01       	movw	r22, r8
    1eba:	a3 01       	movw	r20, r6
    1ebc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ebe:	3c 81       	ldd	r19, Y+4	; 0x04
    1ec0:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <sd_raw_read>
    1ec4:	88 23       	and	r24, r24
    1ec6:	c9 f0       	breq	.+50     	; 0x1efa <sd_raw_read_interval+0xac>
            return 0;
        if(!callback(buffer, offset, p))
    1ec8:	c3 01       	movw	r24, r6
    1eca:	b5 01       	movw	r22, r10
    1ecc:	a4 01       	movw	r20, r8
    1ece:	29 81       	ldd	r18, Y+1	; 0x01
    1ed0:	3a 81       	ldd	r19, Y+2	; 0x02
    1ed2:	f2 01       	movw	r30, r4
    1ed4:	09 95       	icall
    1ed6:	88 23       	and	r24, r24
    1ed8:	91 f0       	breq	.+36     	; 0x1efe <sd_raw_read_interval+0xb0>
            break;
    1eda:	02 0d       	add	r16, r2
    1edc:	13 1d       	adc	r17, r3
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
    1ede:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee2:	80 0f       	add	r24, r16
    1ee4:	91 1f       	adc	r25, r17
    1ee6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ee8:	3c 81       	ldd	r19, Y+4	; 0x04
    1eea:	82 17       	cp	r24, r18
    1eec:	93 07       	cpc	r25, r19
    1eee:	38 f0       	brcs	.+14     	; 0x1efe <sd_raw_read_interval+0xb0>
    1ef0:	8c 0c       	add	r8, r12
    1ef2:	9d 1c       	adc	r9, r13
    1ef4:	ae 1c       	adc	r10, r14
    1ef6:	bf 1c       	adc	r11, r15
    1ef8:	de cf       	rjmp	.-68     	; 0x1eb6 <sd_raw_read_interval+0x68>
    1efa:	80 e0       	ldi	r24, 0x00	; 0
    1efc:	01 c0       	rjmp	.+2      	; 0x1f00 <sd_raw_read_interval+0xb2>
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    /* let card some time to finish */
    sd_raw_rec_byte();

    return 1;
#endif
}
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	cf 91       	pop	r28
    1f0a:	df 91       	pop	r29
    1f0c:	1f 91       	pop	r17
    1f0e:	0f 91       	pop	r16
    1f10:	ff 90       	pop	r15
    1f12:	ef 90       	pop	r14
    1f14:	df 90       	pop	r13
    1f16:	cf 90       	pop	r12
    1f18:	bf 90       	pop	r11
    1f1a:	af 90       	pop	r10
    1f1c:	9f 90       	pop	r9
    1f1e:	8f 90       	pop	r8
    1f20:	7f 90       	pop	r7
    1f22:	6f 90       	pop	r6
    1f24:	5f 90       	pop	r5
    1f26:	4f 90       	pop	r4
    1f28:	3f 90       	pop	r3
    1f2a:	2f 90       	pop	r2
    1f2c:	08 95       	ret

00001f2e <sd_raw_init>:
 * Initializes memory card communication.
 *
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_init()
{
    1f2e:	0f 93       	push	r16
    1f30:	1f 93       	push	r17
    1f32:	cf 93       	push	r28
    1f34:	df 93       	push	r29
    /* enable inputs for reading card status */
    configure_pin_available();
    configure_pin_locked();

    /* enable outputs for MOSI, SCK, SS, input for MISO */
    configure_pin_mosi();
    1f36:	23 9a       	sbi	0x04, 3	; 4
    configure_pin_sck();
    1f38:	25 9a       	sbi	0x04, 5	; 4
    configure_pin_ss();
    1f3a:	22 9a       	sbi	0x04, 2	; 4
    configure_pin_miso();
    1f3c:	24 98       	cbi	0x04, 4	; 4

    unselect_card();
    1f3e:	2a 9a       	sbi	0x05, 2	; 5

    /* initialize SPI with lowest frequency; max. 400kHz during identification mode of card */
    SPCR = (0 << SPIE) | /* SPI Interrupt Enable */
    1f40:	83 e5       	ldi	r24, 0x53	; 83
    1f42:	8c bd       	out	0x2c, r24	; 44
           (1 << MSTR) | /* Master mode */
           (0 << CPOL) | /* Clock Polarity: SCK low when idle */
           (0 << CPHA) | /* Clock Phase: sample on rising SCK edge */
           (1 << SPR1) | /* Clock Frequency: f_OSC / 128 */
           (1 << SPR0);
    SPSR &= ~(1 << SPI2X); /* No doubled clock frequency */
    1f44:	8d b5       	in	r24, 0x2d	; 45
    1f46:	8e 7f       	andi	r24, 0xFE	; 254
    1f48:	8d bd       	out	0x2d, r24	; 45

    /* initialization procedure */
    sd_raw_card_type = 0;
    1f4a:	10 92 ec 04 	sts	0x04EC, r1
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    1f50:	2f ef       	ldi	r18, 0xFF	; 255
    1f52:	2e bd       	out	0x2e, r18	; 46
    while(!(SPSR & (1 << SPIF)));
    1f54:	0d b4       	in	r0, 0x2d	; 45
    1f56:	07 fe       	sbrs	r0, 7
    1f58:	fd cf       	rjmp	.-6      	; 0x1f54 <sd_raw_init+0x26>
    SPSR &= ~(1 << SPIF);
    1f5a:	8d b5       	in	r24, 0x2d	; 45
    1f5c:	8f 77       	andi	r24, 0x7F	; 127
    1f5e:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    1f60:	8e b5       	in	r24, 0x2e	; 46
    
    if(!sd_raw_available())
        return 0;

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
    1f62:	9f 5f       	subi	r25, 0xFF	; 255
    1f64:	9a 30       	cpi	r25, 0x0A	; 10
    1f66:	a9 f7       	brne	.-22     	; 0x1f52 <sd_raw_init+0x24>
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
    1f68:	2a 98       	cbi	0x05, 2	; 5
    1f6a:	c0 e0       	ldi	r28, 0x00	; 0
    1f6c:	d0 e0       	ldi	r29, 0x00	; 0

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    {
        response = sd_raw_send_command(CMD_GO_IDLE_STATE, 0);
    1f6e:	80 e0       	ldi	r24, 0x00	; 0
    1f70:	40 e0       	ldi	r20, 0x00	; 0
    1f72:	50 e0       	ldi	r21, 0x00	; 0
    1f74:	60 e0       	ldi	r22, 0x00	; 0
    1f76:	70 e0       	ldi	r23, 0x00	; 0
    1f78:	0e 94 3a 07 	call	0xe74	; 0xe74 <sd_raw_send_command>
    1f7c:	18 2f       	mov	r17, r24
        if(response == (1 << R1_IDLE_STATE))
    1f7e:	81 30       	cpi	r24, 0x01	; 1
    1f80:	39 f0       	breq	.+14     	; 0x1f90 <sd_raw_init+0x62>
            break;

        if(i == 0x1ff)
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	cf 3f       	cpi	r28, 0xFF	; 255
    1f86:	d8 07       	cpc	r29, r24
    1f88:	09 f4       	brne	.+2      	; 0x1f8c <sd_raw_init+0x5e>
    1f8a:	40 c0       	rjmp	.+128    	; 0x200c <sd_raw_init+0xde>
    /* address card */
    select_card();

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    1f8c:	21 96       	adiw	r28, 0x01	; 1
    1f8e:	ef cf       	rjmp	.-34     	; 0x1f6e <sd_raw_init+0x40>
    }
    else
#endif
    {
        /* determine SD/MMC card type */
        sd_raw_send_command(CMD_APP, 0);
    1f90:	87 e3       	ldi	r24, 0x37	; 55
    1f92:	40 e0       	ldi	r20, 0x00	; 0
    1f94:	50 e0       	ldi	r21, 0x00	; 0
    1f96:	60 e0       	ldi	r22, 0x00	; 0
    1f98:	70 e0       	ldi	r23, 0x00	; 0
    1f9a:	0e 94 3a 07 	call	0xe74	; 0xe74 <sd_raw_send_command>
        response = sd_raw_send_command(CMD_SD_SEND_OP_COND, 0);
    1f9e:	89 e2       	ldi	r24, 0x29	; 41
    1fa0:	40 e0       	ldi	r20, 0x00	; 0
    1fa2:	50 e0       	ldi	r21, 0x00	; 0
    1fa4:	60 e0       	ldi	r22, 0x00	; 0
    1fa6:	70 e0       	ldi	r23, 0x00	; 0
    1fa8:	0e 94 3a 07 	call	0xe74	; 0xe74 <sd_raw_send_command>
        if((response & (1 << R1_ILL_COMMAND)) == 0)
    1fac:	82 fd       	sbrc	r24, 2
    1fae:	02 c0       	rjmp	.+4      	; 0x1fb4 <sd_raw_init+0x86>
        {
            /* card conforms to SD 1 card specification */
            sd_raw_card_type |= (1 << SD_RAW_SPEC_1);
    1fb0:	10 93 ec 04 	sts	0x04EC, r17
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
    1fb4:	80 91 ec 04 	lds	r24, 0x04EC
    1fb8:	08 2f       	mov	r16, r24
    1fba:	10 e0       	ldi	r17, 0x00	; 0
    1fbc:	03 70       	andi	r16, 0x03	; 3
    1fbe:	10 70       	andi	r17, 0x00	; 0
    1fc0:	c0 e0       	ldi	r28, 0x00	; 0
    1fc2:	d0 e0       	ldi	r29, 0x00	; 0
    1fc4:	01 15       	cp	r16, r1
    1fc6:	11 05       	cpc	r17, r1
    1fc8:	49 f0       	breq	.+18     	; 0x1fdc <sd_raw_init+0xae>
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
                arg = 0x40000000;
#endif
            sd_raw_send_command(CMD_APP, 0);
    1fca:	87 e3       	ldi	r24, 0x37	; 55
    1fcc:	40 e0       	ldi	r20, 0x00	; 0
    1fce:	50 e0       	ldi	r21, 0x00	; 0
    1fd0:	60 e0       	ldi	r22, 0x00	; 0
    1fd2:	70 e0       	ldi	r23, 0x00	; 0
    1fd4:	0e 94 3a 07 	call	0xe74	; 0xe74 <sd_raw_send_command>
            response = sd_raw_send_command(CMD_SD_SEND_OP_COND, arg);
    1fd8:	89 e2       	ldi	r24, 0x29	; 41
    1fda:	01 c0       	rjmp	.+2      	; 0x1fde <sd_raw_init+0xb0>
        }
        else
        {
            response = sd_raw_send_command(CMD_SEND_OP_COND, 0);
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	40 e0       	ldi	r20, 0x00	; 0
    1fe0:	50 e0       	ldi	r21, 0x00	; 0
    1fe2:	60 e0       	ldi	r22, 0x00	; 0
    1fe4:	70 e0       	ldi	r23, 0x00	; 0
    1fe6:	0e 94 3a 07 	call	0xe74	; 0xe74 <sd_raw_send_command>
        }

        if((response & (1 << R1_IDLE_STATE)) == 0)
    1fea:	80 ff       	sbrs	r24, 0
    1fec:	06 c0       	rjmp	.+12     	; 0x1ffa <sd_raw_init+0xcc>
            break;

        if(i == 0x7fff)
    1fee:	8f e7       	ldi	r24, 0x7F	; 127
    1ff0:	cf 3f       	cpi	r28, 0xFF	; 255
    1ff2:	d8 07       	cpc	r29, r24
    1ff4:	59 f0       	breq	.+22     	; 0x200c <sd_raw_init+0xde>
            /* MMC card */
        }
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    1ff6:	21 96       	adiw	r28, 0x01	; 1
    1ff8:	e5 cf       	rjmp	.-54     	; 0x1fc4 <sd_raw_init+0x96>
        sd_raw_rec_byte();
    }
#endif

    /* set block size to 512 bytes */
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
    1ffa:	80 e1       	ldi	r24, 0x10	; 16
    1ffc:	40 e0       	ldi	r20, 0x00	; 0
    1ffe:	52 e0       	ldi	r21, 0x02	; 2
    2000:	60 e0       	ldi	r22, 0x00	; 0
    2002:	70 e0       	ldi	r23, 0x00	; 0
    2004:	0e 94 3a 07 	call	0xe74	; 0xe74 <sd_raw_send_command>
    2008:	88 23       	and	r24, r24
    200a:	19 f0       	breq	.+6      	; 0x2012 <sd_raw_init+0xe4>
    {
        unselect_card();
    200c:	2a 9a       	sbi	0x05, 2	; 5
    200e:	80 e0       	ldi	r24, 0x00	; 0
    2010:	22 c0       	rjmp	.+68     	; 0x2056 <sd_raw_init+0x128>
        return 0;
    }

    /* deaddress card */
    unselect_card();
    2012:	2a 9a       	sbi	0x05, 2	; 5

    /* switch to highest SPI frequency possible */
    SPCR &= ~((1 << SPR1) | (1 << SPR0)); /* Clock Frequency: f_OSC / 4 */
    2014:	8c b5       	in	r24, 0x2c	; 44
    2016:	8c 7f       	andi	r24, 0xFC	; 252
    2018:	8c bd       	out	0x2c, r24	; 44
    SPSR |= (1 << SPI2X); /* Doubled Clock Frequency: f_OSC / 2 */
    201a:	8d b5       	in	r24, 0x2d	; 45
    201c:	81 60       	ori	r24, 0x01	; 1
    201e:	8d bd       	out	0x2d, r24	; 45

#if !SD_RAW_SAVE_RAM
    /* the first block is likely to be accessed first, so precache it here */
    raw_block_address = (offset_t) -1;
    2020:	8f ef       	ldi	r24, 0xFF	; 255
    2022:	9f ef       	ldi	r25, 0xFF	; 255
    2024:	af ef       	ldi	r26, 0xFF	; 255
    2026:	bf ef       	ldi	r27, 0xFF	; 255
    2028:	80 93 e7 04 	sts	0x04E7, r24
    202c:	90 93 e8 04 	sts	0x04E8, r25
    2030:	a0 93 e9 04 	sts	0x04E9, r26
    2034:	b0 93 ea 04 	sts	0x04EA, r27
#if SD_RAW_WRITE_BUFFERING
    raw_block_written = 1;
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	80 93 eb 04 	sts	0x04EB, r24
#endif
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
    203e:	60 e0       	ldi	r22, 0x00	; 0
    2040:	70 e0       	ldi	r23, 0x00	; 0
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	47 ee       	ldi	r20, 0xE7	; 231
    2048:	52 e0       	ldi	r21, 0x02	; 2
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	32 e0       	ldi	r19, 0x02	; 2
    204e:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <sd_raw_read>
    2052:	81 11       	cpse	r24, r1
    2054:	81 e0       	ldi	r24, 0x01	; 1
        return 0;
#endif

    return 1;
}
    2056:	df 91       	pop	r29
    2058:	cf 91       	pop	r28
    205a:	1f 91       	pop	r17
    205c:	0f 91       	pop	r16
    205e:	08 95       	ret

00002060 <sd_raw_write_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_read
 */
uint8_t sd_raw_write_interval(offset_t offset, uint8_t* buffer, uintptr_t length, sd_raw_write_interval_handler_t callback, void* p)
{
    2060:	4f 92       	push	r4
    2062:	5f 92       	push	r5
    2064:	6f 92       	push	r6
    2066:	7f 92       	push	r7
    2068:	8f 92       	push	r8
    206a:	9f 92       	push	r9
    206c:	af 92       	push	r10
    206e:	bf 92       	push	r11
    2070:	cf 92       	push	r12
    2072:	df 92       	push	r13
    2074:	ef 92       	push	r14
    2076:	ff 92       	push	r15
    2078:	0f 93       	push	r16
    207a:	1f 93       	push	r17
    207c:	cf 93       	push	r28
    207e:	df 93       	push	r29
    2080:	5b 01       	movw	r10, r22
    2082:	6c 01       	movw	r12, r24
    2084:	4a 01       	movw	r8, r20
    2086:	e9 01       	movw	r28, r18
    2088:	38 01       	movw	r6, r16
    208a:	27 01       	movw	r4, r14
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
    208c:	41 15       	cp	r20, r1
    208e:	51 05       	cpc	r21, r1
    2090:	71 f1       	breq	.+92     	; 0x20ee <sd_raw_write_interval+0x8e>
    2092:	01 15       	cp	r16, r1
    2094:	11 05       	cpc	r17, r1
    2096:	59 f1       	breq	.+86     	; 0x20ee <sd_raw_write_interval+0x8e>
        return 0;

    uint8_t endless = (length == 0);
    2098:	ff 24       	eor	r15, r15
    209a:	21 15       	cp	r18, r1
    209c:	31 05       	cpc	r19, r1
    209e:	11 f5       	brne	.+68     	; 0x20e4 <sd_raw_write_interval+0x84>
    20a0:	ff 24       	eor	r15, r15
    20a2:	f3 94       	inc	r15
    20a4:	1f c0       	rjmp	.+62     	; 0x20e4 <sd_raw_write_interval+0x84>
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
    20a6:	c4 01       	movw	r24, r8
    20a8:	b6 01       	movw	r22, r12
    20aa:	a5 01       	movw	r20, r10
    20ac:	92 01       	movw	r18, r4
    20ae:	f3 01       	movw	r30, r6
    20b0:	09 95       	icall
    20b2:	8c 01       	movw	r16, r24
        if(!bytes_to_write)
    20b4:	00 97       	sbiw	r24, 0x00	; 0
    20b6:	e9 f0       	breq	.+58     	; 0x20f2 <sd_raw_write_interval+0x92>
            break;
        if(!endless && bytes_to_write > length)
    20b8:	ff 20       	and	r15, r15
    20ba:	19 f4       	brne	.+6      	; 0x20c2 <sd_raw_write_interval+0x62>
    20bc:	c8 17       	cp	r28, r24
    20be:	d9 07       	cpc	r29, r25
    20c0:	b0 f0       	brcs	.+44     	; 0x20ee <sd_raw_write_interval+0x8e>
            return 0;

        /* as writing is always buffered, we directly
         * hand over the request to sd_raw_write()
         */
        if(!sd_raw_write(offset, buffer, bytes_to_write))
    20c2:	c6 01       	movw	r24, r12
    20c4:	b5 01       	movw	r22, r10
    20c6:	a4 01       	movw	r20, r8
    20c8:	98 01       	movw	r18, r16
    20ca:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <sd_raw_write>
    20ce:	88 23       	and	r24, r24
    20d0:	71 f0       	breq	.+28     	; 0x20ee <sd_raw_write_interval+0x8e>
            return 0;

        offset += bytes_to_write;
    20d2:	c8 01       	movw	r24, r16
    20d4:	a0 e0       	ldi	r26, 0x00	; 0
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	a8 0e       	add	r10, r24
    20da:	b9 1e       	adc	r11, r25
    20dc:	ca 1e       	adc	r12, r26
    20de:	db 1e       	adc	r13, r27
        length -= bytes_to_write;
    20e0:	c0 1b       	sub	r28, r16
    20e2:	d1 0b       	sbc	r29, r17

    if(!buffer || !callback)
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    20e4:	ff 20       	and	r15, r15
    20e6:	f9 f6       	brne	.-66     	; 0x20a6 <sd_raw_write_interval+0x46>
    20e8:	20 97       	sbiw	r28, 0x00	; 0
    20ea:	e9 f6       	brne	.-70     	; 0x20a6 <sd_raw_write_interval+0x46>
    20ec:	02 c0       	rjmp	.+4      	; 0x20f2 <sd_raw_write_interval+0x92>
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	01 c0       	rjmp	.+2      	; 0x20f4 <sd_raw_write_interval+0x94>
    20f2:	81 e0       	ldi	r24, 0x01	; 1
        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
}
    20f4:	df 91       	pop	r29
    20f6:	cf 91       	pop	r28
    20f8:	1f 91       	pop	r17
    20fa:	0f 91       	pop	r16
    20fc:	ff 90       	pop	r15
    20fe:	ef 90       	pop	r14
    2100:	df 90       	pop	r13
    2102:	cf 90       	pop	r12
    2104:	bf 90       	pop	r11
    2106:	af 90       	pop	r10
    2108:	9f 90       	pop	r9
    210a:	8f 90       	pop	r8
    210c:	7f 90       	pop	r7
    210e:	6f 90       	pop	r6
    2110:	5f 90       	pop	r5
    2112:	4f 90       	pop	r4
    2114:	08 95       	ret

00002116 <fat_open_dir>:
 * \param[in] dir_entry The directory entry which stands for the directory to open.
 * \returns An opaque directory descriptor on success, 0 on failure.
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    2116:	cf 93       	push	r28
    2118:	df 93       	push	r29
    211a:	ac 01       	movw	r20, r24
    211c:	db 01       	movw	r26, r22
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
    211e:	00 97       	sbiw	r24, 0x00	; 0
    2120:	89 f1       	breq	.+98     	; 0x2184 <fat_open_dir+0x6e>
    2122:	61 15       	cp	r22, r1
    2124:	71 05       	cpc	r23, r1
    2126:	71 f1       	breq	.+92     	; 0x2184 <fat_open_dir+0x6e>
    2128:	90 96       	adiw	r26, 0x20	; 32
    212a:	8c 91       	ld	r24, X
    212c:	90 97       	sbiw	r26, 0x20	; 32
    212e:	84 ff       	sbrs	r24, 4
    2130:	29 c0       	rjmp	.+82     	; 0x2184 <fat_open_dir+0x6e>
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    uint8_t i;
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
    2132:	80 91 85 02 	lds	r24, 0x0285
    2136:	90 91 86 02 	lds	r25, 0x0286
    213a:	89 2b       	or	r24, r25
    213c:	19 f4       	brne	.+6      	; 0x2144 <fat_open_dir+0x2e>
    213e:	e5 e8       	ldi	r30, 0x85	; 133
    2140:	f2 e0       	ldi	r31, 0x02	; 2
    2142:	08 c0       	rjmp	.+16     	; 0x2154 <fat_open_dir+0x3e>
    2144:	80 91 b6 02 	lds	r24, 0x02B6
    2148:	90 91 b7 02 	lds	r25, 0x02B7
    214c:	89 2b       	or	r24, r25
    214e:	d1 f4       	brne	.+52     	; 0x2184 <fat_open_dir+0x6e>
    2150:	e6 eb       	ldi	r30, 0xB6	; 182
    2152:	f2 e0       	ldi	r31, 0x02	; 2
    }
    if(i >= FAT_DIR_COUNT)
        return 0;
#endif
    
    memcpy(&dd->dir_entry, dir_entry, sizeof(*dir_entry));
    2154:	9f 01       	movw	r18, r30
    2156:	2e 5f       	subi	r18, 0xFE	; 254
    2158:	3f 4f       	sbci	r19, 0xFF	; 255
    215a:	bd 01       	movw	r22, r26
    215c:	8b e2       	ldi	r24, 0x2B	; 43
    215e:	eb 01       	movw	r28, r22
    2160:	09 90       	ld	r0, Y+
    2162:	be 01       	movw	r22, r28
    2164:	e9 01       	movw	r28, r18
    2166:	09 92       	st	Y+, r0
    2168:	9e 01       	movw	r18, r28
    216a:	81 50       	subi	r24, 0x01	; 1
    216c:	c1 f7       	brne	.-16     	; 0x215e <fat_open_dir+0x48>
    dd->fs = fs;
    216e:	51 83       	std	Z+1, r21	; 0x01
    2170:	40 83       	st	Z, r20
    dd->entry_cluster = dir_entry->cluster;
    2172:	91 96       	adiw	r26, 0x21	; 33
    2174:	8d 91       	ld	r24, X+
    2176:	9c 91       	ld	r25, X
    2178:	92 97       	sbiw	r26, 0x22	; 34
    217a:	96 a7       	std	Z+46, r25	; 0x2e
    217c:	85 a7       	std	Z+45, r24	; 0x2d
    dd->entry_offset = 0;
    217e:	10 aa       	std	Z+48, r1	; 0x30
    2180:	17 a6       	std	Z+47, r1	; 0x2f
    2182:	02 c0       	rjmp	.+4      	; 0x2188 <fat_open_dir+0x72>

    return dd;
    2184:	e0 e0       	ldi	r30, 0x00	; 0
    2186:	f0 e0       	ldi	r31, 0x00	; 0
}
    2188:	cf 01       	movw	r24, r30
    218a:	df 91       	pop	r29
    218c:	cf 91       	pop	r28
    218e:	08 95       	ret

00002190 <fat_open_file>:
 * \param[in] dir_entry The directory entry of the file to open.
 * \returns The file handle, or 0 on failure.
 * \see fat_close_file
 */
struct fat_file_struct* fat_open_file(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    2190:	cf 93       	push	r28
    2192:	df 93       	push	r29
    2194:	9c 01       	movw	r18, r24
    2196:	fb 01       	movw	r30, r22
    if(!fs || !dir_entry || (dir_entry->attributes & FAT_ATTRIB_DIR))
    2198:	00 97       	sbiw	r24, 0x00	; 0
    219a:	31 f0       	breq	.+12     	; 0x21a8 <fat_open_file+0x18>
    219c:	61 15       	cp	r22, r1
    219e:	71 05       	cpc	r23, r1
    21a0:	19 f0       	breq	.+6      	; 0x21a8 <fat_open_file+0x18>
    21a2:	80 a1       	ldd	r24, Z+32	; 0x20
    21a4:	84 ff       	sbrs	r24, 4
    21a6:	23 c0       	rjmp	.+70     	; 0x21ee <fat_open_file+0x5e>
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    fd->fs = fs;
    fd->pos = 0;
    fd->pos_cluster = dir_entry->cluster;

    return fd;
}
    21ac:	c9 01       	movw	r24, r18
    21ae:	df 91       	pop	r29
    21b0:	cf 91       	pop	r28
    21b2:	08 95       	ret
    }
    if(i >= FAT_FILE_COUNT)
        return 0;
#endif
    
    memcpy(&fd->dir_entry, dir_entry, sizeof(*dir_entry));
    21b4:	c4 e5       	ldi	r28, 0x54	; 84
    21b6:	d2 e0       	ldi	r29, 0x02	; 2
    21b8:	df 01       	movw	r26, r30
    21ba:	8b e2       	ldi	r24, 0x2B	; 43
    21bc:	0d 90       	ld	r0, X+
    21be:	09 92       	st	Y+, r0
    21c0:	81 50       	subi	r24, 0x01	; 1
    21c2:	e1 f7       	brne	.-8      	; 0x21bc <fat_open_file+0x2c>
    fd->fs = fs;
    21c4:	30 93 53 02 	sts	0x0253, r19
    21c8:	20 93 52 02 	sts	0x0252, r18
    fd->pos = 0;
    21cc:	10 92 7f 02 	sts	0x027F, r1
    21d0:	10 92 80 02 	sts	0x0280, r1
    21d4:	10 92 81 02 	sts	0x0281, r1
    21d8:	10 92 82 02 	sts	0x0282, r1
    fd->pos_cluster = dir_entry->cluster;
    21dc:	81 a1       	ldd	r24, Z+33	; 0x21
    21de:	92 a1       	ldd	r25, Z+34	; 0x22
    21e0:	90 93 84 02 	sts	0x0284, r25
    21e4:	80 93 83 02 	sts	0x0283, r24
    21e8:	22 e5       	ldi	r18, 0x52	; 82
    21ea:	32 e0       	ldi	r19, 0x02	; 2
    21ec:	df cf       	rjmp	.-66     	; 0x21ac <fat_open_file+0x1c>
#else
    struct fat_file_struct* fd = fat_file_handles;
    uint8_t i;
    for(i = 0; i < FAT_FILE_COUNT; ++i)
    {
        if(!fd->fs)
    21ee:	80 91 52 02 	lds	r24, 0x0252
    21f2:	90 91 53 02 	lds	r25, 0x0253
    21f6:	89 2b       	or	r24, r25
    21f8:	b9 f6       	brne	.-82     	; 0x21a8 <fat_open_file+0x18>
    21fa:	dc cf       	rjmp	.-72     	; 0x21b4 <fat_open_file+0x24>

000021fc <find_file_in_dir>:
}

*/

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
    21fc:	ef 92       	push	r14
    21fe:	ff 92       	push	r15
    2200:	0f 93       	push	r16
    2202:	1f 93       	push	r17
    2204:	cf 93       	push	r28
    2206:	df 93       	push	r29
    2208:	eb 01       	movw	r28, r22
    220a:	8a 01       	movw	r16, r20
    220c:	79 01       	movw	r14, r18
    220e:	10 c0       	rjmp	.+32     	; 0x2230 <find_file_in_dir+0x34>
    while(fat_read_dir(dd, dir_entry))
    2210:	c7 01       	movw	r24, r14
    2212:	b8 01       	movw	r22, r16
    2214:	0e 94 43 23 	call	0x4686	; 0x4686 <strcmp>
    {
        if(strcmp(dir_entry->long_name, name) == 0)
    2218:	00 97       	sbiw	r24, 0x00	; 0
    221a:	51 f4       	brne	.+20     	; 0x2230 <find_file_in_dir+0x34>
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
    221c:	20 97       	sbiw	r28, 0x00	; 0
    221e:	31 f0       	breq	.+12     	; 0x222c <find_file_in_dir+0x30>
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    2220:	8b a1       	ldd	r24, Y+35	; 0x23
    2222:	9c a1       	ldd	r25, Y+36	; 0x24
    2224:	9e a7       	std	Y+46, r25	; 0x2e
    2226:	8d a7       	std	Y+45, r24	; 0x2d
    dd->entry_offset = 0;
    2228:	18 aa       	std	Y+48, r1	; 0x30
    222a:	1f a6       	std	Y+47, r1	; 0x2f
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	06 c0       	rjmp	.+12     	; 0x223c <find_file_in_dir+0x40>

*/

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
    while(fat_read_dir(dd, dir_entry))
    2230:	ce 01       	movw	r24, r28
    2232:	b7 01       	movw	r22, r14
    2234:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <fat_read_dir>
    2238:	88 23       	and	r24, r24
    223a:	51 f7       	brne	.-44     	; 0x2210 <find_file_in_dir+0x14>
            return 1;
        }
    }

    return 0;
}
    223c:	df 91       	pop	r29
    223e:	cf 91       	pop	r28
    2240:	1f 91       	pop	r17
    2242:	0f 91       	pop	r16
    2244:	ff 90       	pop	r15
    2246:	ef 90       	pop	r14
    2248:	08 95       	ret

0000224a <delete_file>:
    return 0;
}


int delete_file( const char* fname )
{
    224a:	ef 92       	push	r14
    224c:	ff 92       	push	r15
    224e:	0f 93       	push	r16
    2250:	1f 93       	push	r17
    2252:	df 93       	push	r29
    2254:	cf 93       	push	r28
    2256:	cd b7       	in	r28, 0x3d	; 61
    2258:	de b7       	in	r29, 0x3e	; 62
    225a:	ab 97       	sbiw	r28, 0x2b	; 43
    225c:	0f b6       	in	r0, 0x3f	; 63
    225e:	f8 94       	cli
    2260:	de bf       	out	0x3e, r29	; 62
    2262:	0f be       	out	0x3f, r0	; 63
    2264:	cd bf       	out	0x3d, r28	; 61
    2266:	7c 01       	movw	r14, r24
	struct fat_dir_entry_struct file_entry;
	if(find_file_in_dir(fs, dd, fname, &file_entry))
    2268:	60 91 02 05 	lds	r22, 0x0502
    226c:	70 91 03 05 	lds	r23, 0x0503
    2270:	80 91 fe 04 	lds	r24, 0x04FE
    2274:	90 91 ff 04 	lds	r25, 0x04FF
    2278:	a7 01       	movw	r20, r14
    227a:	8e 01       	movw	r16, r28
    227c:	0f 5f       	subi	r16, 0xFF	; 255
    227e:	1f 4f       	sbci	r17, 0xFF	; 255
    2280:	98 01       	movw	r18, r16
    2282:	0e 94 fe 10 	call	0x21fc	; 0x21fc <find_file_in_dir>
    2286:	88 23       	and	r24, r24
    2288:	61 f0       	breq	.+24     	; 0x22a2 <delete_file+0x58>
	{
		if(fat_delete_file(fs, &file_entry))
    228a:	80 91 fe 04 	lds	r24, 0x04FE
    228e:	90 91 ff 04 	lds	r25, 0x04FF
    2292:	b8 01       	movw	r22, r16
    2294:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <fat_delete_file>
    2298:	88 23       	and	r24, r24
    229a:	19 f0       	breq	.+6      	; 0x22a2 <delete_file+0x58>
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	0c c0       	rjmp	.+24     	; 0x22ba <delete_file+0x70>
			return 0;
	}

	uart_puts_p(PSTR("error deleting file: "));
    22a2:	8a ed       	ldi	r24, 0xDA	; 218
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	0e 94 b3 02 	call	0x566	; 0x566 <uart_puts_p>
	uart_puts(fname);
    22aa:	c7 01       	movw	r24, r14
    22ac:	0e 94 a6 02 	call	0x54c	; 0x54c <uart_puts>
	uart_putc('\n');
    22b0:	8a e0       	ldi	r24, 0x0A	; 10
    22b2:	0e 94 b7 01 	call	0x36e	; 0x36e <uart_putc>
    22b6:	2f ef       	ldi	r18, 0xFF	; 255
    22b8:	3f ef       	ldi	r19, 0xFF	; 255

	return -1;
}
    22ba:	c9 01       	movw	r24, r18
    22bc:	ab 96       	adiw	r28, 0x2b	; 43
    22be:	0f b6       	in	r0, 0x3f	; 63
    22c0:	f8 94       	cli
    22c2:	de bf       	out	0x3e, r29	; 62
    22c4:	0f be       	out	0x3f, r0	; 63
    22c6:	cd bf       	out	0x3d, r28	; 61
    22c8:	cf 91       	pop	r28
    22ca:	df 91       	pop	r29
    22cc:	1f 91       	pop	r17
    22ce:	0f 91       	pop	r16
    22d0:	ff 90       	pop	r15
    22d2:	ef 90       	pop	r14
    22d4:	08 95       	ret

000022d6 <open_file_in_dir>:

    return 0;
}

struct fat_file_struct* open_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name)
{
    22d6:	ef 92       	push	r14
    22d8:	ff 92       	push	r15
    22da:	0f 93       	push	r16
    22dc:	1f 93       	push	r17
    22de:	df 93       	push	r29
    22e0:	cf 93       	push	r28
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
    22e6:	ab 97       	sbiw	r28, 0x2b	; 43
    22e8:	0f b6       	in	r0, 0x3f	; 63
    22ea:	f8 94       	cli
    22ec:	de bf       	out	0x3e, r29	; 62
    22ee:	0f be       	out	0x3f, r0	; 63
    22f0:	cd bf       	out	0x3d, r28	; 61
    22f2:	8c 01       	movw	r16, r24
    struct fat_dir_entry_struct file_entry;
    if(!find_file_in_dir(fs, dd, name, &file_entry))
    22f4:	7e 01       	movw	r14, r28
    22f6:	08 94       	sec
    22f8:	e1 1c       	adc	r14, r1
    22fa:	f1 1c       	adc	r15, r1
    22fc:	97 01       	movw	r18, r14
    22fe:	0e 94 fe 10 	call	0x21fc	; 0x21fc <find_file_in_dir>
    2302:	88 23       	and	r24, r24
    2304:	19 f4       	brne	.+6      	; 0x230c <open_file_in_dir+0x36>
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	05 c0       	rjmp	.+10     	; 0x2316 <open_file_in_dir+0x40>
        return 0;

    return fat_open_file(fs, &file_entry);
    230c:	c8 01       	movw	r24, r16
    230e:	b7 01       	movw	r22, r14
    2310:	0e 94 c8 10 	call	0x2190	; 0x2190 <fat_open_file>
    2314:	9c 01       	movw	r18, r24
}
    2316:	c9 01       	movw	r24, r18
    2318:	ab 96       	adiw	r28, 0x2b	; 43
    231a:	0f b6       	in	r0, 0x3f	; 63
    231c:	f8 94       	cli
    231e:	de bf       	out	0x3e, r29	; 62
    2320:	0f be       	out	0x3f, r0	; 63
    2322:	cd bf       	out	0x3d, r28	; 61
    2324:	cf 91       	pop	r28
    2326:	df 91       	pop	r29
    2328:	1f 91       	pop	r17
    232a:	0f 91       	pop	r16
    232c:	ff 90       	pop	r15
    232e:	ef 90       	pop	r14
    2330:	08 95       	ret

00002332 <display_file>:

    return 0;
}

int display_file(const char* fname)
{
    2332:	af 92       	push	r10
    2334:	bf 92       	push	r11
    2336:	cf 92       	push	r12
    2338:	df 92       	push	r13
    233a:	ef 92       	push	r14
    233c:	ff 92       	push	r15
    233e:	0f 93       	push	r16
    2340:	1f 93       	push	r17
    2342:	df 93       	push	r29
    2344:	cf 93       	push	r28
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62
    234a:	28 97       	sbiw	r28, 0x08	; 8
    234c:	0f b6       	in	r0, 0x3f	; 63
    234e:	f8 94       	cli
    2350:	de bf       	out	0x3e, r29	; 62
    2352:	0f be       	out	0x3f, r0	; 63
    2354:	cd bf       	out	0x3d, r28	; 61
    2356:	8c 01       	movw	r16, r24
	if(!fs || !dd )
    2358:	80 91 fe 04 	lds	r24, 0x04FE
    235c:	90 91 ff 04 	lds	r25, 0x04FF
    2360:	00 97       	sbiw	r24, 0x00	; 0
    2362:	39 f0       	breq	.+14     	; 0x2372 <display_file+0x40>
    2364:	60 91 02 05 	lds	r22, 0x0502
    2368:	70 91 03 05 	lds	r23, 0x0503
    236c:	61 15       	cp	r22, r1
    236e:	71 05       	cpc	r23, r1
    2370:	59 f4       	brne	.+22     	; 0x2388 <display_file+0x56>
	{
		uart_puts_p(PSTR("SD Card not initialized properly\n"));
    2372:	8a e1       	ldi	r24, 0x1A	; 26
    2374:	91 e0       	ldi	r25, 0x01	; 1
    2376:	0e 94 b3 02 	call	0x566	; 0x566 <uart_puts_p>
		uart_puts_p(PSTR("call init_sdcard() first \n"));
    237a:	8f ef       	ldi	r24, 0xFF	; 255
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	0e 94 b3 02 	call	0x566	; 0x566 <uart_puts_p>
    2382:	2f ef       	ldi	r18, 0xFF	; 255
    2384:	3f ef       	ldi	r19, 0xFF	; 255
    2386:	35 c0       	rjmp	.+106    	; 0x23f2 <display_file+0xc0>
		return -1;
	}

    /* search file in current directory and open it */
    struct fat_file_struct* fd = open_file_in_dir(fs, dd, fname );
    2388:	a8 01       	movw	r20, r16
    238a:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <open_file_in_dir>
    238e:	7c 01       	movw	r14, r24
    if(!fd)
    2390:	00 97       	sbiw	r24, 0x00	; 0
    2392:	b1 f4       	brne	.+44     	; 0x23c0 <display_file+0x8e>
    {
        uart_puts_p(PSTR("error opening "));
    2394:	80 ef       	ldi	r24, 0xF0	; 240
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	0e 94 b3 02 	call	0x566	; 0x566 <uart_puts_p>
        uart_puts(fname);
    239c:	c8 01       	movw	r24, r16
    239e:	0e 94 a6 02 	call	0x54c	; 0x54c <uart_puts>
        uart_putc('\n');
    23a2:	8a e0       	ldi	r24, 0x0A	; 10
    23a4:	0e 94 b7 01 	call	0x36e	; 0x36e <uart_putc>
    23a8:	2e ef       	ldi	r18, 0xFE	; 254
    23aa:	3f ef       	ldi	r19, 0xFF	; 255
    23ac:	22 c0       	rjmp	.+68     	; 0x23f2 <display_file+0xc0>
    {

        for(uint8_t i = 0; i < 8; ++i)
        {
           // uart_putc(' ');
            uart_putc(buffer[i]);
    23ae:	f8 01       	movw	r30, r16
    23b0:	81 91       	ld	r24, Z+
    23b2:	8f 01       	movw	r16, r30
    23b4:	0e 94 b7 01 	call	0x36e	; 0x36e <uart_putc>
    uint8_t buffer[8];
    uint32_t offset = 0;
    while(fat_read_file(fd, buffer, sizeof(buffer)) > 0)
    {

        for(uint8_t i = 0; i < 8; ++i)
    23b8:	0a 15       	cp	r16, r10
    23ba:	1b 05       	cpc	r17, r11
    23bc:	c1 f7       	brne	.-16     	; 0x23ae <display_file+0x7c>
    23be:	09 c0       	rjmp	.+18     	; 0x23d2 <display_file+0xa0>
    //uart_puts_p(PSTR("*********\n\n"));

    /* print file contents */
    uint8_t buffer[8];
    uint32_t offset = 0;
    while(fat_read_file(fd, buffer, sizeof(buffer)) > 0)
    23c0:	6e 01       	movw	r12, r28
    23c2:	08 94       	sec
    23c4:	c1 1c       	adc	r12, r1
    23c6:	d1 1c       	adc	r13, r1
    {

        for(uint8_t i = 0; i < 8; ++i)
    23c8:	e9 e0       	ldi	r30, 0x09	; 9
    23ca:	ae 2e       	mov	r10, r30
    23cc:	b1 2c       	mov	r11, r1
    23ce:	ac 0e       	add	r10, r28
    23d0:	bd 1e       	adc	r11, r29
    //uart_puts_p(PSTR("*********\n\n"));

    /* print file contents */
    uint8_t buffer[8];
    uint32_t offset = 0;
    while(fat_read_file(fd, buffer, sizeof(buffer)) > 0)
    23d2:	c7 01       	movw	r24, r14
    23d4:	b6 01       	movw	r22, r12
    23d6:	48 e0       	ldi	r20, 0x08	; 8
    23d8:	50 e0       	ldi	r21, 0x00	; 0
    23da:	0e 94 84 04 	call	0x908	; 0x908 <fat_read_file>
    23de:	18 16       	cp	r1, r24
    23e0:	19 06       	cpc	r1, r25
    23e2:	14 f4       	brge	.+4      	; 0x23e8 <display_file+0xb6>
    23e4:	86 01       	movw	r16, r12
    23e6:	e3 cf       	rjmp	.-58     	; 0x23ae <display_file+0x7c>
#endif

#if USE_DYNAMIC_MEMORY
        free(fd);
#else
        fd->fs = 0;
    23e8:	f7 01       	movw	r30, r14
    23ea:	11 82       	std	Z+1, r1	; 0x01
    23ec:	10 82       	st	Z, r1
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    //uart_putc('\n');
    //uart_putc('\n');

    fat_close_file(fd);
    return 0;
}
    23f2:	c9 01       	movw	r24, r18
    23f4:	28 96       	adiw	r28, 0x08	; 8
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	f8 94       	cli
    23fa:	de bf       	out	0x3e, r29	; 62
    23fc:	0f be       	out	0x3f, r0	; 63
    23fe:	cd bf       	out	0x3d, r28	; 61
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	1f 91       	pop	r17
    2406:	0f 91       	pop	r16
    2408:	ff 90       	pop	r15
    240a:	ef 90       	pop	r14
    240c:	df 90       	pop	r13
    240e:	cf 90       	pop	r12
    2410:	bf 90       	pop	r11
    2412:	af 90       	pop	r10
    2414:	08 95       	ret

00002416 <fat_find_offset_for_dir_entry>:
 * \param[in] parent The directory in which to search.
 * \param[in] dir_entry The directory entry for which to search space.
 * \returns 0 on failure, a device offset on success.
 */
offset_t fat_find_offset_for_dir_entry(struct fat_fs_struct* fs, const struct fat_dir_struct* parent, const struct fat_dir_entry_struct* dir_entry)
{
    2416:	2f 92       	push	r2
    2418:	3f 92       	push	r3
    241a:	4f 92       	push	r4
    241c:	5f 92       	push	r5
    241e:	6f 92       	push	r6
    2420:	7f 92       	push	r7
    2422:	8f 92       	push	r8
    2424:	9f 92       	push	r9
    2426:	af 92       	push	r10
    2428:	bf 92       	push	r11
    242a:	cf 92       	push	r12
    242c:	df 92       	push	r13
    242e:	ef 92       	push	r14
    2430:	ff 92       	push	r15
    2432:	0f 93       	push	r16
    2434:	1f 93       	push	r17
    2436:	df 93       	push	r29
    2438:	cf 93       	push	r28
    243a:	00 d0       	rcall	.+0      	; 0x243c <fat_find_offset_for_dir_entry+0x26>
    243c:	0f 92       	push	r0
    243e:	cd b7       	in	r28, 0x3d	; 61
    2440:	de b7       	in	r29, 0x3e	; 62
    2442:	1c 01       	movw	r2, r24
    2444:	9b 01       	movw	r18, r22
    if(!fs || !dir_entry)
    2446:	00 97       	sbiw	r24, 0x00	; 0
    2448:	09 f4       	brne	.+2      	; 0x244c <fat_find_offset_for_dir_entry+0x36>
    244a:	d2 c0       	rjmp	.+420    	; 0x25f0 <fat_find_offset_for_dir_entry+0x1da>
    244c:	41 15       	cp	r20, r1
    244e:	51 05       	cpc	r21, r1
    2450:	09 f4       	brne	.+2      	; 0x2454 <fat_find_offset_for_dir_entry+0x3e>
    2452:	ce c0       	rjmp	.+412    	; 0x25f0 <fat_find_offset_for_dir_entry+0x1da>
        return 0;

    /* search for a place where to write the directory entry to disk */
#if FAT_LFN_SUPPORT
    uint8_t free_dir_entries_needed = (strlen(dir_entry->long_name) + 12) / 13 + 1;
    2454:	fa 01       	movw	r30, r20
    2456:	01 90       	ld	r0, Z+
    2458:	00 20       	and	r0, r0
    245a:	e9 f7       	brne	.-6      	; 0x2456 <fat_find_offset_for_dir_entry+0x40>
    245c:	e4 1b       	sub	r30, r20
    245e:	f5 0b       	sbc	r31, r21
    2460:	cf 01       	movw	r24, r30
    2462:	0b 96       	adiw	r24, 0x0b	; 11
    2464:	6d e0       	ldi	r22, 0x0D	; 13
    2466:	70 e0       	ldi	r23, 0x00	; 0
    2468:	0e 94 34 26 	call	0x4c68	; 0x4c68 <__udivmodhi4>
    246c:	86 2f       	mov	r24, r22
    246e:	8f 5f       	subi	r24, 0xFF	; 255
    2470:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t free_dir_entries_found = 0;
#endif
    cluster_t cluster_num = parent->dir_entry.cluster;
    2472:	d9 01       	movw	r26, r18
    2474:	93 96       	adiw	r26, 0x23	; 35
    2476:	4d 90       	ld	r4, X+
    2478:	5c 90       	ld	r5, X
    247a:	94 97       	sbiw	r26, 0x24	; 36
    offset_t offset_to = 0;
#if FAT_FAT32_SUPPORT
    uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
#endif

    if(cluster_num == 0)
    247c:	41 14       	cp	r4, r1
    247e:	51 04       	cpc	r5, r1
    2480:	51 f0       	breq	.+20     	; 0x2496 <fat_find_offset_for_dir_entry+0x80>
    2482:	aa 24       	eor	r10, r10
    2484:	bb 24       	eor	r11, r11
    2486:	65 01       	movw	r12, r10
    2488:	ee 24       	eor	r14, r14
    248a:	ff 24       	eor	r15, r15
    248c:	87 01       	movw	r16, r14
    248e:	66 24       	eor	r6, r6
    2490:	77 24       	eor	r7, r7
    2492:	43 01       	movw	r8, r6
    2494:	0b c0       	rjmp	.+22     	; 0x24ac <fat_find_offset_for_dir_entry+0x96>
        }
        else
#endif
        {
            /* we read/write from the root directory entry */
            offset = fs->header.root_dir_offset;
    2496:	f1 01       	movw	r30, r2
    2498:	e6 88       	ldd	r14, Z+22	; 0x16
    249a:	f7 88       	ldd	r15, Z+23	; 0x17
    249c:	00 8d       	ldd	r16, Z+24	; 0x18
    249e:	11 8d       	ldd	r17, Z+25	; 0x19
            offset_to = fs->header.cluster_zero_offset;
    24a0:	62 88       	ldd	r6, Z+18	; 0x12
    24a2:	73 88       	ldd	r7, Z+19	; 0x13
    24a4:	84 88       	ldd	r8, Z+20	; 0x14
    24a6:	95 88       	ldd	r9, Z+21	; 0x15
    24a8:	57 01       	movw	r10, r14
    24aa:	68 01       	movw	r12, r16
    24ac:	1a 82       	std	Y+2, r1	; 0x02
        }
    }
    
    while(1)
    {
        if(offset == offset_to)
    24ae:	e6 14       	cp	r14, r6
    24b0:	f7 04       	cpc	r15, r7
    24b2:	08 05       	cpc	r16, r8
    24b4:	19 05       	cpc	r17, r9
    24b6:	09 f0       	breq	.+2      	; 0x24ba <fat_find_offset_for_dir_entry+0xa4>
    24b8:	6e c0       	rjmp	.+220    	; 0x2596 <fat_find_offset_for_dir_entry+0x180>
        {
            if(cluster_num == 0)
    24ba:	41 14       	cp	r4, r1
    24bc:	51 04       	cpc	r5, r1
    24be:	09 f4       	brne	.+2      	; 0x24c2 <fat_find_offset_for_dir_entry+0xac>
    24c0:	97 c0       	rjmp	.+302    	; 0x25f0 <fat_find_offset_for_dir_entry+0x1da>
                /* We iterated through the whole root directory and
                 * could not find enough space for the directory entry.
                 */
                return 0;

            if(offset)
    24c2:	e1 14       	cp	r14, r1
    24c4:	f1 04       	cpc	r15, r1
    24c6:	01 05       	cpc	r16, r1
    24c8:	11 05       	cpc	r17, r1
    24ca:	89 f1       	breq	.+98     	; 0x252e <fat_find_offset_for_dir_entry+0x118>
            {
                /* We reached a cluster boundary and have to
                 * switch to the next cluster.
                 */

                cluster_t cluster_next = fat_get_next_cluster(fs, cluster_num);
    24cc:	c1 01       	movw	r24, r2
    24ce:	b2 01       	movw	r22, r4
    24d0:	0e 94 dd 02 	call	0x5ba	; 0x5ba <fat_get_next_cluster>
                if(!cluster_next)
    24d4:	00 97       	sbiw	r24, 0x00	; 0
    24d6:	51 f5       	brne	.+84     	; 0x252c <fat_find_offset_for_dir_entry+0x116>
                {
                    cluster_next = fat_append_clusters(fs, cluster_num, 1);
    24d8:	c1 01       	movw	r24, r2
    24da:	b2 01       	movw	r22, r4
    24dc:	41 e0       	ldi	r20, 0x01	; 1
    24de:	50 e0       	ldi	r21, 0x00	; 0
    24e0:	0e 94 93 03 	call	0x726	; 0x726 <fat_append_clusters>
    24e4:	8c 01       	movw	r16, r24
                    if(!cluster_next)
    24e6:	00 97       	sbiw	r24, 0x00	; 0
    24e8:	09 f4       	brne	.+2      	; 0x24ec <fat_find_offset_for_dir_entry+0xd6>
    24ea:	82 c0       	rjmp	.+260    	; 0x25f0 <fat_find_offset_for_dir_entry+0x1da>
                        return 0;

                    /* we appended a new cluster and know it is free */
                    dir_entry_offset = fs->header.cluster_zero_offset +
    24ec:	02 50       	subi	r16, 0x02	; 2
    24ee:	10 40       	sbci	r17, 0x00	; 0
    24f0:	b8 01       	movw	r22, r16
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	0e 5f       	subi	r16, 0xFE	; 254
    24f8:	1f 4f       	sbci	r17, 0xFF	; 255
    24fa:	d1 01       	movw	r26, r2
    24fc:	50 96       	adiw	r26, 0x10	; 16
    24fe:	2d 91       	ld	r18, X+
    2500:	3c 91       	ld	r19, X
    2502:	51 97       	sbiw	r26, 0x11	; 17
    2504:	40 e0       	ldi	r20, 0x00	; 0
    2506:	50 e0       	ldi	r21, 0x00	; 0
    2508:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <__mulsi3>
    250c:	5b 01       	movw	r10, r22
    250e:	6c 01       	movw	r12, r24
    2510:	f1 01       	movw	r30, r2
    2512:	82 89       	ldd	r24, Z+18	; 0x12
    2514:	93 89       	ldd	r25, Z+19	; 0x13
    2516:	a4 89       	ldd	r26, Z+20	; 0x14
    2518:	b5 89       	ldd	r27, Z+21	; 0x15
    251a:	a8 0e       	add	r10, r24
    251c:	b9 1e       	adc	r11, r25
    251e:	ca 1e       	adc	r12, r26
    2520:	db 1e       	adc	r13, r27
                                       (offset_t) (cluster_next - 2) * fs->header.cluster_size;

                    /* clear cluster to avoid garbage directory entries */
                    fat_clear_cluster(fs, cluster_next);
    2522:	c1 01       	movw	r24, r2
    2524:	b8 01       	movw	r22, r16
    2526:	0e 94 9e 09 	call	0x133c	; 0x133c <fat_clear_cluster>
    252a:	65 c0       	rjmp	.+202    	; 0x25f6 <fat_find_offset_for_dir_entry+0x1e0>

                    break;
    252c:	2c 01       	movw	r4, r24
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    252e:	f2 e0       	ldi	r31, 0x02	; 2
    2530:	4f 16       	cp	r4, r31
    2532:	51 04       	cpc	r5, r1
    2534:	20 f4       	brcc	.+8      	; 0x253e <fat_find_offset_for_dir_entry+0x128>
    2536:	ee 24       	eor	r14, r14
    2538:	ff 24       	eor	r15, r15
    253a:	87 01       	movw	r16, r14
    253c:	1d c0       	rjmp	.+58     	; 0x2578 <fat_find_offset_for_dir_entry+0x162>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    253e:	2e ef       	ldi	r18, 0xFE	; 254
    2540:	3f ef       	ldi	r19, 0xFF	; 255
    2542:	42 0e       	add	r4, r18
    2544:	53 1e       	adc	r5, r19
    2546:	b2 01       	movw	r22, r4
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	a2 e0       	ldi	r26, 0x02	; 2
    254e:	b0 e0       	ldi	r27, 0x00	; 0
    2550:	4a 0e       	add	r4, r26
    2552:	5b 1e       	adc	r5, r27
    2554:	f1 01       	movw	r30, r2
    2556:	20 89       	ldd	r18, Z+16	; 0x10
    2558:	31 89       	ldd	r19, Z+17	; 0x11
    255a:	40 e0       	ldi	r20, 0x00	; 0
    255c:	50 e0       	ldi	r21, 0x00	; 0
    255e:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <__mulsi3>
    2562:	7b 01       	movw	r14, r22
    2564:	8c 01       	movw	r16, r24
    2566:	f1 01       	movw	r30, r2
    2568:	82 89       	ldd	r24, Z+18	; 0x12
    256a:	93 89       	ldd	r25, Z+19	; 0x13
    256c:	a4 89       	ldd	r26, Z+20	; 0x14
    256e:	b5 89       	ldd	r27, Z+21	; 0x15
    2570:	e8 0e       	add	r14, r24
    2572:	f9 1e       	adc	r15, r25
    2574:	0a 1f       	adc	r16, r26
    2576:	1b 1f       	adc	r17, r27
                }
                cluster_num = cluster_next;
            }

            offset = fat_cluster_offset(fs, cluster_num);
            offset_to = offset + fs->header.cluster_size;
    2578:	d1 01       	movw	r26, r2
    257a:	50 96       	adiw	r26, 0x10	; 16
    257c:	8d 91       	ld	r24, X+
    257e:	9c 91       	ld	r25, X
    2580:	51 97       	sbiw	r26, 0x11	; 17
    2582:	3c 01       	movw	r6, r24
    2584:	88 24       	eor	r8, r8
    2586:	99 24       	eor	r9, r9
    2588:	6e 0c       	add	r6, r14
    258a:	7f 1c       	adc	r7, r15
    258c:	80 1e       	adc	r8, r16
    258e:	91 1e       	adc	r9, r17
    2590:	57 01       	movw	r10, r14
    2592:	68 01       	movw	r12, r16
    2594:	1a 82       	std	Y+2, r1	; 0x02
#endif
        }
        
        /* read next lfn or 8.3 entry */
        uint8_t first_char;
        if(!fs->partition->device_read(offset, &first_char, sizeof(first_char)))
    2596:	d1 01       	movw	r26, r2
    2598:	ed 91       	ld	r30, X+
    259a:	fc 91       	ld	r31, X
    259c:	01 90       	ld	r0, Z+
    259e:	f0 81       	ld	r31, Z
    25a0:	e0 2d       	mov	r30, r0
    25a2:	c8 01       	movw	r24, r16
    25a4:	b7 01       	movw	r22, r14
    25a6:	ae 01       	movw	r20, r28
    25a8:	4f 5f       	subi	r20, 0xFF	; 255
    25aa:	5f 4f       	sbci	r21, 0xFF	; 255
    25ac:	21 e0       	ldi	r18, 0x01	; 1
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	09 95       	icall
    25b2:	88 23       	and	r24, r24
    25b4:	e9 f0       	breq	.+58     	; 0x25f0 <fat_find_offset_for_dir_entry+0x1da>
            return 0;

        /* check if we found a free directory entry */
        if(first_char == FAT_DIRENTRY_DELETED || !first_char)
    25b6:	89 81       	ldd	r24, Y+1	; 0x01
    25b8:	85 3e       	cpi	r24, 0xE5	; 229
    25ba:	11 f0       	breq	.+4      	; 0x25c0 <fat_find_offset_for_dir_entry+0x1aa>
    25bc:	88 23       	and	r24, r24
    25be:	79 f4       	brne	.+30     	; 0x25de <fat_find_offset_for_dir_entry+0x1c8>
        {
            /* check if we have the needed number of available entries */
#if FAT_LFN_SUPPORT
            ++free_dir_entries_found;
    25c0:	ba 81       	ldd	r27, Y+2	; 0x02
    25c2:	bf 5f       	subi	r27, 0xFF	; 255
    25c4:	ba 83       	std	Y+2, r27	; 0x02
            if(free_dir_entries_found >= free_dir_entries_needed)
    25c6:	eb 81       	ldd	r30, Y+3	; 0x03
    25c8:	be 17       	cp	r27, r30
    25ca:	a8 f4       	brcc	.+42     	; 0x25f6 <fat_find_offset_for_dir_entry+0x1e0>
#endif
                break;

            offset += 32;
    25cc:	80 e2       	ldi	r24, 0x20	; 32
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	a0 e0       	ldi	r26, 0x00	; 0
    25d2:	b0 e0       	ldi	r27, 0x00	; 0
    25d4:	e8 0e       	add	r14, r24
    25d6:	f9 1e       	adc	r15, r25
    25d8:	0a 1f       	adc	r16, r26
    25da:	1b 1f       	adc	r17, r27
    25dc:	68 cf       	rjmp	.-304    	; 0x24ae <fat_find_offset_for_dir_entry+0x98>
        }
        else
        {
            offset += 32;
    25de:	80 e2       	ldi	r24, 0x20	; 32
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	a0 e0       	ldi	r26, 0x00	; 0
    25e4:	b0 e0       	ldi	r27, 0x00	; 0
    25e6:	e8 0e       	add	r14, r24
    25e8:	f9 1e       	adc	r15, r25
    25ea:	0a 1f       	adc	r16, r26
    25ec:	1b 1f       	adc	r17, r27
    25ee:	5c cf       	rjmp	.-328    	; 0x24a8 <fat_find_offset_for_dir_entry+0x92>
    25f0:	aa 24       	eor	r10, r10
    25f2:	bb 24       	eor	r11, r11
    25f4:	65 01       	movw	r12, r10
#endif
        }
    }

    return dir_entry_offset;
}
    25f6:	b5 01       	movw	r22, r10
    25f8:	c6 01       	movw	r24, r12
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	0f 90       	pop	r0
    2600:	cf 91       	pop	r28
    2602:	df 91       	pop	r29
    2604:	1f 91       	pop	r17
    2606:	0f 91       	pop	r16
    2608:	ff 90       	pop	r15
    260a:	ef 90       	pop	r14
    260c:	df 90       	pop	r13
    260e:	cf 90       	pop	r12
    2610:	bf 90       	pop	r11
    2612:	af 90       	pop	r10
    2614:	9f 90       	pop	r9
    2616:	8f 90       	pop	r8
    2618:	7f 90       	pop	r7
    261a:	6f 90       	pop	r6
    261c:	5f 90       	pop	r5
    261e:	4f 90       	pop	r4
    2620:	3f 90       	pop	r3
    2622:	2f 90       	pop	r2
    2624:	08 95       	ret

00002626 <fat_write_dir_entry>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] dir_entry The directory entry to write.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_write_dir_entry(const struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    2626:	3f 92       	push	r3
    2628:	4f 92       	push	r4
    262a:	5f 92       	push	r5
    262c:	6f 92       	push	r6
    262e:	7f 92       	push	r7
    2630:	8f 92       	push	r8
    2632:	9f 92       	push	r9
    2634:	af 92       	push	r10
    2636:	bf 92       	push	r11
    2638:	cf 92       	push	r12
    263a:	df 92       	push	r13
    263c:	ef 92       	push	r14
    263e:	ff 92       	push	r15
    2640:	0f 93       	push	r16
    2642:	1f 93       	push	r17
    2644:	df 93       	push	r29
    2646:	cf 93       	push	r28
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
    264c:	a0 97       	sbiw	r28, 0x20	; 32
    264e:	0f b6       	in	r0, 0x3f	; 63
    2650:	f8 94       	cli
    2652:	de bf       	out	0x3e, r29	; 62
    2654:	0f be       	out	0x3f, r0	; 63
    2656:	cd bf       	out	0x3d, r28	; 61
    2658:	fc 01       	movw	r30, r24
    265a:	8b 01       	movw	r16, r22
    if(!fs || !dir_entry)
    265c:	00 97       	sbiw	r24, 0x00	; 0
    265e:	09 f4       	brne	.+2      	; 0x2662 <fat_write_dir_entry+0x3c>
    2660:	1f c1       	rjmp	.+574    	; 0x28a0 <fat_write_dir_entry+0x27a>
    2662:	61 15       	cp	r22, r1
    2664:	71 05       	cpc	r23, r1
    2666:	09 f4       	brne	.+2      	; 0x266a <fat_write_dir_entry+0x44>
    2668:	1b c1       	rjmp	.+566    	; 0x28a0 <fat_write_dir_entry+0x27a>
        fat_set_file_modification_date(dir_entry, year, month, day);
        fat_set_file_modification_time(dir_entry, hour, min, sec);
    }
#endif

    device_write_t device_write = fs->partition->device_write;
    266a:	01 90       	ld	r0, Z+
    266c:	f0 81       	ld	r31, Z
    266e:	e0 2d       	mov	r30, r0
    2670:	44 80       	ldd	r4, Z+4	; 0x04
    2672:	55 80       	ldd	r5, Z+5	; 0x05
    offset_t offset = dir_entry->entry_offset;
    2674:	db 01       	movw	r26, r22
    2676:	97 96       	adiw	r26, 0x27	; 39
    2678:	ad 90       	ld	r10, X+
    267a:	bd 90       	ld	r11, X+
    267c:	cd 90       	ld	r12, X+
    267e:	dc 90       	ld	r13, X
    2680:	9a 97       	sbiw	r26, 0x2a	; 42
    const char* name = dir_entry->long_name;
    2682:	e6 2e       	mov	r14, r22
    2684:	91 2e       	mov	r9, r17
    uint8_t name_len = strlen(name);
    2686:	fb 01       	movw	r30, r22
    2688:	01 90       	ld	r0, Z+
    268a:	00 20       	and	r0, r0
    268c:	e9 f7       	brne	.-6      	; 0x2688 <fat_write_dir_entry+0x62>
    268e:	31 97       	sbiw	r30, 0x01	; 1
    2690:	fe 2e       	mov	r15, r30
    2692:	f6 1a       	sub	r15, r22
#if FAT_LFN_SUPPORT
    uint8_t lfn_entry_count = (name_len + 12) / 13;
    2694:	8f 2d       	mov	r24, r15
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	0c 96       	adiw	r24, 0x0c	; 12
    269a:	6d e0       	ldi	r22, 0x0D	; 13
    269c:	70 e0       	ldi	r23, 0x00	; 0
    269e:	0e 94 48 26 	call	0x4c90	; 0x4c90 <__divmodhi4>
    26a2:	76 2e       	mov	r7, r22
    uint8_t buffer[32];

    /* write 8.3 entry */

    /* generate 8.3 file name */
    memset(&buffer[0], ' ', 11);
    26a4:	ce 01       	movw	r24, r28
    26a6:	01 96       	adiw	r24, 0x01	; 1
    26a8:	60 e2       	ldi	r22, 0x20	; 32
    26aa:	70 e0       	ldi	r23, 0x00	; 0
    26ac:	4b e0       	ldi	r20, 0x0B	; 11
    26ae:	50 e0       	ldi	r21, 0x00	; 0
    26b0:	0e 94 31 23 	call	0x4662	; 0x4662 <memset>
    char* name_ext = strrchr(name, '.');
    26b4:	c8 01       	movw	r24, r16
    26b6:	6e e2       	ldi	r22, 0x2E	; 46
    26b8:	70 e0       	ldi	r23, 0x00	; 0
    26ba:	0e 94 69 23 	call	0x46d2	; 0x46d2 <strrchr>
    26be:	fc 01       	movw	r30, r24
    if(name_ext && *++name_ext)
    26c0:	00 97       	sbiw	r24, 0x00	; 0
    26c2:	e1 f0       	breq	.+56     	; 0x26fc <fat_write_dir_entry+0xd6>
    26c4:	9c 01       	movw	r18, r24
    26c6:	2f 5f       	subi	r18, 0xFF	; 255
    26c8:	3f 4f       	sbci	r19, 0xFF	; 255
    26ca:	81 81       	ldd	r24, Z+1	; 0x01
    26cc:	88 23       	and	r24, r24
    26ce:	b1 f0       	breq	.+44     	; 0x26fc <fat_write_dir_entry+0xd6>
    {
        uint8_t name_ext_len = strlen(name_ext);
    26d0:	d9 01       	movw	r26, r18
    26d2:	0d 90       	ld	r0, X+
    26d4:	00 20       	and	r0, r0
    26d6:	e9 f7       	brne	.-6      	; 0x26d2 <fat_write_dir_entry+0xac>
    26d8:	11 97       	sbiw	r26, 0x01	; 1
    26da:	a2 1b       	sub	r26, r18
    26dc:	b3 0b       	sbc	r27, r19
        name_len -= name_ext_len + 1;
    26de:	8a 2f       	mov	r24, r26
    26e0:	80 95       	com	r24
    26e2:	f8 0e       	add	r15, r24
            name_ext_len = 3;
#else
            return 0;
#endif
        
        memcpy(&buffer[8], name_ext, name_ext_len);
    26e4:	be 01       	movw	r22, r28
    26e6:	67 5f       	subi	r22, 0xF7	; 247
    26e8:	7f 4f       	sbci	r23, 0xFF	; 255
    26ea:	4a 2f       	mov	r20, r26
    26ec:	a4 30       	cpi	r26, 0x04	; 4
    26ee:	08 f0       	brcs	.+2      	; 0x26f2 <fat_write_dir_entry+0xcc>
    26f0:	43 e0       	ldi	r20, 0x03	; 3
    26f2:	cb 01       	movw	r24, r22
    26f4:	b9 01       	movw	r22, r18
    26f6:	50 e0       	ldi	r21, 0x00	; 0
    26f8:	0e 94 28 23 	call	0x4650	; 0x4650 <memcpy>
    26fc:	ce 01       	movw	r24, r28
    26fe:	01 96       	adiw	r24, 0x01	; 1
    }
    
    if(name_len <= 8)
    2700:	b8 e0       	ldi	r27, 0x08	; 8
    2702:	bf 15       	cp	r27, r15
    2704:	88 f0       	brcs	.+34     	; 0x2728 <fat_write_dir_entry+0x102>
    {
        memcpy(buffer, name, name_len);
    2706:	6e 2d       	mov	r22, r14
    2708:	79 2d       	mov	r23, r9
    270a:	4f 2d       	mov	r20, r15
    270c:	50 e0       	ldi	r21, 0x00	; 0
    270e:	0e 94 28 23 	call	0x4650	; 0x4650 <memcpy>
         *
         * Theoretically it would be possible to leave
         * the 8.3 entry alone if the basename and the
         * extension have no mixed capitalization.
         */
        if(name[0] == '.' &&
    2712:	f8 01       	movw	r30, r16
    2714:	80 81       	ld	r24, Z
    2716:	8e 32       	cpi	r24, 0x2E	; 46
    2718:	31 f5       	brne	.+76     	; 0x2766 <fat_write_dir_entry+0x140>
    271a:	81 81       	ldd	r24, Z+1	; 0x01
    271c:	8e 32       	cpi	r24, 0x2E	; 46
    271e:	09 f4       	brne	.+2      	; 0x2722 <fat_write_dir_entry+0xfc>
    2720:	82 81       	ldd	r24, Z+2	; 0x02
    2722:	88 23       	and	r24, r24
    2724:	f9 f0       	breq	.+62     	; 0x2764 <fat_write_dir_entry+0x13e>
    2726:	1f c0       	rjmp	.+62     	; 0x2766 <fat_write_dir_entry+0x140>
#endif
    }
    else
    {
#if FAT_LFN_SUPPORT
        memcpy(buffer, name, 8);
    2728:	dc 01       	movw	r26, r24
    272a:	8e 2d       	mov	r24, r14
    272c:	99 2d       	mov	r25, r9
    272e:	9c 01       	movw	r18, r24
    2730:	f9 01       	movw	r30, r18
    2732:	88 e0       	ldi	r24, 0x08	; 8
    2734:	01 90       	ld	r0, Z+
    2736:	0d 92       	st	X+, r0
    2738:	81 50       	subi	r24, 0x01	; 1
    273a:	e1 f7       	brne	.-8      	; 0x2734 <fat_write_dir_entry+0x10e>

        /* Minimize 8.3 name clashes by appending
         * the lower byte of the cluster number.
         */
        uint8_t num = dir_entry->cluster & 0xff;
    273c:	d8 01       	movw	r26, r16
    273e:	91 96       	adiw	r26, 0x21	; 33
    2740:	8c 91       	ld	r24, X
    2742:	98 2f       	mov	r25, r24
    2744:	92 95       	swap	r25
    2746:	9f 70       	andi	r25, 0x0F	; 15

        buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
    2748:	80 3a       	cpi	r24, 0xA0	; 160
    274a:	10 f4       	brcc	.+4      	; 0x2750 <fat_write_dir_entry+0x12a>
    274c:	90 5d       	subi	r25, 0xD0	; 208
    274e:	01 c0       	rjmp	.+2      	; 0x2752 <fat_write_dir_entry+0x12c>
    2750:	9f 59       	subi	r25, 0x9F	; 159
        num &= 0x0f;
    2752:	8f 70       	andi	r24, 0x0F	; 15
        buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
    2754:	8a 30       	cpi	r24, 0x0A	; 10
    2756:	10 f4       	brcc	.+4      	; 0x275c <fat_write_dir_entry+0x136>
    2758:	80 5d       	subi	r24, 0xD0	; 208
    275a:	01 c0       	rjmp	.+2      	; 0x275e <fat_write_dir_entry+0x138>
    275c:	8f 59       	subi	r24, 0x9F	; 159
        /* Minimize 8.3 name clashes by appending
         * the lower byte of the cluster number.
         */
        uint8_t num = dir_entry->cluster & 0xff;

        buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
    275e:	9f 83       	std	Y+7, r25	; 0x07
        num &= 0x0f;
        buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
    2760:	88 87       	std	Y+8, r24	; 0x08
    2762:	01 c0       	rjmp	.+2      	; 0x2766 <fat_write_dir_entry+0x140>
    2764:	77 24       	eor	r7, r7
#else
        return 0;
#endif
    }
    if(buffer[0] == FAT_DIRENTRY_DELETED)
    2766:	89 81       	ldd	r24, Y+1	; 0x01
    2768:	85 3e       	cpi	r24, 0xE5	; 229
    276a:	11 f4       	brne	.+4      	; 0x2770 <fat_write_dir_entry+0x14a>
        buffer[0] = 0x05;
    276c:	85 e0       	ldi	r24, 0x05	; 5
    276e:	89 83       	std	Y+1, r24	; 0x01

    /* fill directory entry buffer */
    memset(&buffer[11], 0, sizeof(buffer) - 11);
    2770:	8c e0       	ldi	r24, 0x0C	; 12
    2772:	88 2e       	mov	r8, r24
    2774:	91 2c       	mov	r9, r1
    2776:	8c 0e       	add	r8, r28
    2778:	9d 1e       	adc	r9, r29
    277a:	85 e1       	ldi	r24, 0x15	; 21
    277c:	f4 01       	movw	r30, r8
    277e:	11 92       	st	Z+, r1
    2780:	8a 95       	dec	r24
    2782:	e9 f7       	brne	.-6      	; 0x277e <fat_write_dir_entry+0x158>
    buffer[0x0b] = dir_entry->attributes;
    2784:	d8 01       	movw	r26, r16
    2786:	90 96       	adiw	r26, 0x20	; 32
    2788:	8c 91       	ld	r24, X
    278a:	90 97       	sbiw	r26, 0x20	; 32
    278c:	8c 87       	std	Y+12, r24	; 0x0c
    *((uint16_t*) &buffer[0x18]) = htol16(dir_entry->modification_date);
#endif
#if FAT_FAT32_SUPPORT
    *((uint16_t*) &buffer[0x14]) = htol16((uint16_t) (dir_entry->cluster >> 16));
#endif
    *((uint16_t*) &buffer[0x1a]) = htol16(dir_entry->cluster);
    278e:	91 96       	adiw	r26, 0x21	; 33
    2790:	8d 91       	ld	r24, X+
    2792:	9c 91       	ld	r25, X
    2794:	92 97       	sbiw	r26, 0x22	; 34
    2796:	9c 8f       	std	Y+28, r25	; 0x1c
    2798:	8b 8f       	std	Y+27, r24	; 0x1b
    *((uint32_t*) &buffer[0x1c]) = htol32(dir_entry->file_size);
    279a:	93 96       	adiw	r26, 0x23	; 35
    279c:	8d 91       	ld	r24, X+
    279e:	9d 91       	ld	r25, X+
    27a0:	0d 90       	ld	r0, X+
    27a2:	bc 91       	ld	r27, X
    27a4:	a0 2d       	mov	r26, r0
    27a6:	8d 8f       	std	Y+29, r24	; 0x1d
    27a8:	9e 8f       	std	Y+30, r25	; 0x1e
    27aa:	af 8f       	std	Y+31, r26	; 0x1f
    27ac:	b8 a3       	std	Y+32, r27	; 0x20

    /* write to disk */
#if FAT_LFN_SUPPORT
    if(!device_write(offset + (uint16_t) lfn_entry_count * 32, buffer, sizeof(buffer)))
    27ae:	67 2d       	mov	r22, r7
    27b0:	70 e0       	ldi	r23, 0x00	; 0
    27b2:	b5 e0       	ldi	r27, 0x05	; 5
    27b4:	66 0f       	add	r22, r22
    27b6:	77 1f       	adc	r23, r23
    27b8:	ba 95       	dec	r27
    27ba:	e1 f7       	brne	.-8      	; 0x27b4 <fat_write_dir_entry+0x18e>
    27bc:	80 e0       	ldi	r24, 0x00	; 0
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	6a 0d       	add	r22, r10
    27c2:	7b 1d       	adc	r23, r11
    27c4:	8c 1d       	adc	r24, r12
    27c6:	9d 1d       	adc	r25, r13
    27c8:	ae 01       	movw	r20, r28
    27ca:	4f 5f       	subi	r20, 0xFF	; 255
    27cc:	5f 4f       	sbci	r21, 0xFF	; 255
    27ce:	20 e2       	ldi	r18, 0x20	; 32
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	f2 01       	movw	r30, r4
    27d4:	09 95       	icall
    27d6:	88 23       	and	r24, r24
    27d8:	09 f4       	brne	.+2      	; 0x27dc <fat_write_dir_entry+0x1b6>
    27da:	62 c0       	rjmp	.+196    	; 0x28a0 <fat_write_dir_entry+0x27a>
 * \param[in] file_name_83 The 11-byte file name buffer.
 * \returns The checksum of the given file name.
 */
uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
{
    uint8_t checksum = file_name_83[0];
    27dc:	e9 80       	ldd	r14, Y+1	; 0x01
    27de:	fe 01       	movw	r30, r28
    27e0:	32 96       	adiw	r30, 0x02	; 2
    for(uint8_t i = 1; i < 11; ++i)
    27e2:	94 01       	movw	r18, r8
        checksum = ((checksum >> 1) | (checksum << 7)) + file_name_83[i];
    27e4:	8e 2d       	mov	r24, r14
    27e6:	86 95       	lsr	r24
    27e8:	e7 94       	ror	r14
    27ea:	ee 24       	eor	r14, r14
    27ec:	e7 94       	ror	r14
    27ee:	e8 2a       	or	r14, r24
    27f0:	81 91       	ld	r24, Z+
    27f2:	e8 0e       	add	r14, r24
 * \returns The checksum of the given file name.
 */
uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
{
    uint8_t checksum = file_name_83[0];
    for(uint8_t i = 1; i < 11; ++i)
    27f4:	e2 17       	cp	r30, r18
    27f6:	f3 07       	cpc	r31, r19
    27f8:	a9 f7       	brne	.-22     	; 0x27e4 <fat_write_dir_entry+0x1be>
    27fa:	f7 2c       	mov	r15, r7
    uint8_t checksum = fat_calc_83_checksum(buffer);
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    {
        memset(buffer, 0xff, sizeof(buffer));
    27fc:	4e 01       	movw	r8, r28
    27fe:	08 94       	sec
    2800:	81 1c       	adc	r8, r1
    2802:	91 1c       	adc	r9, r1
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
    2804:	ad e0       	ldi	r26, 0x0D	; 13
    2806:	3a 2e       	mov	r3, r26
        buffer[0x00] = lfn_entry;
        if(lfn_entry == lfn_entry_count)
            buffer[0x00] |= FAT_DIRENTRY_LFNLAST;

        /* mark as lfn entry */
        buffer[0x0b] = 0x0f;
    2808:	ff e0       	ldi	r31, 0x0F	; 15
    280a:	6f 2e       	mov	r6, r31
    280c:	44 c0       	rjmp	.+136    	; 0x2896 <fat_write_dir_entry+0x270>
    uint8_t checksum = fat_calc_83_checksum(buffer);
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    {
        memset(buffer, 0xff, sizeof(buffer));
    280e:	c4 01       	movw	r24, r8
    2810:	6f ef       	ldi	r22, 0xFF	; 255
    2812:	70 e0       	ldi	r23, 0x00	; 0
    2814:	40 e2       	ldi	r20, 0x20	; 32
    2816:	50 e0       	ldi	r21, 0x00	; 0
    2818:	0e 94 31 23 	call	0x4662	; 0x4662 <memset>
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
    281c:	f3 9c       	mul	r15, r3
    281e:	d0 01       	movw	r26, r0
    2820:	11 24       	eor	r1, r1
    2822:	1d 97       	sbiw	r26, 0x0d	; 13
    2824:	a0 0f       	add	r26, r16
    2826:	b1 1f       	adc	r27, r17
    2828:	91 e0       	ldi	r25, 0x01	; 1
        uint8_t i = 1;
        while(i < 0x1f)
        {
            buffer[i++] = *long_name_curr;
    282a:	f4 01       	movw	r30, r8
    282c:	e9 0f       	add	r30, r25
    282e:	f1 1d       	adc	r31, r1
    2830:	8c 91       	ld	r24, X
    2832:	80 83       	st	Z, r24
    2834:	89 2f       	mov	r24, r25
    2836:	8f 5f       	subi	r24, 0xFF	; 255
            buffer[i++] = 0;
    2838:	f4 01       	movw	r30, r8
    283a:	e8 0f       	add	r30, r24
    283c:	f1 1d       	adc	r31, r1
    283e:	10 82       	st	Z, r1
    2840:	9e 5f       	subi	r25, 0xFE	; 254

            switch(i)
    2842:	9b 30       	cpi	r25, 0x0B	; 11
    2844:	19 f0       	breq	.+6      	; 0x284c <fat_write_dir_entry+0x226>
    2846:	9a 31       	cpi	r25, 0x1A	; 26
    2848:	21 f4       	brne	.+8      	; 0x2852 <fat_write_dir_entry+0x22c>
    284a:	02 c0       	rjmp	.+4      	; 0x2850 <fat_write_dir_entry+0x22a>
    284c:	9e e0       	ldi	r25, 0x0E	; 14
    284e:	01 c0       	rjmp	.+2      	; 0x2852 <fat_write_dir_entry+0x22c>
    2850:	9c e1       	ldi	r25, 0x1C	; 28
                case 0x1a:
                    i = 0x1c;
                    break;
            }

            if(!*long_name_curr++)
    2852:	8c 91       	ld	r24, X
    2854:	88 23       	and	r24, r24
    2856:	21 f0       	breq	.+8      	; 0x2860 <fat_write_dir_entry+0x23a>
        memset(buffer, 0xff, sizeof(buffer));
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
        uint8_t i = 1;
        while(i < 0x1f)
    2858:	9f 31       	cpi	r25, 0x1F	; 31
    285a:	10 f4       	brcc	.+4      	; 0x2860 <fat_write_dir_entry+0x23a>
                case 0x1a:
                    i = 0x1c;
                    break;
            }

            if(!*long_name_curr++)
    285c:	11 96       	adiw	r26, 0x01	; 1
    285e:	e5 cf       	rjmp	.-54     	; 0x282a <fat_write_dir_entry+0x204>
                break;
        }
        
        /* set index of lfn entry */
        buffer[0x00] = lfn_entry;
    2860:	f9 82       	std	Y+1, r15	; 0x01
        if(lfn_entry == lfn_entry_count)
    2862:	f7 14       	cp	r15, r7
    2864:	19 f4       	brne	.+6      	; 0x286c <fat_write_dir_entry+0x246>
            buffer[0x00] |= FAT_DIRENTRY_LFNLAST;
    2866:	8f 2d       	mov	r24, r15
    2868:	80 64       	ori	r24, 0x40	; 64
    286a:	89 83       	std	Y+1, r24	; 0x01

        /* mark as lfn entry */
        buffer[0x0b] = 0x0f;
    286c:	6c 86       	std	Y+12, r6	; 0x0c

        /* set 8.3 checksum */
        buffer[0x0d] = checksum;
    286e:	ee 86       	std	Y+14, r14	; 0x0e

        /* clear reserved bytes */
        buffer[0x0c] = 0;
    2870:	1d 86       	std	Y+13, r1	; 0x0d
        buffer[0x1a] = 0;
    2872:	1b 8e       	std	Y+27, r1	; 0x1b
        buffer[0x1b] = 0;
    2874:	1c 8e       	std	Y+28, r1	; 0x1c

        /* write entry */
        device_write(offset, buffer, sizeof(buffer));
    2876:	c6 01       	movw	r24, r12
    2878:	b5 01       	movw	r22, r10
    287a:	a4 01       	movw	r20, r8
    287c:	20 e2       	ldi	r18, 0x20	; 32
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	f2 01       	movw	r30, r4
    2882:	09 95       	icall
    
        offset += sizeof(buffer);
    2884:	80 e2       	ldi	r24, 0x20	; 32
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	a0 e0       	ldi	r26, 0x00	; 0
    288a:	b0 e0       	ldi	r27, 0x00	; 0
    288c:	a8 0e       	add	r10, r24
    288e:	b9 1e       	adc	r11, r25
    2890:	ca 1e       	adc	r12, r26
    2892:	db 1e       	adc	r13, r27
#if FAT_LFN_SUPPORT
    /* calculate checksum of 8.3 name */
    uint8_t checksum = fat_calc_83_checksum(buffer);
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    2894:	fa 94       	dec	r15
    2896:	ff 20       	and	r15, r15
    2898:	09 f0       	breq	.+2      	; 0x289c <fat_write_dir_entry+0x276>
    289a:	b9 cf       	rjmp	.-142    	; 0x280e <fat_write_dir_entry+0x1e8>
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	01 c0       	rjmp	.+2      	; 0x28a2 <fat_write_dir_entry+0x27c>
    28a0:	80 e0       	ldi	r24, 0x00	; 0
        offset += sizeof(buffer);
    }
#endif
    
    return 1;
}
    28a2:	a0 96       	adiw	r28, 0x20	; 32
    28a4:	0f b6       	in	r0, 0x3f	; 63
    28a6:	f8 94       	cli
    28a8:	de bf       	out	0x3e, r29	; 62
    28aa:	0f be       	out	0x3f, r0	; 63
    28ac:	cd bf       	out	0x3d, r28	; 61
    28ae:	cf 91       	pop	r28
    28b0:	df 91       	pop	r29
    28b2:	1f 91       	pop	r17
    28b4:	0f 91       	pop	r16
    28b6:	ff 90       	pop	r15
    28b8:	ef 90       	pop	r14
    28ba:	df 90       	pop	r13
    28bc:	cf 90       	pop	r12
    28be:	bf 90       	pop	r11
    28c0:	af 90       	pop	r10
    28c2:	9f 90       	pop	r9
    28c4:	8f 90       	pop	r8
    28c6:	7f 90       	pop	r7
    28c8:	6f 90       	pop	r6
    28ca:	5f 90       	pop	r5
    28cc:	4f 90       	pop	r4
    28ce:	3f 90       	pop	r3
    28d0:	08 95       	ret

000028d2 <fat_create_dir>:
 * \param[out] dir_entry The directory entry to fill for the new directory.
 * \returns 0 on failure, 1 on success.
 * \see fat_delete_dir
 */
uint8_t fat_create_dir(struct fat_dir_struct* parent, const char* dir, struct fat_dir_entry_struct* dir_entry)
{
    28d2:	7f 92       	push	r7
    28d4:	8f 92       	push	r8
    28d6:	9f 92       	push	r9
    28d8:	af 92       	push	r10
    28da:	bf 92       	push	r11
    28dc:	cf 92       	push	r12
    28de:	df 92       	push	r13
    28e0:	ef 92       	push	r14
    28e2:	ff 92       	push	r15
    28e4:	0f 93       	push	r16
    28e6:	1f 93       	push	r17
    28e8:	cf 93       	push	r28
    28ea:	df 93       	push	r29
    28ec:	6c 01       	movw	r12, r24
    28ee:	5b 01       	movw	r10, r22
    28f0:	ea 01       	movw	r28, r20
    if(!parent || !dir || !dir[0] || !dir_entry)
    28f2:	00 97       	sbiw	r24, 0x00	; 0
    28f4:	09 f4       	brne	.+2      	; 0x28f8 <fat_create_dir+0x26>
    28f6:	9d c0       	rjmp	.+314    	; 0x2a32 <fat_create_dir+0x160>
    28f8:	61 15       	cp	r22, r1
    28fa:	71 05       	cpc	r23, r1
    28fc:	09 f4       	brne	.+2      	; 0x2900 <fat_create_dir+0x2e>
    28fe:	99 c0       	rjmp	.+306    	; 0x2a32 <fat_create_dir+0x160>
    2900:	fb 01       	movw	r30, r22
    2902:	80 81       	ld	r24, Z
    2904:	88 23       	and	r24, r24
    2906:	09 f4       	brne	.+2      	; 0x290a <fat_create_dir+0x38>
    2908:	94 c0       	rjmp	.+296    	; 0x2a32 <fat_create_dir+0x160>
    290a:	41 15       	cp	r20, r1
    290c:	51 05       	cpc	r21, r1
    290e:	81 f4       	brne	.+32     	; 0x2930 <fat_create_dir+0x5e>
    2910:	90 c0       	rjmp	.+288    	; 0x2a32 <fat_create_dir+0x160>
        return 0;

    /* check if the file or directory already exists */
    while(fat_read_dir(parent, dir_entry))
    {
        if(strcmp(dir, dir_entry->long_name) == 0)
    2912:	c5 01       	movw	r24, r10
    2914:	68 2d       	mov	r22, r8
    2916:	77 2d       	mov	r23, r7
    2918:	0e 94 43 23 	call	0x4686	; 0x4686 <strcmp>
    291c:	00 97       	sbiw	r24, 0x00	; 0
    291e:	51 f4       	brne	.+20     	; 0x2934 <fat_create_dir+0x62>
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    2920:	f6 01       	movw	r30, r12
    2922:	83 a1       	ldd	r24, Z+35	; 0x23
    2924:	94 a1       	ldd	r25, Z+36	; 0x24
    2926:	96 a7       	std	Z+46, r25	; 0x2e
    2928:	85 a7       	std	Z+45, r24	; 0x2d
    dd->entry_offset = 0;
    292a:	10 aa       	std	Z+48, r1	; 0x30
    292c:	17 a6       	std	Z+47, r1	; 0x2f
    292e:	81 c0       	rjmp	.+258    	; 0x2a32 <fat_create_dir+0x160>
        return 0;

    /* check if the file or directory already exists */
    while(fat_read_dir(parent, dir_entry))
    {
        if(strcmp(dir, dir_entry->long_name) == 0)
    2930:	84 2e       	mov	r8, r20
    2932:	7d 2e       	mov	r7, r29
{
    if(!parent || !dir || !dir[0] || !dir_entry)
        return 0;

    /* check if the file or directory already exists */
    while(fat_read_dir(parent, dir_entry))
    2934:	c6 01       	movw	r24, r12
    2936:	be 01       	movw	r22, r28
    2938:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <fat_read_dir>
    293c:	88 23       	and	r24, r24
    293e:	49 f7       	brne	.-46     	; 0x2912 <fat_create_dir+0x40>
            fat_reset_dir(parent);
            return 0;
        }
    }

    struct fat_fs_struct* fs = parent->fs;
    2940:	f6 01       	movw	r30, r12
    2942:	e0 80       	ld	r14, Z
    2944:	f1 80       	ldd	r15, Z+1	; 0x01

    /* allocate cluster which will hold directory entries */
    cluster_t dir_cluster = fat_append_clusters(fs, 0, 1);
    2946:	c7 01       	movw	r24, r14
    2948:	60 e0       	ldi	r22, 0x00	; 0
    294a:	70 e0       	ldi	r23, 0x00	; 0
    294c:	41 e0       	ldi	r20, 0x01	; 1
    294e:	50 e0       	ldi	r21, 0x00	; 0
    2950:	0e 94 93 03 	call	0x726	; 0x726 <fat_append_clusters>
    2954:	8c 01       	movw	r16, r24
    if(!dir_cluster)
    2956:	00 97       	sbiw	r24, 0x00	; 0
    2958:	09 f4       	brne	.+2      	; 0x295c <fat_create_dir+0x8a>
    295a:	6b c0       	rjmp	.+214    	; 0x2a32 <fat_create_dir+0x160>
        return 0;

    /* clear cluster to prevent bogus directory entries */
    fat_clear_cluster(fs, dir_cluster);
    295c:	c7 01       	movw	r24, r14
    295e:	b8 01       	movw	r22, r16
    2960:	0e 94 9e 09 	call	0x133c	; 0x133c <fat_clear_cluster>
    
    memset(dir_entry, 0, sizeof(*dir_entry));
    2964:	8b e2       	ldi	r24, 0x2B	; 43
    2966:	fe 01       	movw	r30, r28
    2968:	11 92       	st	Z+, r1
    296a:	8a 95       	dec	r24
    296c:	e9 f7       	brne	.-6      	; 0x2968 <fat_create_dir+0x96>
    dir_entry->attributes = FAT_ATTRIB_DIR;
    296e:	80 e1       	ldi	r24, 0x10	; 16
    2970:	88 a3       	std	Y+32, r24	; 0x20

    /* create "." directory self reference */
    dir_entry->entry_offset = fs->header.cluster_zero_offset +
    2972:	02 50       	subi	r16, 0x02	; 2
    2974:	10 40       	sbci	r17, 0x00	; 0
    2976:	b8 01       	movw	r22, r16
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	0e 5f       	subi	r16, 0xFE	; 254
    297e:	1f 4f       	sbci	r17, 0xFF	; 255
    2980:	f7 01       	movw	r30, r14
    2982:	20 89       	ldd	r18, Z+16	; 0x10
    2984:	31 89       	ldd	r19, Z+17	; 0x11
    2986:	40 e0       	ldi	r20, 0x00	; 0
    2988:	50 e0       	ldi	r21, 0x00	; 0
    298a:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <__mulsi3>
    298e:	f7 01       	movw	r30, r14
    2990:	22 89       	ldd	r18, Z+18	; 0x12
    2992:	33 89       	ldd	r19, Z+19	; 0x13
    2994:	44 89       	ldd	r20, Z+20	; 0x14
    2996:	55 89       	ldd	r21, Z+21	; 0x15
    2998:	26 0f       	add	r18, r22
    299a:	37 1f       	adc	r19, r23
    299c:	48 1f       	adc	r20, r24
    299e:	59 1f       	adc	r21, r25
    29a0:	2f a3       	std	Y+39, r18	; 0x27
    29a2:	38 a7       	std	Y+40, r19	; 0x28
    29a4:	49 a7       	std	Y+41, r20	; 0x29
    29a6:	5a a7       	std	Y+42, r21	; 0x2a
                              (offset_t) (dir_cluster - 2) * fs->header.cluster_size;
    dir_entry->long_name[0] = '.';
    29a8:	9e e2       	ldi	r25, 0x2E	; 46
    29aa:	99 2e       	mov	r9, r25
    29ac:	98 82       	st	Y, r9
    dir_entry->cluster = dir_cluster;
    29ae:	1a a3       	std	Y+34, r17	; 0x22
    29b0:	09 a3       	std	Y+33, r16	; 0x21
    if(!fat_write_dir_entry(fs, dir_entry))
    29b2:	c7 01       	movw	r24, r14
    29b4:	be 01       	movw	r22, r28
    29b6:	0e 94 13 13 	call	0x2626	; 0x2626 <fat_write_dir_entry>
    29ba:	88 23       	and	r24, r24
    29bc:	b1 f1       	breq	.+108    	; 0x2a2a <fat_create_dir+0x158>
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    /* create ".." parent directory reference */
    dir_entry->entry_offset += 32;
    29be:	8f a1       	ldd	r24, Y+39	; 0x27
    29c0:	98 a5       	ldd	r25, Y+40	; 0x28
    29c2:	a9 a5       	ldd	r26, Y+41	; 0x29
    29c4:	ba a5       	ldd	r27, Y+42	; 0x2a
    29c6:	80 96       	adiw	r24, 0x20	; 32
    29c8:	a1 1d       	adc	r26, r1
    29ca:	b1 1d       	adc	r27, r1
    29cc:	8f a3       	std	Y+39, r24	; 0x27
    29ce:	98 a7       	std	Y+40, r25	; 0x28
    29d0:	a9 a7       	std	Y+41, r26	; 0x29
    29d2:	ba a7       	std	Y+42, r27	; 0x2a
    dir_entry->long_name[1] = '.';
    29d4:	99 82       	std	Y+1, r9	; 0x01
    dir_entry->cluster = parent->dir_entry.cluster;
    29d6:	f6 01       	movw	r30, r12
    29d8:	83 a1       	ldd	r24, Z+35	; 0x23
    29da:	94 a1       	ldd	r25, Z+36	; 0x24
    29dc:	9a a3       	std	Y+34, r25	; 0x22
    29de:	89 a3       	std	Y+33, r24	; 0x21
    if(!fat_write_dir_entry(fs, dir_entry))
    29e0:	c7 01       	movw	r24, r14
    29e2:	be 01       	movw	r22, r28
    29e4:	0e 94 13 13 	call	0x2626	; 0x2626 <fat_write_dir_entry>
    29e8:	88 23       	and	r24, r24
    29ea:	f9 f0       	breq	.+62     	; 0x2a2a <fat_create_dir+0x158>
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    /* fill directory entry */
    strncpy(dir_entry->long_name, dir, sizeof(dir_entry->long_name) - 1);
    29ec:	88 2d       	mov	r24, r8
    29ee:	97 2d       	mov	r25, r7
    29f0:	b5 01       	movw	r22, r10
    29f2:	4f e1       	ldi	r20, 0x1F	; 31
    29f4:	50 e0       	ldi	r21, 0x00	; 0
    29f6:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <strncpy>
    dir_entry->cluster = dir_cluster;
    29fa:	1a a3       	std	Y+34, r17	; 0x22
    29fc:	09 a3       	std	Y+33, r16	; 0x21

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
    29fe:	c7 01       	movw	r24, r14
    2a00:	b6 01       	movw	r22, r12
    2a02:	ae 01       	movw	r20, r28
    2a04:	0e 94 0b 12 	call	0x2416	; 0x2416 <fat_find_offset_for_dir_entry>
    2a08:	6f a3       	std	Y+39, r22	; 0x27
    2a0a:	78 a7       	std	Y+40, r23	; 0x28
    2a0c:	89 a7       	std	Y+41, r24	; 0x29
    2a0e:	9a a7       	std	Y+42, r25	; 0x2a
    2a10:	61 15       	cp	r22, r1
    2a12:	71 05       	cpc	r23, r1
    2a14:	81 05       	cpc	r24, r1
    2a16:	91 05       	cpc	r25, r1
    2a18:	41 f0       	breq	.+16     	; 0x2a2a <fat_create_dir+0x158>
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    /* write directory to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
    2a1a:	c7 01       	movw	r24, r14
    2a1c:	be 01       	movw	r22, r28
    2a1e:	0e 94 13 13 	call	0x2626	; 0x2626 <fat_write_dir_entry>
    2a22:	88 23       	and	r24, r24
    2a24:	11 f0       	breq	.+4      	; 0x2a2a <fat_create_dir+0x158>
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	05 c0       	rjmp	.+10     	; 0x2a34 <fat_create_dir+0x162>
    {
        fat_free_clusters(fs, dir_cluster);
    2a2a:	c7 01       	movw	r24, r14
    2a2c:	b8 01       	movw	r22, r16
    2a2e:	0e 94 1d 03 	call	0x63a	; 0x63a <fat_free_clusters>
        return 0;
    2a32:	80 e0       	ldi	r24, 0x00	; 0
    }

    return 1;
}
    2a34:	df 91       	pop	r29
    2a36:	cf 91       	pop	r28
    2a38:	1f 91       	pop	r17
    2a3a:	0f 91       	pop	r16
    2a3c:	ff 90       	pop	r15
    2a3e:	ef 90       	pop	r14
    2a40:	df 90       	pop	r13
    2a42:	cf 90       	pop	r12
    2a44:	bf 90       	pop	r11
    2a46:	af 90       	pop	r10
    2a48:	9f 90       	pop	r9
    2a4a:	8f 90       	pop	r8
    2a4c:	7f 90       	pop	r7
    2a4e:	08 95       	ret

00002a50 <fat_create_file>:
 * \param[out] dir_entry The directory entry to fill for the new file.
 * \returns 0 on failure, 1 on success.
 * \see fat_delete_file
 */
uint8_t fat_create_file(struct fat_dir_struct* parent, const char* file, struct fat_dir_entry_struct* dir_entry)
{
    2a50:	af 92       	push	r10
    2a52:	bf 92       	push	r11
    2a54:	cf 92       	push	r12
    2a56:	df 92       	push	r13
    2a58:	ef 92       	push	r14
    2a5a:	ff 92       	push	r15
    2a5c:	0f 93       	push	r16
    2a5e:	1f 93       	push	r17
    2a60:	cf 93       	push	r28
    2a62:	df 93       	push	r29
    2a64:	8c 01       	movw	r16, r24
    2a66:	7b 01       	movw	r14, r22
    2a68:	ea 01       	movw	r28, r20
    if(!parent || !file || !file[0] || !dir_entry)
    2a6a:	00 97       	sbiw	r24, 0x00	; 0
    2a6c:	09 f4       	brne	.+2      	; 0x2a70 <fat_create_file+0x20>
    2a6e:	48 c0       	rjmp	.+144    	; 0x2b00 <fat_create_file+0xb0>
    2a70:	61 15       	cp	r22, r1
    2a72:	71 05       	cpc	r23, r1
    2a74:	09 f4       	brne	.+2      	; 0x2a78 <fat_create_file+0x28>
    2a76:	44 c0       	rjmp	.+136    	; 0x2b00 <fat_create_file+0xb0>
    2a78:	fb 01       	movw	r30, r22
    2a7a:	80 81       	ld	r24, Z
    2a7c:	88 23       	and	r24, r24
    2a7e:	09 f4       	brne	.+2      	; 0x2a82 <fat_create_file+0x32>
    2a80:	3f c0       	rjmp	.+126    	; 0x2b00 <fat_create_file+0xb0>
    2a82:	41 15       	cp	r20, r1
    2a84:	51 05       	cpc	r21, r1
    2a86:	e1 f1       	breq	.+120    	; 0x2b00 <fat_create_file+0xb0>
    while(1)
    {
        if(!fat_read_dir(parent, dir_entry))
            break;

        if(strcmp(file, dir_entry->long_name) == 0)
    2a88:	b4 2e       	mov	r11, r20
    2a8a:	ad 2e       	mov	r10, r29
        return 0;

    /* check if the file already exists */
    while(1)
    {
        if(!fat_read_dir(parent, dir_entry))
    2a8c:	c8 01       	movw	r24, r16
    2a8e:	be 01       	movw	r22, r28
    2a90:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <fat_read_dir>
    2a94:	88 23       	and	r24, r24
    2a96:	79 f0       	breq	.+30     	; 0x2ab6 <fat_create_file+0x66>
            break;

        if(strcmp(file, dir_entry->long_name) == 0)
    2a98:	c7 01       	movw	r24, r14
    2a9a:	6b 2d       	mov	r22, r11
    2a9c:	7a 2d       	mov	r23, r10
    2a9e:	0e 94 43 23 	call	0x4686	; 0x4686 <strcmp>
    2aa2:	00 97       	sbiw	r24, 0x00	; 0
    2aa4:	99 f7       	brne	.-26     	; 0x2a8c <fat_create_file+0x3c>
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    2aa6:	f8 01       	movw	r30, r16
    2aa8:	83 a1       	ldd	r24, Z+35	; 0x23
    2aaa:	94 a1       	ldd	r25, Z+36	; 0x24
    2aac:	96 a7       	std	Z+46, r25	; 0x2e
    2aae:	85 a7       	std	Z+45, r24	; 0x2d
    dd->entry_offset = 0;
    2ab0:	10 aa       	std	Z+48, r1	; 0x30
    2ab2:	17 a6       	std	Z+47, r1	; 0x2f
    2ab4:	25 c0       	rjmp	.+74     	; 0x2b00 <fat_create_file+0xb0>
            fat_reset_dir(parent);
            return 0;
        }
    }

    struct fat_fs_struct* fs = parent->fs;
    2ab6:	f8 01       	movw	r30, r16
    2ab8:	c0 80       	ld	r12, Z
    2aba:	d1 80       	ldd	r13, Z+1	; 0x01

    /* prepare directory entry with values already known */
    memset(dir_entry, 0, sizeof(*dir_entry));
    2abc:	8b e2       	ldi	r24, 0x2B	; 43
    2abe:	fe 01       	movw	r30, r28
    2ac0:	11 92       	st	Z+, r1
    2ac2:	8a 95       	dec	r24
    2ac4:	e9 f7       	brne	.-6      	; 0x2ac0 <fat_create_file+0x70>
    strncpy(dir_entry->long_name, file, sizeof(dir_entry->long_name) - 1);
    2ac6:	8b 2d       	mov	r24, r11
    2ac8:	9a 2d       	mov	r25, r10
    2aca:	b7 01       	movw	r22, r14
    2acc:	4f e1       	ldi	r20, 0x1F	; 31
    2ace:	50 e0       	ldi	r21, 0x00	; 0
    2ad0:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <strncpy>

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
    2ad4:	c6 01       	movw	r24, r12
    2ad6:	b8 01       	movw	r22, r16
    2ad8:	ae 01       	movw	r20, r28
    2ada:	0e 94 0b 12 	call	0x2416	; 0x2416 <fat_find_offset_for_dir_entry>
    2ade:	6f a3       	std	Y+39, r22	; 0x27
    2ae0:	78 a7       	std	Y+40, r23	; 0x28
    2ae2:	89 a7       	std	Y+41, r24	; 0x29
    2ae4:	9a a7       	std	Y+42, r25	; 0x2a
    2ae6:	61 15       	cp	r22, r1
    2ae8:	71 05       	cpc	r23, r1
    2aea:	81 05       	cpc	r24, r1
    2aec:	91 05       	cpc	r25, r1
    2aee:	41 f0       	breq	.+16     	; 0x2b00 <fat_create_file+0xb0>
        return 0;
    
    /* write directory entry to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
    2af0:	c6 01       	movw	r24, r12
    2af2:	be 01       	movw	r22, r28
    2af4:	0e 94 13 13 	call	0x2626	; 0x2626 <fat_write_dir_entry>
    2af8:	88 23       	and	r24, r24
    2afa:	19 f0       	breq	.+6      	; 0x2b02 <fat_create_file+0xb2>
    2afc:	81 e0       	ldi	r24, 0x01	; 1
    2afe:	01 c0       	rjmp	.+2      	; 0x2b02 <fat_create_file+0xb2>
    2b00:	80 e0       	ldi	r24, 0x00	; 0
        return 0;
    
    return 1;
}
    2b02:	df 91       	pop	r29
    2b04:	cf 91       	pop	r28
    2b06:	1f 91       	pop	r17
    2b08:	0f 91       	pop	r16
    2b0a:	ff 90       	pop	r15
    2b0c:	ef 90       	pop	r14
    2b0e:	df 90       	pop	r13
    2b10:	cf 90       	pop	r12
    2b12:	bf 90       	pop	r11
    2b14:	af 90       	pop	r10
    2b16:	08 95       	ret

00002b18 <create_file>:
    return 0;
}


int create_file( const char* fname )
{
    2b18:	0f 93       	push	r16
    2b1a:	1f 93       	push	r17
    2b1c:	df 93       	push	r29
    2b1e:	cf 93       	push	r28
    2b20:	cd b7       	in	r28, 0x3d	; 61
    2b22:	de b7       	in	r29, 0x3e	; 62
    2b24:	ab 97       	sbiw	r28, 0x2b	; 43
    2b26:	0f b6       	in	r0, 0x3f	; 63
    2b28:	f8 94       	cli
    2b2a:	de bf       	out	0x3e, r29	; 62
    2b2c:	0f be       	out	0x3f, r0	; 63
    2b2e:	cd bf       	out	0x3d, r28	; 61
    2b30:	8c 01       	movw	r16, r24
    struct fat_dir_entry_struct file_entry;
    if(!fat_create_file(dd, fname, &file_entry))
    2b32:	80 91 02 05 	lds	r24, 0x0502
    2b36:	90 91 03 05 	lds	r25, 0x0503
    2b3a:	b8 01       	movw	r22, r16
    2b3c:	ae 01       	movw	r20, r28
    2b3e:	4f 5f       	subi	r20, 0xFF	; 255
    2b40:	5f 4f       	sbci	r21, 0xFF	; 255
    2b42:	0e 94 28 15 	call	0x2a50	; 0x2a50 <fat_create_file>
    2b46:	88 23       	and	r24, r24
    2b48:	19 f0       	breq	.+6      	; 0x2b50 <create_file+0x38>
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	0c c0       	rjmp	.+24     	; 0x2b68 <create_file+0x50>
    {
        uart_puts_p(PSTR("error creating file: "));
    2b50:	84 e2       	ldi	r24, 0x24	; 36
    2b52:	92 e0       	ldi	r25, 0x02	; 2
    2b54:	0e 94 b3 02 	call	0x566	; 0x566 <uart_puts_p>
        uart_puts(fname);
    2b58:	c8 01       	movw	r24, r16
    2b5a:	0e 94 a6 02 	call	0x54c	; 0x54c <uart_puts>
        uart_putc('\n');
    2b5e:	8a e0       	ldi	r24, 0x0A	; 10
    2b60:	0e 94 b7 01 	call	0x36e	; 0x36e <uart_putc>
    2b64:	2f ef       	ldi	r18, 0xFF	; 255
    2b66:	3f ef       	ldi	r19, 0xFF	; 255
        return -1;
    }
    return 0;
}
    2b68:	c9 01       	movw	r24, r18
    2b6a:	ab 96       	adiw	r28, 0x2b	; 43
    2b6c:	0f b6       	in	r0, 0x3f	; 63
    2b6e:	f8 94       	cli
    2b70:	de bf       	out	0x3e, r29	; 62
    2b72:	0f be       	out	0x3f, r0	; 63
    2b74:	cd bf       	out	0x3d, r28	; 61
    2b76:	cf 91       	pop	r28
    2b78:	df 91       	pop	r29
    2b7a:	1f 91       	pop	r17
    2b7c:	0f 91       	pop	r16
    2b7e:	08 95       	ret

00002b80 <fat_resize_file>:
 * \param[in] fd The file decriptor of the file which to resize.
 * \param[in] size The new size of the file.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_resize_file(struct fat_file_struct* fd, uint32_t size)
{
    2b80:	4f 92       	push	r4
    2b82:	5f 92       	push	r5
    2b84:	6f 92       	push	r6
    2b86:	7f 92       	push	r7
    2b88:	8f 92       	push	r8
    2b8a:	9f 92       	push	r9
    2b8c:	af 92       	push	r10
    2b8e:	bf 92       	push	r11
    2b90:	cf 92       	push	r12
    2b92:	df 92       	push	r13
    2b94:	ef 92       	push	r14
    2b96:	ff 92       	push	r15
    2b98:	0f 93       	push	r16
    2b9a:	1f 93       	push	r17
    2b9c:	df 93       	push	r29
    2b9e:	cf 93       	push	r28
    2ba0:	cd b7       	in	r28, 0x3d	; 61
    2ba2:	de b7       	in	r29, 0x3e	; 62
    2ba4:	2a 97       	sbiw	r28, 0x0a	; 10
    2ba6:	0f b6       	in	r0, 0x3f	; 63
    2ba8:	f8 94       	cli
    2baa:	de bf       	out	0x3e, r29	; 62
    2bac:	0f be       	out	0x3f, r0	; 63
    2bae:	cd bf       	out	0x3d, r28	; 61
    2bb0:	2c 01       	movw	r4, r24
    2bb2:	5a 01       	movw	r10, r20
    2bb4:	6b 01       	movw	r12, r22
    if(!fd)
    2bb6:	00 97       	sbiw	r24, 0x00	; 0
    2bb8:	09 f4       	brne	.+2      	; 0x2bbc <fat_resize_file+0x3c>
    2bba:	e5 c0       	rjmp	.+458    	; 0x2d86 <fat_resize_file+0x206>
        return 0;

    cluster_t cluster_num = fd->dir_entry.cluster;
    2bbc:	dc 01       	movw	r26, r24
    2bbe:	93 96       	adiw	r26, 0x23	; 35
    2bc0:	0d 91       	ld	r16, X+
    2bc2:	1c 91       	ld	r17, X
    2bc4:	94 97       	sbiw	r26, 0x24	; 36
    uint16_t cluster_size = fd->fs->header.cluster_size;
    2bc6:	ed 91       	ld	r30, X+
    2bc8:	fc 91       	ld	r31, X
    2bca:	20 89       	ldd	r18, Z+16	; 0x10
    2bcc:	31 89       	ldd	r19, Z+17	; 0x11
    uint32_t size_new = size;

    do
    {
        if(cluster_num == 0 && size_new == 0)
    2bce:	01 15       	cp	r16, r1
    2bd0:	11 05       	cpc	r17, r1
    2bd2:	99 f0       	breq	.+38     	; 0x2bfa <fat_resize_file+0x7a>
    2bd4:	ab 82       	std	Y+3, r10	; 0x03
    2bd6:	bc 82       	std	Y+4, r11	; 0x04
    2bd8:	cd 82       	std	Y+5, r12	; 0x05
    2bda:	de 82       	std	Y+6, r13	; 0x06
            /* the file stays empty */
            break;

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
    2bdc:	39 01       	movw	r6, r18
    2bde:	88 24       	eor	r8, r8
    2be0:	99 24       	eor	r9, r9
                cluster_num = cluster_num_next;
                size_new -= cluster_size;
            }
            else
            {
                break;
    2be2:	22 27       	eor	r18, r18
    2be4:	33 27       	eor	r19, r19
    2be6:	a9 01       	movw	r20, r18
    2be8:	26 19       	sub	r18, r6
    2bea:	37 09       	sbc	r19, r7
    2bec:	48 09       	sbc	r20, r8
    2bee:	59 09       	sbc	r21, r9
    2bf0:	2f 83       	std	Y+7, r18	; 0x07
    2bf2:	38 87       	std	Y+8, r19	; 0x08
    2bf4:	49 87       	std	Y+9, r20	; 0x09
    2bf6:	5a 87       	std	Y+10, r21	; 0x0a
    2bf8:	20 c0       	rjmp	.+64     	; 0x2c3a <fat_resize_file+0xba>
    uint16_t cluster_size = fd->fs->header.cluster_size;
    uint32_t size_new = size;

    do
    {
        if(cluster_num == 0 && size_new == 0)
    2bfa:	41 15       	cp	r20, r1
    2bfc:	51 05       	cpc	r21, r1
    2bfe:	61 05       	cpc	r22, r1
    2c00:	71 05       	cpc	r23, r1
    2c02:	09 f4       	brne	.+2      	; 0x2c06 <fat_resize_file+0x86>
    2c04:	a9 c0       	rjmp	.+338    	; 0x2d58 <fat_resize_file+0x1d8>
    2c06:	e6 cf       	rjmp	.-52     	; 0x2bd4 <fat_resize_file+0x54>

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
        {
            /* get next cluster of file */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    2c08:	d2 01       	movw	r26, r4
    2c0a:	8d 91       	ld	r24, X+
    2c0c:	9c 91       	ld	r25, X
    2c0e:	b8 01       	movw	r22, r16
    2c10:	0e 94 dd 02 	call	0x5ba	; 0x5ba <fat_get_next_cluster>
            if(cluster_num_next)
    2c14:	00 97       	sbiw	r24, 0x00	; 0
    2c16:	d9 f0       	breq	.+54     	; 0x2c4e <fat_resize_file+0xce>
                cluster_num = cluster_num_next;
                size_new -= cluster_size;
            }
            else
            {
                break;
    2c18:	eb 80       	ldd	r14, Y+3	; 0x03
    2c1a:	fc 80       	ldd	r15, Y+4	; 0x04
    2c1c:	0d 81       	ldd	r16, Y+5	; 0x05
    2c1e:	1e 81       	ldd	r17, Y+6	; 0x06
    2c20:	2f 81       	ldd	r18, Y+7	; 0x07
    2c22:	38 85       	ldd	r19, Y+8	; 0x08
    2c24:	49 85       	ldd	r20, Y+9	; 0x09
    2c26:	5a 85       	ldd	r21, Y+10	; 0x0a
    2c28:	e2 0e       	add	r14, r18
    2c2a:	f3 1e       	adc	r15, r19
    2c2c:	04 1f       	adc	r16, r20
    2c2e:	15 1f       	adc	r17, r21
    2c30:	eb 82       	std	Y+3, r14	; 0x03
    2c32:	fc 82       	std	Y+4, r15	; 0x04
    2c34:	0d 83       	std	Y+5, r16	; 0x05
    2c36:	1e 83       	std	Y+6, r17	; 0x06
    2c38:	8c 01       	movw	r16, r24
        if(cluster_num == 0 && size_new == 0)
            /* the file stays empty */
            break;

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
    2c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c3e:	ad 81       	ldd	r26, Y+5	; 0x05
    2c40:	be 81       	ldd	r27, Y+6	; 0x06
    2c42:	68 16       	cp	r6, r24
    2c44:	79 06       	cpc	r7, r25
    2c46:	8a 06       	cpc	r8, r26
    2c48:	9b 06       	cpc	r9, r27
    2c4a:	f0 f2       	brcs	.-68     	; 0x2c08 <fat_resize_file+0x88>
    2c4c:	b4 c0       	rjmp	.+360    	; 0x2db6 <fat_resize_file+0x236>
    2c4e:	78 01       	movw	r14, r16
        {
            /* Allocate new cluster chain and append
             * it to the existing one, if available.
             */
            cluster_t cluster_count = (size_new + cluster_size - 1) / cluster_size;
            cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
    2c50:	6b 81       	ldd	r22, Y+3	; 0x03
    2c52:	7c 81       	ldd	r23, Y+4	; 0x04
    2c54:	8d 81       	ldd	r24, Y+5	; 0x05
    2c56:	9e 81       	ldd	r25, Y+6	; 0x06
    2c58:	66 0d       	add	r22, r6
    2c5a:	77 1d       	adc	r23, r7
    2c5c:	88 1d       	adc	r24, r8
    2c5e:	99 1d       	adc	r25, r9
    2c60:	61 50       	subi	r22, 0x01	; 1
    2c62:	70 40       	sbci	r23, 0x00	; 0
    2c64:	80 40       	sbci	r24, 0x00	; 0
    2c66:	90 40       	sbci	r25, 0x00	; 0
    2c68:	a4 01       	movw	r20, r8
    2c6a:	93 01       	movw	r18, r6
    2c6c:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <__udivmodsi4>
    2c70:	d2 01       	movw	r26, r4
    2c72:	8d 91       	ld	r24, X+
    2c74:	9c 91       	ld	r25, X
    2c76:	b8 01       	movw	r22, r16
    2c78:	a9 01       	movw	r20, r18
    2c7a:	0e 94 93 03 	call	0x726	; 0x726 <fat_append_clusters>
            if(!cluster_new_chain)
    2c7e:	00 97       	sbiw	r24, 0x00	; 0
    2c80:	09 f4       	brne	.+2      	; 0x2c84 <fat_resize_file+0x104>
    2c82:	81 c0       	rjmp	.+258    	; 0x2d86 <fat_resize_file+0x206>
                return 0;

            if(!cluster_num)
    2c84:	01 2b       	or	r16, r17
    2c86:	21 f4       	brne	.+8      	; 0x2c90 <fat_resize_file+0x110>
            {
                cluster_num = cluster_new_chain;
                fd->dir_entry.cluster = cluster_num;
    2c88:	f2 01       	movw	r30, r4
    2c8a:	94 a3       	std	Z+36, r25	; 0x24
    2c8c:	83 a3       	std	Z+35, r24	; 0x23
    2c8e:	7c 01       	movw	r14, r24
            }
        }

        /* write new directory entry */
        fd->dir_entry.file_size = size;
    2c90:	d2 01       	movw	r26, r4
    2c92:	95 96       	adiw	r26, 0x25	; 37
    2c94:	ad 92       	st	X+, r10
    2c96:	bd 92       	st	X+, r11
    2c98:	cd 92       	st	X+, r12
    2c9a:	dc 92       	st	X, r13
    2c9c:	98 97       	sbiw	r26, 0x28	; 40
        if(size == 0)
    2c9e:	a1 14       	cp	r10, r1
    2ca0:	b1 04       	cpc	r11, r1
    2ca2:	c1 04       	cpc	r12, r1
    2ca4:	d1 04       	cpc	r13, r1
    2ca6:	21 f4       	brne	.+8      	; 0x2cb0 <fat_resize_file+0x130>
            fd->dir_entry.cluster = 0;
    2ca8:	94 96       	adiw	r26, 0x24	; 36
    2caa:	1c 92       	st	X, r1
    2cac:	1e 92       	st	-X, r1
    2cae:	93 97       	sbiw	r26, 0x23	; 35
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    2cb0:	f2 01       	movw	r30, r4
    2cb2:	81 91       	ld	r24, Z+
    2cb4:	91 91       	ld	r25, Z+
    2cb6:	bf 01       	movw	r22, r30
    2cb8:	0e 94 13 13 	call	0x2626	; 0x2626 <fat_write_dir_entry>
    2cbc:	88 23       	and	r24, r24
    2cbe:	09 f4       	brne	.+2      	; 0x2cc2 <fat_resize_file+0x142>
    2cc0:	62 c0       	rjmp	.+196    	; 0x2d86 <fat_resize_file+0x206>
            return 0;

        if(size == 0)
    2cc2:	a1 14       	cp	r10, r1
    2cc4:	b1 04       	cpc	r11, r1
    2cc6:	c1 04       	cpc	r12, r1
    2cc8:	d1 04       	cpc	r13, r1
    2cca:	29 f4       	brne	.+10     	; 0x2cd6 <fat_resize_file+0x156>
        {
            /* free all clusters of file */
            fat_free_clusters(fd->fs, cluster_num);
    2ccc:	f2 01       	movw	r30, r4
    2cce:	80 81       	ld	r24, Z
    2cd0:	91 81       	ldd	r25, Z+1	; 0x01
    2cd2:	b7 01       	movw	r22, r14
    2cd4:	3f c0       	rjmp	.+126    	; 0x2d54 <fat_resize_file+0x1d4>
        }
        else if(size_new <= cluster_size)
    2cd6:	0b 81       	ldd	r16, Y+3	; 0x03
    2cd8:	1c 81       	ldd	r17, Y+4	; 0x04
    2cda:	2d 81       	ldd	r18, Y+5	; 0x05
    2cdc:	3e 81       	ldd	r19, Y+6	; 0x06
    2cde:	60 16       	cp	r6, r16
    2ce0:	71 06       	cpc	r7, r17
    2ce2:	82 06       	cpc	r8, r18
    2ce4:	93 06       	cpc	r9, r19
    2ce6:	c0 f1       	brcs	.+112    	; 0x2d58 <fat_resize_file+0x1d8>
        {
            /* free all clusters no longer needed */
            fat_terminate_clusters(fd->fs, cluster_num);
    2ce8:	d2 01       	movw	r26, r4
    2cea:	0d 91       	ld	r16, X+
    2cec:	1c 91       	ld	r17, X
 * \returns 0 on failure, 1 on success.
 * \see fat_free_clusters
 */
uint8_t fat_terminate_clusters(struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    2cee:	01 15       	cp	r16, r1
    2cf0:	11 05       	cpc	r17, r1
    2cf2:	91 f1       	breq	.+100    	; 0x2d58 <fat_resize_file+0x1d8>
    2cf4:	b2 e0       	ldi	r27, 0x02	; 2
    2cf6:	eb 16       	cp	r14, r27
    2cf8:	f1 04       	cpc	r15, r1
    2cfa:	70 f1       	brcs	.+92     	; 0x2d58 <fat_resize_file+0x1d8>
        return 0;

    /* fetch next cluster before overwriting the cluster entry */
    cluster_t cluster_num_next = fat_get_next_cluster(fs, cluster_num);
    2cfc:	c8 01       	movw	r24, r16
    2cfe:	b7 01       	movw	r22, r14
    2d00:	0e 94 dd 02 	call	0x5ba	; 0x5ba <fat_get_next_cluster>
    2d04:	4c 01       	movw	r8, r24
            return 0;
    }
    else
#endif
    {
        uint16_t fat_entry = HTOL16(FAT16_CLUSTER_LAST_MAX);
    2d06:	8f ef       	ldi	r24, 0xFF	; 255
    2d08:	9f ef       	ldi	r25, 0xFF	; 255
    2d0a:	9a 83       	std	Y+2, r25	; 0x02
    2d0c:	89 83       	std	Y+1, r24	; 0x01
        if(!fs->partition->device_write(fs->header.fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    2d0e:	d8 01       	movw	r26, r16
    2d10:	ed 91       	ld	r30, X+
    2d12:	fc 91       	ld	r31, X
    2d14:	11 97       	sbiw	r26, 0x01	; 1
    2d16:	ee 0c       	add	r14, r14
    2d18:	ff 1c       	adc	r15, r15
    2d1a:	b7 01       	movw	r22, r14
    2d1c:	80 e0       	ldi	r24, 0x00	; 0
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	16 96       	adiw	r26, 0x06	; 6
    2d22:	2d 91       	ld	r18, X+
    2d24:	3d 91       	ld	r19, X+
    2d26:	4d 91       	ld	r20, X+
    2d28:	5c 91       	ld	r21, X
    2d2a:	19 97       	sbiw	r26, 0x09	; 9
    2d2c:	62 0f       	add	r22, r18
    2d2e:	73 1f       	adc	r23, r19
    2d30:	84 1f       	adc	r24, r20
    2d32:	95 1f       	adc	r25, r21
    2d34:	04 80       	ldd	r0, Z+4	; 0x04
    2d36:	f5 81       	ldd	r31, Z+5	; 0x05
    2d38:	e0 2d       	mov	r30, r0
    2d3a:	ae 01       	movw	r20, r28
    2d3c:	4f 5f       	subi	r20, 0xFF	; 255
    2d3e:	5f 4f       	sbci	r21, 0xFF	; 255
    2d40:	22 e0       	ldi	r18, 0x02	; 2
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	09 95       	icall
    2d46:	88 23       	and	r24, r24
    2d48:	39 f0       	breq	.+14     	; 0x2d58 <fat_resize_file+0x1d8>
            return 0;
    }

    /* free remaining clusters */
    if(cluster_num_next)
    2d4a:	81 14       	cp	r8, r1
    2d4c:	91 04       	cpc	r9, r1
    2d4e:	21 f0       	breq	.+8      	; 0x2d58 <fat_resize_file+0x1d8>
        return fat_free_clusters(fs, cluster_num_next);
    2d50:	c8 01       	movw	r24, r16
    2d52:	b4 01       	movw	r22, r8
    2d54:	0e 94 1d 03 	call	0x63a	; 0x63a <fat_free_clusters>
        }

    } while(0);

    /* correct file position */
    if(size < fd->pos)
    2d58:	f2 01       	movw	r30, r4
    2d5a:	85 a5       	ldd	r24, Z+45	; 0x2d
    2d5c:	96 a5       	ldd	r25, Z+46	; 0x2e
    2d5e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    2d60:	b0 a9       	ldd	r27, Z+48	; 0x30
    2d62:	a8 16       	cp	r10, r24
    2d64:	b9 06       	cpc	r11, r25
    2d66:	ca 06       	cpc	r12, r26
    2d68:	db 06       	cpc	r13, r27
    2d6a:	58 f4       	brcc	.+22     	; 0x2d82 <fat_resize_file+0x202>
    {
        fd->pos = size;
    2d6c:	d2 01       	movw	r26, r4
    2d6e:	9d 96       	adiw	r26, 0x2d	; 45
    2d70:	ad 92       	st	X+, r10
    2d72:	bd 92       	st	X+, r11
    2d74:	cd 92       	st	X+, r12
    2d76:	dc 92       	st	X, r13
    2d78:	d0 97       	sbiw	r26, 0x30	; 48
        fd->pos_cluster = 0;
    2d7a:	d2 96       	adiw	r26, 0x32	; 50
    2d7c:	1c 92       	st	X, r1
    2d7e:	1e 92       	st	-X, r1
    2d80:	d1 97       	sbiw	r26, 0x31	; 49
    2d82:	81 e0       	ldi	r24, 0x01	; 1
    2d84:	01 c0       	rjmp	.+2      	; 0x2d88 <fat_resize_file+0x208>
    2d86:	80 e0       	ldi	r24, 0x00	; 0
    }

    return 1;
}
    2d88:	2a 96       	adiw	r28, 0x0a	; 10
    2d8a:	0f b6       	in	r0, 0x3f	; 63
    2d8c:	f8 94       	cli
    2d8e:	de bf       	out	0x3e, r29	; 62
    2d90:	0f be       	out	0x3f, r0	; 63
    2d92:	cd bf       	out	0x3d, r28	; 61
    2d94:	cf 91       	pop	r28
    2d96:	df 91       	pop	r29
    2d98:	1f 91       	pop	r17
    2d9a:	0f 91       	pop	r16
    2d9c:	ff 90       	pop	r15
    2d9e:	ef 90       	pop	r14
    2da0:	df 90       	pop	r13
    2da2:	cf 90       	pop	r12
    2da4:	bf 90       	pop	r11
    2da6:	af 90       	pop	r10
    2da8:	9f 90       	pop	r9
    2daa:	8f 90       	pop	r8
    2dac:	7f 90       	pop	r7
    2dae:	6f 90       	pop	r6
    2db0:	5f 90       	pop	r5
    2db2:	4f 90       	pop	r4
    2db4:	08 95       	ret

    /* correct file position */
    if(size < fd->pos)
    {
        fd->pos = size;
        fd->pos_cluster = 0;
    2db6:	78 01       	movw	r14, r16
            {
                break;
            }
        }

        if(size_new > cluster_size || cluster_num == 0)
    2db8:	01 15       	cp	r16, r1
    2dba:	11 05       	cpc	r17, r1
    2dbc:	09 f4       	brne	.+2      	; 0x2dc0 <fat_resize_file+0x240>
    2dbe:	48 cf       	rjmp	.-368    	; 0x2c50 <fat_resize_file+0xd0>
    2dc0:	67 cf       	rjmp	.-306    	; 0x2c90 <fat_resize_file+0x110>

00002dc2 <fat_seek_file>:
 *                   to this location before it returns.
 * \param[in] whence Affects the way \c offset is interpreted, see above.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_seek_file(struct fat_file_struct* fd, int32_t* offset, uint8_t whence)
{
    2dc2:	cf 92       	push	r12
    2dc4:	df 92       	push	r13
    2dc6:	ef 92       	push	r14
    2dc8:	ff 92       	push	r15
    2dca:	0f 93       	push	r16
    2dcc:	1f 93       	push	r17
    2dce:	cf 93       	push	r28
    2dd0:	df 93       	push	r29
    2dd2:	ec 01       	movw	r28, r24
    2dd4:	6b 01       	movw	r12, r22
    if(!fd || !offset)
    2dd6:	00 97       	sbiw	r24, 0x00	; 0
    2dd8:	09 f4       	brne	.+2      	; 0x2ddc <fat_seek_file+0x1a>
    2dda:	45 c0       	rjmp	.+138    	; 0x2e66 <fat_seek_file+0xa4>
    2ddc:	61 15       	cp	r22, r1
    2dde:	71 05       	cpc	r23, r1
    2de0:	09 f4       	brne	.+2      	; 0x2de4 <fat_seek_file+0x22>
    2de2:	41 c0       	rjmp	.+130    	; 0x2e66 <fat_seek_file+0xa4>
        return 0;

    uint32_t new_pos = fd->pos;
    2de4:	8d a5       	ldd	r24, Y+45	; 0x2d
    2de6:	9e a5       	ldd	r25, Y+46	; 0x2e
    2de8:	af a5       	ldd	r26, Y+47	; 0x2f
    2dea:	b8 a9       	ldd	r27, Y+48	; 0x30
    switch(whence)
    2dec:	41 30       	cpi	r20, 0x01	; 1
    2dee:	59 f0       	breq	.+22     	; 0x2e06 <fat_seek_file+0x44>
    2df0:	41 30       	cpi	r20, 0x01	; 1
    2df2:	18 f0       	brcs	.+6      	; 0x2dfa <fat_seek_file+0x38>
    2df4:	42 30       	cpi	r20, 0x02	; 2
    2df6:	b9 f5       	brne	.+110    	; 0x2e66 <fat_seek_file+0xa4>
    2df8:	0c c0       	rjmp	.+24     	; 0x2e12 <fat_seek_file+0x50>
    {
        case FAT_SEEK_SET:
            new_pos = *offset;
    2dfa:	fb 01       	movw	r30, r22
    2dfc:	e0 80       	ld	r14, Z
    2dfe:	f1 80       	ldd	r15, Z+1	; 0x01
    2e00:	02 81       	ldd	r16, Z+2	; 0x02
    2e02:	13 81       	ldd	r17, Z+3	; 0x03
    2e04:	13 c0       	rjmp	.+38     	; 0x2e2c <fat_seek_file+0x6a>
            break;
        case FAT_SEEK_CUR:
            new_pos += *offset;
    2e06:	fb 01       	movw	r30, r22
    2e08:	e0 80       	ld	r14, Z
    2e0a:	f1 80       	ldd	r15, Z+1	; 0x01
    2e0c:	02 81       	ldd	r16, Z+2	; 0x02
    2e0e:	13 81       	ldd	r17, Z+3	; 0x03
    2e10:	09 c0       	rjmp	.+18     	; 0x2e24 <fat_seek_file+0x62>
            break;
        case FAT_SEEK_END:
            new_pos = fd->dir_entry.file_size + *offset;
    2e12:	fb 01       	movw	r30, r22
    2e14:	e0 80       	ld	r14, Z
    2e16:	f1 80       	ldd	r15, Z+1	; 0x01
    2e18:	02 81       	ldd	r16, Z+2	; 0x02
    2e1a:	13 81       	ldd	r17, Z+3	; 0x03
    2e1c:	8d a1       	ldd	r24, Y+37	; 0x25
    2e1e:	9e a1       	ldd	r25, Y+38	; 0x26
    2e20:	af a1       	ldd	r26, Y+39	; 0x27
    2e22:	b8 a5       	ldd	r27, Y+40	; 0x28
    2e24:	e8 0e       	add	r14, r24
    2e26:	f9 1e       	adc	r15, r25
    2e28:	0a 1f       	adc	r16, r26
    2e2a:	1b 1f       	adc	r17, r27
            break;
        default:
            return 0;
    }

    if(new_pos > fd->dir_entry.file_size
    2e2c:	8d a1       	ldd	r24, Y+37	; 0x25
    2e2e:	9e a1       	ldd	r25, Y+38	; 0x26
    2e30:	af a1       	ldd	r26, Y+39	; 0x27
    2e32:	b8 a5       	ldd	r27, Y+40	; 0x28
    2e34:	8e 15       	cp	r24, r14
    2e36:	9f 05       	cpc	r25, r15
    2e38:	a0 07       	cpc	r26, r16
    2e3a:	b1 07       	cpc	r27, r17
    2e3c:	38 f4       	brcc	.+14     	; 0x2e4c <fat_seek_file+0x8a>
    2e3e:	ce 01       	movw	r24, r28
    2e40:	b8 01       	movw	r22, r16
    2e42:	a7 01       	movw	r20, r14
    2e44:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <fat_resize_file>
    2e48:	88 23       	and	r24, r24
    2e4a:	69 f0       	breq	.+26     	; 0x2e66 <fat_seek_file+0xa4>
       && !fat_resize_file(fd, new_pos)
#endif
       )
        return 0;

    fd->pos = new_pos;
    2e4c:	ed a6       	std	Y+45, r14	; 0x2d
    2e4e:	fe a6       	std	Y+46, r15	; 0x2e
    2e50:	0f a7       	std	Y+47, r16	; 0x2f
    2e52:	18 ab       	std	Y+48, r17	; 0x30
    fd->pos_cluster = 0;
    2e54:	1a aa       	std	Y+50, r1	; 0x32
    2e56:	19 aa       	std	Y+49, r1	; 0x31

    *offset = (int32_t) new_pos;
    2e58:	f6 01       	movw	r30, r12
    2e5a:	e0 82       	st	Z, r14
    2e5c:	f1 82       	std	Z+1, r15	; 0x01
    2e5e:	02 83       	std	Z+2, r16	; 0x02
    2e60:	13 83       	std	Z+3, r17	; 0x03
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	01 c0       	rjmp	.+2      	; 0x2e68 <fat_seek_file+0xa6>
    return 1;
    2e66:	80 e0       	ldi	r24, 0x00	; 0
}
    2e68:	df 91       	pop	r29
    2e6a:	cf 91       	pop	r28
    2e6c:	1f 91       	pop	r17
    2e6e:	0f 91       	pop	r16
    2e70:	ff 90       	pop	r15
    2e72:	ef 90       	pop	r14
    2e74:	df 90       	pop	r13
    2e76:	cf 90       	pop	r12
    2e78:	08 95       	ret

00002e7a <fat_write_file>:
 * \param[in] buffer_len The amount of data to write.
 * \returns The number of bytes written, 0 on disk full, or -1 on failure.
 * \see fat_read_file
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
    2e7a:	2f 92       	push	r2
    2e7c:	3f 92       	push	r3
    2e7e:	4f 92       	push	r4
    2e80:	5f 92       	push	r5
    2e82:	6f 92       	push	r6
    2e84:	7f 92       	push	r7
    2e86:	8f 92       	push	r8
    2e88:	9f 92       	push	r9
    2e8a:	af 92       	push	r10
    2e8c:	bf 92       	push	r11
    2e8e:	cf 92       	push	r12
    2e90:	df 92       	push	r13
    2e92:	ef 92       	push	r14
    2e94:	ff 92       	push	r15
    2e96:	0f 93       	push	r16
    2e98:	1f 93       	push	r17
    2e9a:	df 93       	push	r29
    2e9c:	cf 93       	push	r28
    2e9e:	00 d0       	rcall	.+0      	; 0x2ea0 <fat_write_file+0x26>
    2ea0:	00 d0       	rcall	.+0      	; 0x2ea2 <fat_write_file+0x28>
    2ea2:	00 d0       	rcall	.+0      	; 0x2ea4 <fat_write_file+0x2a>
    2ea4:	cd b7       	in	r28, 0x3d	; 61
    2ea6:	de b7       	in	r29, 0x3e	; 62
    2ea8:	9e 83       	std	Y+6, r25	; 0x06
    2eaa:	8d 83       	std	Y+5, r24	; 0x05
    2eac:	7a 83       	std	Y+2, r23	; 0x02
    2eae:	69 83       	std	Y+1, r22	; 0x01
    2eb0:	5c 83       	std	Y+4, r21	; 0x04
    2eb2:	4b 83       	std	Y+3, r20	; 0x03
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
    2eb4:	00 97       	sbiw	r24, 0x00	; 0
    2eb6:	09 f4       	brne	.+2      	; 0x2eba <fat_write_file+0x40>
    2eb8:	41 c1       	rjmp	.+642    	; 0x313c <fat_write_file+0x2c2>
    2eba:	67 2b       	or	r22, r23
    2ebc:	09 f4       	brne	.+2      	; 0x2ec0 <fat_write_file+0x46>
    2ebe:	3e c1       	rjmp	.+636    	; 0x313c <fat_write_file+0x2c2>
    2ec0:	45 2b       	or	r20, r21
    2ec2:	09 f4       	brne	.+2      	; 0x2ec6 <fat_write_file+0x4c>
    2ec4:	3b c1       	rjmp	.+630    	; 0x313c <fat_write_file+0x2c2>
        return -1;
    if(fd->pos > fd->dir_entry.file_size)
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	9d 96       	adiw	r26, 0x2d	; 45
    2eca:	8d 90       	ld	r8, X+
    2ecc:	9d 90       	ld	r9, X+
    2ece:	ad 90       	ld	r10, X+
    2ed0:	bc 90       	ld	r11, X
    2ed2:	d0 97       	sbiw	r26, 0x30	; 48
    2ed4:	fc 01       	movw	r30, r24
    2ed6:	85 a1       	ldd	r24, Z+37	; 0x25
    2ed8:	96 a1       	ldd	r25, Z+38	; 0x26
    2eda:	a7 a1       	ldd	r26, Z+39	; 0x27
    2edc:	b0 a5       	ldd	r27, Z+40	; 0x28
    2ede:	88 15       	cp	r24, r8
    2ee0:	99 05       	cpc	r25, r9
    2ee2:	aa 05       	cpc	r26, r10
    2ee4:	bb 05       	cpc	r27, r11
    2ee6:	08 f4       	brcc	.+2      	; 0x2eea <fat_write_file+0x70>
    2ee8:	29 c1       	rjmp	.+594    	; 0x313c <fat_write_file+0x2c2>
        return -1;

    uint16_t cluster_size = fd->fs->header.cluster_size;
    2eea:	01 90       	ld	r0, Z+
    2eec:	f0 81       	ld	r31, Z
    2eee:	e0 2d       	mov	r30, r0
    2ef0:	20 88       	ldd	r2, Z+16	; 0x10
    2ef2:	31 88       	ldd	r3, Z+17	; 0x11
    cluster_t cluster_num = fd->pos_cluster;
    2ef4:	ad 81       	ldd	r26, Y+5	; 0x05
    2ef6:	be 81       	ldd	r27, Y+6	; 0x06
    2ef8:	d1 96       	adiw	r26, 0x31	; 49
    2efa:	0d 91       	ld	r16, X+
    2efc:	1c 91       	ld	r17, X
    2efe:	d2 97       	sbiw	r26, 0x32	; 50
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));

    /* find cluster in which to start writing */
    if(!cluster_num)
    2f00:	01 15       	cp	r16, r1
    2f02:	11 05       	cpc	r17, r1
    2f04:	09 f0       	breq	.+2      	; 0x2f08 <fat_write_file+0x8e>
    2f06:	55 c0       	rjmp	.+170    	; 0x2fb2 <fat_write_file+0x138>
    {
        cluster_num = fd->dir_entry.cluster;
    2f08:	93 96       	adiw	r26, 0x23	; 35
    2f0a:	0d 91       	ld	r16, X+
    2f0c:	1c 91       	ld	r17, X
    2f0e:	94 97       	sbiw	r26, 0x24	; 36
        
        if(!cluster_num)
    2f10:	01 15       	cp	r16, r1
    2f12:	11 05       	cpc	r17, r1
    2f14:	a9 f4       	brne	.+42     	; 0x2f40 <fat_write_file+0xc6>
        {
            if(!fd->pos)
    2f16:	81 14       	cp	r8, r1
    2f18:	91 04       	cpc	r9, r1
    2f1a:	a1 04       	cpc	r10, r1
    2f1c:	b1 04       	cpc	r11, r1
    2f1e:	09 f0       	breq	.+2      	; 0x2f22 <fat_write_file+0xa8>
    2f20:	0d c1       	rjmp	.+538    	; 0x313c <fat_write_file+0x2c2>
            {
                /* empty file */
                fd->dir_entry.cluster = cluster_num = fat_append_clusters(fd->fs, 0, 1);
    2f22:	cf 01       	movw	r24, r30
    2f24:	60 e0       	ldi	r22, 0x00	; 0
    2f26:	70 e0       	ldi	r23, 0x00	; 0
    2f28:	41 e0       	ldi	r20, 0x01	; 1
    2f2a:	50 e0       	ldi	r21, 0x00	; 0
    2f2c:	0e 94 93 03 	call	0x726	; 0x726 <fat_append_clusters>
    2f30:	8c 01       	movw	r16, r24
    2f32:	ed 81       	ldd	r30, Y+5	; 0x05
    2f34:	fe 81       	ldd	r31, Y+6	; 0x06
    2f36:	94 a3       	std	Z+36, r25	; 0x24
    2f38:	83 a3       	std	Z+35, r24	; 0x23
                if(!cluster_num)
    2f3a:	00 97       	sbiw	r24, 0x00	; 0
    2f3c:	09 f4       	brne	.+2      	; 0x2f40 <fat_write_file+0xc6>
    2f3e:	fe c0       	rjmp	.+508    	; 0x313c <fat_write_file+0x2c2>
            {
                return -1;
            }
        }

        if(fd->pos)
    2f40:	ad 81       	ldd	r26, Y+5	; 0x05
    2f42:	be 81       	ldd	r27, Y+6	; 0x06
    2f44:	9d 96       	adiw	r26, 0x2d	; 45
    2f46:	cd 90       	ld	r12, X+
    2f48:	dd 90       	ld	r13, X+
    2f4a:	ed 90       	ld	r14, X+
    2f4c:	fc 90       	ld	r15, X
    2f4e:	d0 97       	sbiw	r26, 0x30	; 48
    2f50:	c1 14       	cp	r12, r1
    2f52:	d1 04       	cpc	r13, r1
    2f54:	e1 04       	cpc	r14, r1
    2f56:	f1 04       	cpc	r15, r1
    2f58:	21 f5       	brne	.+72     	; 0x2fa2 <fat_write_file+0x128>
    2f5a:	2b c0       	rjmp	.+86     	; 0x2fb2 <fat_write_file+0x138>
        {
            uint32_t pos = fd->pos;
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
    2f5c:	c4 18       	sub	r12, r4
    2f5e:	d5 08       	sbc	r13, r5
    2f60:	e6 08       	sbc	r14, r6
    2f62:	f7 08       	sbc	r15, r7
                cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    2f64:	ed 81       	ldd	r30, Y+5	; 0x05
    2f66:	fe 81       	ldd	r31, Y+6	; 0x06
    2f68:	80 81       	ld	r24, Z
    2f6a:	91 81       	ldd	r25, Z+1	; 0x01
    2f6c:	b8 01       	movw	r22, r16
    2f6e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <fat_get_next_cluster>
                if(!cluster_num_next && pos == 0)
    2f72:	00 97       	sbiw	r24, 0x00	; 0
    2f74:	11 f0       	breq	.+4      	; 0x2f7a <fat_write_file+0x100>
    2f76:	8c 01       	movw	r16, r24
    2f78:	17 c0       	rjmp	.+46     	; 0x2fa8 <fat_write_file+0x12e>
    2f7a:	c1 14       	cp	r12, r1
    2f7c:	d1 04       	cpc	r13, r1
    2f7e:	e1 04       	cpc	r14, r1
    2f80:	f1 04       	cpc	r15, r1
    2f82:	09 f0       	breq	.+2      	; 0x2f86 <fat_write_file+0x10c>
    2f84:	db c0       	rjmp	.+438    	; 0x313c <fat_write_file+0x2c2>
                    /* the file exactly ends on a cluster boundary, and we append to it */
                    cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    2f86:	ad 81       	ldd	r26, Y+5	; 0x05
    2f88:	be 81       	ldd	r27, Y+6	; 0x06
    2f8a:	8d 91       	ld	r24, X+
    2f8c:	9c 91       	ld	r25, X
    2f8e:	b8 01       	movw	r22, r16
    2f90:	41 e0       	ldi	r20, 0x01	; 1
    2f92:	50 e0       	ldi	r21, 0x00	; 0
    2f94:	0e 94 93 03 	call	0x726	; 0x726 <fat_append_clusters>
                if(!cluster_num_next)
    2f98:	00 97       	sbiw	r24, 0x00	; 0
    2f9a:	09 f4       	brne	.+2      	; 0x2f9e <fat_write_file+0x124>
    2f9c:	cf c0       	rjmp	.+414    	; 0x313c <fat_write_file+0x2c2>
    2f9e:	8c 01       	movw	r16, r24
    2fa0:	03 c0       	rjmp	.+6      	; 0x2fa8 <fat_write_file+0x12e>

        if(fd->pos)
        {
            uint32_t pos = fd->pos;
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
    2fa2:	21 01       	movw	r4, r2
    2fa4:	66 24       	eor	r6, r6
    2fa6:	77 24       	eor	r7, r7
    2fa8:	c4 14       	cp	r12, r4
    2faa:	d5 04       	cpc	r13, r5
    2fac:	e6 04       	cpc	r14, r6
    2fae:	f7 04       	cpc	r15, r7
    2fb0:	a8 f6       	brcc	.-86     	; 0x2f5c <fat_write_file+0xe2>
        return -1;

    uint16_t cluster_size = fd->fs->header.cluster_size;
    cluster_t cluster_num = fd->pos_cluster;
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
    2fb2:	08 94       	sec
    2fb4:	21 08       	sbc	r2, r1
    2fb6:	31 08       	sbc	r3, r1
    2fb8:	82 20       	and	r8, r2
    2fba:	93 20       	and	r9, r3
    2fbc:	08 94       	sec
    2fbe:	21 1c       	adc	r2, r1
    2fc0:	31 1c       	adc	r3, r1
    2fc2:	ab 80       	ldd	r10, Y+3	; 0x03
    2fc4:	bc 80       	ldd	r11, Y+4	; 0x04
    
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    2fc6:	ed 81       	ldd	r30, Y+5	; 0x05
    2fc8:	fe 81       	ldd	r31, Y+6	; 0x06
    2fca:	c0 80       	ld	r12, Z
    2fcc:	d1 80       	ldd	r13, Z+1	; 0x01
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    2fce:	c1 14       	cp	r12, r1
    2fd0:	d1 04       	cpc	r13, r1
    2fd2:	f9 f0       	breq	.+62     	; 0x3012 <fat_write_file+0x198>
    2fd4:	02 30       	cpi	r16, 0x02	; 2
    2fd6:	11 05       	cpc	r17, r1
    2fd8:	e0 f0       	brcs	.+56     	; 0x3012 <fat_write_file+0x198>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    2fda:	02 50       	subi	r16, 0x02	; 2
    2fdc:	10 40       	sbci	r17, 0x00	; 0
    2fde:	b8 01       	movw	r22, r16
    2fe0:	80 e0       	ldi	r24, 0x00	; 0
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	0e 5f       	subi	r16, 0xFE	; 254
    2fe6:	1f 4f       	sbci	r17, 0xFF	; 255
    2fe8:	d6 01       	movw	r26, r12
    2fea:	50 96       	adiw	r26, 0x10	; 16
    2fec:	2d 91       	ld	r18, X+
    2fee:	3c 91       	ld	r19, X
    2ff0:	51 97       	sbiw	r26, 0x11	; 17
    2ff2:	40 e0       	ldi	r20, 0x00	; 0
    2ff4:	50 e0       	ldi	r21, 0x00	; 0
    2ff6:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <__mulsi3>
    2ffa:	9b 01       	movw	r18, r22
    2ffc:	ac 01       	movw	r20, r24
    2ffe:	f6 01       	movw	r30, r12
    3000:	82 89       	ldd	r24, Z+18	; 0x12
    3002:	93 89       	ldd	r25, Z+19	; 0x13
    3004:	a4 89       	ldd	r26, Z+20	; 0x14
    3006:	b5 89       	ldd	r27, Z+21	; 0x15
    3008:	28 0f       	add	r18, r24
    300a:	39 1f       	adc	r19, r25
    300c:	4a 1f       	adc	r20, r26
    300e:	5b 1f       	adc	r21, r27
    3010:	04 c0       	rjmp	.+8      	; 0x301a <fat_write_file+0x1a0>
    3012:	20 e0       	ldi	r18, 0x00	; 0
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	40 e0       	ldi	r20, 0x00	; 0
    3018:	50 e0       	ldi	r21, 0x00	; 0
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
        uint16_t write_length = cluster_size - first_cluster_offset;
    301a:	71 01       	movw	r14, r2
    301c:	e8 18       	sub	r14, r8
    301e:	f9 08       	sbc	r15, r9
    3020:	ae 14       	cp	r10, r14
    3022:	bf 04       	cpc	r11, r15
    3024:	08 f4       	brcc	.+2      	; 0x3028 <fat_write_file+0x1ae>
    3026:	75 01       	movw	r14, r10
        if(write_length > buffer_left)
            write_length = buffer_left;

        /* write data which fits into the current cluster */
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
    3028:	d6 01       	movw	r26, r12
    302a:	ed 91       	ld	r30, X+
    302c:	fc 91       	ld	r31, X
    302e:	c4 01       	movw	r24, r8
    3030:	a0 e0       	ldi	r26, 0x00	; 0
    3032:	b0 e0       	ldi	r27, 0x00	; 0
    3034:	28 0f       	add	r18, r24
    3036:	39 1f       	adc	r19, r25
    3038:	4a 1f       	adc	r20, r26
    303a:	5b 1f       	adc	r21, r27
    303c:	04 80       	ldd	r0, Z+4	; 0x04
    303e:	f5 81       	ldd	r31, Z+5	; 0x05
    3040:	e0 2d       	mov	r30, r0
    3042:	ca 01       	movw	r24, r20
    3044:	b9 01       	movw	r22, r18
    3046:	49 81       	ldd	r20, Y+1	; 0x01
    3048:	5a 81       	ldd	r21, Y+2	; 0x02
    304a:	97 01       	movw	r18, r14
    304c:	09 95       	icall
    304e:	88 23       	and	r24, r24
    3050:	09 f4       	brne	.+2      	; 0x3054 <fat_write_file+0x1da>
    3052:	48 c0       	rjmp	.+144    	; 0x30e4 <fat_write_file+0x26a>
            break;

        /* calculate new file position */
        buffer += write_length;
        buffer_left -= write_length;
    3054:	ae 18       	sub	r10, r14
    3056:	bf 08       	sbc	r11, r15
        fd->pos += write_length;
    3058:	c7 01       	movw	r24, r14
    305a:	a0 e0       	ldi	r26, 0x00	; 0
    305c:	b0 e0       	ldi	r27, 0x00	; 0
    305e:	ed 81       	ldd	r30, Y+5	; 0x05
    3060:	fe 81       	ldd	r31, Y+6	; 0x06
    3062:	25 a5       	ldd	r18, Z+45	; 0x2d
    3064:	36 a5       	ldd	r19, Z+46	; 0x2e
    3066:	47 a5       	ldd	r20, Z+47	; 0x2f
    3068:	50 a9       	ldd	r21, Z+48	; 0x30
    306a:	28 0f       	add	r18, r24
    306c:	39 1f       	adc	r19, r25
    306e:	4a 1f       	adc	r20, r26
    3070:	5b 1f       	adc	r21, r27
    3072:	25 a7       	std	Z+45, r18	; 0x2d
    3074:	36 a7       	std	Z+46, r19	; 0x2e
    3076:	47 a7       	std	Z+47, r20	; 0x2f
    3078:	50 ab       	std	Z+48, r21	; 0x30

        if(first_cluster_offset + write_length >= cluster_size)
    307a:	c7 01       	movw	r24, r14
    307c:	88 0d       	add	r24, r8
    307e:	99 1d       	adc	r25, r9
    3080:	82 15       	cp	r24, r2
    3082:	93 05       	cpc	r25, r3
    3084:	08 f1       	brcs	.+66     	; 0x30c8 <fat_write_file+0x24e>
        {
            /* we are on a cluster boundary, so get the next cluster */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    3086:	80 81       	ld	r24, Z
    3088:	91 81       	ldd	r25, Z+1	; 0x01
    308a:	b8 01       	movw	r22, r16
    308c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <fat_get_next_cluster>
            if(!cluster_num_next && buffer_left > 0)
    3090:	00 97       	sbiw	r24, 0x00	; 0
    3092:	11 f0       	breq	.+4      	; 0x3098 <fat_write_file+0x21e>
    3094:	8c 01       	movw	r16, r24
    3096:	16 c0       	rjmp	.+44     	; 0x30c4 <fat_write_file+0x24a>
    3098:	a1 14       	cp	r10, r1
    309a:	b1 04       	cpc	r11, r1
    309c:	59 f0       	breq	.+22     	; 0x30b4 <fat_write_file+0x23a>
                /* we reached the last cluster, append a new one */
                cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    309e:	ed 81       	ldd	r30, Y+5	; 0x05
    30a0:	fe 81       	ldd	r31, Y+6	; 0x06
    30a2:	80 81       	ld	r24, Z
    30a4:	91 81       	ldd	r25, Z+1	; 0x01
    30a6:	b8 01       	movw	r22, r16
    30a8:	41 e0       	ldi	r20, 0x01	; 1
    30aa:	50 e0       	ldi	r21, 0x00	; 0
    30ac:	0e 94 93 03 	call	0x726	; 0x726 <fat_append_clusters>
            if(!cluster_num_next)
    30b0:	00 97       	sbiw	r24, 0x00	; 0
    30b2:	39 f4       	brne	.+14     	; 0x30c2 <fat_write_file+0x248>
            {
                fd->pos_cluster = 0;
    30b4:	ad 81       	ldd	r26, Y+5	; 0x05
    30b6:	be 81       	ldd	r27, Y+6	; 0x06
    30b8:	d2 96       	adiw	r26, 0x32	; 50
    30ba:	1c 92       	st	X, r1
    30bc:	1e 92       	st	-X, r1
    30be:	d1 97       	sbiw	r26, 0x31	; 49
    30c0:	11 c0       	rjmp	.+34     	; 0x30e4 <fat_write_file+0x26a>
                break;
    30c2:	8c 01       	movw	r16, r24
    30c4:	88 24       	eor	r8, r8
    30c6:	99 24       	eor	r9, r9

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
        }

        fd->pos_cluster = cluster_num;
    30c8:	ed 81       	ldd	r30, Y+5	; 0x05
    30ca:	fe 81       	ldd	r31, Y+6	; 0x06
    30cc:	12 ab       	std	Z+50, r17	; 0x32
    30ce:	01 ab       	std	Z+49, r16	; 0x31

    } while(buffer_left > 0); /* check if we are done */
    30d0:	a1 14       	cp	r10, r1
    30d2:	b1 04       	cpc	r11, r1
    30d4:	39 f0       	breq	.+14     	; 0x30e4 <fat_write_file+0x26a>
        /* write data which fits into the current cluster */
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
            break;

        /* calculate new file position */
        buffer += write_length;
    30d6:	89 81       	ldd	r24, Y+1	; 0x01
    30d8:	9a 81       	ldd	r25, Y+2	; 0x02
    30da:	8e 0d       	add	r24, r14
    30dc:	9f 1d       	adc	r25, r15
    30de:	9a 83       	std	Y+2, r25	; 0x02
    30e0:	89 83       	std	Y+1, r24	; 0x01
    30e2:	71 cf       	rjmp	.-286    	; 0x2fc6 <fat_write_file+0x14c>
        fd->pos_cluster = cluster_num;

    } while(buffer_left > 0); /* check if we are done */

    /* update directory entry */
    if(fd->pos > fd->dir_entry.file_size)
    30e4:	ed 81       	ldd	r30, Y+5	; 0x05
    30e6:	fe 81       	ldd	r31, Y+6	; 0x06
    30e8:	85 a5       	ldd	r24, Z+45	; 0x2d
    30ea:	96 a5       	ldd	r25, Z+46	; 0x2e
    30ec:	a7 a5       	ldd	r26, Z+47	; 0x2f
    30ee:	b0 a9       	ldd	r27, Z+48	; 0x30
    30f0:	e5 a0       	ldd	r14, Z+37	; 0x25
    30f2:	f6 a0       	ldd	r15, Z+38	; 0x26
    30f4:	07 a1       	ldd	r16, Z+39	; 0x27
    30f6:	10 a5       	ldd	r17, Z+40	; 0x28
    30f8:	e8 16       	cp	r14, r24
    30fa:	f9 06       	cpc	r15, r25
    30fc:	0a 07       	cpc	r16, r26
    30fe:	1b 07       	cpc	r17, r27
    3100:	c0 f4       	brcc	.+48     	; 0x3132 <fat_write_file+0x2b8>
#if !FAT_DELAY_DIRENTRY_UPDATE
        uint32_t size_old = fd->dir_entry.file_size;
#endif

        /* update file size */
        fd->dir_entry.file_size = fd->pos;
    3102:	85 a3       	std	Z+37, r24	; 0x25
    3104:	96 a3       	std	Z+38, r25	; 0x26
    3106:	a7 a3       	std	Z+39, r26	; 0x27
    3108:	b0 a7       	std	Z+40, r27	; 0x28

#if !FAT_DELAY_DIRENTRY_UPDATE
        /* write directory entry */
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    310a:	81 91       	ld	r24, Z+
    310c:	91 91       	ld	r25, Z+
    310e:	bf 01       	movw	r22, r30
    3110:	0e 94 13 13 	call	0x2626	; 0x2626 <fat_write_dir_entry>
    3114:	88 23       	and	r24, r24
    3116:	69 f4       	brne	.+26     	; 0x3132 <fat_write_file+0x2b8>
        {
            /* We do not return an error here since we actually wrote
             * some data to disk. So we calculate the amount of data
             * we wrote to disk and which lies within the old file size.
             */
            buffer_left = fd->pos - size_old;
    3118:	ad 81       	ldd	r26, Y+5	; 0x05
    311a:	be 81       	ldd	r27, Y+6	; 0x06
    311c:	9d 96       	adiw	r26, 0x2d	; 45
    311e:	ad 90       	ld	r10, X+
    3120:	bc 90       	ld	r11, X
    3122:	9e 97       	sbiw	r26, 0x2e	; 46
    3124:	ae 18       	sub	r10, r14
    3126:	bf 08       	sbc	r11, r15
            fd->pos = size_old;
    3128:	fd 01       	movw	r30, r26
    312a:	e5 a6       	std	Z+45, r14	; 0x2d
    312c:	f6 a6       	std	Z+46, r15	; 0x2e
    312e:	07 a7       	std	Z+47, r16	; 0x2f
    3130:	10 ab       	std	Z+48, r17	; 0x30
        }
#endif
    }

    return buffer_len - buffer_left;
    3132:	4b 81       	ldd	r20, Y+3	; 0x03
    3134:	5c 81       	ldd	r21, Y+4	; 0x04
    3136:	4a 19       	sub	r20, r10
    3138:	5b 09       	sbc	r21, r11
    313a:	02 c0       	rjmp	.+4      	; 0x3140 <fat_write_file+0x2c6>
    313c:	4f ef       	ldi	r20, 0xFF	; 255
    313e:	5f ef       	ldi	r21, 0xFF	; 255
}
    3140:	ca 01       	movw	r24, r20
    3142:	26 96       	adiw	r28, 0x06	; 6
    3144:	0f b6       	in	r0, 0x3f	; 63
    3146:	f8 94       	cli
    3148:	de bf       	out	0x3e, r29	; 62
    314a:	0f be       	out	0x3f, r0	; 63
    314c:	cd bf       	out	0x3d, r28	; 61
    314e:	cf 91       	pop	r28
    3150:	df 91       	pop	r29
    3152:	1f 91       	pop	r17
    3154:	0f 91       	pop	r16
    3156:	ff 90       	pop	r15
    3158:	ef 90       	pop	r14
    315a:	df 90       	pop	r13
    315c:	cf 90       	pop	r12
    315e:	bf 90       	pop	r11
    3160:	af 90       	pop	r10
    3162:	9f 90       	pop	r9
    3164:	8f 90       	pop	r8
    3166:	7f 90       	pop	r7
    3168:	6f 90       	pop	r6
    316a:	5f 90       	pop	r5
    316c:	4f 90       	pop	r4
    316e:	3f 90       	pop	r3
    3170:	2f 90       	pop	r2
    3172:	08 95       	ret

00003174 <write_data_block>:

    return 0;
}

int write_data_block(const char* fname, uint8_t *data, int length)
{
    3174:	cf 92       	push	r12
    3176:	df 92       	push	r13
    3178:	ef 92       	push	r14
    317a:	ff 92       	push	r15
    317c:	0f 93       	push	r16
    317e:	1f 93       	push	r17
    3180:	cf 93       	push	r28
    3182:	df 93       	push	r29
    3184:	8c 01       	movw	r16, r24
    3186:	6b 01       	movw	r12, r22
    3188:	7a 01       	movw	r14, r20
	//char buffer[8];
	//uint8_t buf_len;

	if(!fs || !dd )
    318a:	80 91 fe 04 	lds	r24, 0x04FE
    318e:	90 91 ff 04 	lds	r25, 0x04FF
    3192:	00 97       	sbiw	r24, 0x00	; 0
    3194:	39 f0       	breq	.+14     	; 0x31a4 <write_data_block+0x30>
    3196:	60 91 02 05 	lds	r22, 0x0502
    319a:	70 91 03 05 	lds	r23, 0x0503
    319e:	61 15       	cp	r22, r1
    31a0:	71 05       	cpc	r23, r1
    31a2:	59 f4       	brne	.+22     	; 0x31ba <write_data_block+0x46>
	{
		uart_puts_p(PSTR("SD Card not initialized properly\n"));
    31a4:	8e e8       	ldi	r24, 0x8E	; 142
    31a6:	91 e0       	ldi	r25, 0x01	; 1
    31a8:	0e 94 b3 02 	call	0x566	; 0x566 <uart_puts_p>
		uart_puts_p(PSTR("call init_sdcard() first\n"));
    31ac:	84 e7       	ldi	r24, 0x74	; 116
    31ae:	91 e0       	ldi	r25, 0x01	; 1
    31b0:	0e 94 b3 02 	call	0x566	; 0x566 <uart_puts_p>
    31b4:	2f ef       	ldi	r18, 0xFF	; 255
    31b6:	3f ef       	ldi	r19, 0xFF	; 255
    31b8:	52 c0       	rjmp	.+164    	; 0x325e <write_data_block+0xea>
		return -1;
	}

    /* search file in current directory and open it */
    struct fat_file_struct* fd = open_file_in_dir(fs, dd, fname );
    31ba:	a8 01       	movw	r20, r16
    31bc:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <open_file_in_dir>
    31c0:	ec 01       	movw	r28, r24
    if(!fd)
    31c2:	00 97       	sbiw	r24, 0x00	; 0
    31c4:	69 f4       	brne	.+26     	; 0x31e0 <write_data_block+0x6c>
    {
        uart_puts_p(PSTR("error opening "));
    31c6:	85 e6       	ldi	r24, 0x65	; 101
    31c8:	91 e0       	ldi	r25, 0x01	; 1
    31ca:	0e 94 b3 02 	call	0x566	; 0x566 <uart_puts_p>
        uart_puts(fname);
    31ce:	c8 01       	movw	r24, r16
    31d0:	0e 94 a6 02 	call	0x54c	; 0x54c <uart_puts>
        uart_putc('\n');
    31d4:	8a e0       	ldi	r24, 0x0A	; 10
    31d6:	0e 94 b7 01 	call	0x36e	; 0x36e <uart_putc>
    31da:	2e ef       	ldi	r18, 0xFE	; 254
    31dc:	3f ef       	ldi	r19, 0xFF	; 255
    31de:	3f c0       	rjmp	.+126    	; 0x325e <write_data_block+0xea>
        return -2;
    }

    /* set the file_offset */
    if(!fat_seek_file(fd, &file_offset, FAT_SEEK_SET))
    31e0:	66 e2       	ldi	r22, 0x26	; 38
    31e2:	72 e0       	ldi	r23, 0x02	; 2
    31e4:	40 e0       	ldi	r20, 0x00	; 0
    31e6:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <fat_seek_file>
    31ea:	88 23       	and	r24, r24
    31ec:	61 f4       	brne	.+24     	; 0x3206 <write_data_block+0x92>
    {
        uart_puts_p(PSTR("error seeking on "));
    31ee:	83 e5       	ldi	r24, 0x53	; 83
    31f0:	91 e0       	ldi	r25, 0x01	; 1
    31f2:	0e 94 b3 02 	call	0x566	; 0x566 <uart_puts_p>
        uart_putc('\n');
    31f6:	8a e0       	ldi	r24, 0x0A	; 10
    31f8:	0e 94 b7 01 	call	0x36e	; 0x36e <uart_putc>
#endif

#if USE_DYNAMIC_MEMORY
        free(fd);
#else
        fd->fs = 0;
    31fc:	19 82       	std	Y+1, r1	; 0x01
    31fe:	18 82       	st	Y, r1
    3200:	2d ef       	ldi	r18, 0xFD	; 253
    3202:	3f ef       	ldi	r19, 0xFF	; 255
    3204:	2c c0       	rjmp	.+88     	; 0x325e <write_data_block+0xea>
    }

    //buf_len = sprintf( buffer, "%03d ", data);
    /* write text to file */

    if(fat_write_file(fd, (uint8_t*)data, length) != length)
    3206:	ce 01       	movw	r24, r28
    3208:	b6 01       	movw	r22, r12
    320a:	a7 01       	movw	r20, r14
    320c:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <fat_write_file>
    3210:	8e 15       	cp	r24, r14
    3212:	9f 05       	cpc	r25, r15
    3214:	39 f0       	breq	.+14     	; 0x3224 <write_data_block+0xb0>
    {
        uart_puts_p(PSTR("error writing to file\n"));
    3216:	8c e3       	ldi	r24, 0x3C	; 60
    3218:	91 e0       	ldi	r25, 0x01	; 1
    321a:	0e 94 b3 02 	call	0x566	; 0x566 <uart_puts_p>
    321e:	2c ef       	ldi	r18, 0xFC	; 252
    3220:	3f ef       	ldi	r19, 0xFF	; 255
    3222:	1d c0       	rjmp	.+58     	; 0x325e <write_data_block+0xea>
        return -4;
    }

    file_offset += length;
    3224:	9c 01       	movw	r18, r24
    3226:	44 27       	eor	r20, r20
    3228:	37 fd       	sbrc	r19, 7
    322a:	40 95       	com	r20
    322c:	54 2f       	mov	r21, r20
    322e:	80 91 26 02 	lds	r24, 0x0226
    3232:	90 91 27 02 	lds	r25, 0x0227
    3236:	a0 91 28 02 	lds	r26, 0x0228
    323a:	b0 91 29 02 	lds	r27, 0x0229
    323e:	82 0f       	add	r24, r18
    3240:	93 1f       	adc	r25, r19
    3242:	a4 1f       	adc	r26, r20
    3244:	b5 1f       	adc	r27, r21
    3246:	80 93 26 02 	sts	0x0226, r24
    324a:	90 93 27 02 	sts	0x0227, r25
    324e:	a0 93 28 02 	sts	0x0228, r26
    3252:	b0 93 29 02 	sts	0x0229, r27
    3256:	19 82       	std	Y+1, r1	; 0x01
    3258:	18 82       	st	Y, r1
    325a:	20 e0       	ldi	r18, 0x00	; 0
    325c:	30 e0       	ldi	r19, 0x00	; 0

    fat_close_file(fd);

    return 0;
}
    325e:	c9 01       	movw	r24, r18
    3260:	df 91       	pop	r29
    3262:	cf 91       	pop	r28
    3264:	1f 91       	pop	r17
    3266:	0f 91       	pop	r16
    3268:	ff 90       	pop	r15
    326a:	ef 90       	pop	r14
    326c:	df 90       	pop	r13
    326e:	cf 90       	pop	r12
    3270:	08 95       	ret

00003272 <fat_get_dir_entry_of_path>:
 * \param[out] dir_entry The directory entry to fill.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
    3272:	6f 92       	push	r6
    3274:	7f 92       	push	r7
    3276:	8f 92       	push	r8
    3278:	9f 92       	push	r9
    327a:	af 92       	push	r10
    327c:	bf 92       	push	r11
    327e:	cf 92       	push	r12
    3280:	df 92       	push	r13
    3282:	ef 92       	push	r14
    3284:	ff 92       	push	r15
    3286:	0f 93       	push	r16
    3288:	1f 93       	push	r17
    328a:	cf 93       	push	r28
    328c:	df 93       	push	r29
    328e:	4c 01       	movw	r8, r24
    3290:	eb 01       	movw	r28, r22
    3292:	7a 01       	movw	r14, r20
    if(!fs || !path || path[0] == '\0' || !dir_entry)
    3294:	00 97       	sbiw	r24, 0x00	; 0
    3296:	09 f4       	brne	.+2      	; 0x329a <fat_get_dir_entry_of_path+0x28>
    3298:	67 c0       	rjmp	.+206    	; 0x3368 <fat_get_dir_entry_of_path+0xf6>
    329a:	61 15       	cp	r22, r1
    329c:	71 05       	cpc	r23, r1
    329e:	09 f4       	brne	.+2      	; 0x32a2 <fat_get_dir_entry_of_path+0x30>
    32a0:	63 c0       	rjmp	.+198    	; 0x3368 <fat_get_dir_entry_of_path+0xf6>
    32a2:	88 81       	ld	r24, Y
    32a4:	88 23       	and	r24, r24
    32a6:	09 f4       	brne	.+2      	; 0x32aa <fat_get_dir_entry_of_path+0x38>
    32a8:	5f c0       	rjmp	.+190    	; 0x3368 <fat_get_dir_entry_of_path+0xf6>
    32aa:	41 15       	cp	r20, r1
    32ac:	51 05       	cpc	r21, r1
    32ae:	09 f4       	brne	.+2      	; 0x32b2 <fat_get_dir_entry_of_path+0x40>
    32b0:	5b c0       	rjmp	.+182    	; 0x3368 <fat_get_dir_entry_of_path+0xf6>
        return 0;

    if(path[0] == '/')
    32b2:	8f 32       	cpi	r24, 0x2F	; 47
    32b4:	09 f4       	brne	.+2      	; 0x32b8 <fat_get_dir_entry_of_path+0x46>
        ++path;
    32b6:	21 96       	adiw	r28, 0x01	; 1

    /* begin with the root directory */
    memset(dir_entry, 0, sizeof(*dir_entry));
    32b8:	8b e2       	ldi	r24, 0x2B	; 43
    32ba:	f7 01       	movw	r30, r14
    32bc:	11 92       	st	Z+, r1
    32be:	8a 95       	dec	r24
    32c0:	e9 f7       	brne	.-6      	; 0x32bc <fat_get_dir_entry_of_path+0x4a>
    dir_entry->attributes = FAT_ATTRIB_DIR;
    32c2:	80 e1       	ldi	r24, 0x10	; 16
    32c4:	f7 01       	movw	r30, r14
    32c6:	80 a3       	std	Z+32, r24	; 0x20
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    32c8:	37 01       	movw	r6, r14
    32ca:	01 c0       	rjmp	.+2      	; 0x32ce <fat_get_dir_entry_of_path+0x5c>
    32cc:	e5 01       	movw	r28, r10
    memset(dir_entry, 0, sizeof(*dir_entry));
    dir_entry->attributes = FAT_ATTRIB_DIR;

    while(1)
    {
        if(path[0] == '\0')
    32ce:	88 81       	ld	r24, Y
    32d0:	88 23       	and	r24, r24
    32d2:	09 f4       	brne	.+2      	; 0x32d6 <fat_get_dir_entry_of_path+0x64>
    32d4:	4b c0       	rjmp	.+150    	; 0x336c <fat_get_dir_entry_of_path+0xfa>
            return 1;

        struct fat_dir_struct* dd = fat_open_dir(fs, dir_entry);
    32d6:	c4 01       	movw	r24, r8
    32d8:	b7 01       	movw	r22, r14
    32da:	0e 94 8b 10 	call	0x2116	; 0x2116 <fat_open_dir>
    32de:	6c 01       	movw	r12, r24
        if(!dd)
    32e0:	00 97       	sbiw	r24, 0x00	; 0
    32e2:	09 f4       	brne	.+2      	; 0x32e6 <fat_get_dir_entry_of_path+0x74>
    32e4:	41 c0       	rjmp	.+130    	; 0x3368 <fat_get_dir_entry_of_path+0xf6>
            break;

        /* extract the next hierarchy we will search for */
        const char* sub_path = strchr(path, '/');
    32e6:	ce 01       	movw	r24, r28
    32e8:	6f e2       	ldi	r22, 0x2F	; 47
    32ea:	70 e0       	ldi	r23, 0x00	; 0
    32ec:	0e 94 38 23 	call	0x4670	; 0x4670 <strchr>
        uint8_t length_to_sep;
        if(sub_path)
    32f0:	00 97       	sbiw	r24, 0x00	; 0
    32f2:	39 f0       	breq	.+14     	; 0x3302 <fat_get_dir_entry_of_path+0x90>
        {
            length_to_sep = sub_path - path;
    32f4:	48 2f       	mov	r20, r24
    32f6:	4c 1b       	sub	r20, r28
            ++sub_path;
    32f8:	5c 01       	movw	r10, r24
    32fa:	08 94       	sec
    32fc:	a1 1c       	adc	r10, r1
    32fe:	b1 1c       	adc	r11, r1
    3300:	2a c0       	rjmp	.+84     	; 0x3356 <fat_get_dir_entry_of_path+0xe4>
        }
        else
        {
            length_to_sep = strlen(path);
    3302:	fe 01       	movw	r30, r28
    3304:	01 90       	ld	r0, Z+
    3306:	00 20       	and	r0, r0
    3308:	e9 f7       	brne	.-6      	; 0x3304 <fat_get_dir_entry_of_path+0x92>
    330a:	31 97       	sbiw	r30, 0x01	; 1
    330c:	4e 2f       	mov	r20, r30
    330e:	4c 1b       	sub	r20, r28
            sub_path = path + length_to_sep;
    3310:	5e 01       	movw	r10, r28
    3312:	a4 0e       	add	r10, r20
    3314:	b1 1c       	adc	r11, r1
    3316:	1f c0       	rjmp	.+62     	; 0x3356 <fat_get_dir_entry_of_path+0xe4>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    3318:	f3 01       	movw	r30, r6
    331a:	01 90       	ld	r0, Z+
    331c:	00 20       	and	r0, r0
    331e:	e9 f7       	brne	.-6      	; 0x331a <fat_get_dir_entry_of_path+0xa8>
    3320:	31 97       	sbiw	r30, 0x01	; 1
    3322:	e6 19       	sub	r30, r6
    3324:	f7 09       	sbc	r31, r7
    3326:	e0 17       	cp	r30, r16
    3328:	f1 07       	cpc	r31, r17
    332a:	b9 f4       	brne	.+46     	; 0x335a <fat_get_dir_entry_of_path+0xe8>
    332c:	ce 01       	movw	r24, r28
    332e:	b3 01       	movw	r22, r6
    3330:	a8 01       	movw	r20, r16
    3332:	0e 94 4c 23 	call	0x4698	; 0x4698 <strncmp>
    3336:	00 97       	sbiw	r24, 0x00	; 0
    3338:	81 f4       	brne	.+32     	; 0x335a <fat_get_dir_entry_of_path+0xe8>
{
    if(dd)
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
    333a:	f6 01       	movw	r30, r12
    333c:	11 82       	std	Z+1, r1	; 0x01
    333e:	10 82       	st	Z, r1
                continue;

            fat_close_dir(dd);
            dd = 0;

            if(path[length_to_sep] == '\0')
    3340:	0c 0f       	add	r16, r28
    3342:	1d 1f       	adc	r17, r29
    3344:	f8 01       	movw	r30, r16
    3346:	80 81       	ld	r24, Z
    3348:	88 23       	and	r24, r24
    334a:	81 f0       	breq	.+32     	; 0x336c <fat_get_dir_entry_of_path+0xfa>
                /* we iterated through the whole path and have found the file */
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
    334c:	f7 01       	movw	r30, r14
    334e:	80 a1       	ldd	r24, Z+32	; 0x20
    3350:	84 fd       	sbrc	r24, 4
    3352:	bc cf       	rjmp	.-136    	; 0x32cc <fat_get_dir_entry_of_path+0x5a>
    3354:	09 c0       	rjmp	.+18     	; 0x3368 <fat_get_dir_entry_of_path+0xf6>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    3356:	04 2f       	mov	r16, r20
    3358:	10 e0       	ldi	r17, 0x00	; 0
            length_to_sep = strlen(path);
            sub_path = path + length_to_sep;
        }
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
    335a:	c6 01       	movw	r24, r12
    335c:	b7 01       	movw	r22, r14
    335e:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <fat_read_dir>
    3362:	88 23       	and	r24, r24
    3364:	c9 f6       	brne	.-78     	; 0x3318 <fat_get_dir_entry_of_path+0xa6>
    3366:	12 c0       	rjmp	.+36     	; 0x338c <fat_get_dir_entry_of_path+0x11a>
    3368:	80 e0       	ldi	r24, 0x00	; 0
    336a:	01 c0       	rjmp	.+2      	; 0x336e <fat_get_dir_entry_of_path+0xfc>
    336c:	81 e0       	ldi	r24, 0x01	; 1

        fat_close_dir(dd);
    }
    
    return 0;
}
    336e:	df 91       	pop	r29
    3370:	cf 91       	pop	r28
    3372:	1f 91       	pop	r17
    3374:	0f 91       	pop	r16
    3376:	ff 90       	pop	r15
    3378:	ef 90       	pop	r14
    337a:	df 90       	pop	r13
    337c:	cf 90       	pop	r12
    337e:	bf 90       	pop	r11
    3380:	af 90       	pop	r10
    3382:	9f 90       	pop	r9
    3384:	8f 90       	pop	r8
    3386:	7f 90       	pop	r7
    3388:	6f 90       	pop	r6
    338a:	08 95       	ret
{
    if(dd)
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
    338c:	f6 01       	movw	r30, r12
    338e:	11 82       	std	Z+1, r1	; 0x01
    3390:	10 82       	st	Z, r1
    3392:	9d cf       	rjmp	.-198    	; 0x32ce <fat_get_dir_entry_of_path+0x5c>

00003394 <init_sdcard>:
struct partition_struct* partition;
struct fat_fs_struct*    fs;
struct fat_dir_struct*   dd;

int init_sdcard()
{
    3394:	ef 92       	push	r14
    3396:	ff 92       	push	r15
    3398:	0f 93       	push	r16
    339a:	1f 93       	push	r17
    339c:	df 93       	push	r29
    339e:	cf 93       	push	r28
    33a0:	cd b7       	in	r28, 0x3d	; 61
    33a2:	de b7       	in	r29, 0x3e	; 62
    33a4:	c4 54       	subi	r28, 0x44	; 68
    33a6:	d0 40       	sbci	r29, 0x00	; 0
    33a8:	0f b6       	in	r0, 0x3f	; 63
    33aa:	f8 94       	cli
    33ac:	de bf       	out	0x3e, r29	; 62
    33ae:	0f be       	out	0x3f, r0	; 63
    33b0:	cd bf       	out	0x3d, r28	; 61
    /* we will just use ordinary idle mode */
    set_sleep_mode(SLEEP_MODE_IDLE);
    33b2:	83 b7       	in	r24, 0x33	; 51
    33b4:	81 7f       	andi	r24, 0xF1	; 241
    33b6:	83 bf       	out	0x33, r24	; 51
            continue;
        }

        /* open root directory */
        struct fat_dir_entry_struct directory;
        fat_get_dir_entry_of_path(fs, "/", &directory);
    33b8:	4a e1       	ldi	r20, 0x1A	; 26
    33ba:	e4 2e       	mov	r14, r20
    33bc:	f1 2c       	mov	r15, r1
    33be:	ec 0e       	add	r14, r28
    33c0:	fd 1e       	adc	r15, r29
    set_sleep_mode(SLEEP_MODE_IDLE);

    while(1)
    {
        /* setup sd card slot */
        if(!sd_raw_init())
    33c2:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <sd_raw_init>
    33c6:	88 23       	and	r24, r24
    33c8:	19 f4       	brne	.+6      	; 0x33d0 <init_sdcard+0x3c>
        {
#if DEBUG
            uart_puts_p(PSTR("MMC/SD initialization failed\n"));
    33ca:	8e e8       	ldi	r24, 0x8E	; 142
    33cc:	92 e0       	ldi	r25, 0x02	; 2
    33ce:	48 c0       	rjmp	.+144    	; 0x3460 <init_sdcard+0xcc>
#endif
            continue;
        }

        /* open first partition */
        partition = partition_open(sd_raw_read,
    33d0:	89 e6       	ldi	r24, 0x69	; 105
    33d2:	9e e0       	ldi	r25, 0x0E	; 14
    33d4:	67 e2       	ldi	r22, 0x27	; 39
    33d6:	7f e0       	ldi	r23, 0x0F	; 15
    33d8:	49 e7       	ldi	r20, 0x79	; 121
    33da:	5d e0       	ldi	r21, 0x0D	; 13
    33dc:	20 e3       	ldi	r18, 0x30	; 48
    33de:	30 e1       	ldi	r19, 0x10	; 16
    33e0:	00 e0       	ldi	r16, 0x00	; 0
    33e2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <partition_open>
    33e6:	90 93 01 05 	sts	0x0501, r25
    33ea:	80 93 00 05 	sts	0x0500, r24
                                                            0,
#endif
                                                            0
                                                           );

        if(!partition)
    33ee:	89 2b       	or	r24, r25
    33f0:	a1 f4       	brne	.+40     	; 0x341a <init_sdcard+0x86>
        {
            /* If the partition did not open, assume the storage device
             * is a "superfloppy", i.e. has no MBR.
             */
            partition = partition_open(sd_raw_read,
    33f2:	89 e6       	ldi	r24, 0x69	; 105
    33f4:	9e e0       	ldi	r25, 0x0E	; 14
    33f6:	67 e2       	ldi	r22, 0x27	; 39
    33f8:	7f e0       	ldi	r23, 0x0F	; 15
    33fa:	49 e7       	ldi	r20, 0x79	; 121
    33fc:	5d e0       	ldi	r21, 0x0D	; 13
    33fe:	20 e3       	ldi	r18, 0x30	; 48
    3400:	30 e1       	ldi	r19, 0x10	; 16
    3402:	0f ef       	ldi	r16, 0xFF	; 255
    3404:	0e 94 a5 07 	call	0xf4a	; 0xf4a <partition_open>
    3408:	90 93 01 05 	sts	0x0501, r25
    340c:	80 93 00 05 	sts	0x0500, r24
                                       0,
                                       0,
#endif
                                       -1
                                      );
            if(!partition)
    3410:	89 2b       	or	r24, r25
    3412:	19 f4       	brne	.+6      	; 0x341a <init_sdcard+0x86>
            {
#if DEBUG
                uart_puts_p(PSTR("opening partition failed\n"));
    3414:	84 e7       	ldi	r24, 0x74	; 116
    3416:	92 e0       	ldi	r25, 0x02	; 2
    3418:	23 c0       	rjmp	.+70     	; 0x3460 <init_sdcard+0xcc>
                continue;
            }
        }

        /* open file system */
        fs = fat_open(partition);
    341a:	80 91 00 05 	lds	r24, 0x0500
    341e:	90 91 01 05 	lds	r25, 0x0501
    3422:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <fat_open>
    3426:	90 93 ff 04 	sts	0x04FF, r25
    342a:	80 93 fe 04 	sts	0x04FE, r24
        if(!fs)
    342e:	00 97       	sbiw	r24, 0x00	; 0
    3430:	19 f4       	brne	.+6      	; 0x3438 <init_sdcard+0xa4>
        {
#if DEBUG
            uart_puts_p(PSTR("opening filesystem failed\n"));
    3432:	89 e5       	ldi	r24, 0x59	; 89
    3434:	92 e0       	ldi	r25, 0x02	; 2
    3436:	14 c0       	rjmp	.+40     	; 0x3460 <init_sdcard+0xcc>
            continue;
        }

        /* open root directory */
        struct fat_dir_entry_struct directory;
        fat_get_dir_entry_of_path(fs, "/", &directory);
    3438:	60 e0       	ldi	r22, 0x00	; 0
    343a:	71 e0       	ldi	r23, 0x01	; 1
    343c:	a7 01       	movw	r20, r14
    343e:	0e 94 39 19 	call	0x3272	; 0x3272 <fat_get_dir_entry_of_path>

        dd = fat_open_dir(fs, &directory);
    3442:	80 91 fe 04 	lds	r24, 0x04FE
    3446:	90 91 ff 04 	lds	r25, 0x04FF
    344a:	b7 01       	movw	r22, r14
    344c:	0e 94 8b 10 	call	0x2116	; 0x2116 <fat_open_dir>
    3450:	90 93 03 05 	sts	0x0503, r25
    3454:	80 93 02 05 	sts	0x0502, r24
        if(!dd)
    3458:	89 2b       	or	r24, r25
    345a:	29 f4       	brne	.+10     	; 0x3466 <init_sdcard+0xd2>
        {
#if DEBUG
            uart_puts_p(PSTR("opening root directory failed\n"));
    345c:	8a e3       	ldi	r24, 0x3A	; 58
    345e:	92 e0       	ldi	r25, 0x02	; 2
    3460:	0e 94 b3 02 	call	0x566	; 0x566 <uart_puts_p>
    3464:	ae cf       	rjmp	.-164    	; 0x33c2 <init_sdcard+0x2e>
#endif
            continue;
        }
        
        /* print some card information as a boot message */
        print_disk_info(fs);
    3466:	00 91 fe 04 	lds	r16, 0x04FE
    346a:	10 91 ff 04 	lds	r17, 0x04FF
    return fat_open_file(fs, &file_entry);
}

uint8_t print_disk_info(const struct fat_fs_struct* fs)
{
    if(!fs)
    346e:	01 15       	cp	r16, r1
    3470:	11 05       	cpc	r17, r1
    3472:	09 f4       	brne	.+2      	; 0x3476 <init_sdcard+0xe2>
    3474:	a1 c0       	rjmp	.+322    	; 0x35b8 <init_sdcard+0x224>
        return 0;

    struct sd_raw_info disk_info;
    if(!sd_raw_get_info(&disk_info))
    3476:	ce 01       	movw	r24, r28
    3478:	01 96       	adiw	r24, 0x01	; 1
    347a:	0e 94 81 08 	call	0x1102	; 0x1102 <sd_raw_get_info>
    347e:	88 23       	and	r24, r24
    3480:	09 f4       	brne	.+2      	; 0x3484 <init_sdcard+0xf0>
    3482:	9a c0       	rjmp	.+308    	; 0x35b8 <init_sdcard+0x224>
        return 0;

    uart_puts_p(PSTR("manuf:  0x")); uart_putc_hex(disk_info.manufacturer); uart_putc('\n');
    3484:	8c e0       	ldi	r24, 0x0C	; 12
    3486:	93 e0       	ldi	r25, 0x03	; 3
    3488:	0e 94 b3 02 	call	0x566	; 0x566 <uart_puts_p>
    348c:	89 81       	ldd	r24, Y+1	; 0x01
    348e:	0e 94 c6 01 	call	0x38c	; 0x38c <uart_putc_hex>
    3492:	8a e0       	ldi	r24, 0x0A	; 10
    3494:	0e 94 b7 01 	call	0x36e	; 0x36e <uart_putc>
    uart_puts_p(PSTR("oem:    ")); uart_puts((char*) disk_info.oem); uart_putc('\n');
    3498:	83 e0       	ldi	r24, 0x03	; 3
    349a:	93 e0       	ldi	r25, 0x03	; 3
    349c:	0e 94 b3 02 	call	0x566	; 0x566 <uart_puts_p>
    34a0:	ce 01       	movw	r24, r28
    34a2:	02 96       	adiw	r24, 0x02	; 2
    34a4:	0e 94 a6 02 	call	0x54c	; 0x54c <uart_puts>
    34a8:	8a e0       	ldi	r24, 0x0A	; 10
    34aa:	0e 94 b7 01 	call	0x36e	; 0x36e <uart_putc>
    uart_puts_p(PSTR("prod:   ")); uart_puts((char*) disk_info.product); uart_putc('\n');
    34ae:	8a ef       	ldi	r24, 0xFA	; 250
    34b0:	92 e0       	ldi	r25, 0x02	; 2
    34b2:	0e 94 b3 02 	call	0x566	; 0x566 <uart_puts_p>
    34b6:	ce 01       	movw	r24, r28
    34b8:	05 96       	adiw	r24, 0x05	; 5
    34ba:	0e 94 a6 02 	call	0x54c	; 0x54c <uart_puts>
    34be:	8a e0       	ldi	r24, 0x0A	; 10
    34c0:	0e 94 b7 01 	call	0x36e	; 0x36e <uart_putc>
    uart_puts_p(PSTR("rev:    ")); uart_putc_hex(disk_info.revision); uart_putc('\n');
    34c4:	81 ef       	ldi	r24, 0xF1	; 241
    34c6:	92 e0       	ldi	r25, 0x02	; 2
    34c8:	0e 94 b3 02 	call	0x566	; 0x566 <uart_puts_p>
    34cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    34ce:	0e 94 c6 01 	call	0x38c	; 0x38c <uart_putc_hex>
    34d2:	8a e0       	ldi	r24, 0x0A	; 10
    34d4:	0e 94 b7 01 	call	0x36e	; 0x36e <uart_putc>
    uart_puts_p(PSTR("serial: 0x")); uart_putdw_hex(disk_info.serial); uart_putc('\n');
    34d8:	86 ee       	ldi	r24, 0xE6	; 230
    34da:	92 e0       	ldi	r25, 0x02	; 2
    34dc:	0e 94 b3 02 	call	0x566	; 0x566 <uart_puts_p>
    34e0:	6c 85       	ldd	r22, Y+12	; 0x0c
    34e2:	7d 85       	ldd	r23, Y+13	; 0x0d
    34e4:	8e 85       	ldd	r24, Y+14	; 0x0e
    34e6:	9f 85       	ldd	r25, Y+15	; 0x0f
    34e8:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <uart_putdw_hex>
    34ec:	8a e0       	ldi	r24, 0x0A	; 10
    34ee:	0e 94 b7 01 	call	0x36e	; 0x36e <uart_putc>
    uart_puts_p(PSTR("date:   ")); uart_putw_dec(disk_info.manufacturing_month); uart_putc('/');
    34f2:	8d ed       	ldi	r24, 0xDD	; 221
    34f4:	92 e0       	ldi	r25, 0x02	; 2
    34f6:	0e 94 b3 02 	call	0x566	; 0x566 <uart_puts_p>
    34fa:	89 89       	ldd	r24, Y+17	; 0x11
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	0e 94 ff 01 	call	0x3fe	; 0x3fe <uart_putw_dec>
    3502:	8f e2       	ldi	r24, 0x2F	; 47
    3504:	0e 94 b7 01 	call	0x36e	; 0x36e <uart_putc>
                                   uart_putw_dec(disk_info.manufacturing_year); uart_putc('\n');
    3508:	88 89       	ldd	r24, Y+16	; 0x10
    350a:	90 e0       	ldi	r25, 0x00	; 0
    350c:	0e 94 ff 01 	call	0x3fe	; 0x3fe <uart_putw_dec>
    3510:	8a e0       	ldi	r24, 0x0A	; 10
    3512:	0e 94 b7 01 	call	0x36e	; 0x36e <uart_putc>
    uart_puts_p(PSTR("size:   ")); uart_putdw_dec(disk_info.capacity / 1024 / 1024); uart_puts_p(PSTR("MB\n"));
    3516:	84 ed       	ldi	r24, 0xD4	; 212
    3518:	92 e0       	ldi	r25, 0x02	; 2
    351a:	0e 94 b3 02 	call	0x566	; 0x566 <uart_puts_p>
    351e:	6a 89       	ldd	r22, Y+18	; 0x12
    3520:	7b 89       	ldd	r23, Y+19	; 0x13
    3522:	8c 89       	ldd	r24, Y+20	; 0x14
    3524:	9d 89       	ldd	r25, Y+21	; 0x15
    3526:	34 e1       	ldi	r19, 0x14	; 20
    3528:	96 95       	lsr	r25
    352a:	87 95       	ror	r24
    352c:	77 95       	ror	r23
    352e:	67 95       	ror	r22
    3530:	3a 95       	dec	r19
    3532:	d1 f7       	brne	.-12     	; 0x3528 <init_sdcard+0x194>
    3534:	0e 94 3d 02 	call	0x47a	; 0x47a <uart_putdw_dec>
    3538:	80 ed       	ldi	r24, 0xD0	; 208
    353a:	92 e0       	ldi	r25, 0x02	; 2
    353c:	0e 94 b3 02 	call	0x566	; 0x566 <uart_puts_p>
    uart_puts_p(PSTR("copy:   ")); uart_putw_dec(disk_info.flag_copy); uart_putc('\n');
    3540:	87 ec       	ldi	r24, 0xC7	; 199
    3542:	92 e0       	ldi	r25, 0x02	; 2
    3544:	0e 94 b3 02 	call	0x566	; 0x566 <uart_puts_p>
    3548:	8e 89       	ldd	r24, Y+22	; 0x16
    354a:	90 e0       	ldi	r25, 0x00	; 0
    354c:	0e 94 ff 01 	call	0x3fe	; 0x3fe <uart_putw_dec>
    3550:	8a e0       	ldi	r24, 0x0A	; 10
    3552:	0e 94 b7 01 	call	0x36e	; 0x36e <uart_putc>
    uart_puts_p(PSTR("wr.pr.: ")); uart_putw_dec(disk_info.flag_write_protect_temp); uart_putc('/');
    3556:	8e eb       	ldi	r24, 0xBE	; 190
    3558:	92 e0       	ldi	r25, 0x02	; 2
    355a:	0e 94 b3 02 	call	0x566	; 0x566 <uart_puts_p>
    355e:	88 8d       	ldd	r24, Y+24	; 0x18
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	0e 94 ff 01 	call	0x3fe	; 0x3fe <uart_putw_dec>
    3566:	8f e2       	ldi	r24, 0x2F	; 47
    3568:	0e 94 b7 01 	call	0x36e	; 0x36e <uart_putc>
                                   uart_putw_dec(disk_info.flag_write_protect); uart_putc('\n');
    356c:	8f 89       	ldd	r24, Y+23	; 0x17
    356e:	90 e0       	ldi	r25, 0x00	; 0
    3570:	0e 94 ff 01 	call	0x3fe	; 0x3fe <uart_putw_dec>
    3574:	8a e0       	ldi	r24, 0x0A	; 10
    3576:	0e 94 b7 01 	call	0x36e	; 0x36e <uart_putc>
    uart_puts_p(PSTR("format: ")); uart_putw_dec(disk_info.format); uart_putc('\n');
    357a:	85 eb       	ldi	r24, 0xB5	; 181
    357c:	92 e0       	ldi	r25, 0x02	; 2
    357e:	0e 94 b3 02 	call	0x566	; 0x566 <uart_puts_p>
    3582:	89 8d       	ldd	r24, Y+25	; 0x19
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	0e 94 ff 01 	call	0x3fe	; 0x3fe <uart_putw_dec>
    358a:	8a e0       	ldi	r24, 0x0A	; 10
    358c:	0e 94 b7 01 	call	0x36e	; 0x36e <uart_putc>
    uart_puts_p(PSTR("free:   ")); uart_putdw_dec(fat_get_fs_free(fs)); uart_putc('/');
    3590:	8c ea       	ldi	r24, 0xAC	; 172
    3592:	92 e0       	ldi	r25, 0x02	; 2
    3594:	0e 94 b3 02 	call	0x566	; 0x566 <uart_puts_p>
    3598:	c8 01       	movw	r24, r16
    359a:	0e 94 82 06 	call	0xd04	; 0xd04 <fat_get_fs_free>
    359e:	0e 94 3d 02 	call	0x47a	; 0x47a <uart_putdw_dec>
    35a2:	8f e2       	ldi	r24, 0x2F	; 47
    35a4:	0e 94 b7 01 	call	0x36e	; 0x36e <uart_putc>
                                   uart_putdw_dec(fat_get_fs_size(fs)); uart_putc('\n');
    35a8:	c8 01       	movw	r24, r16
    35aa:	0e 94 63 06 	call	0xcc6	; 0xcc6 <fat_get_fs_size>
    35ae:	0e 94 3d 02 	call	0x47a	; 0x47a <uart_putdw_dec>
    35b2:	8a e0       	ldi	r24, 0x0A	; 10
    35b4:	0e 94 b7 01 	call	0x36e	; 0x36e <uart_putc>

        /* close partition */
        partition_close(partition);

    return 0;
}
    35b8:	80 e0       	ldi	r24, 0x00	; 0
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	cc 5b       	subi	r28, 0xBC	; 188
    35be:	df 4f       	sbci	r29, 0xFF	; 255
    35c0:	0f b6       	in	r0, 0x3f	; 63
    35c2:	f8 94       	cli
    35c4:	de bf       	out	0x3e, r29	; 62
    35c6:	0f be       	out	0x3f, r0	; 63
    35c8:	cd bf       	out	0x3d, r28	; 61
    35ca:	cf 91       	pop	r28
    35cc:	df 91       	pop	r29
    35ce:	1f 91       	pop	r17
    35d0:	0f 91       	pop	r16
    35d2:	ff 90       	pop	r15
    35d4:	ef 90       	pop	r14
    35d6:	08 95       	ret

000035d8 <main>:
int j=0,k=0;

int main (void)
{ 
 
   ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz
    35d8:	80 91 7a 00 	lds	r24, 0x007A
    35dc:	87 60       	ori	r24, 0x07	; 7
    35de:	80 93 7a 00 	sts	0x007A, r24
   ADCSRA |= (1<<ADIE); //Interrupt Enabled
    35e2:	80 91 7a 00 	lds	r24, 0x007A
    35e6:	88 60       	ori	r24, 0x08	; 8
    35e8:	80 93 7a 00 	sts	0x007A, r24
   ADCSRB&=~((1<<ADTS0)|(1<<ADTS1)|(1<<ADTS2)); //interrupt source selected to ADC conversion complete
    35ec:	80 91 7b 00 	lds	r24, 0x007B
    35f0:	88 7f       	andi	r24, 0xF8	; 248
    35f2:	80 93 7b 00 	sts	0x007B, r24
   ADMUX |= (1 << REFS0); // Set ADC reference to AVCC
    35f6:	80 91 7c 00 	lds	r24, 0x007C
    35fa:	80 64       	ori	r24, 0x40	; 64
    35fc:	80 93 7c 00 	sts	0x007C, r24


   // No MUX values needed to be changed to use ADC0

   ADCSRA |= (1 << ADATE);  
    3600:	80 91 7a 00 	lds	r24, 0x007A
    3604:	80 62       	ori	r24, 0x20	; 32
    3606:	80 93 7a 00 	sts	0x007A, r24
   ADCSRA |= (1 << ADEN);  // Enable ADC
    360a:	80 91 7a 00 	lds	r24, 0x007A
    360e:	80 68       	ori	r24, 0x80	; 128
    3610:	80 93 7a 00 	sts	0x007A, r24
   ADCSRA |= (1 << ADSC);  // Start A2D Conversions
    3614:	80 91 7a 00 	lds	r24, 0x007A
    3618:	80 64       	ori	r24, 0x40	; 64
    361a:	80 93 7a 00 	sts	0x007A, r24
#define USE_SLEEP 1

void uart_init()
{
    /* set baud rate */
    UBRRH = UBRRVAL >> 8;
    361e:	10 92 c5 00 	sts	0x00C5, r1
    UBRRL = UBRRVAL & 0xff;
    3622:	87 e6       	ldi	r24, 0x67	; 103
    3624:	80 93 c4 00 	sts	0x00C4, r24
    /* set frame format: 8 bit, no parity, 1 bit */
    UCSRC = UCSRC_SELECT | (1 << UCSZ1) | (1 << UCSZ0);
    3628:	86 e0       	ldi	r24, 0x06	; 6
    362a:	80 93 c2 00 	sts	0x00C2, r24
    /* enable serial receiver and transmitter */
#if !USE_SLEEP
    UCSRB = (1 << RXEN) | (1 << TXEN);
#else
    UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
    362e:	88 e9       	ldi	r24, 0x98	; 152
    3630:	80 93 c1 00 	sts	0x00C1, r24

	uart_init();  //Uart initialized
	uart_puts_p(PSTR("Uart initialized\r\n"));
    3634:	87 ec       	ldi	r24, 0xC7	; 199
    3636:	90 e0       	ldi	r25, 0x00	; 0
    3638:	0e 94 b3 02 	call	0x566	; 0x566 <uart_puts_p>

   init_sdcard(); //SDcard initialized
    363c:	0e 94 ca 19 	call	0x3394	; 0x3394 <init_sdcard>
	uart_puts_p(PSTR("SD-CARD  initialized\r\n"));
    3640:	80 eb       	ldi	r24, 0xB0	; 176
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	0e 94 b3 02 	call	0x566	; 0x566 <uart_puts_p>
	 delete_file( LOGFILENAME ); //old log deleted
    3648:	82 e0       	ldi	r24, 0x02	; 2
    364a:	91 e0       	ldi	r25, 0x01	; 1
    364c:	0e 94 25 11 	call	0x224a	; 0x224a <delete_file>
	uart_puts_p(PSTR("Deleted prevuoius Log\r\n"));
    3650:	88 e9       	ldi	r24, 0x98	; 152
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	0e 94 b3 02 	call	0x566	; 0x566 <uart_puts_p>
	while( create_file (LOGFILENAME) != 0 ) //new log created
    3658:	82 e0       	ldi	r24, 0x02	; 2
    365a:	91 e0       	ldi	r25, 0x01	; 1
    365c:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <create_file>
    3660:	89 2b       	or	r24, r25
    3662:	d1 f7       	brne	.-12     	; 0x3658 <main+0x80>
	   ;
	uart_puts_p(PSTR("New Log Created\r\n"));
    3664:	86 e8       	ldi	r24, 0x86	; 134
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	0e 94 b3 02 	call	0x566	; 0x566 <uart_puts_p>
	 sei(); //enable global interrupt
    366c:	78 94       	sei
	 uart_puts_p(PSTR("Global interrupt enabled\r\n"));
    366e:	8b e6       	ldi	r24, 0x6B	; 107
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	0e 94 b3 02 	call	0x566	; 0x566 <uart_puts_p>
    3676:	ff cf       	rjmp	.-2      	; 0x3676 <main+0x9e>

00003678 <write_data>:

// ?????
int32_t file_offset = 0;

int write_data(const char* fname, unsigned int data)
{
    3678:	cf 92       	push	r12
    367a:	df 92       	push	r13
    367c:	ef 92       	push	r14
    367e:	ff 92       	push	r15
    3680:	0f 93       	push	r16
    3682:	1f 93       	push	r17
    3684:	df 93       	push	r29
    3686:	cf 93       	push	r28
    3688:	cd b7       	in	r28, 0x3d	; 61
    368a:	de b7       	in	r29, 0x3e	; 62
    368c:	28 97       	sbiw	r28, 0x08	; 8
    368e:	0f b6       	in	r0, 0x3f	; 63
    3690:	f8 94       	cli
    3692:	de bf       	out	0x3e, r29	; 62
    3694:	0f be       	out	0x3f, r0	; 63
    3696:	cd bf       	out	0x3d, r28	; 61
    3698:	8c 01       	movw	r16, r24
    369a:	6b 01       	movw	r12, r22
	char buffer[8];
	uint8_t buf_len;

	if(!fs || !dd )
    369c:	80 91 fe 04 	lds	r24, 0x04FE
    36a0:	90 91 ff 04 	lds	r25, 0x04FF
    36a4:	00 97       	sbiw	r24, 0x00	; 0
    36a6:	39 f0       	breq	.+14     	; 0x36b6 <write_data+0x3e>
    36a8:	60 91 02 05 	lds	r22, 0x0502
    36ac:	70 91 03 05 	lds	r23, 0x0503
    36b0:	61 15       	cp	r22, r1
    36b2:	71 05       	cpc	r23, r1
    36b4:	59 f4       	brne	.+22     	; 0x36cc <write_data+0x54>
	{
		uart_puts_p(PSTR("SD Card not initialized properly\n"));
    36b6:	82 e0       	ldi	r24, 0x02	; 2
    36b8:	92 e0       	ldi	r25, 0x02	; 2
    36ba:	0e 94 b3 02 	call	0x566	; 0x566 <uart_puts_p>
		uart_puts_p(PSTR("call init_sdcard() first\n"));
    36be:	88 ee       	ldi	r24, 0xE8	; 232
    36c0:	91 e0       	ldi	r25, 0x01	; 1
    36c2:	0e 94 b3 02 	call	0x566	; 0x566 <uart_puts_p>
    36c6:	2f ef       	ldi	r18, 0xFF	; 255
    36c8:	3f ef       	ldi	r19, 0xFF	; 255
    36ca:	72 c0       	rjmp	.+228    	; 0x37b0 <write_data+0x138>
		return -1;
	}

    /* search file in current directory and open it */
    struct fat_file_struct* fd = open_file_in_dir(fs, dd, fname );
    36cc:	a8 01       	movw	r20, r16
    36ce:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <open_file_in_dir>
    36d2:	7c 01       	movw	r14, r24
    if(!fd)
    36d4:	00 97       	sbiw	r24, 0x00	; 0
    36d6:	69 f4       	brne	.+26     	; 0x36f2 <write_data+0x7a>
    {
        uart_puts_p(PSTR("error opening "));
    36d8:	89 ed       	ldi	r24, 0xD9	; 217
    36da:	91 e0       	ldi	r25, 0x01	; 1
    36dc:	0e 94 b3 02 	call	0x566	; 0x566 <uart_puts_p>
        uart_puts(fname);
    36e0:	c8 01       	movw	r24, r16
    36e2:	0e 94 a6 02 	call	0x54c	; 0x54c <uart_puts>
        uart_putc('\n');
    36e6:	8a e0       	ldi	r24, 0x0A	; 10
    36e8:	0e 94 b7 01 	call	0x36e	; 0x36e <uart_putc>
    36ec:	2e ef       	ldi	r18, 0xFE	; 254
    36ee:	3f ef       	ldi	r19, 0xFF	; 255
    36f0:	5f c0       	rjmp	.+190    	; 0x37b0 <write_data+0x138>
        return -2;
    }

    /* set the file_offset */
    if(!fat_seek_file(fd, &file_offset, FAT_SEEK_SET))
    36f2:	66 e2       	ldi	r22, 0x26	; 38
    36f4:	72 e0       	ldi	r23, 0x02	; 2
    36f6:	40 e0       	ldi	r20, 0x00	; 0
    36f8:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <fat_seek_file>
    36fc:	88 23       	and	r24, r24
    36fe:	69 f4       	brne	.+26     	; 0x371a <write_data+0xa2>
    {
        uart_puts_p(PSTR("error seeking on "));
    3700:	87 ec       	ldi	r24, 0xC7	; 199
    3702:	91 e0       	ldi	r25, 0x01	; 1
    3704:	0e 94 b3 02 	call	0x566	; 0x566 <uart_puts_p>
        uart_putc('\n');
    3708:	8a e0       	ldi	r24, 0x0A	; 10
    370a:	0e 94 b7 01 	call	0x36e	; 0x36e <uart_putc>
#endif

#if USE_DYNAMIC_MEMORY
        free(fd);
#else
        fd->fs = 0;
    370e:	d7 01       	movw	r26, r14
    3710:	1d 92       	st	X+, r1
    3712:	1c 92       	st	X, r1
    3714:	2d ef       	ldi	r18, 0xFD	; 253
    3716:	3f ef       	ldi	r19, 0xFF	; 255
    3718:	4b c0       	rjmp	.+150    	; 0x37b0 <write_data+0x138>
        fat_close_file(fd);
        return -3;
    }

    buf_len = sprintf( buffer, "%03d ", data);
    371a:	00 d0       	rcall	.+0      	; 0x371c <write_data+0xa4>
    371c:	00 d0       	rcall	.+0      	; 0x371e <write_data+0xa6>
    371e:	00 d0       	rcall	.+0      	; 0x3720 <write_data+0xa8>
    3720:	ed b7       	in	r30, 0x3d	; 61
    3722:	fe b7       	in	r31, 0x3e	; 62
    3724:	31 96       	adiw	r30, 0x01	; 1
    3726:	8e 01       	movw	r16, r28
    3728:	0f 5f       	subi	r16, 0xFF	; 255
    372a:	1f 4f       	sbci	r17, 0xFF	; 255
    372c:	ad b7       	in	r26, 0x3d	; 61
    372e:	be b7       	in	r27, 0x3e	; 62
    3730:	12 96       	adiw	r26, 0x02	; 2
    3732:	1c 93       	st	X, r17
    3734:	0e 93       	st	-X, r16
    3736:	11 97       	sbiw	r26, 0x01	; 1
    3738:	8a e0       	ldi	r24, 0x0A	; 10
    373a:	91 e0       	ldi	r25, 0x01	; 1
    373c:	93 83       	std	Z+3, r25	; 0x03
    373e:	82 83       	std	Z+2, r24	; 0x02
    3740:	d5 82       	std	Z+5, r13	; 0x05
    3742:	c4 82       	std	Z+4, r12	; 0x04
    3744:	0e 94 74 23 	call	0x46e8	; 0x46e8 <sprintf>
    3748:	d8 2e       	mov	r13, r24
    /* write text to file */
    if(fat_write_file(fd, (uint8_t*) buffer, buf_len) != buf_len)
    374a:	ed b7       	in	r30, 0x3d	; 61
    374c:	fe b7       	in	r31, 0x3e	; 62
    374e:	36 96       	adiw	r30, 0x06	; 6
    3750:	0f b6       	in	r0, 0x3f	; 63
    3752:	f8 94       	cli
    3754:	fe bf       	out	0x3e, r31	; 62
    3756:	0f be       	out	0x3f, r0	; 63
    3758:	ed bf       	out	0x3d, r30	; 61
    375a:	c7 01       	movw	r24, r14
    375c:	b8 01       	movw	r22, r16
    375e:	4d 2d       	mov	r20, r13
    3760:	50 e0       	ldi	r21, 0x00	; 0
    3762:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <fat_write_file>
    3766:	2d 2d       	mov	r18, r13
    3768:	30 e0       	ldi	r19, 0x00	; 0
    376a:	82 17       	cp	r24, r18
    376c:	93 07       	cpc	r25, r19
    376e:	39 f0       	breq	.+14     	; 0x377e <write_data+0x106>
    {
        uart_puts_p(PSTR("error writing to file\n"));
    3770:	80 eb       	ldi	r24, 0xB0	; 176
    3772:	91 e0       	ldi	r25, 0x01	; 1
    3774:	0e 94 b3 02 	call	0x566	; 0x566 <uart_puts_p>
    3778:	2c ef       	ldi	r18, 0xFC	; 252
    377a:	3f ef       	ldi	r19, 0xFF	; 255
    377c:	19 c0       	rjmp	.+50     	; 0x37b0 <write_data+0x138>
        return -4;
    }

    file_offset += buf_len;
    377e:	80 91 26 02 	lds	r24, 0x0226
    3782:	90 91 27 02 	lds	r25, 0x0227
    3786:	a0 91 28 02 	lds	r26, 0x0228
    378a:	b0 91 29 02 	lds	r27, 0x0229
    378e:	8d 0d       	add	r24, r13
    3790:	91 1d       	adc	r25, r1
    3792:	a1 1d       	adc	r26, r1
    3794:	b1 1d       	adc	r27, r1
    3796:	80 93 26 02 	sts	0x0226, r24
    379a:	90 93 27 02 	sts	0x0227, r25
    379e:	a0 93 28 02 	sts	0x0228, r26
    37a2:	b0 93 29 02 	sts	0x0229, r27
    37a6:	d7 01       	movw	r26, r14
    37a8:	1d 92       	st	X+, r1
    37aa:	1c 92       	st	X, r1
    37ac:	20 e0       	ldi	r18, 0x00	; 0
    37ae:	30 e0       	ldi	r19, 0x00	; 0

    fat_close_file(fd);

    return 0;
}
    37b0:	c9 01       	movw	r24, r18
    37b2:	28 96       	adiw	r28, 0x08	; 8
    37b4:	0f b6       	in	r0, 0x3f	; 63
    37b6:	f8 94       	cli
    37b8:	de bf       	out	0x3e, r29	; 62
    37ba:	0f be       	out	0x3f, r0	; 63
    37bc:	cd bf       	out	0x3d, r28	; 61
    37be:	cf 91       	pop	r28
    37c0:	df 91       	pop	r29
    37c2:	1f 91       	pop	r17
    37c4:	0f 91       	pop	r16
    37c6:	ff 90       	pop	r15
    37c8:	ef 90       	pop	r14
    37ca:	df 90       	pop	r13
    37cc:	cf 90       	pop	r12
    37ce:	08 95       	ret

000037d0 <__vector_21>:
}


// interrupt handler fuction
ISR (ADC_vect)
{
    37d0:	1f 92       	push	r1
    37d2:	0f 92       	push	r0
    37d4:	0f b6       	in	r0, 0x3f	; 63
    37d6:	0f 92       	push	r0
    37d8:	11 24       	eor	r1, r1
    37da:	cf 92       	push	r12
    37dc:	df 92       	push	r13
    37de:	ef 92       	push	r14
    37e0:	ff 92       	push	r15
    37e2:	0f 93       	push	r16
    37e4:	1f 93       	push	r17
    37e6:	2f 93       	push	r18
    37e8:	3f 93       	push	r19
    37ea:	4f 93       	push	r20
    37ec:	5f 93       	push	r21
    37ee:	6f 93       	push	r22
    37f0:	7f 93       	push	r23
    37f2:	8f 93       	push	r24
    37f4:	9f 93       	push	r25
    37f6:	af 93       	push	r26
    37f8:	bf 93       	push	r27
    37fa:	ef 93       	push	r30
    37fc:	ff 93       	push	r31
	int x=-1;
 	x= ADCL; 
    37fe:	20 91 78 00 	lds	r18, 0x0078
    3802:	30 e0       	ldi	r19, 0x00	; 0
	x |= (ADCH<<8);
    3804:	40 91 79 00 	lds	r20, 0x0079

  
  	sum=sum+ (x-512)* (x-512); //square
    3808:	94 2f       	mov	r25, r20
    380a:	80 e0       	ldi	r24, 0x00	; 0
    380c:	82 2b       	or	r24, r18
    380e:	93 2b       	or	r25, r19
    3810:	80 50       	subi	r24, 0x00	; 0
    3812:	92 40       	sbci	r25, 0x02	; 2
    3814:	88 9f       	mul	r24, r24
    3816:	b0 01       	movw	r22, r0
    3818:	89 9f       	mul	r24, r25
    381a:	70 0d       	add	r23, r0
    381c:	98 9f       	mul	r25, r24
    381e:	70 0d       	add	r23, r0
    3820:	11 24       	eor	r1, r1
    3822:	88 27       	eor	r24, r24
    3824:	77 fd       	sbrc	r23, 7
    3826:	80 95       	com	r24
    3828:	98 2f       	mov	r25, r24
    382a:	0e 94 81 20 	call	0x4102	; 0x4102 <__floatsisf>
    382e:	20 91 2a 02 	lds	r18, 0x022A
    3832:	30 91 2b 02 	lds	r19, 0x022B
    3836:	40 91 2c 02 	lds	r20, 0x022C
    383a:	50 91 2d 02 	lds	r21, 0x022D
    383e:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <__addsf3>
    3842:	9b 01       	movw	r18, r22
    3844:	ac 01       	movw	r20, r24
    3846:	60 93 2a 02 	sts	0x022A, r22
    384a:	70 93 2b 02 	sts	0x022B, r23
    384e:	80 93 2c 02 	sts	0x022C, r24
    3852:	90 93 2d 02 	sts	0x022D, r25
	j++;
    3856:	80 91 32 02 	lds	r24, 0x0232
    385a:	90 91 33 02 	lds	r25, 0x0233
    385e:	01 96       	adiw	r24, 0x01	; 1
    3860:	90 93 33 02 	sts	0x0233, r25
    3864:	80 93 32 02 	sts	0x0232, r24
//	uart_putw_dec(j);
	//uart_puts_p(PSTR("\r\n"));

  if(j==192)
    3868:	80 3c       	cpi	r24, 0xC0	; 192
    386a:	91 05       	cpc	r25, r1
    386c:	09 f0       	breq	.+2      	; 0x3870 <__vector_21+0xa0>
    386e:	86 c0       	rjmp	.+268    	; 0x397c <__vector_21+0x1ac>
  {
 //  uart_puts_p(PSTR("one rms done\r\n"));
	  k++;
    3870:	00 91 34 02 	lds	r16, 0x0234
    3874:	10 91 35 02 	lds	r17, 0x0235
    3878:	0f 5f       	subi	r16, 0xFF	; 255
    387a:	1f 4f       	sbci	r17, 0xFF	; 255
    387c:	10 93 35 02 	sts	0x0235, r17
    3880:	00 93 34 02 	sts	0x0234, r16

	sum=sum/(double)192; //mean
	sum=sqrt(sum);  //root //rms
    3884:	ca 01       	movw	r24, r20
    3886:	b9 01       	movw	r22, r18
    3888:	20 e0       	ldi	r18, 0x00	; 0
    388a:	30 e0       	ldi	r19, 0x00	; 0
    388c:	40 e4       	ldi	r20, 0x40	; 64
    388e:	53 e4       	ldi	r21, 0x43	; 67
    3890:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <__divsf3>
    3894:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <sqrt>
//	char buf1[10];
//	sprintf( buf1, "%d\n", (int)sum);
//	 uart_puts(buf1);
//	  uart_puts_p(PSTR("\r\n"));
	//x=sum;
	temp=temp+sum;
    3898:	20 e0       	ldi	r18, 0x00	; 0
    389a:	30 e0       	ldi	r19, 0x00	; 0
    389c:	48 ed       	ldi	r20, 0xD8	; 216
    389e:	51 e4       	ldi	r21, 0x41	; 65
    38a0:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__mulsf3>
    38a4:	20 e0       	ldi	r18, 0x00	; 0
    38a6:	30 e0       	ldi	r19, 0x00	; 0
    38a8:	4c e5       	ldi	r20, 0x5C	; 92
    38aa:	53 e4       	ldi	r21, 0x43	; 67
    38ac:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__mulsf3>
    38b0:	20 e0       	ldi	r18, 0x00	; 0
    38b2:	30 e0       	ldi	r19, 0x00	; 0
    38b4:	4a e7       	ldi	r20, 0x7A	; 122
    38b6:	54 e4       	ldi	r21, 0x44	; 68
    38b8:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <__divsf3>
    38bc:	20 91 2e 02 	lds	r18, 0x022E
    38c0:	30 91 2f 02 	lds	r19, 0x022F
    38c4:	40 91 30 02 	lds	r20, 0x0230
    38c8:	50 91 31 02 	lds	r21, 0x0231
    38cc:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <__addsf3>
    38d0:	60 93 2e 02 	sts	0x022E, r22
    38d4:	70 93 2f 02 	sts	0x022F, r23
    38d8:	80 93 30 02 	sts	0x0230, r24
    38dc:	90 93 31 02 	sts	0x0231, r25
	sum=0;
    38e0:	0f 2e       	mov	r0, r31
    38e2:	f0 e0       	ldi	r31, 0x00	; 0
    38e4:	cf 2e       	mov	r12, r31
    38e6:	f0 e0       	ldi	r31, 0x00	; 0
    38e8:	df 2e       	mov	r13, r31
    38ea:	f0 e0       	ldi	r31, 0x00	; 0
    38ec:	ef 2e       	mov	r14, r31
    38ee:	f0 e0       	ldi	r31, 0x00	; 0
    38f0:	ff 2e       	mov	r15, r31
    38f2:	f0 2d       	mov	r31, r0
    38f4:	c0 92 2a 02 	sts	0x022A, r12
    38f8:	d0 92 2b 02 	sts	0x022B, r13
    38fc:	e0 92 2c 02 	sts	0x022C, r14
    3900:	f0 92 2d 02 	sts	0x022D, r15
	j=0;
    3904:	10 92 33 02 	sts	0x0233, r1
    3908:	10 92 32 02 	sts	0x0232, r1
  if(k==50)
    390c:	02 33       	cpi	r16, 0x32	; 50
    390e:	11 05       	cpc	r17, r1
    3910:	a9 f5       	brne	.+106    	; 0x397c <__vector_21+0x1ac>
  {

  temp=temp/50; //power averaged to get 1 value in 1 sec
    3912:	20 e0       	ldi	r18, 0x00	; 0
    3914:	30 e0       	ldi	r19, 0x00	; 0
    3916:	48 e4       	ldi	r20, 0x48	; 72
    3918:	52 e4       	ldi	r21, 0x42	; 66
    391a:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <__divsf3>
    391e:	60 93 2e 02 	sts	0x022E, r22
    3922:	70 93 2f 02 	sts	0x022F, r23
    3926:	80 93 30 02 	sts	0x0230, r24
    392a:	90 93 31 02 	sts	0x0231, r25
  k=0;
    392e:	10 92 35 02 	sts	0x0235, r1
    3932:	10 92 34 02 	sts	0x0234, r1
  	//char buf[10];
	//sprintf( buf, "%d\n", (int)temp);
	//uart_puts(buf);
	//
	uart_putw_dec(temp);
    3936:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <__fixunssfsi>
    393a:	dc 01       	movw	r26, r24
    393c:	cb 01       	movw	r24, r22
    393e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <uart_putw_dec>
	uart_puts_p(PSTR("\r\n"));
    3942:	88 e6       	ldi	r24, 0x68	; 104
    3944:	90 e0       	ldi	r25, 0x00	; 0
    3946:	0e 94 b3 02 	call	0x566	; 0x566 <uart_puts_p>
	write_data(LOGFILENAME, temp);//writing data in file
    394a:	60 91 2e 02 	lds	r22, 0x022E
    394e:	70 91 2f 02 	lds	r23, 0x022F
    3952:	80 91 30 02 	lds	r24, 0x0230
    3956:	90 91 31 02 	lds	r25, 0x0231
    395a:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <__fixunssfsi>
    395e:	9b 01       	movw	r18, r22
    3960:	ac 01       	movw	r20, r24
    3962:	82 e0       	ldi	r24, 0x02	; 2
    3964:	91 e0       	ldi	r25, 0x01	; 1
    3966:	b9 01       	movw	r22, r18
    3968:	0e 94 3c 1b 	call	0x3678	; 0x3678 <write_data>
	temp=0;
    396c:	c0 92 2e 02 	sts	0x022E, r12
    3970:	d0 92 2f 02 	sts	0x022F, r13
    3974:	e0 92 30 02 	sts	0x0230, r14
    3978:	f0 92 31 02 	sts	0x0231, r15

}
}
	                                                                
}
    397c:	ff 91       	pop	r31
    397e:	ef 91       	pop	r30
    3980:	bf 91       	pop	r27
    3982:	af 91       	pop	r26
    3984:	9f 91       	pop	r25
    3986:	8f 91       	pop	r24
    3988:	7f 91       	pop	r23
    398a:	6f 91       	pop	r22
    398c:	5f 91       	pop	r21
    398e:	4f 91       	pop	r20
    3990:	3f 91       	pop	r19
    3992:	2f 91       	pop	r18
    3994:	1f 91       	pop	r17
    3996:	0f 91       	pop	r16
    3998:	ff 90       	pop	r15
    399a:	ef 90       	pop	r14
    399c:	df 90       	pop	r13
    399e:	cf 90       	pop	r12
    39a0:	0f 90       	pop	r0
    39a2:	0f be       	out	0x3f, r0	; 63
    39a4:	0f 90       	pop	r0
    39a6:	1f 90       	pop	r1
    39a8:	18 95       	reti

000039aa <__fixunssfsi>:
    39aa:	ef 92       	push	r14
    39ac:	ff 92       	push	r15
    39ae:	0f 93       	push	r16
    39b0:	1f 93       	push	r17
    39b2:	7b 01       	movw	r14, r22
    39b4:	8c 01       	movw	r16, r24
    39b6:	20 e0       	ldi	r18, 0x00	; 0
    39b8:	30 e0       	ldi	r19, 0x00	; 0
    39ba:	40 e0       	ldi	r20, 0x00	; 0
    39bc:	5f e4       	ldi	r21, 0x4F	; 79
    39be:	0e 94 51 20 	call	0x40a2	; 0x40a2 <__gesf2>
    39c2:	88 23       	and	r24, r24
    39c4:	8c f0       	brlt	.+34     	; 0x39e8 <__fixunssfsi+0x3e>
    39c6:	c8 01       	movw	r24, r16
    39c8:	b7 01       	movw	r22, r14
    39ca:	20 e0       	ldi	r18, 0x00	; 0
    39cc:	30 e0       	ldi	r19, 0x00	; 0
    39ce:	40 e0       	ldi	r20, 0x00	; 0
    39d0:	5f e4       	ldi	r21, 0x4F	; 79
    39d2:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <__subsf3>
    39d6:	0e 94 df 20 	call	0x41be	; 0x41be <__fixsfsi>
    39da:	9b 01       	movw	r18, r22
    39dc:	ac 01       	movw	r20, r24
    39de:	20 50       	subi	r18, 0x00	; 0
    39e0:	30 40       	sbci	r19, 0x00	; 0
    39e2:	40 40       	sbci	r20, 0x00	; 0
    39e4:	50 48       	sbci	r21, 0x80	; 128
    39e6:	06 c0       	rjmp	.+12     	; 0x39f4 <__fixunssfsi+0x4a>
    39e8:	c8 01       	movw	r24, r16
    39ea:	b7 01       	movw	r22, r14
    39ec:	0e 94 df 20 	call	0x41be	; 0x41be <__fixsfsi>
    39f0:	9b 01       	movw	r18, r22
    39f2:	ac 01       	movw	r20, r24
    39f4:	b9 01       	movw	r22, r18
    39f6:	ca 01       	movw	r24, r20
    39f8:	1f 91       	pop	r17
    39fa:	0f 91       	pop	r16
    39fc:	ff 90       	pop	r15
    39fe:	ef 90       	pop	r14
    3a00:	08 95       	ret

00003a02 <_fpadd_parts>:
    3a02:	a0 e0       	ldi	r26, 0x00	; 0
    3a04:	b0 e0       	ldi	r27, 0x00	; 0
    3a06:	e7 e0       	ldi	r30, 0x07	; 7
    3a08:	fd e1       	ldi	r31, 0x1D	; 29
    3a0a:	0c 94 7d 26 	jmp	0x4cfa	; 0x4cfa <__prologue_saves__>
    3a0e:	dc 01       	movw	r26, r24
    3a10:	2b 01       	movw	r4, r22
    3a12:	fa 01       	movw	r30, r20
    3a14:	9c 91       	ld	r25, X
    3a16:	92 30       	cpi	r25, 0x02	; 2
    3a18:	08 f4       	brcc	.+2      	; 0x3a1c <_fpadd_parts+0x1a>
    3a1a:	39 c1       	rjmp	.+626    	; 0x3c8e <_fpadd_parts+0x28c>
    3a1c:	eb 01       	movw	r28, r22
    3a1e:	88 81       	ld	r24, Y
    3a20:	82 30       	cpi	r24, 0x02	; 2
    3a22:	08 f4       	brcc	.+2      	; 0x3a26 <_fpadd_parts+0x24>
    3a24:	33 c1       	rjmp	.+614    	; 0x3c8c <_fpadd_parts+0x28a>
    3a26:	94 30       	cpi	r25, 0x04	; 4
    3a28:	69 f4       	brne	.+26     	; 0x3a44 <_fpadd_parts+0x42>
    3a2a:	84 30       	cpi	r24, 0x04	; 4
    3a2c:	09 f0       	breq	.+2      	; 0x3a30 <_fpadd_parts+0x2e>
    3a2e:	2f c1       	rjmp	.+606    	; 0x3c8e <_fpadd_parts+0x28c>
    3a30:	11 96       	adiw	r26, 0x01	; 1
    3a32:	9c 91       	ld	r25, X
    3a34:	11 97       	sbiw	r26, 0x01	; 1
    3a36:	89 81       	ldd	r24, Y+1	; 0x01
    3a38:	98 17       	cp	r25, r24
    3a3a:	09 f4       	brne	.+2      	; 0x3a3e <_fpadd_parts+0x3c>
    3a3c:	28 c1       	rjmp	.+592    	; 0x3c8e <_fpadd_parts+0x28c>
    3a3e:	ad e1       	ldi	r26, 0x1D	; 29
    3a40:	b1 e0       	ldi	r27, 0x01	; 1
    3a42:	25 c1       	rjmp	.+586    	; 0x3c8e <_fpadd_parts+0x28c>
    3a44:	84 30       	cpi	r24, 0x04	; 4
    3a46:	09 f4       	brne	.+2      	; 0x3a4a <_fpadd_parts+0x48>
    3a48:	21 c1       	rjmp	.+578    	; 0x3c8c <_fpadd_parts+0x28a>
    3a4a:	82 30       	cpi	r24, 0x02	; 2
    3a4c:	a9 f4       	brne	.+42     	; 0x3a78 <_fpadd_parts+0x76>
    3a4e:	92 30       	cpi	r25, 0x02	; 2
    3a50:	09 f0       	breq	.+2      	; 0x3a54 <_fpadd_parts+0x52>
    3a52:	1d c1       	rjmp	.+570    	; 0x3c8e <_fpadd_parts+0x28c>
    3a54:	9a 01       	movw	r18, r20
    3a56:	ad 01       	movw	r20, r26
    3a58:	88 e0       	ldi	r24, 0x08	; 8
    3a5a:	ea 01       	movw	r28, r20
    3a5c:	09 90       	ld	r0, Y+
    3a5e:	ae 01       	movw	r20, r28
    3a60:	e9 01       	movw	r28, r18
    3a62:	09 92       	st	Y+, r0
    3a64:	9e 01       	movw	r18, r28
    3a66:	81 50       	subi	r24, 0x01	; 1
    3a68:	c1 f7       	brne	.-16     	; 0x3a5a <_fpadd_parts+0x58>
    3a6a:	e2 01       	movw	r28, r4
    3a6c:	89 81       	ldd	r24, Y+1	; 0x01
    3a6e:	11 96       	adiw	r26, 0x01	; 1
    3a70:	9c 91       	ld	r25, X
    3a72:	89 23       	and	r24, r25
    3a74:	81 83       	std	Z+1, r24	; 0x01
    3a76:	08 c1       	rjmp	.+528    	; 0x3c88 <_fpadd_parts+0x286>
    3a78:	92 30       	cpi	r25, 0x02	; 2
    3a7a:	09 f4       	brne	.+2      	; 0x3a7e <_fpadd_parts+0x7c>
    3a7c:	07 c1       	rjmp	.+526    	; 0x3c8c <_fpadd_parts+0x28a>
    3a7e:	12 96       	adiw	r26, 0x02	; 2
    3a80:	2d 90       	ld	r2, X+
    3a82:	3c 90       	ld	r3, X
    3a84:	13 97       	sbiw	r26, 0x03	; 3
    3a86:	eb 01       	movw	r28, r22
    3a88:	8a 81       	ldd	r24, Y+2	; 0x02
    3a8a:	9b 81       	ldd	r25, Y+3	; 0x03
    3a8c:	14 96       	adiw	r26, 0x04	; 4
    3a8e:	ad 90       	ld	r10, X+
    3a90:	bd 90       	ld	r11, X+
    3a92:	cd 90       	ld	r12, X+
    3a94:	dc 90       	ld	r13, X
    3a96:	17 97       	sbiw	r26, 0x07	; 7
    3a98:	ec 80       	ldd	r14, Y+4	; 0x04
    3a9a:	fd 80       	ldd	r15, Y+5	; 0x05
    3a9c:	0e 81       	ldd	r16, Y+6	; 0x06
    3a9e:	1f 81       	ldd	r17, Y+7	; 0x07
    3aa0:	91 01       	movw	r18, r2
    3aa2:	28 1b       	sub	r18, r24
    3aa4:	39 0b       	sbc	r19, r25
    3aa6:	b9 01       	movw	r22, r18
    3aa8:	37 ff       	sbrs	r19, 7
    3aaa:	04 c0       	rjmp	.+8      	; 0x3ab4 <_fpadd_parts+0xb2>
    3aac:	66 27       	eor	r22, r22
    3aae:	77 27       	eor	r23, r23
    3ab0:	62 1b       	sub	r22, r18
    3ab2:	73 0b       	sbc	r23, r19
    3ab4:	60 32       	cpi	r22, 0x20	; 32
    3ab6:	71 05       	cpc	r23, r1
    3ab8:	0c f0       	brlt	.+2      	; 0x3abc <_fpadd_parts+0xba>
    3aba:	61 c0       	rjmp	.+194    	; 0x3b7e <_fpadd_parts+0x17c>
    3abc:	12 16       	cp	r1, r18
    3abe:	13 06       	cpc	r1, r19
    3ac0:	6c f5       	brge	.+90     	; 0x3b1c <_fpadd_parts+0x11a>
    3ac2:	37 01       	movw	r6, r14
    3ac4:	48 01       	movw	r8, r16
    3ac6:	06 2e       	mov	r0, r22
    3ac8:	04 c0       	rjmp	.+8      	; 0x3ad2 <_fpadd_parts+0xd0>
    3aca:	96 94       	lsr	r9
    3acc:	87 94       	ror	r8
    3ace:	77 94       	ror	r7
    3ad0:	67 94       	ror	r6
    3ad2:	0a 94       	dec	r0
    3ad4:	d2 f7       	brpl	.-12     	; 0x3aca <_fpadd_parts+0xc8>
    3ad6:	21 e0       	ldi	r18, 0x01	; 1
    3ad8:	30 e0       	ldi	r19, 0x00	; 0
    3ada:	40 e0       	ldi	r20, 0x00	; 0
    3adc:	50 e0       	ldi	r21, 0x00	; 0
    3ade:	04 c0       	rjmp	.+8      	; 0x3ae8 <_fpadd_parts+0xe6>
    3ae0:	22 0f       	add	r18, r18
    3ae2:	33 1f       	adc	r19, r19
    3ae4:	44 1f       	adc	r20, r20
    3ae6:	55 1f       	adc	r21, r21
    3ae8:	6a 95       	dec	r22
    3aea:	d2 f7       	brpl	.-12     	; 0x3ae0 <_fpadd_parts+0xde>
    3aec:	21 50       	subi	r18, 0x01	; 1
    3aee:	30 40       	sbci	r19, 0x00	; 0
    3af0:	40 40       	sbci	r20, 0x00	; 0
    3af2:	50 40       	sbci	r21, 0x00	; 0
    3af4:	2e 21       	and	r18, r14
    3af6:	3f 21       	and	r19, r15
    3af8:	40 23       	and	r20, r16
    3afa:	51 23       	and	r21, r17
    3afc:	21 15       	cp	r18, r1
    3afe:	31 05       	cpc	r19, r1
    3b00:	41 05       	cpc	r20, r1
    3b02:	51 05       	cpc	r21, r1
    3b04:	21 f0       	breq	.+8      	; 0x3b0e <_fpadd_parts+0x10c>
    3b06:	21 e0       	ldi	r18, 0x01	; 1
    3b08:	30 e0       	ldi	r19, 0x00	; 0
    3b0a:	40 e0       	ldi	r20, 0x00	; 0
    3b0c:	50 e0       	ldi	r21, 0x00	; 0
    3b0e:	79 01       	movw	r14, r18
    3b10:	8a 01       	movw	r16, r20
    3b12:	e6 28       	or	r14, r6
    3b14:	f7 28       	or	r15, r7
    3b16:	08 29       	or	r16, r8
    3b18:	19 29       	or	r17, r9
    3b1a:	3c c0       	rjmp	.+120    	; 0x3b94 <_fpadd_parts+0x192>
    3b1c:	23 2b       	or	r18, r19
    3b1e:	d1 f1       	breq	.+116    	; 0x3b94 <_fpadd_parts+0x192>
    3b20:	26 0e       	add	r2, r22
    3b22:	37 1e       	adc	r3, r23
    3b24:	35 01       	movw	r6, r10
    3b26:	46 01       	movw	r8, r12
    3b28:	06 2e       	mov	r0, r22
    3b2a:	04 c0       	rjmp	.+8      	; 0x3b34 <_fpadd_parts+0x132>
    3b2c:	96 94       	lsr	r9
    3b2e:	87 94       	ror	r8
    3b30:	77 94       	ror	r7
    3b32:	67 94       	ror	r6
    3b34:	0a 94       	dec	r0
    3b36:	d2 f7       	brpl	.-12     	; 0x3b2c <_fpadd_parts+0x12a>
    3b38:	21 e0       	ldi	r18, 0x01	; 1
    3b3a:	30 e0       	ldi	r19, 0x00	; 0
    3b3c:	40 e0       	ldi	r20, 0x00	; 0
    3b3e:	50 e0       	ldi	r21, 0x00	; 0
    3b40:	04 c0       	rjmp	.+8      	; 0x3b4a <_fpadd_parts+0x148>
    3b42:	22 0f       	add	r18, r18
    3b44:	33 1f       	adc	r19, r19
    3b46:	44 1f       	adc	r20, r20
    3b48:	55 1f       	adc	r21, r21
    3b4a:	6a 95       	dec	r22
    3b4c:	d2 f7       	brpl	.-12     	; 0x3b42 <_fpadd_parts+0x140>
    3b4e:	21 50       	subi	r18, 0x01	; 1
    3b50:	30 40       	sbci	r19, 0x00	; 0
    3b52:	40 40       	sbci	r20, 0x00	; 0
    3b54:	50 40       	sbci	r21, 0x00	; 0
    3b56:	2a 21       	and	r18, r10
    3b58:	3b 21       	and	r19, r11
    3b5a:	4c 21       	and	r20, r12
    3b5c:	5d 21       	and	r21, r13
    3b5e:	21 15       	cp	r18, r1
    3b60:	31 05       	cpc	r19, r1
    3b62:	41 05       	cpc	r20, r1
    3b64:	51 05       	cpc	r21, r1
    3b66:	21 f0       	breq	.+8      	; 0x3b70 <_fpadd_parts+0x16e>
    3b68:	21 e0       	ldi	r18, 0x01	; 1
    3b6a:	30 e0       	ldi	r19, 0x00	; 0
    3b6c:	40 e0       	ldi	r20, 0x00	; 0
    3b6e:	50 e0       	ldi	r21, 0x00	; 0
    3b70:	59 01       	movw	r10, r18
    3b72:	6a 01       	movw	r12, r20
    3b74:	a6 28       	or	r10, r6
    3b76:	b7 28       	or	r11, r7
    3b78:	c8 28       	or	r12, r8
    3b7a:	d9 28       	or	r13, r9
    3b7c:	0b c0       	rjmp	.+22     	; 0x3b94 <_fpadd_parts+0x192>
    3b7e:	82 15       	cp	r24, r2
    3b80:	93 05       	cpc	r25, r3
    3b82:	2c f0       	brlt	.+10     	; 0x3b8e <_fpadd_parts+0x18c>
    3b84:	1c 01       	movw	r2, r24
    3b86:	aa 24       	eor	r10, r10
    3b88:	bb 24       	eor	r11, r11
    3b8a:	65 01       	movw	r12, r10
    3b8c:	03 c0       	rjmp	.+6      	; 0x3b94 <_fpadd_parts+0x192>
    3b8e:	ee 24       	eor	r14, r14
    3b90:	ff 24       	eor	r15, r15
    3b92:	87 01       	movw	r16, r14
    3b94:	11 96       	adiw	r26, 0x01	; 1
    3b96:	9c 91       	ld	r25, X
    3b98:	d2 01       	movw	r26, r4
    3b9a:	11 96       	adiw	r26, 0x01	; 1
    3b9c:	8c 91       	ld	r24, X
    3b9e:	98 17       	cp	r25, r24
    3ba0:	09 f4       	brne	.+2      	; 0x3ba4 <_fpadd_parts+0x1a2>
    3ba2:	45 c0       	rjmp	.+138    	; 0x3c2e <_fpadd_parts+0x22c>
    3ba4:	99 23       	and	r25, r25
    3ba6:	39 f0       	breq	.+14     	; 0x3bb6 <_fpadd_parts+0x1b4>
    3ba8:	a8 01       	movw	r20, r16
    3baa:	97 01       	movw	r18, r14
    3bac:	2a 19       	sub	r18, r10
    3bae:	3b 09       	sbc	r19, r11
    3bb0:	4c 09       	sbc	r20, r12
    3bb2:	5d 09       	sbc	r21, r13
    3bb4:	06 c0       	rjmp	.+12     	; 0x3bc2 <_fpadd_parts+0x1c0>
    3bb6:	a6 01       	movw	r20, r12
    3bb8:	95 01       	movw	r18, r10
    3bba:	2e 19       	sub	r18, r14
    3bbc:	3f 09       	sbc	r19, r15
    3bbe:	40 0b       	sbc	r20, r16
    3bc0:	51 0b       	sbc	r21, r17
    3bc2:	57 fd       	sbrc	r21, 7
    3bc4:	08 c0       	rjmp	.+16     	; 0x3bd6 <_fpadd_parts+0x1d4>
    3bc6:	11 82       	std	Z+1, r1	; 0x01
    3bc8:	33 82       	std	Z+3, r3	; 0x03
    3bca:	22 82       	std	Z+2, r2	; 0x02
    3bcc:	24 83       	std	Z+4, r18	; 0x04
    3bce:	35 83       	std	Z+5, r19	; 0x05
    3bd0:	46 83       	std	Z+6, r20	; 0x06
    3bd2:	57 83       	std	Z+7, r21	; 0x07
    3bd4:	1d c0       	rjmp	.+58     	; 0x3c10 <_fpadd_parts+0x20e>
    3bd6:	81 e0       	ldi	r24, 0x01	; 1
    3bd8:	81 83       	std	Z+1, r24	; 0x01
    3bda:	33 82       	std	Z+3, r3	; 0x03
    3bdc:	22 82       	std	Z+2, r2	; 0x02
    3bde:	88 27       	eor	r24, r24
    3be0:	99 27       	eor	r25, r25
    3be2:	dc 01       	movw	r26, r24
    3be4:	82 1b       	sub	r24, r18
    3be6:	93 0b       	sbc	r25, r19
    3be8:	a4 0b       	sbc	r26, r20
    3bea:	b5 0b       	sbc	r27, r21
    3bec:	84 83       	std	Z+4, r24	; 0x04
    3bee:	95 83       	std	Z+5, r25	; 0x05
    3bf0:	a6 83       	std	Z+6, r26	; 0x06
    3bf2:	b7 83       	std	Z+7, r27	; 0x07
    3bf4:	0d c0       	rjmp	.+26     	; 0x3c10 <_fpadd_parts+0x20e>
    3bf6:	22 0f       	add	r18, r18
    3bf8:	33 1f       	adc	r19, r19
    3bfa:	44 1f       	adc	r20, r20
    3bfc:	55 1f       	adc	r21, r21
    3bfe:	24 83       	std	Z+4, r18	; 0x04
    3c00:	35 83       	std	Z+5, r19	; 0x05
    3c02:	46 83       	std	Z+6, r20	; 0x06
    3c04:	57 83       	std	Z+7, r21	; 0x07
    3c06:	82 81       	ldd	r24, Z+2	; 0x02
    3c08:	93 81       	ldd	r25, Z+3	; 0x03
    3c0a:	01 97       	sbiw	r24, 0x01	; 1
    3c0c:	93 83       	std	Z+3, r25	; 0x03
    3c0e:	82 83       	std	Z+2, r24	; 0x02
    3c10:	24 81       	ldd	r18, Z+4	; 0x04
    3c12:	35 81       	ldd	r19, Z+5	; 0x05
    3c14:	46 81       	ldd	r20, Z+6	; 0x06
    3c16:	57 81       	ldd	r21, Z+7	; 0x07
    3c18:	da 01       	movw	r26, r20
    3c1a:	c9 01       	movw	r24, r18
    3c1c:	01 97       	sbiw	r24, 0x01	; 1
    3c1e:	a1 09       	sbc	r26, r1
    3c20:	b1 09       	sbc	r27, r1
    3c22:	8f 5f       	subi	r24, 0xFF	; 255
    3c24:	9f 4f       	sbci	r25, 0xFF	; 255
    3c26:	af 4f       	sbci	r26, 0xFF	; 255
    3c28:	bf 43       	sbci	r27, 0x3F	; 63
    3c2a:	28 f3       	brcs	.-54     	; 0x3bf6 <_fpadd_parts+0x1f4>
    3c2c:	0b c0       	rjmp	.+22     	; 0x3c44 <_fpadd_parts+0x242>
    3c2e:	91 83       	std	Z+1, r25	; 0x01
    3c30:	33 82       	std	Z+3, r3	; 0x03
    3c32:	22 82       	std	Z+2, r2	; 0x02
    3c34:	ea 0c       	add	r14, r10
    3c36:	fb 1c       	adc	r15, r11
    3c38:	0c 1d       	adc	r16, r12
    3c3a:	1d 1d       	adc	r17, r13
    3c3c:	e4 82       	std	Z+4, r14	; 0x04
    3c3e:	f5 82       	std	Z+5, r15	; 0x05
    3c40:	06 83       	std	Z+6, r16	; 0x06
    3c42:	17 83       	std	Z+7, r17	; 0x07
    3c44:	83 e0       	ldi	r24, 0x03	; 3
    3c46:	80 83       	st	Z, r24
    3c48:	24 81       	ldd	r18, Z+4	; 0x04
    3c4a:	35 81       	ldd	r19, Z+5	; 0x05
    3c4c:	46 81       	ldd	r20, Z+6	; 0x06
    3c4e:	57 81       	ldd	r21, Z+7	; 0x07
    3c50:	57 ff       	sbrs	r21, 7
    3c52:	1a c0       	rjmp	.+52     	; 0x3c88 <_fpadd_parts+0x286>
    3c54:	c9 01       	movw	r24, r18
    3c56:	aa 27       	eor	r26, r26
    3c58:	97 fd       	sbrc	r25, 7
    3c5a:	a0 95       	com	r26
    3c5c:	ba 2f       	mov	r27, r26
    3c5e:	81 70       	andi	r24, 0x01	; 1
    3c60:	90 70       	andi	r25, 0x00	; 0
    3c62:	a0 70       	andi	r26, 0x00	; 0
    3c64:	b0 70       	andi	r27, 0x00	; 0
    3c66:	56 95       	lsr	r21
    3c68:	47 95       	ror	r20
    3c6a:	37 95       	ror	r19
    3c6c:	27 95       	ror	r18
    3c6e:	82 2b       	or	r24, r18
    3c70:	93 2b       	or	r25, r19
    3c72:	a4 2b       	or	r26, r20
    3c74:	b5 2b       	or	r27, r21
    3c76:	84 83       	std	Z+4, r24	; 0x04
    3c78:	95 83       	std	Z+5, r25	; 0x05
    3c7a:	a6 83       	std	Z+6, r26	; 0x06
    3c7c:	b7 83       	std	Z+7, r27	; 0x07
    3c7e:	82 81       	ldd	r24, Z+2	; 0x02
    3c80:	93 81       	ldd	r25, Z+3	; 0x03
    3c82:	01 96       	adiw	r24, 0x01	; 1
    3c84:	93 83       	std	Z+3, r25	; 0x03
    3c86:	82 83       	std	Z+2, r24	; 0x02
    3c88:	df 01       	movw	r26, r30
    3c8a:	01 c0       	rjmp	.+2      	; 0x3c8e <_fpadd_parts+0x28c>
    3c8c:	d2 01       	movw	r26, r4
    3c8e:	cd 01       	movw	r24, r26
    3c90:	cd b7       	in	r28, 0x3d	; 61
    3c92:	de b7       	in	r29, 0x3e	; 62
    3c94:	e2 e1       	ldi	r30, 0x12	; 18
    3c96:	0c 94 99 26 	jmp	0x4d32	; 0x4d32 <__epilogue_restores__>

00003c9a <__subsf3>:
    3c9a:	a0 e2       	ldi	r26, 0x20	; 32
    3c9c:	b0 e0       	ldi	r27, 0x00	; 0
    3c9e:	e3 e5       	ldi	r30, 0x53	; 83
    3ca0:	fe e1       	ldi	r31, 0x1E	; 30
    3ca2:	0c 94 89 26 	jmp	0x4d12	; 0x4d12 <__prologue_saves__+0x18>
    3ca6:	69 83       	std	Y+1, r22	; 0x01
    3ca8:	7a 83       	std	Y+2, r23	; 0x02
    3caa:	8b 83       	std	Y+3, r24	; 0x03
    3cac:	9c 83       	std	Y+4, r25	; 0x04
    3cae:	2d 83       	std	Y+5, r18	; 0x05
    3cb0:	3e 83       	std	Y+6, r19	; 0x06
    3cb2:	4f 83       	std	Y+7, r20	; 0x07
    3cb4:	58 87       	std	Y+8, r21	; 0x08
    3cb6:	e9 e0       	ldi	r30, 0x09	; 9
    3cb8:	ee 2e       	mov	r14, r30
    3cba:	f1 2c       	mov	r15, r1
    3cbc:	ec 0e       	add	r14, r28
    3cbe:	fd 1e       	adc	r15, r29
    3cc0:	ce 01       	movw	r24, r28
    3cc2:	01 96       	adiw	r24, 0x01	; 1
    3cc4:	b7 01       	movw	r22, r14
    3cc6:	0e 94 57 22 	call	0x44ae	; 0x44ae <__unpack_f>
    3cca:	8e 01       	movw	r16, r28
    3ccc:	0f 5e       	subi	r16, 0xEF	; 239
    3cce:	1f 4f       	sbci	r17, 0xFF	; 255
    3cd0:	ce 01       	movw	r24, r28
    3cd2:	05 96       	adiw	r24, 0x05	; 5
    3cd4:	b8 01       	movw	r22, r16
    3cd6:	0e 94 57 22 	call	0x44ae	; 0x44ae <__unpack_f>
    3cda:	8a 89       	ldd	r24, Y+18	; 0x12
    3cdc:	91 e0       	ldi	r25, 0x01	; 1
    3cde:	89 27       	eor	r24, r25
    3ce0:	8a 8b       	std	Y+18, r24	; 0x12
    3ce2:	c7 01       	movw	r24, r14
    3ce4:	b8 01       	movw	r22, r16
    3ce6:	ae 01       	movw	r20, r28
    3ce8:	47 5e       	subi	r20, 0xE7	; 231
    3cea:	5f 4f       	sbci	r21, 0xFF	; 255
    3cec:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <_fpadd_parts>
    3cf0:	0e 94 82 21 	call	0x4304	; 0x4304 <__pack_f>
    3cf4:	a0 96       	adiw	r28, 0x20	; 32
    3cf6:	e6 e0       	ldi	r30, 0x06	; 6
    3cf8:	0c 94 a5 26 	jmp	0x4d4a	; 0x4d4a <__epilogue_restores__+0x18>

00003cfc <__addsf3>:
    3cfc:	a0 e2       	ldi	r26, 0x20	; 32
    3cfe:	b0 e0       	ldi	r27, 0x00	; 0
    3d00:	e4 e8       	ldi	r30, 0x84	; 132
    3d02:	fe e1       	ldi	r31, 0x1E	; 30
    3d04:	0c 94 89 26 	jmp	0x4d12	; 0x4d12 <__prologue_saves__+0x18>
    3d08:	69 83       	std	Y+1, r22	; 0x01
    3d0a:	7a 83       	std	Y+2, r23	; 0x02
    3d0c:	8b 83       	std	Y+3, r24	; 0x03
    3d0e:	9c 83       	std	Y+4, r25	; 0x04
    3d10:	2d 83       	std	Y+5, r18	; 0x05
    3d12:	3e 83       	std	Y+6, r19	; 0x06
    3d14:	4f 83       	std	Y+7, r20	; 0x07
    3d16:	58 87       	std	Y+8, r21	; 0x08
    3d18:	f9 e0       	ldi	r31, 0x09	; 9
    3d1a:	ef 2e       	mov	r14, r31
    3d1c:	f1 2c       	mov	r15, r1
    3d1e:	ec 0e       	add	r14, r28
    3d20:	fd 1e       	adc	r15, r29
    3d22:	ce 01       	movw	r24, r28
    3d24:	01 96       	adiw	r24, 0x01	; 1
    3d26:	b7 01       	movw	r22, r14
    3d28:	0e 94 57 22 	call	0x44ae	; 0x44ae <__unpack_f>
    3d2c:	8e 01       	movw	r16, r28
    3d2e:	0f 5e       	subi	r16, 0xEF	; 239
    3d30:	1f 4f       	sbci	r17, 0xFF	; 255
    3d32:	ce 01       	movw	r24, r28
    3d34:	05 96       	adiw	r24, 0x05	; 5
    3d36:	b8 01       	movw	r22, r16
    3d38:	0e 94 57 22 	call	0x44ae	; 0x44ae <__unpack_f>
    3d3c:	c7 01       	movw	r24, r14
    3d3e:	b8 01       	movw	r22, r16
    3d40:	ae 01       	movw	r20, r28
    3d42:	47 5e       	subi	r20, 0xE7	; 231
    3d44:	5f 4f       	sbci	r21, 0xFF	; 255
    3d46:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <_fpadd_parts>
    3d4a:	0e 94 82 21 	call	0x4304	; 0x4304 <__pack_f>
    3d4e:	a0 96       	adiw	r28, 0x20	; 32
    3d50:	e6 e0       	ldi	r30, 0x06	; 6
    3d52:	0c 94 a5 26 	jmp	0x4d4a	; 0x4d4a <__epilogue_restores__+0x18>

00003d56 <__mulsf3>:
    3d56:	a0 e2       	ldi	r26, 0x20	; 32
    3d58:	b0 e0       	ldi	r27, 0x00	; 0
    3d5a:	e1 eb       	ldi	r30, 0xB1	; 177
    3d5c:	fe e1       	ldi	r31, 0x1E	; 30
    3d5e:	0c 94 7d 26 	jmp	0x4cfa	; 0x4cfa <__prologue_saves__>
    3d62:	69 83       	std	Y+1, r22	; 0x01
    3d64:	7a 83       	std	Y+2, r23	; 0x02
    3d66:	8b 83       	std	Y+3, r24	; 0x03
    3d68:	9c 83       	std	Y+4, r25	; 0x04
    3d6a:	2d 83       	std	Y+5, r18	; 0x05
    3d6c:	3e 83       	std	Y+6, r19	; 0x06
    3d6e:	4f 83       	std	Y+7, r20	; 0x07
    3d70:	58 87       	std	Y+8, r21	; 0x08
    3d72:	ce 01       	movw	r24, r28
    3d74:	01 96       	adiw	r24, 0x01	; 1
    3d76:	be 01       	movw	r22, r28
    3d78:	67 5f       	subi	r22, 0xF7	; 247
    3d7a:	7f 4f       	sbci	r23, 0xFF	; 255
    3d7c:	0e 94 57 22 	call	0x44ae	; 0x44ae <__unpack_f>
    3d80:	ce 01       	movw	r24, r28
    3d82:	05 96       	adiw	r24, 0x05	; 5
    3d84:	be 01       	movw	r22, r28
    3d86:	6f 5e       	subi	r22, 0xEF	; 239
    3d88:	7f 4f       	sbci	r23, 0xFF	; 255
    3d8a:	0e 94 57 22 	call	0x44ae	; 0x44ae <__unpack_f>
    3d8e:	99 85       	ldd	r25, Y+9	; 0x09
    3d90:	92 30       	cpi	r25, 0x02	; 2
    3d92:	88 f0       	brcs	.+34     	; 0x3db6 <__mulsf3+0x60>
    3d94:	89 89       	ldd	r24, Y+17	; 0x11
    3d96:	82 30       	cpi	r24, 0x02	; 2
    3d98:	c8 f0       	brcs	.+50     	; 0x3dcc <__mulsf3+0x76>
    3d9a:	94 30       	cpi	r25, 0x04	; 4
    3d9c:	19 f4       	brne	.+6      	; 0x3da4 <__mulsf3+0x4e>
    3d9e:	82 30       	cpi	r24, 0x02	; 2
    3da0:	51 f4       	brne	.+20     	; 0x3db6 <__mulsf3+0x60>
    3da2:	04 c0       	rjmp	.+8      	; 0x3dac <__mulsf3+0x56>
    3da4:	84 30       	cpi	r24, 0x04	; 4
    3da6:	29 f4       	brne	.+10     	; 0x3db2 <__mulsf3+0x5c>
    3da8:	92 30       	cpi	r25, 0x02	; 2
    3daa:	81 f4       	brne	.+32     	; 0x3dcc <__mulsf3+0x76>
    3dac:	8d e1       	ldi	r24, 0x1D	; 29
    3dae:	91 e0       	ldi	r25, 0x01	; 1
    3db0:	c6 c0       	rjmp	.+396    	; 0x3f3e <__mulsf3+0x1e8>
    3db2:	92 30       	cpi	r25, 0x02	; 2
    3db4:	49 f4       	brne	.+18     	; 0x3dc8 <__mulsf3+0x72>
    3db6:	20 e0       	ldi	r18, 0x00	; 0
    3db8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dba:	8a 89       	ldd	r24, Y+18	; 0x12
    3dbc:	98 13       	cpse	r25, r24
    3dbe:	21 e0       	ldi	r18, 0x01	; 1
    3dc0:	2a 87       	std	Y+10, r18	; 0x0a
    3dc2:	ce 01       	movw	r24, r28
    3dc4:	09 96       	adiw	r24, 0x09	; 9
    3dc6:	bb c0       	rjmp	.+374    	; 0x3f3e <__mulsf3+0x1e8>
    3dc8:	82 30       	cpi	r24, 0x02	; 2
    3dca:	49 f4       	brne	.+18     	; 0x3dde <__mulsf3+0x88>
    3dcc:	20 e0       	ldi	r18, 0x00	; 0
    3dce:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dd0:	8a 89       	ldd	r24, Y+18	; 0x12
    3dd2:	98 13       	cpse	r25, r24
    3dd4:	21 e0       	ldi	r18, 0x01	; 1
    3dd6:	2a 8b       	std	Y+18, r18	; 0x12
    3dd8:	ce 01       	movw	r24, r28
    3dda:	41 96       	adiw	r24, 0x11	; 17
    3ddc:	b0 c0       	rjmp	.+352    	; 0x3f3e <__mulsf3+0x1e8>
    3dde:	2d 84       	ldd	r2, Y+13	; 0x0d
    3de0:	3e 84       	ldd	r3, Y+14	; 0x0e
    3de2:	4f 84       	ldd	r4, Y+15	; 0x0f
    3de4:	58 88       	ldd	r5, Y+16	; 0x10
    3de6:	6d 88       	ldd	r6, Y+21	; 0x15
    3de8:	7e 88       	ldd	r7, Y+22	; 0x16
    3dea:	8f 88       	ldd	r8, Y+23	; 0x17
    3dec:	98 8c       	ldd	r9, Y+24	; 0x18
    3dee:	ee 24       	eor	r14, r14
    3df0:	ff 24       	eor	r15, r15
    3df2:	87 01       	movw	r16, r14
    3df4:	aa 24       	eor	r10, r10
    3df6:	bb 24       	eor	r11, r11
    3df8:	65 01       	movw	r12, r10
    3dfa:	40 e0       	ldi	r20, 0x00	; 0
    3dfc:	50 e0       	ldi	r21, 0x00	; 0
    3dfe:	60 e0       	ldi	r22, 0x00	; 0
    3e00:	70 e0       	ldi	r23, 0x00	; 0
    3e02:	e0 e0       	ldi	r30, 0x00	; 0
    3e04:	f0 e0       	ldi	r31, 0x00	; 0
    3e06:	c1 01       	movw	r24, r2
    3e08:	81 70       	andi	r24, 0x01	; 1
    3e0a:	90 70       	andi	r25, 0x00	; 0
    3e0c:	89 2b       	or	r24, r25
    3e0e:	e9 f0       	breq	.+58     	; 0x3e4a <__mulsf3+0xf4>
    3e10:	e6 0c       	add	r14, r6
    3e12:	f7 1c       	adc	r15, r7
    3e14:	08 1d       	adc	r16, r8
    3e16:	19 1d       	adc	r17, r9
    3e18:	9a 01       	movw	r18, r20
    3e1a:	ab 01       	movw	r20, r22
    3e1c:	2a 0d       	add	r18, r10
    3e1e:	3b 1d       	adc	r19, r11
    3e20:	4c 1d       	adc	r20, r12
    3e22:	5d 1d       	adc	r21, r13
    3e24:	80 e0       	ldi	r24, 0x00	; 0
    3e26:	90 e0       	ldi	r25, 0x00	; 0
    3e28:	a0 e0       	ldi	r26, 0x00	; 0
    3e2a:	b0 e0       	ldi	r27, 0x00	; 0
    3e2c:	e6 14       	cp	r14, r6
    3e2e:	f7 04       	cpc	r15, r7
    3e30:	08 05       	cpc	r16, r8
    3e32:	19 05       	cpc	r17, r9
    3e34:	20 f4       	brcc	.+8      	; 0x3e3e <__mulsf3+0xe8>
    3e36:	81 e0       	ldi	r24, 0x01	; 1
    3e38:	90 e0       	ldi	r25, 0x00	; 0
    3e3a:	a0 e0       	ldi	r26, 0x00	; 0
    3e3c:	b0 e0       	ldi	r27, 0x00	; 0
    3e3e:	ba 01       	movw	r22, r20
    3e40:	a9 01       	movw	r20, r18
    3e42:	48 0f       	add	r20, r24
    3e44:	59 1f       	adc	r21, r25
    3e46:	6a 1f       	adc	r22, r26
    3e48:	7b 1f       	adc	r23, r27
    3e4a:	aa 0c       	add	r10, r10
    3e4c:	bb 1c       	adc	r11, r11
    3e4e:	cc 1c       	adc	r12, r12
    3e50:	dd 1c       	adc	r13, r13
    3e52:	97 fe       	sbrs	r9, 7
    3e54:	08 c0       	rjmp	.+16     	; 0x3e66 <__mulsf3+0x110>
    3e56:	81 e0       	ldi	r24, 0x01	; 1
    3e58:	90 e0       	ldi	r25, 0x00	; 0
    3e5a:	a0 e0       	ldi	r26, 0x00	; 0
    3e5c:	b0 e0       	ldi	r27, 0x00	; 0
    3e5e:	a8 2a       	or	r10, r24
    3e60:	b9 2a       	or	r11, r25
    3e62:	ca 2a       	or	r12, r26
    3e64:	db 2a       	or	r13, r27
    3e66:	31 96       	adiw	r30, 0x01	; 1
    3e68:	e0 32       	cpi	r30, 0x20	; 32
    3e6a:	f1 05       	cpc	r31, r1
    3e6c:	49 f0       	breq	.+18     	; 0x3e80 <__mulsf3+0x12a>
    3e6e:	66 0c       	add	r6, r6
    3e70:	77 1c       	adc	r7, r7
    3e72:	88 1c       	adc	r8, r8
    3e74:	99 1c       	adc	r9, r9
    3e76:	56 94       	lsr	r5
    3e78:	47 94       	ror	r4
    3e7a:	37 94       	ror	r3
    3e7c:	27 94       	ror	r2
    3e7e:	c3 cf       	rjmp	.-122    	; 0x3e06 <__mulsf3+0xb0>
    3e80:	fa 85       	ldd	r31, Y+10	; 0x0a
    3e82:	ea 89       	ldd	r30, Y+18	; 0x12
    3e84:	2b 89       	ldd	r18, Y+19	; 0x13
    3e86:	3c 89       	ldd	r19, Y+20	; 0x14
    3e88:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e8a:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e8c:	28 0f       	add	r18, r24
    3e8e:	39 1f       	adc	r19, r25
    3e90:	2e 5f       	subi	r18, 0xFE	; 254
    3e92:	3f 4f       	sbci	r19, 0xFF	; 255
    3e94:	17 c0       	rjmp	.+46     	; 0x3ec4 <__mulsf3+0x16e>
    3e96:	ca 01       	movw	r24, r20
    3e98:	81 70       	andi	r24, 0x01	; 1
    3e9a:	90 70       	andi	r25, 0x00	; 0
    3e9c:	89 2b       	or	r24, r25
    3e9e:	61 f0       	breq	.+24     	; 0x3eb8 <__mulsf3+0x162>
    3ea0:	16 95       	lsr	r17
    3ea2:	07 95       	ror	r16
    3ea4:	f7 94       	ror	r15
    3ea6:	e7 94       	ror	r14
    3ea8:	80 e0       	ldi	r24, 0x00	; 0
    3eaa:	90 e0       	ldi	r25, 0x00	; 0
    3eac:	a0 e0       	ldi	r26, 0x00	; 0
    3eae:	b0 e8       	ldi	r27, 0x80	; 128
    3eb0:	e8 2a       	or	r14, r24
    3eb2:	f9 2a       	or	r15, r25
    3eb4:	0a 2b       	or	r16, r26
    3eb6:	1b 2b       	or	r17, r27
    3eb8:	76 95       	lsr	r23
    3eba:	67 95       	ror	r22
    3ebc:	57 95       	ror	r21
    3ebe:	47 95       	ror	r20
    3ec0:	2f 5f       	subi	r18, 0xFF	; 255
    3ec2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ec4:	77 fd       	sbrc	r23, 7
    3ec6:	e7 cf       	rjmp	.-50     	; 0x3e96 <__mulsf3+0x140>
    3ec8:	0c c0       	rjmp	.+24     	; 0x3ee2 <__mulsf3+0x18c>
    3eca:	44 0f       	add	r20, r20
    3ecc:	55 1f       	adc	r21, r21
    3ece:	66 1f       	adc	r22, r22
    3ed0:	77 1f       	adc	r23, r23
    3ed2:	17 fd       	sbrc	r17, 7
    3ed4:	41 60       	ori	r20, 0x01	; 1
    3ed6:	ee 0c       	add	r14, r14
    3ed8:	ff 1c       	adc	r15, r15
    3eda:	00 1f       	adc	r16, r16
    3edc:	11 1f       	adc	r17, r17
    3ede:	21 50       	subi	r18, 0x01	; 1
    3ee0:	30 40       	sbci	r19, 0x00	; 0
    3ee2:	40 30       	cpi	r20, 0x00	; 0
    3ee4:	90 e0       	ldi	r25, 0x00	; 0
    3ee6:	59 07       	cpc	r21, r25
    3ee8:	90 e0       	ldi	r25, 0x00	; 0
    3eea:	69 07       	cpc	r22, r25
    3eec:	90 e4       	ldi	r25, 0x40	; 64
    3eee:	79 07       	cpc	r23, r25
    3ef0:	60 f3       	brcs	.-40     	; 0x3eca <__mulsf3+0x174>
    3ef2:	2b 8f       	std	Y+27, r18	; 0x1b
    3ef4:	3c 8f       	std	Y+28, r19	; 0x1c
    3ef6:	db 01       	movw	r26, r22
    3ef8:	ca 01       	movw	r24, r20
    3efa:	8f 77       	andi	r24, 0x7F	; 127
    3efc:	90 70       	andi	r25, 0x00	; 0
    3efe:	a0 70       	andi	r26, 0x00	; 0
    3f00:	b0 70       	andi	r27, 0x00	; 0
    3f02:	80 34       	cpi	r24, 0x40	; 64
    3f04:	91 05       	cpc	r25, r1
    3f06:	a1 05       	cpc	r26, r1
    3f08:	b1 05       	cpc	r27, r1
    3f0a:	61 f4       	brne	.+24     	; 0x3f24 <__mulsf3+0x1ce>
    3f0c:	47 fd       	sbrc	r20, 7
    3f0e:	0a c0       	rjmp	.+20     	; 0x3f24 <__mulsf3+0x1ce>
    3f10:	e1 14       	cp	r14, r1
    3f12:	f1 04       	cpc	r15, r1
    3f14:	01 05       	cpc	r16, r1
    3f16:	11 05       	cpc	r17, r1
    3f18:	29 f0       	breq	.+10     	; 0x3f24 <__mulsf3+0x1ce>
    3f1a:	40 5c       	subi	r20, 0xC0	; 192
    3f1c:	5f 4f       	sbci	r21, 0xFF	; 255
    3f1e:	6f 4f       	sbci	r22, 0xFF	; 255
    3f20:	7f 4f       	sbci	r23, 0xFF	; 255
    3f22:	40 78       	andi	r20, 0x80	; 128
    3f24:	1a 8e       	std	Y+26, r1	; 0x1a
    3f26:	fe 17       	cp	r31, r30
    3f28:	11 f0       	breq	.+4      	; 0x3f2e <__mulsf3+0x1d8>
    3f2a:	81 e0       	ldi	r24, 0x01	; 1
    3f2c:	8a 8f       	std	Y+26, r24	; 0x1a
    3f2e:	4d 8f       	std	Y+29, r20	; 0x1d
    3f30:	5e 8f       	std	Y+30, r21	; 0x1e
    3f32:	6f 8f       	std	Y+31, r22	; 0x1f
    3f34:	78 a3       	std	Y+32, r23	; 0x20
    3f36:	83 e0       	ldi	r24, 0x03	; 3
    3f38:	89 8f       	std	Y+25, r24	; 0x19
    3f3a:	ce 01       	movw	r24, r28
    3f3c:	49 96       	adiw	r24, 0x19	; 25
    3f3e:	0e 94 82 21 	call	0x4304	; 0x4304 <__pack_f>
    3f42:	a0 96       	adiw	r28, 0x20	; 32
    3f44:	e2 e1       	ldi	r30, 0x12	; 18
    3f46:	0c 94 99 26 	jmp	0x4d32	; 0x4d32 <__epilogue_restores__>

00003f4a <__divsf3>:
    3f4a:	a8 e1       	ldi	r26, 0x18	; 24
    3f4c:	b0 e0       	ldi	r27, 0x00	; 0
    3f4e:	eb ea       	ldi	r30, 0xAB	; 171
    3f50:	ff e1       	ldi	r31, 0x1F	; 31
    3f52:	0c 94 85 26 	jmp	0x4d0a	; 0x4d0a <__prologue_saves__+0x10>
    3f56:	69 83       	std	Y+1, r22	; 0x01
    3f58:	7a 83       	std	Y+2, r23	; 0x02
    3f5a:	8b 83       	std	Y+3, r24	; 0x03
    3f5c:	9c 83       	std	Y+4, r25	; 0x04
    3f5e:	2d 83       	std	Y+5, r18	; 0x05
    3f60:	3e 83       	std	Y+6, r19	; 0x06
    3f62:	4f 83       	std	Y+7, r20	; 0x07
    3f64:	58 87       	std	Y+8, r21	; 0x08
    3f66:	b9 e0       	ldi	r27, 0x09	; 9
    3f68:	eb 2e       	mov	r14, r27
    3f6a:	f1 2c       	mov	r15, r1
    3f6c:	ec 0e       	add	r14, r28
    3f6e:	fd 1e       	adc	r15, r29
    3f70:	ce 01       	movw	r24, r28
    3f72:	01 96       	adiw	r24, 0x01	; 1
    3f74:	b7 01       	movw	r22, r14
    3f76:	0e 94 57 22 	call	0x44ae	; 0x44ae <__unpack_f>
    3f7a:	8e 01       	movw	r16, r28
    3f7c:	0f 5e       	subi	r16, 0xEF	; 239
    3f7e:	1f 4f       	sbci	r17, 0xFF	; 255
    3f80:	ce 01       	movw	r24, r28
    3f82:	05 96       	adiw	r24, 0x05	; 5
    3f84:	b8 01       	movw	r22, r16
    3f86:	0e 94 57 22 	call	0x44ae	; 0x44ae <__unpack_f>
    3f8a:	29 85       	ldd	r18, Y+9	; 0x09
    3f8c:	22 30       	cpi	r18, 0x02	; 2
    3f8e:	08 f4       	brcc	.+2      	; 0x3f92 <__divsf3+0x48>
    3f90:	7e c0       	rjmp	.+252    	; 0x408e <__divsf3+0x144>
    3f92:	39 89       	ldd	r19, Y+17	; 0x11
    3f94:	32 30       	cpi	r19, 0x02	; 2
    3f96:	10 f4       	brcc	.+4      	; 0x3f9c <__divsf3+0x52>
    3f98:	b8 01       	movw	r22, r16
    3f9a:	7c c0       	rjmp	.+248    	; 0x4094 <__divsf3+0x14a>
    3f9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f9e:	9a 89       	ldd	r25, Y+18	; 0x12
    3fa0:	89 27       	eor	r24, r25
    3fa2:	8a 87       	std	Y+10, r24	; 0x0a
    3fa4:	24 30       	cpi	r18, 0x04	; 4
    3fa6:	11 f0       	breq	.+4      	; 0x3fac <__divsf3+0x62>
    3fa8:	22 30       	cpi	r18, 0x02	; 2
    3faa:	31 f4       	brne	.+12     	; 0x3fb8 <__divsf3+0x6e>
    3fac:	23 17       	cp	r18, r19
    3fae:	09 f0       	breq	.+2      	; 0x3fb2 <__divsf3+0x68>
    3fb0:	6e c0       	rjmp	.+220    	; 0x408e <__divsf3+0x144>
    3fb2:	6d e1       	ldi	r22, 0x1D	; 29
    3fb4:	71 e0       	ldi	r23, 0x01	; 1
    3fb6:	6e c0       	rjmp	.+220    	; 0x4094 <__divsf3+0x14a>
    3fb8:	34 30       	cpi	r19, 0x04	; 4
    3fba:	39 f4       	brne	.+14     	; 0x3fca <__divsf3+0x80>
    3fbc:	1d 86       	std	Y+13, r1	; 0x0d
    3fbe:	1e 86       	std	Y+14, r1	; 0x0e
    3fc0:	1f 86       	std	Y+15, r1	; 0x0f
    3fc2:	18 8a       	std	Y+16, r1	; 0x10
    3fc4:	1c 86       	std	Y+12, r1	; 0x0c
    3fc6:	1b 86       	std	Y+11, r1	; 0x0b
    3fc8:	04 c0       	rjmp	.+8      	; 0x3fd2 <__divsf3+0x88>
    3fca:	32 30       	cpi	r19, 0x02	; 2
    3fcc:	21 f4       	brne	.+8      	; 0x3fd6 <__divsf3+0x8c>
    3fce:	84 e0       	ldi	r24, 0x04	; 4
    3fd0:	89 87       	std	Y+9, r24	; 0x09
    3fd2:	b7 01       	movw	r22, r14
    3fd4:	5f c0       	rjmp	.+190    	; 0x4094 <__divsf3+0x14a>
    3fd6:	2b 85       	ldd	r18, Y+11	; 0x0b
    3fd8:	3c 85       	ldd	r19, Y+12	; 0x0c
    3fda:	8b 89       	ldd	r24, Y+19	; 0x13
    3fdc:	9c 89       	ldd	r25, Y+20	; 0x14
    3fde:	28 1b       	sub	r18, r24
    3fe0:	39 0b       	sbc	r19, r25
    3fe2:	3c 87       	std	Y+12, r19	; 0x0c
    3fe4:	2b 87       	std	Y+11, r18	; 0x0b
    3fe6:	ed 84       	ldd	r14, Y+13	; 0x0d
    3fe8:	fe 84       	ldd	r15, Y+14	; 0x0e
    3fea:	0f 85       	ldd	r16, Y+15	; 0x0f
    3fec:	18 89       	ldd	r17, Y+16	; 0x10
    3fee:	ad 88       	ldd	r10, Y+21	; 0x15
    3ff0:	be 88       	ldd	r11, Y+22	; 0x16
    3ff2:	cf 88       	ldd	r12, Y+23	; 0x17
    3ff4:	d8 8c       	ldd	r13, Y+24	; 0x18
    3ff6:	ea 14       	cp	r14, r10
    3ff8:	fb 04       	cpc	r15, r11
    3ffa:	0c 05       	cpc	r16, r12
    3ffc:	1d 05       	cpc	r17, r13
    3ffe:	40 f4       	brcc	.+16     	; 0x4010 <__divsf3+0xc6>
    4000:	ee 0c       	add	r14, r14
    4002:	ff 1c       	adc	r15, r15
    4004:	00 1f       	adc	r16, r16
    4006:	11 1f       	adc	r17, r17
    4008:	21 50       	subi	r18, 0x01	; 1
    400a:	30 40       	sbci	r19, 0x00	; 0
    400c:	3c 87       	std	Y+12, r19	; 0x0c
    400e:	2b 87       	std	Y+11, r18	; 0x0b
    4010:	20 e0       	ldi	r18, 0x00	; 0
    4012:	30 e0       	ldi	r19, 0x00	; 0
    4014:	40 e0       	ldi	r20, 0x00	; 0
    4016:	50 e0       	ldi	r21, 0x00	; 0
    4018:	80 e0       	ldi	r24, 0x00	; 0
    401a:	90 e0       	ldi	r25, 0x00	; 0
    401c:	a0 e0       	ldi	r26, 0x00	; 0
    401e:	b0 e4       	ldi	r27, 0x40	; 64
    4020:	60 e0       	ldi	r22, 0x00	; 0
    4022:	70 e0       	ldi	r23, 0x00	; 0
    4024:	ea 14       	cp	r14, r10
    4026:	fb 04       	cpc	r15, r11
    4028:	0c 05       	cpc	r16, r12
    402a:	1d 05       	cpc	r17, r13
    402c:	40 f0       	brcs	.+16     	; 0x403e <__divsf3+0xf4>
    402e:	28 2b       	or	r18, r24
    4030:	39 2b       	or	r19, r25
    4032:	4a 2b       	or	r20, r26
    4034:	5b 2b       	or	r21, r27
    4036:	ea 18       	sub	r14, r10
    4038:	fb 08       	sbc	r15, r11
    403a:	0c 09       	sbc	r16, r12
    403c:	1d 09       	sbc	r17, r13
    403e:	b6 95       	lsr	r27
    4040:	a7 95       	ror	r26
    4042:	97 95       	ror	r25
    4044:	87 95       	ror	r24
    4046:	ee 0c       	add	r14, r14
    4048:	ff 1c       	adc	r15, r15
    404a:	00 1f       	adc	r16, r16
    404c:	11 1f       	adc	r17, r17
    404e:	6f 5f       	subi	r22, 0xFF	; 255
    4050:	7f 4f       	sbci	r23, 0xFF	; 255
    4052:	6f 31       	cpi	r22, 0x1F	; 31
    4054:	71 05       	cpc	r23, r1
    4056:	31 f7       	brne	.-52     	; 0x4024 <__divsf3+0xda>
    4058:	da 01       	movw	r26, r20
    405a:	c9 01       	movw	r24, r18
    405c:	8f 77       	andi	r24, 0x7F	; 127
    405e:	90 70       	andi	r25, 0x00	; 0
    4060:	a0 70       	andi	r26, 0x00	; 0
    4062:	b0 70       	andi	r27, 0x00	; 0
    4064:	80 34       	cpi	r24, 0x40	; 64
    4066:	91 05       	cpc	r25, r1
    4068:	a1 05       	cpc	r26, r1
    406a:	b1 05       	cpc	r27, r1
    406c:	61 f4       	brne	.+24     	; 0x4086 <__divsf3+0x13c>
    406e:	27 fd       	sbrc	r18, 7
    4070:	0a c0       	rjmp	.+20     	; 0x4086 <__divsf3+0x13c>
    4072:	e1 14       	cp	r14, r1
    4074:	f1 04       	cpc	r15, r1
    4076:	01 05       	cpc	r16, r1
    4078:	11 05       	cpc	r17, r1
    407a:	29 f0       	breq	.+10     	; 0x4086 <__divsf3+0x13c>
    407c:	20 5c       	subi	r18, 0xC0	; 192
    407e:	3f 4f       	sbci	r19, 0xFF	; 255
    4080:	4f 4f       	sbci	r20, 0xFF	; 255
    4082:	5f 4f       	sbci	r21, 0xFF	; 255
    4084:	20 78       	andi	r18, 0x80	; 128
    4086:	2d 87       	std	Y+13, r18	; 0x0d
    4088:	3e 87       	std	Y+14, r19	; 0x0e
    408a:	4f 87       	std	Y+15, r20	; 0x0f
    408c:	58 8b       	std	Y+16, r21	; 0x10
    408e:	be 01       	movw	r22, r28
    4090:	67 5f       	subi	r22, 0xF7	; 247
    4092:	7f 4f       	sbci	r23, 0xFF	; 255
    4094:	cb 01       	movw	r24, r22
    4096:	0e 94 82 21 	call	0x4304	; 0x4304 <__pack_f>
    409a:	68 96       	adiw	r28, 0x18	; 24
    409c:	ea e0       	ldi	r30, 0x0A	; 10
    409e:	0c 94 a1 26 	jmp	0x4d42	; 0x4d42 <__epilogue_restores__+0x10>

000040a2 <__gesf2>:
    40a2:	a8 e1       	ldi	r26, 0x18	; 24
    40a4:	b0 e0       	ldi	r27, 0x00	; 0
    40a6:	e7 e5       	ldi	r30, 0x57	; 87
    40a8:	f0 e2       	ldi	r31, 0x20	; 32
    40aa:	0c 94 89 26 	jmp	0x4d12	; 0x4d12 <__prologue_saves__+0x18>
    40ae:	69 83       	std	Y+1, r22	; 0x01
    40b0:	7a 83       	std	Y+2, r23	; 0x02
    40b2:	8b 83       	std	Y+3, r24	; 0x03
    40b4:	9c 83       	std	Y+4, r25	; 0x04
    40b6:	2d 83       	std	Y+5, r18	; 0x05
    40b8:	3e 83       	std	Y+6, r19	; 0x06
    40ba:	4f 83       	std	Y+7, r20	; 0x07
    40bc:	58 87       	std	Y+8, r21	; 0x08
    40be:	89 e0       	ldi	r24, 0x09	; 9
    40c0:	e8 2e       	mov	r14, r24
    40c2:	f1 2c       	mov	r15, r1
    40c4:	ec 0e       	add	r14, r28
    40c6:	fd 1e       	adc	r15, r29
    40c8:	ce 01       	movw	r24, r28
    40ca:	01 96       	adiw	r24, 0x01	; 1
    40cc:	b7 01       	movw	r22, r14
    40ce:	0e 94 57 22 	call	0x44ae	; 0x44ae <__unpack_f>
    40d2:	8e 01       	movw	r16, r28
    40d4:	0f 5e       	subi	r16, 0xEF	; 239
    40d6:	1f 4f       	sbci	r17, 0xFF	; 255
    40d8:	ce 01       	movw	r24, r28
    40da:	05 96       	adiw	r24, 0x05	; 5
    40dc:	b8 01       	movw	r22, r16
    40de:	0e 94 57 22 	call	0x44ae	; 0x44ae <__unpack_f>
    40e2:	89 85       	ldd	r24, Y+9	; 0x09
    40e4:	82 30       	cpi	r24, 0x02	; 2
    40e6:	40 f0       	brcs	.+16     	; 0x40f8 <__gesf2+0x56>
    40e8:	89 89       	ldd	r24, Y+17	; 0x11
    40ea:	82 30       	cpi	r24, 0x02	; 2
    40ec:	28 f0       	brcs	.+10     	; 0x40f8 <__gesf2+0x56>
    40ee:	c7 01       	movw	r24, r14
    40f0:	b8 01       	movw	r22, r16
    40f2:	0e 94 cf 22 	call	0x459e	; 0x459e <__fpcmp_parts_f>
    40f6:	01 c0       	rjmp	.+2      	; 0x40fa <__gesf2+0x58>
    40f8:	8f ef       	ldi	r24, 0xFF	; 255
    40fa:	68 96       	adiw	r28, 0x18	; 24
    40fc:	e6 e0       	ldi	r30, 0x06	; 6
    40fe:	0c 94 a5 26 	jmp	0x4d4a	; 0x4d4a <__epilogue_restores__+0x18>

00004102 <__floatsisf>:
    4102:	a8 e0       	ldi	r26, 0x08	; 8
    4104:	b0 e0       	ldi	r27, 0x00	; 0
    4106:	e7 e8       	ldi	r30, 0x87	; 135
    4108:	f0 e2       	ldi	r31, 0x20	; 32
    410a:	0c 94 86 26 	jmp	0x4d0c	; 0x4d0c <__prologue_saves__+0x12>
    410e:	9b 01       	movw	r18, r22
    4110:	ac 01       	movw	r20, r24
    4112:	83 e0       	ldi	r24, 0x03	; 3
    4114:	89 83       	std	Y+1, r24	; 0x01
    4116:	da 01       	movw	r26, r20
    4118:	c9 01       	movw	r24, r18
    411a:	88 27       	eor	r24, r24
    411c:	b7 fd       	sbrc	r27, 7
    411e:	83 95       	inc	r24
    4120:	99 27       	eor	r25, r25
    4122:	aa 27       	eor	r26, r26
    4124:	bb 27       	eor	r27, r27
    4126:	b8 2e       	mov	r11, r24
    4128:	21 15       	cp	r18, r1
    412a:	31 05       	cpc	r19, r1
    412c:	41 05       	cpc	r20, r1
    412e:	51 05       	cpc	r21, r1
    4130:	19 f4       	brne	.+6      	; 0x4138 <__floatsisf+0x36>
    4132:	82 e0       	ldi	r24, 0x02	; 2
    4134:	89 83       	std	Y+1, r24	; 0x01
    4136:	3a c0       	rjmp	.+116    	; 0x41ac <__floatsisf+0xaa>
    4138:	88 23       	and	r24, r24
    413a:	a9 f0       	breq	.+42     	; 0x4166 <__floatsisf+0x64>
    413c:	20 30       	cpi	r18, 0x00	; 0
    413e:	80 e0       	ldi	r24, 0x00	; 0
    4140:	38 07       	cpc	r19, r24
    4142:	80 e0       	ldi	r24, 0x00	; 0
    4144:	48 07       	cpc	r20, r24
    4146:	80 e8       	ldi	r24, 0x80	; 128
    4148:	58 07       	cpc	r21, r24
    414a:	29 f4       	brne	.+10     	; 0x4156 <__floatsisf+0x54>
    414c:	60 e0       	ldi	r22, 0x00	; 0
    414e:	70 e0       	ldi	r23, 0x00	; 0
    4150:	80 e0       	ldi	r24, 0x00	; 0
    4152:	9f ec       	ldi	r25, 0xCF	; 207
    4154:	30 c0       	rjmp	.+96     	; 0x41b6 <__floatsisf+0xb4>
    4156:	ee 24       	eor	r14, r14
    4158:	ff 24       	eor	r15, r15
    415a:	87 01       	movw	r16, r14
    415c:	e2 1a       	sub	r14, r18
    415e:	f3 0a       	sbc	r15, r19
    4160:	04 0b       	sbc	r16, r20
    4162:	15 0b       	sbc	r17, r21
    4164:	02 c0       	rjmp	.+4      	; 0x416a <__floatsisf+0x68>
    4166:	79 01       	movw	r14, r18
    4168:	8a 01       	movw	r16, r20
    416a:	8e e1       	ldi	r24, 0x1E	; 30
    416c:	c8 2e       	mov	r12, r24
    416e:	d1 2c       	mov	r13, r1
    4170:	dc 82       	std	Y+4, r13	; 0x04
    4172:	cb 82       	std	Y+3, r12	; 0x03
    4174:	ed 82       	std	Y+5, r14	; 0x05
    4176:	fe 82       	std	Y+6, r15	; 0x06
    4178:	0f 83       	std	Y+7, r16	; 0x07
    417a:	18 87       	std	Y+8, r17	; 0x08
    417c:	c8 01       	movw	r24, r16
    417e:	b7 01       	movw	r22, r14
    4180:	0e 94 33 21 	call	0x4266	; 0x4266 <__clzsi2>
    4184:	01 97       	sbiw	r24, 0x01	; 1
    4186:	18 16       	cp	r1, r24
    4188:	19 06       	cpc	r1, r25
    418a:	84 f4       	brge	.+32     	; 0x41ac <__floatsisf+0xaa>
    418c:	08 2e       	mov	r0, r24
    418e:	04 c0       	rjmp	.+8      	; 0x4198 <__floatsisf+0x96>
    4190:	ee 0c       	add	r14, r14
    4192:	ff 1c       	adc	r15, r15
    4194:	00 1f       	adc	r16, r16
    4196:	11 1f       	adc	r17, r17
    4198:	0a 94       	dec	r0
    419a:	d2 f7       	brpl	.-12     	; 0x4190 <__floatsisf+0x8e>
    419c:	ed 82       	std	Y+5, r14	; 0x05
    419e:	fe 82       	std	Y+6, r15	; 0x06
    41a0:	0f 83       	std	Y+7, r16	; 0x07
    41a2:	18 87       	std	Y+8, r17	; 0x08
    41a4:	c8 1a       	sub	r12, r24
    41a6:	d9 0a       	sbc	r13, r25
    41a8:	dc 82       	std	Y+4, r13	; 0x04
    41aa:	cb 82       	std	Y+3, r12	; 0x03
    41ac:	ba 82       	std	Y+2, r11	; 0x02
    41ae:	ce 01       	movw	r24, r28
    41b0:	01 96       	adiw	r24, 0x01	; 1
    41b2:	0e 94 82 21 	call	0x4304	; 0x4304 <__pack_f>
    41b6:	28 96       	adiw	r28, 0x08	; 8
    41b8:	e9 e0       	ldi	r30, 0x09	; 9
    41ba:	0c 94 a2 26 	jmp	0x4d44	; 0x4d44 <__epilogue_restores__+0x12>

000041be <__fixsfsi>:
    41be:	ac e0       	ldi	r26, 0x0C	; 12
    41c0:	b0 e0       	ldi	r27, 0x00	; 0
    41c2:	e5 ee       	ldi	r30, 0xE5	; 229
    41c4:	f0 e2       	ldi	r31, 0x20	; 32
    41c6:	0c 94 8d 26 	jmp	0x4d1a	; 0x4d1a <__prologue_saves__+0x20>
    41ca:	69 83       	std	Y+1, r22	; 0x01
    41cc:	7a 83       	std	Y+2, r23	; 0x02
    41ce:	8b 83       	std	Y+3, r24	; 0x03
    41d0:	9c 83       	std	Y+4, r25	; 0x04
    41d2:	ce 01       	movw	r24, r28
    41d4:	01 96       	adiw	r24, 0x01	; 1
    41d6:	be 01       	movw	r22, r28
    41d8:	6b 5f       	subi	r22, 0xFB	; 251
    41da:	7f 4f       	sbci	r23, 0xFF	; 255
    41dc:	0e 94 57 22 	call	0x44ae	; 0x44ae <__unpack_f>
    41e0:	8d 81       	ldd	r24, Y+5	; 0x05
    41e2:	82 30       	cpi	r24, 0x02	; 2
    41e4:	61 f1       	breq	.+88     	; 0x423e <__fixsfsi+0x80>
    41e6:	82 30       	cpi	r24, 0x02	; 2
    41e8:	50 f1       	brcs	.+84     	; 0x423e <__fixsfsi+0x80>
    41ea:	84 30       	cpi	r24, 0x04	; 4
    41ec:	21 f4       	brne	.+8      	; 0x41f6 <__fixsfsi+0x38>
    41ee:	8e 81       	ldd	r24, Y+6	; 0x06
    41f0:	88 23       	and	r24, r24
    41f2:	51 f1       	breq	.+84     	; 0x4248 <__fixsfsi+0x8a>
    41f4:	2e c0       	rjmp	.+92     	; 0x4252 <__fixsfsi+0x94>
    41f6:	2f 81       	ldd	r18, Y+7	; 0x07
    41f8:	38 85       	ldd	r19, Y+8	; 0x08
    41fa:	37 fd       	sbrc	r19, 7
    41fc:	20 c0       	rjmp	.+64     	; 0x423e <__fixsfsi+0x80>
    41fe:	6e 81       	ldd	r22, Y+6	; 0x06
    4200:	2f 31       	cpi	r18, 0x1F	; 31
    4202:	31 05       	cpc	r19, r1
    4204:	1c f0       	brlt	.+6      	; 0x420c <__fixsfsi+0x4e>
    4206:	66 23       	and	r22, r22
    4208:	f9 f0       	breq	.+62     	; 0x4248 <__fixsfsi+0x8a>
    420a:	23 c0       	rjmp	.+70     	; 0x4252 <__fixsfsi+0x94>
    420c:	8e e1       	ldi	r24, 0x1E	; 30
    420e:	90 e0       	ldi	r25, 0x00	; 0
    4210:	82 1b       	sub	r24, r18
    4212:	93 0b       	sbc	r25, r19
    4214:	29 85       	ldd	r18, Y+9	; 0x09
    4216:	3a 85       	ldd	r19, Y+10	; 0x0a
    4218:	4b 85       	ldd	r20, Y+11	; 0x0b
    421a:	5c 85       	ldd	r21, Y+12	; 0x0c
    421c:	04 c0       	rjmp	.+8      	; 0x4226 <__fixsfsi+0x68>
    421e:	56 95       	lsr	r21
    4220:	47 95       	ror	r20
    4222:	37 95       	ror	r19
    4224:	27 95       	ror	r18
    4226:	8a 95       	dec	r24
    4228:	d2 f7       	brpl	.-12     	; 0x421e <__fixsfsi+0x60>
    422a:	66 23       	and	r22, r22
    422c:	b1 f0       	breq	.+44     	; 0x425a <__fixsfsi+0x9c>
    422e:	50 95       	com	r21
    4230:	40 95       	com	r20
    4232:	30 95       	com	r19
    4234:	21 95       	neg	r18
    4236:	3f 4f       	sbci	r19, 0xFF	; 255
    4238:	4f 4f       	sbci	r20, 0xFF	; 255
    423a:	5f 4f       	sbci	r21, 0xFF	; 255
    423c:	0e c0       	rjmp	.+28     	; 0x425a <__fixsfsi+0x9c>
    423e:	20 e0       	ldi	r18, 0x00	; 0
    4240:	30 e0       	ldi	r19, 0x00	; 0
    4242:	40 e0       	ldi	r20, 0x00	; 0
    4244:	50 e0       	ldi	r21, 0x00	; 0
    4246:	09 c0       	rjmp	.+18     	; 0x425a <__fixsfsi+0x9c>
    4248:	2f ef       	ldi	r18, 0xFF	; 255
    424a:	3f ef       	ldi	r19, 0xFF	; 255
    424c:	4f ef       	ldi	r20, 0xFF	; 255
    424e:	5f e7       	ldi	r21, 0x7F	; 127
    4250:	04 c0       	rjmp	.+8      	; 0x425a <__fixsfsi+0x9c>
    4252:	20 e0       	ldi	r18, 0x00	; 0
    4254:	30 e0       	ldi	r19, 0x00	; 0
    4256:	40 e0       	ldi	r20, 0x00	; 0
    4258:	50 e8       	ldi	r21, 0x80	; 128
    425a:	b9 01       	movw	r22, r18
    425c:	ca 01       	movw	r24, r20
    425e:	2c 96       	adiw	r28, 0x0c	; 12
    4260:	e2 e0       	ldi	r30, 0x02	; 2
    4262:	0c 94 a9 26 	jmp	0x4d52	; 0x4d52 <__epilogue_restores__+0x20>

00004266 <__clzsi2>:
    4266:	ef 92       	push	r14
    4268:	ff 92       	push	r15
    426a:	0f 93       	push	r16
    426c:	1f 93       	push	r17
    426e:	7b 01       	movw	r14, r22
    4270:	8c 01       	movw	r16, r24
    4272:	80 e0       	ldi	r24, 0x00	; 0
    4274:	e8 16       	cp	r14, r24
    4276:	80 e0       	ldi	r24, 0x00	; 0
    4278:	f8 06       	cpc	r15, r24
    427a:	81 e0       	ldi	r24, 0x01	; 1
    427c:	08 07       	cpc	r16, r24
    427e:	80 e0       	ldi	r24, 0x00	; 0
    4280:	18 07       	cpc	r17, r24
    4282:	88 f4       	brcc	.+34     	; 0x42a6 <__clzsi2+0x40>
    4284:	8f ef       	ldi	r24, 0xFF	; 255
    4286:	e8 16       	cp	r14, r24
    4288:	f1 04       	cpc	r15, r1
    428a:	01 05       	cpc	r16, r1
    428c:	11 05       	cpc	r17, r1
    428e:	31 f0       	breq	.+12     	; 0x429c <__clzsi2+0x36>
    4290:	28 f0       	brcs	.+10     	; 0x429c <__clzsi2+0x36>
    4292:	88 e0       	ldi	r24, 0x08	; 8
    4294:	90 e0       	ldi	r25, 0x00	; 0
    4296:	a0 e0       	ldi	r26, 0x00	; 0
    4298:	b0 e0       	ldi	r27, 0x00	; 0
    429a:	17 c0       	rjmp	.+46     	; 0x42ca <__clzsi2+0x64>
    429c:	80 e0       	ldi	r24, 0x00	; 0
    429e:	90 e0       	ldi	r25, 0x00	; 0
    42a0:	a0 e0       	ldi	r26, 0x00	; 0
    42a2:	b0 e0       	ldi	r27, 0x00	; 0
    42a4:	12 c0       	rjmp	.+36     	; 0x42ca <__clzsi2+0x64>
    42a6:	80 e0       	ldi	r24, 0x00	; 0
    42a8:	e8 16       	cp	r14, r24
    42aa:	80 e0       	ldi	r24, 0x00	; 0
    42ac:	f8 06       	cpc	r15, r24
    42ae:	80 e0       	ldi	r24, 0x00	; 0
    42b0:	08 07       	cpc	r16, r24
    42b2:	81 e0       	ldi	r24, 0x01	; 1
    42b4:	18 07       	cpc	r17, r24
    42b6:	28 f0       	brcs	.+10     	; 0x42c2 <__clzsi2+0x5c>
    42b8:	88 e1       	ldi	r24, 0x18	; 24
    42ba:	90 e0       	ldi	r25, 0x00	; 0
    42bc:	a0 e0       	ldi	r26, 0x00	; 0
    42be:	b0 e0       	ldi	r27, 0x00	; 0
    42c0:	04 c0       	rjmp	.+8      	; 0x42ca <__clzsi2+0x64>
    42c2:	80 e1       	ldi	r24, 0x10	; 16
    42c4:	90 e0       	ldi	r25, 0x00	; 0
    42c6:	a0 e0       	ldi	r26, 0x00	; 0
    42c8:	b0 e0       	ldi	r27, 0x00	; 0
    42ca:	20 e2       	ldi	r18, 0x20	; 32
    42cc:	30 e0       	ldi	r19, 0x00	; 0
    42ce:	40 e0       	ldi	r20, 0x00	; 0
    42d0:	50 e0       	ldi	r21, 0x00	; 0
    42d2:	28 1b       	sub	r18, r24
    42d4:	39 0b       	sbc	r19, r25
    42d6:	4a 0b       	sbc	r20, r26
    42d8:	5b 0b       	sbc	r21, r27
    42da:	04 c0       	rjmp	.+8      	; 0x42e4 <__clzsi2+0x7e>
    42dc:	16 95       	lsr	r17
    42de:	07 95       	ror	r16
    42e0:	f7 94       	ror	r15
    42e2:	e7 94       	ror	r14
    42e4:	8a 95       	dec	r24
    42e6:	d2 f7       	brpl	.-12     	; 0x42dc <__clzsi2+0x76>
    42e8:	f7 01       	movw	r30, r14
    42ea:	eb 5d       	subi	r30, 0xDB	; 219
    42ec:	fe 4f       	sbci	r31, 0xFE	; 254
    42ee:	80 81       	ld	r24, Z
    42f0:	28 1b       	sub	r18, r24
    42f2:	31 09       	sbc	r19, r1
    42f4:	41 09       	sbc	r20, r1
    42f6:	51 09       	sbc	r21, r1
    42f8:	c9 01       	movw	r24, r18
    42fa:	1f 91       	pop	r17
    42fc:	0f 91       	pop	r16
    42fe:	ff 90       	pop	r15
    4300:	ef 90       	pop	r14
    4302:	08 95       	ret

00004304 <__pack_f>:
    4304:	df 92       	push	r13
    4306:	ef 92       	push	r14
    4308:	ff 92       	push	r15
    430a:	0f 93       	push	r16
    430c:	1f 93       	push	r17
    430e:	fc 01       	movw	r30, r24
    4310:	e4 80       	ldd	r14, Z+4	; 0x04
    4312:	f5 80       	ldd	r15, Z+5	; 0x05
    4314:	06 81       	ldd	r16, Z+6	; 0x06
    4316:	17 81       	ldd	r17, Z+7	; 0x07
    4318:	d1 80       	ldd	r13, Z+1	; 0x01
    431a:	80 81       	ld	r24, Z
    431c:	82 30       	cpi	r24, 0x02	; 2
    431e:	48 f4       	brcc	.+18     	; 0x4332 <__pack_f+0x2e>
    4320:	80 e0       	ldi	r24, 0x00	; 0
    4322:	90 e0       	ldi	r25, 0x00	; 0
    4324:	a0 e1       	ldi	r26, 0x10	; 16
    4326:	b0 e0       	ldi	r27, 0x00	; 0
    4328:	e8 2a       	or	r14, r24
    432a:	f9 2a       	or	r15, r25
    432c:	0a 2b       	or	r16, r26
    432e:	1b 2b       	or	r17, r27
    4330:	a5 c0       	rjmp	.+330    	; 0x447c <__pack_f+0x178>
    4332:	84 30       	cpi	r24, 0x04	; 4
    4334:	09 f4       	brne	.+2      	; 0x4338 <__pack_f+0x34>
    4336:	9f c0       	rjmp	.+318    	; 0x4476 <__pack_f+0x172>
    4338:	82 30       	cpi	r24, 0x02	; 2
    433a:	21 f4       	brne	.+8      	; 0x4344 <__pack_f+0x40>
    433c:	ee 24       	eor	r14, r14
    433e:	ff 24       	eor	r15, r15
    4340:	87 01       	movw	r16, r14
    4342:	05 c0       	rjmp	.+10     	; 0x434e <__pack_f+0x4a>
    4344:	e1 14       	cp	r14, r1
    4346:	f1 04       	cpc	r15, r1
    4348:	01 05       	cpc	r16, r1
    434a:	11 05       	cpc	r17, r1
    434c:	19 f4       	brne	.+6      	; 0x4354 <__pack_f+0x50>
    434e:	e0 e0       	ldi	r30, 0x00	; 0
    4350:	f0 e0       	ldi	r31, 0x00	; 0
    4352:	96 c0       	rjmp	.+300    	; 0x4480 <__pack_f+0x17c>
    4354:	62 81       	ldd	r22, Z+2	; 0x02
    4356:	73 81       	ldd	r23, Z+3	; 0x03
    4358:	9f ef       	ldi	r25, 0xFF	; 255
    435a:	62 38       	cpi	r22, 0x82	; 130
    435c:	79 07       	cpc	r23, r25
    435e:	0c f0       	brlt	.+2      	; 0x4362 <__pack_f+0x5e>
    4360:	5b c0       	rjmp	.+182    	; 0x4418 <__pack_f+0x114>
    4362:	22 e8       	ldi	r18, 0x82	; 130
    4364:	3f ef       	ldi	r19, 0xFF	; 255
    4366:	26 1b       	sub	r18, r22
    4368:	37 0b       	sbc	r19, r23
    436a:	2a 31       	cpi	r18, 0x1A	; 26
    436c:	31 05       	cpc	r19, r1
    436e:	2c f0       	brlt	.+10     	; 0x437a <__pack_f+0x76>
    4370:	20 e0       	ldi	r18, 0x00	; 0
    4372:	30 e0       	ldi	r19, 0x00	; 0
    4374:	40 e0       	ldi	r20, 0x00	; 0
    4376:	50 e0       	ldi	r21, 0x00	; 0
    4378:	2a c0       	rjmp	.+84     	; 0x43ce <__pack_f+0xca>
    437a:	b8 01       	movw	r22, r16
    437c:	a7 01       	movw	r20, r14
    437e:	02 2e       	mov	r0, r18
    4380:	04 c0       	rjmp	.+8      	; 0x438a <__pack_f+0x86>
    4382:	76 95       	lsr	r23
    4384:	67 95       	ror	r22
    4386:	57 95       	ror	r21
    4388:	47 95       	ror	r20
    438a:	0a 94       	dec	r0
    438c:	d2 f7       	brpl	.-12     	; 0x4382 <__pack_f+0x7e>
    438e:	81 e0       	ldi	r24, 0x01	; 1
    4390:	90 e0       	ldi	r25, 0x00	; 0
    4392:	a0 e0       	ldi	r26, 0x00	; 0
    4394:	b0 e0       	ldi	r27, 0x00	; 0
    4396:	04 c0       	rjmp	.+8      	; 0x43a0 <__pack_f+0x9c>
    4398:	88 0f       	add	r24, r24
    439a:	99 1f       	adc	r25, r25
    439c:	aa 1f       	adc	r26, r26
    439e:	bb 1f       	adc	r27, r27
    43a0:	2a 95       	dec	r18
    43a2:	d2 f7       	brpl	.-12     	; 0x4398 <__pack_f+0x94>
    43a4:	01 97       	sbiw	r24, 0x01	; 1
    43a6:	a1 09       	sbc	r26, r1
    43a8:	b1 09       	sbc	r27, r1
    43aa:	8e 21       	and	r24, r14
    43ac:	9f 21       	and	r25, r15
    43ae:	a0 23       	and	r26, r16
    43b0:	b1 23       	and	r27, r17
    43b2:	00 97       	sbiw	r24, 0x00	; 0
    43b4:	a1 05       	cpc	r26, r1
    43b6:	b1 05       	cpc	r27, r1
    43b8:	21 f0       	breq	.+8      	; 0x43c2 <__pack_f+0xbe>
    43ba:	81 e0       	ldi	r24, 0x01	; 1
    43bc:	90 e0       	ldi	r25, 0x00	; 0
    43be:	a0 e0       	ldi	r26, 0x00	; 0
    43c0:	b0 e0       	ldi	r27, 0x00	; 0
    43c2:	9a 01       	movw	r18, r20
    43c4:	ab 01       	movw	r20, r22
    43c6:	28 2b       	or	r18, r24
    43c8:	39 2b       	or	r19, r25
    43ca:	4a 2b       	or	r20, r26
    43cc:	5b 2b       	or	r21, r27
    43ce:	da 01       	movw	r26, r20
    43d0:	c9 01       	movw	r24, r18
    43d2:	8f 77       	andi	r24, 0x7F	; 127
    43d4:	90 70       	andi	r25, 0x00	; 0
    43d6:	a0 70       	andi	r26, 0x00	; 0
    43d8:	b0 70       	andi	r27, 0x00	; 0
    43da:	80 34       	cpi	r24, 0x40	; 64
    43dc:	91 05       	cpc	r25, r1
    43de:	a1 05       	cpc	r26, r1
    43e0:	b1 05       	cpc	r27, r1
    43e2:	39 f4       	brne	.+14     	; 0x43f2 <__pack_f+0xee>
    43e4:	27 ff       	sbrs	r18, 7
    43e6:	09 c0       	rjmp	.+18     	; 0x43fa <__pack_f+0xf6>
    43e8:	20 5c       	subi	r18, 0xC0	; 192
    43ea:	3f 4f       	sbci	r19, 0xFF	; 255
    43ec:	4f 4f       	sbci	r20, 0xFF	; 255
    43ee:	5f 4f       	sbci	r21, 0xFF	; 255
    43f0:	04 c0       	rjmp	.+8      	; 0x43fa <__pack_f+0xf6>
    43f2:	21 5c       	subi	r18, 0xC1	; 193
    43f4:	3f 4f       	sbci	r19, 0xFF	; 255
    43f6:	4f 4f       	sbci	r20, 0xFF	; 255
    43f8:	5f 4f       	sbci	r21, 0xFF	; 255
    43fa:	e0 e0       	ldi	r30, 0x00	; 0
    43fc:	f0 e0       	ldi	r31, 0x00	; 0
    43fe:	20 30       	cpi	r18, 0x00	; 0
    4400:	a0 e0       	ldi	r26, 0x00	; 0
    4402:	3a 07       	cpc	r19, r26
    4404:	a0 e0       	ldi	r26, 0x00	; 0
    4406:	4a 07       	cpc	r20, r26
    4408:	a0 e4       	ldi	r26, 0x40	; 64
    440a:	5a 07       	cpc	r21, r26
    440c:	10 f0       	brcs	.+4      	; 0x4412 <__pack_f+0x10e>
    440e:	e1 e0       	ldi	r30, 0x01	; 1
    4410:	f0 e0       	ldi	r31, 0x00	; 0
    4412:	79 01       	movw	r14, r18
    4414:	8a 01       	movw	r16, r20
    4416:	27 c0       	rjmp	.+78     	; 0x4466 <__pack_f+0x162>
    4418:	60 38       	cpi	r22, 0x80	; 128
    441a:	71 05       	cpc	r23, r1
    441c:	64 f5       	brge	.+88     	; 0x4476 <__pack_f+0x172>
    441e:	fb 01       	movw	r30, r22
    4420:	e1 58       	subi	r30, 0x81	; 129
    4422:	ff 4f       	sbci	r31, 0xFF	; 255
    4424:	d8 01       	movw	r26, r16
    4426:	c7 01       	movw	r24, r14
    4428:	8f 77       	andi	r24, 0x7F	; 127
    442a:	90 70       	andi	r25, 0x00	; 0
    442c:	a0 70       	andi	r26, 0x00	; 0
    442e:	b0 70       	andi	r27, 0x00	; 0
    4430:	80 34       	cpi	r24, 0x40	; 64
    4432:	91 05       	cpc	r25, r1
    4434:	a1 05       	cpc	r26, r1
    4436:	b1 05       	cpc	r27, r1
    4438:	39 f4       	brne	.+14     	; 0x4448 <__pack_f+0x144>
    443a:	e7 fe       	sbrs	r14, 7
    443c:	0d c0       	rjmp	.+26     	; 0x4458 <__pack_f+0x154>
    443e:	80 e4       	ldi	r24, 0x40	; 64
    4440:	90 e0       	ldi	r25, 0x00	; 0
    4442:	a0 e0       	ldi	r26, 0x00	; 0
    4444:	b0 e0       	ldi	r27, 0x00	; 0
    4446:	04 c0       	rjmp	.+8      	; 0x4450 <__pack_f+0x14c>
    4448:	8f e3       	ldi	r24, 0x3F	; 63
    444a:	90 e0       	ldi	r25, 0x00	; 0
    444c:	a0 e0       	ldi	r26, 0x00	; 0
    444e:	b0 e0       	ldi	r27, 0x00	; 0
    4450:	e8 0e       	add	r14, r24
    4452:	f9 1e       	adc	r15, r25
    4454:	0a 1f       	adc	r16, r26
    4456:	1b 1f       	adc	r17, r27
    4458:	17 ff       	sbrs	r17, 7
    445a:	05 c0       	rjmp	.+10     	; 0x4466 <__pack_f+0x162>
    445c:	16 95       	lsr	r17
    445e:	07 95       	ror	r16
    4460:	f7 94       	ror	r15
    4462:	e7 94       	ror	r14
    4464:	31 96       	adiw	r30, 0x01	; 1
    4466:	87 e0       	ldi	r24, 0x07	; 7
    4468:	16 95       	lsr	r17
    446a:	07 95       	ror	r16
    446c:	f7 94       	ror	r15
    446e:	e7 94       	ror	r14
    4470:	8a 95       	dec	r24
    4472:	d1 f7       	brne	.-12     	; 0x4468 <__pack_f+0x164>
    4474:	05 c0       	rjmp	.+10     	; 0x4480 <__pack_f+0x17c>
    4476:	ee 24       	eor	r14, r14
    4478:	ff 24       	eor	r15, r15
    447a:	87 01       	movw	r16, r14
    447c:	ef ef       	ldi	r30, 0xFF	; 255
    447e:	f0 e0       	ldi	r31, 0x00	; 0
    4480:	6e 2f       	mov	r22, r30
    4482:	67 95       	ror	r22
    4484:	66 27       	eor	r22, r22
    4486:	67 95       	ror	r22
    4488:	90 2f       	mov	r25, r16
    448a:	9f 77       	andi	r25, 0x7F	; 127
    448c:	d7 94       	ror	r13
    448e:	dd 24       	eor	r13, r13
    4490:	d7 94       	ror	r13
    4492:	8e 2f       	mov	r24, r30
    4494:	86 95       	lsr	r24
    4496:	49 2f       	mov	r20, r25
    4498:	46 2b       	or	r20, r22
    449a:	58 2f       	mov	r21, r24
    449c:	5d 29       	or	r21, r13
    449e:	b7 01       	movw	r22, r14
    44a0:	ca 01       	movw	r24, r20
    44a2:	1f 91       	pop	r17
    44a4:	0f 91       	pop	r16
    44a6:	ff 90       	pop	r15
    44a8:	ef 90       	pop	r14
    44aa:	df 90       	pop	r13
    44ac:	08 95       	ret

000044ae <__unpack_f>:
    44ae:	fc 01       	movw	r30, r24
    44b0:	db 01       	movw	r26, r22
    44b2:	40 81       	ld	r20, Z
    44b4:	51 81       	ldd	r21, Z+1	; 0x01
    44b6:	22 81       	ldd	r18, Z+2	; 0x02
    44b8:	62 2f       	mov	r22, r18
    44ba:	6f 77       	andi	r22, 0x7F	; 127
    44bc:	70 e0       	ldi	r23, 0x00	; 0
    44be:	22 1f       	adc	r18, r18
    44c0:	22 27       	eor	r18, r18
    44c2:	22 1f       	adc	r18, r18
    44c4:	93 81       	ldd	r25, Z+3	; 0x03
    44c6:	89 2f       	mov	r24, r25
    44c8:	88 0f       	add	r24, r24
    44ca:	82 2b       	or	r24, r18
    44cc:	28 2f       	mov	r18, r24
    44ce:	30 e0       	ldi	r19, 0x00	; 0
    44d0:	99 1f       	adc	r25, r25
    44d2:	99 27       	eor	r25, r25
    44d4:	99 1f       	adc	r25, r25
    44d6:	11 96       	adiw	r26, 0x01	; 1
    44d8:	9c 93       	st	X, r25
    44da:	11 97       	sbiw	r26, 0x01	; 1
    44dc:	21 15       	cp	r18, r1
    44de:	31 05       	cpc	r19, r1
    44e0:	a9 f5       	brne	.+106    	; 0x454c <__unpack_f+0x9e>
    44e2:	41 15       	cp	r20, r1
    44e4:	51 05       	cpc	r21, r1
    44e6:	61 05       	cpc	r22, r1
    44e8:	71 05       	cpc	r23, r1
    44ea:	11 f4       	brne	.+4      	; 0x44f0 <__unpack_f+0x42>
    44ec:	82 e0       	ldi	r24, 0x02	; 2
    44ee:	37 c0       	rjmp	.+110    	; 0x455e <__unpack_f+0xb0>
    44f0:	82 e8       	ldi	r24, 0x82	; 130
    44f2:	9f ef       	ldi	r25, 0xFF	; 255
    44f4:	13 96       	adiw	r26, 0x03	; 3
    44f6:	9c 93       	st	X, r25
    44f8:	8e 93       	st	-X, r24
    44fa:	12 97       	sbiw	r26, 0x02	; 2
    44fc:	9a 01       	movw	r18, r20
    44fe:	ab 01       	movw	r20, r22
    4500:	67 e0       	ldi	r22, 0x07	; 7
    4502:	22 0f       	add	r18, r18
    4504:	33 1f       	adc	r19, r19
    4506:	44 1f       	adc	r20, r20
    4508:	55 1f       	adc	r21, r21
    450a:	6a 95       	dec	r22
    450c:	d1 f7       	brne	.-12     	; 0x4502 <__unpack_f+0x54>
    450e:	83 e0       	ldi	r24, 0x03	; 3
    4510:	8c 93       	st	X, r24
    4512:	0d c0       	rjmp	.+26     	; 0x452e <__unpack_f+0x80>
    4514:	22 0f       	add	r18, r18
    4516:	33 1f       	adc	r19, r19
    4518:	44 1f       	adc	r20, r20
    451a:	55 1f       	adc	r21, r21
    451c:	12 96       	adiw	r26, 0x02	; 2
    451e:	8d 91       	ld	r24, X+
    4520:	9c 91       	ld	r25, X
    4522:	13 97       	sbiw	r26, 0x03	; 3
    4524:	01 97       	sbiw	r24, 0x01	; 1
    4526:	13 96       	adiw	r26, 0x03	; 3
    4528:	9c 93       	st	X, r25
    452a:	8e 93       	st	-X, r24
    452c:	12 97       	sbiw	r26, 0x02	; 2
    452e:	20 30       	cpi	r18, 0x00	; 0
    4530:	80 e0       	ldi	r24, 0x00	; 0
    4532:	38 07       	cpc	r19, r24
    4534:	80 e0       	ldi	r24, 0x00	; 0
    4536:	48 07       	cpc	r20, r24
    4538:	80 e4       	ldi	r24, 0x40	; 64
    453a:	58 07       	cpc	r21, r24
    453c:	58 f3       	brcs	.-42     	; 0x4514 <__unpack_f+0x66>
    453e:	14 96       	adiw	r26, 0x04	; 4
    4540:	2d 93       	st	X+, r18
    4542:	3d 93       	st	X+, r19
    4544:	4d 93       	st	X+, r20
    4546:	5c 93       	st	X, r21
    4548:	17 97       	sbiw	r26, 0x07	; 7
    454a:	08 95       	ret
    454c:	2f 3f       	cpi	r18, 0xFF	; 255
    454e:	31 05       	cpc	r19, r1
    4550:	79 f4       	brne	.+30     	; 0x4570 <__unpack_f+0xc2>
    4552:	41 15       	cp	r20, r1
    4554:	51 05       	cpc	r21, r1
    4556:	61 05       	cpc	r22, r1
    4558:	71 05       	cpc	r23, r1
    455a:	19 f4       	brne	.+6      	; 0x4562 <__unpack_f+0xb4>
    455c:	84 e0       	ldi	r24, 0x04	; 4
    455e:	8c 93       	st	X, r24
    4560:	08 95       	ret
    4562:	64 ff       	sbrs	r22, 4
    4564:	03 c0       	rjmp	.+6      	; 0x456c <__unpack_f+0xbe>
    4566:	81 e0       	ldi	r24, 0x01	; 1
    4568:	8c 93       	st	X, r24
    456a:	12 c0       	rjmp	.+36     	; 0x4590 <__unpack_f+0xe2>
    456c:	1c 92       	st	X, r1
    456e:	10 c0       	rjmp	.+32     	; 0x4590 <__unpack_f+0xe2>
    4570:	2f 57       	subi	r18, 0x7F	; 127
    4572:	30 40       	sbci	r19, 0x00	; 0
    4574:	13 96       	adiw	r26, 0x03	; 3
    4576:	3c 93       	st	X, r19
    4578:	2e 93       	st	-X, r18
    457a:	12 97       	sbiw	r26, 0x02	; 2
    457c:	83 e0       	ldi	r24, 0x03	; 3
    457e:	8c 93       	st	X, r24
    4580:	87 e0       	ldi	r24, 0x07	; 7
    4582:	44 0f       	add	r20, r20
    4584:	55 1f       	adc	r21, r21
    4586:	66 1f       	adc	r22, r22
    4588:	77 1f       	adc	r23, r23
    458a:	8a 95       	dec	r24
    458c:	d1 f7       	brne	.-12     	; 0x4582 <__unpack_f+0xd4>
    458e:	70 64       	ori	r23, 0x40	; 64
    4590:	14 96       	adiw	r26, 0x04	; 4
    4592:	4d 93       	st	X+, r20
    4594:	5d 93       	st	X+, r21
    4596:	6d 93       	st	X+, r22
    4598:	7c 93       	st	X, r23
    459a:	17 97       	sbiw	r26, 0x07	; 7
    459c:	08 95       	ret

0000459e <__fpcmp_parts_f>:
    459e:	1f 93       	push	r17
    45a0:	dc 01       	movw	r26, r24
    45a2:	fb 01       	movw	r30, r22
    45a4:	9c 91       	ld	r25, X
    45a6:	92 30       	cpi	r25, 0x02	; 2
    45a8:	08 f4       	brcc	.+2      	; 0x45ac <__fpcmp_parts_f+0xe>
    45aa:	47 c0       	rjmp	.+142    	; 0x463a <__fpcmp_parts_f+0x9c>
    45ac:	80 81       	ld	r24, Z
    45ae:	82 30       	cpi	r24, 0x02	; 2
    45b0:	08 f4       	brcc	.+2      	; 0x45b4 <__fpcmp_parts_f+0x16>
    45b2:	43 c0       	rjmp	.+134    	; 0x463a <__fpcmp_parts_f+0x9c>
    45b4:	94 30       	cpi	r25, 0x04	; 4
    45b6:	51 f4       	brne	.+20     	; 0x45cc <__fpcmp_parts_f+0x2e>
    45b8:	11 96       	adiw	r26, 0x01	; 1
    45ba:	1c 91       	ld	r17, X
    45bc:	84 30       	cpi	r24, 0x04	; 4
    45be:	99 f5       	brne	.+102    	; 0x4626 <__fpcmp_parts_f+0x88>
    45c0:	81 81       	ldd	r24, Z+1	; 0x01
    45c2:	68 2f       	mov	r22, r24
    45c4:	70 e0       	ldi	r23, 0x00	; 0
    45c6:	61 1b       	sub	r22, r17
    45c8:	71 09       	sbc	r23, r1
    45ca:	3f c0       	rjmp	.+126    	; 0x464a <__fpcmp_parts_f+0xac>
    45cc:	84 30       	cpi	r24, 0x04	; 4
    45ce:	21 f0       	breq	.+8      	; 0x45d8 <__fpcmp_parts_f+0x3a>
    45d0:	92 30       	cpi	r25, 0x02	; 2
    45d2:	31 f4       	brne	.+12     	; 0x45e0 <__fpcmp_parts_f+0x42>
    45d4:	82 30       	cpi	r24, 0x02	; 2
    45d6:	b9 f1       	breq	.+110    	; 0x4646 <__fpcmp_parts_f+0xa8>
    45d8:	81 81       	ldd	r24, Z+1	; 0x01
    45da:	88 23       	and	r24, r24
    45dc:	89 f1       	breq	.+98     	; 0x4640 <__fpcmp_parts_f+0xa2>
    45de:	2d c0       	rjmp	.+90     	; 0x463a <__fpcmp_parts_f+0x9c>
    45e0:	11 96       	adiw	r26, 0x01	; 1
    45e2:	1c 91       	ld	r17, X
    45e4:	11 97       	sbiw	r26, 0x01	; 1
    45e6:	82 30       	cpi	r24, 0x02	; 2
    45e8:	f1 f0       	breq	.+60     	; 0x4626 <__fpcmp_parts_f+0x88>
    45ea:	81 81       	ldd	r24, Z+1	; 0x01
    45ec:	18 17       	cp	r17, r24
    45ee:	d9 f4       	brne	.+54     	; 0x4626 <__fpcmp_parts_f+0x88>
    45f0:	12 96       	adiw	r26, 0x02	; 2
    45f2:	2d 91       	ld	r18, X+
    45f4:	3c 91       	ld	r19, X
    45f6:	13 97       	sbiw	r26, 0x03	; 3
    45f8:	82 81       	ldd	r24, Z+2	; 0x02
    45fa:	93 81       	ldd	r25, Z+3	; 0x03
    45fc:	82 17       	cp	r24, r18
    45fe:	93 07       	cpc	r25, r19
    4600:	94 f0       	brlt	.+36     	; 0x4626 <__fpcmp_parts_f+0x88>
    4602:	28 17       	cp	r18, r24
    4604:	39 07       	cpc	r19, r25
    4606:	bc f0       	brlt	.+46     	; 0x4636 <__fpcmp_parts_f+0x98>
    4608:	14 96       	adiw	r26, 0x04	; 4
    460a:	8d 91       	ld	r24, X+
    460c:	9d 91       	ld	r25, X+
    460e:	0d 90       	ld	r0, X+
    4610:	bc 91       	ld	r27, X
    4612:	a0 2d       	mov	r26, r0
    4614:	24 81       	ldd	r18, Z+4	; 0x04
    4616:	35 81       	ldd	r19, Z+5	; 0x05
    4618:	46 81       	ldd	r20, Z+6	; 0x06
    461a:	57 81       	ldd	r21, Z+7	; 0x07
    461c:	28 17       	cp	r18, r24
    461e:	39 07       	cpc	r19, r25
    4620:	4a 07       	cpc	r20, r26
    4622:	5b 07       	cpc	r21, r27
    4624:	18 f4       	brcc	.+6      	; 0x462c <__fpcmp_parts_f+0x8e>
    4626:	11 23       	and	r17, r17
    4628:	41 f0       	breq	.+16     	; 0x463a <__fpcmp_parts_f+0x9c>
    462a:	0a c0       	rjmp	.+20     	; 0x4640 <__fpcmp_parts_f+0xa2>
    462c:	82 17       	cp	r24, r18
    462e:	93 07       	cpc	r25, r19
    4630:	a4 07       	cpc	r26, r20
    4632:	b5 07       	cpc	r27, r21
    4634:	40 f4       	brcc	.+16     	; 0x4646 <__fpcmp_parts_f+0xa8>
    4636:	11 23       	and	r17, r17
    4638:	19 f0       	breq	.+6      	; 0x4640 <__fpcmp_parts_f+0xa2>
    463a:	61 e0       	ldi	r22, 0x01	; 1
    463c:	70 e0       	ldi	r23, 0x00	; 0
    463e:	05 c0       	rjmp	.+10     	; 0x464a <__fpcmp_parts_f+0xac>
    4640:	6f ef       	ldi	r22, 0xFF	; 255
    4642:	7f ef       	ldi	r23, 0xFF	; 255
    4644:	02 c0       	rjmp	.+4      	; 0x464a <__fpcmp_parts_f+0xac>
    4646:	60 e0       	ldi	r22, 0x00	; 0
    4648:	70 e0       	ldi	r23, 0x00	; 0
    464a:	cb 01       	movw	r24, r22
    464c:	1f 91       	pop	r17
    464e:	08 95       	ret

00004650 <memcpy>:
    4650:	fb 01       	movw	r30, r22
    4652:	dc 01       	movw	r26, r24
    4654:	02 c0       	rjmp	.+4      	; 0x465a <memcpy+0xa>
    4656:	01 90       	ld	r0, Z+
    4658:	0d 92       	st	X+, r0
    465a:	41 50       	subi	r20, 0x01	; 1
    465c:	50 40       	sbci	r21, 0x00	; 0
    465e:	d8 f7       	brcc	.-10     	; 0x4656 <memcpy+0x6>
    4660:	08 95       	ret

00004662 <memset>:
    4662:	dc 01       	movw	r26, r24
    4664:	01 c0       	rjmp	.+2      	; 0x4668 <memset+0x6>
    4666:	6d 93       	st	X+, r22
    4668:	41 50       	subi	r20, 0x01	; 1
    466a:	50 40       	sbci	r21, 0x00	; 0
    466c:	e0 f7       	brcc	.-8      	; 0x4666 <memset+0x4>
    466e:	08 95       	ret

00004670 <strchr>:
    4670:	fc 01       	movw	r30, r24
    4672:	81 91       	ld	r24, Z+
    4674:	86 17       	cp	r24, r22
    4676:	21 f0       	breq	.+8      	; 0x4680 <strchr+0x10>
    4678:	88 23       	and	r24, r24
    467a:	d9 f7       	brne	.-10     	; 0x4672 <strchr+0x2>
    467c:	99 27       	eor	r25, r25
    467e:	08 95       	ret
    4680:	31 97       	sbiw	r30, 0x01	; 1
    4682:	cf 01       	movw	r24, r30
    4684:	08 95       	ret

00004686 <strcmp>:
    4686:	fb 01       	movw	r30, r22
    4688:	dc 01       	movw	r26, r24
    468a:	8d 91       	ld	r24, X+
    468c:	01 90       	ld	r0, Z+
    468e:	80 19       	sub	r24, r0
    4690:	01 10       	cpse	r0, r1
    4692:	d9 f3       	breq	.-10     	; 0x468a <strcmp+0x4>
    4694:	99 0b       	sbc	r25, r25
    4696:	08 95       	ret

00004698 <strncmp>:
    4698:	fb 01       	movw	r30, r22
    469a:	dc 01       	movw	r26, r24
    469c:	41 50       	subi	r20, 0x01	; 1
    469e:	50 40       	sbci	r21, 0x00	; 0
    46a0:	30 f0       	brcs	.+12     	; 0x46ae <strncmp+0x16>
    46a2:	8d 91       	ld	r24, X+
    46a4:	01 90       	ld	r0, Z+
    46a6:	80 19       	sub	r24, r0
    46a8:	19 f4       	brne	.+6      	; 0x46b0 <strncmp+0x18>
    46aa:	00 20       	and	r0, r0
    46ac:	b9 f7       	brne	.-18     	; 0x469c <strncmp+0x4>
    46ae:	88 1b       	sub	r24, r24
    46b0:	99 0b       	sbc	r25, r25
    46b2:	08 95       	ret

000046b4 <strncpy>:
    46b4:	fb 01       	movw	r30, r22
    46b6:	dc 01       	movw	r26, r24
    46b8:	41 50       	subi	r20, 0x01	; 1
    46ba:	50 40       	sbci	r21, 0x00	; 0
    46bc:	48 f0       	brcs	.+18     	; 0x46d0 <strncpy+0x1c>
    46be:	01 90       	ld	r0, Z+
    46c0:	0d 92       	st	X+, r0
    46c2:	00 20       	and	r0, r0
    46c4:	c9 f7       	brne	.-14     	; 0x46b8 <strncpy+0x4>
    46c6:	01 c0       	rjmp	.+2      	; 0x46ca <strncpy+0x16>
    46c8:	1d 92       	st	X+, r1
    46ca:	41 50       	subi	r20, 0x01	; 1
    46cc:	50 40       	sbci	r21, 0x00	; 0
    46ce:	e0 f7       	brcc	.-8      	; 0x46c8 <strncpy+0x14>
    46d0:	08 95       	ret

000046d2 <strrchr>:
    46d2:	fc 01       	movw	r30, r24
    46d4:	81 e0       	ldi	r24, 0x01	; 1
    46d6:	90 e0       	ldi	r25, 0x00	; 0
    46d8:	01 90       	ld	r0, Z+
    46da:	06 16       	cp	r0, r22
    46dc:	09 f4       	brne	.+2      	; 0x46e0 <strrchr+0xe>
    46de:	cf 01       	movw	r24, r30
    46e0:	00 20       	and	r0, r0
    46e2:	d1 f7       	brne	.-12     	; 0x46d8 <strrchr+0x6>
    46e4:	01 97       	sbiw	r24, 0x01	; 1
    46e6:	08 95       	ret

000046e8 <sprintf>:
    46e8:	ae e0       	ldi	r26, 0x0E	; 14
    46ea:	b0 e0       	ldi	r27, 0x00	; 0
    46ec:	ea e7       	ldi	r30, 0x7A	; 122
    46ee:	f3 e2       	ldi	r31, 0x23	; 35
    46f0:	0c 94 8b 26 	jmp	0x4d16	; 0x4d16 <__prologue_saves__+0x1c>
    46f4:	0d 89       	ldd	r16, Y+21	; 0x15
    46f6:	1e 89       	ldd	r17, Y+22	; 0x16
    46f8:	86 e0       	ldi	r24, 0x06	; 6
    46fa:	8c 83       	std	Y+4, r24	; 0x04
    46fc:	1a 83       	std	Y+2, r17	; 0x02
    46fe:	09 83       	std	Y+1, r16	; 0x01
    4700:	8f ef       	ldi	r24, 0xFF	; 255
    4702:	9f e7       	ldi	r25, 0x7F	; 127
    4704:	9e 83       	std	Y+6, r25	; 0x06
    4706:	8d 83       	std	Y+5, r24	; 0x05
    4708:	9e 01       	movw	r18, r28
    470a:	27 5e       	subi	r18, 0xE7	; 231
    470c:	3f 4f       	sbci	r19, 0xFF	; 255
    470e:	ce 01       	movw	r24, r28
    4710:	01 96       	adiw	r24, 0x01	; 1
    4712:	6f 89       	ldd	r22, Y+23	; 0x17
    4714:	78 8d       	ldd	r23, Y+24	; 0x18
    4716:	a9 01       	movw	r20, r18
    4718:	0e 94 98 23 	call	0x4730	; 0x4730 <vfprintf>
    471c:	2f 81       	ldd	r18, Y+7	; 0x07
    471e:	38 85       	ldd	r19, Y+8	; 0x08
    4720:	02 0f       	add	r16, r18
    4722:	13 1f       	adc	r17, r19
    4724:	f8 01       	movw	r30, r16
    4726:	10 82       	st	Z, r1
    4728:	2e 96       	adiw	r28, 0x0e	; 14
    472a:	e4 e0       	ldi	r30, 0x04	; 4
    472c:	0c 94 a7 26 	jmp	0x4d4e	; 0x4d4e <__epilogue_restores__+0x1c>

00004730 <vfprintf>:
    4730:	ab e0       	ldi	r26, 0x0B	; 11
    4732:	b0 e0       	ldi	r27, 0x00	; 0
    4734:	ee e9       	ldi	r30, 0x9E	; 158
    4736:	f3 e2       	ldi	r31, 0x23	; 35
    4738:	0c 94 7d 26 	jmp	0x4cfa	; 0x4cfa <__prologue_saves__>
    473c:	3c 01       	movw	r6, r24
    473e:	2b 01       	movw	r4, r22
    4740:	5a 01       	movw	r10, r20
    4742:	fc 01       	movw	r30, r24
    4744:	17 82       	std	Z+7, r1	; 0x07
    4746:	16 82       	std	Z+6, r1	; 0x06
    4748:	83 81       	ldd	r24, Z+3	; 0x03
    474a:	81 fd       	sbrc	r24, 1
    474c:	03 c0       	rjmp	.+6      	; 0x4754 <vfprintf+0x24>
    474e:	6f ef       	ldi	r22, 0xFF	; 255
    4750:	7f ef       	ldi	r23, 0xFF	; 255
    4752:	c6 c1       	rjmp	.+908    	; 0x4ae0 <vfprintf+0x3b0>
    4754:	9a e0       	ldi	r25, 0x0A	; 10
    4756:	89 2e       	mov	r8, r25
    4758:	1e 01       	movw	r2, r28
    475a:	08 94       	sec
    475c:	21 1c       	adc	r2, r1
    475e:	31 1c       	adc	r3, r1
    4760:	f3 01       	movw	r30, r6
    4762:	23 81       	ldd	r18, Z+3	; 0x03
    4764:	f2 01       	movw	r30, r4
    4766:	23 fd       	sbrc	r18, 3
    4768:	85 91       	lpm	r24, Z+
    476a:	23 ff       	sbrs	r18, 3
    476c:	81 91       	ld	r24, Z+
    476e:	2f 01       	movw	r4, r30
    4770:	88 23       	and	r24, r24
    4772:	09 f4       	brne	.+2      	; 0x4776 <vfprintf+0x46>
    4774:	b2 c1       	rjmp	.+868    	; 0x4ada <vfprintf+0x3aa>
    4776:	85 32       	cpi	r24, 0x25	; 37
    4778:	39 f4       	brne	.+14     	; 0x4788 <vfprintf+0x58>
    477a:	23 fd       	sbrc	r18, 3
    477c:	85 91       	lpm	r24, Z+
    477e:	23 ff       	sbrs	r18, 3
    4780:	81 91       	ld	r24, Z+
    4782:	2f 01       	movw	r4, r30
    4784:	85 32       	cpi	r24, 0x25	; 37
    4786:	29 f4       	brne	.+10     	; 0x4792 <vfprintf+0x62>
    4788:	90 e0       	ldi	r25, 0x00	; 0
    478a:	b3 01       	movw	r22, r6
    478c:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <fputc>
    4790:	e7 cf       	rjmp	.-50     	; 0x4760 <vfprintf+0x30>
    4792:	98 2f       	mov	r25, r24
    4794:	ff 24       	eor	r15, r15
    4796:	ee 24       	eor	r14, r14
    4798:	99 24       	eor	r9, r9
    479a:	ff e1       	ldi	r31, 0x1F	; 31
    479c:	ff 15       	cp	r31, r15
    479e:	d0 f0       	brcs	.+52     	; 0x47d4 <vfprintf+0xa4>
    47a0:	9b 32       	cpi	r25, 0x2B	; 43
    47a2:	69 f0       	breq	.+26     	; 0x47be <vfprintf+0x8e>
    47a4:	9c 32       	cpi	r25, 0x2C	; 44
    47a6:	28 f4       	brcc	.+10     	; 0x47b2 <vfprintf+0x82>
    47a8:	90 32       	cpi	r25, 0x20	; 32
    47aa:	59 f0       	breq	.+22     	; 0x47c2 <vfprintf+0x92>
    47ac:	93 32       	cpi	r25, 0x23	; 35
    47ae:	91 f4       	brne	.+36     	; 0x47d4 <vfprintf+0xa4>
    47b0:	0e c0       	rjmp	.+28     	; 0x47ce <vfprintf+0x9e>
    47b2:	9d 32       	cpi	r25, 0x2D	; 45
    47b4:	49 f0       	breq	.+18     	; 0x47c8 <vfprintf+0x98>
    47b6:	90 33       	cpi	r25, 0x30	; 48
    47b8:	69 f4       	brne	.+26     	; 0x47d4 <vfprintf+0xa4>
    47ba:	41 e0       	ldi	r20, 0x01	; 1
    47bc:	24 c0       	rjmp	.+72     	; 0x4806 <vfprintf+0xd6>
    47be:	52 e0       	ldi	r21, 0x02	; 2
    47c0:	f5 2a       	or	r15, r21
    47c2:	84 e0       	ldi	r24, 0x04	; 4
    47c4:	f8 2a       	or	r15, r24
    47c6:	28 c0       	rjmp	.+80     	; 0x4818 <vfprintf+0xe8>
    47c8:	98 e0       	ldi	r25, 0x08	; 8
    47ca:	f9 2a       	or	r15, r25
    47cc:	25 c0       	rjmp	.+74     	; 0x4818 <vfprintf+0xe8>
    47ce:	e0 e1       	ldi	r30, 0x10	; 16
    47d0:	fe 2a       	or	r15, r30
    47d2:	22 c0       	rjmp	.+68     	; 0x4818 <vfprintf+0xe8>
    47d4:	f7 fc       	sbrc	r15, 7
    47d6:	29 c0       	rjmp	.+82     	; 0x482a <vfprintf+0xfa>
    47d8:	89 2f       	mov	r24, r25
    47da:	80 53       	subi	r24, 0x30	; 48
    47dc:	8a 30       	cpi	r24, 0x0A	; 10
    47de:	70 f4       	brcc	.+28     	; 0x47fc <vfprintf+0xcc>
    47e0:	f6 fe       	sbrs	r15, 6
    47e2:	05 c0       	rjmp	.+10     	; 0x47ee <vfprintf+0xbe>
    47e4:	98 9c       	mul	r9, r8
    47e6:	90 2c       	mov	r9, r0
    47e8:	11 24       	eor	r1, r1
    47ea:	98 0e       	add	r9, r24
    47ec:	15 c0       	rjmp	.+42     	; 0x4818 <vfprintf+0xe8>
    47ee:	e8 9c       	mul	r14, r8
    47f0:	e0 2c       	mov	r14, r0
    47f2:	11 24       	eor	r1, r1
    47f4:	e8 0e       	add	r14, r24
    47f6:	f0 e2       	ldi	r31, 0x20	; 32
    47f8:	ff 2a       	or	r15, r31
    47fa:	0e c0       	rjmp	.+28     	; 0x4818 <vfprintf+0xe8>
    47fc:	9e 32       	cpi	r25, 0x2E	; 46
    47fe:	29 f4       	brne	.+10     	; 0x480a <vfprintf+0xda>
    4800:	f6 fc       	sbrc	r15, 6
    4802:	6b c1       	rjmp	.+726    	; 0x4ada <vfprintf+0x3aa>
    4804:	40 e4       	ldi	r20, 0x40	; 64
    4806:	f4 2a       	or	r15, r20
    4808:	07 c0       	rjmp	.+14     	; 0x4818 <vfprintf+0xe8>
    480a:	9c 36       	cpi	r25, 0x6C	; 108
    480c:	19 f4       	brne	.+6      	; 0x4814 <vfprintf+0xe4>
    480e:	50 e8       	ldi	r21, 0x80	; 128
    4810:	f5 2a       	or	r15, r21
    4812:	02 c0       	rjmp	.+4      	; 0x4818 <vfprintf+0xe8>
    4814:	98 36       	cpi	r25, 0x68	; 104
    4816:	49 f4       	brne	.+18     	; 0x482a <vfprintf+0xfa>
    4818:	f2 01       	movw	r30, r4
    481a:	23 fd       	sbrc	r18, 3
    481c:	95 91       	lpm	r25, Z+
    481e:	23 ff       	sbrs	r18, 3
    4820:	91 91       	ld	r25, Z+
    4822:	2f 01       	movw	r4, r30
    4824:	99 23       	and	r25, r25
    4826:	09 f0       	breq	.+2      	; 0x482a <vfprintf+0xfa>
    4828:	b8 cf       	rjmp	.-144    	; 0x479a <vfprintf+0x6a>
    482a:	89 2f       	mov	r24, r25
    482c:	85 54       	subi	r24, 0x45	; 69
    482e:	83 30       	cpi	r24, 0x03	; 3
    4830:	18 f0       	brcs	.+6      	; 0x4838 <vfprintf+0x108>
    4832:	80 52       	subi	r24, 0x20	; 32
    4834:	83 30       	cpi	r24, 0x03	; 3
    4836:	38 f4       	brcc	.+14     	; 0x4846 <vfprintf+0x116>
    4838:	44 e0       	ldi	r20, 0x04	; 4
    483a:	50 e0       	ldi	r21, 0x00	; 0
    483c:	a4 0e       	add	r10, r20
    483e:	b5 1e       	adc	r11, r21
    4840:	5f e3       	ldi	r21, 0x3F	; 63
    4842:	59 83       	std	Y+1, r21	; 0x01
    4844:	0f c0       	rjmp	.+30     	; 0x4864 <vfprintf+0x134>
    4846:	93 36       	cpi	r25, 0x63	; 99
    4848:	31 f0       	breq	.+12     	; 0x4856 <vfprintf+0x126>
    484a:	93 37       	cpi	r25, 0x73	; 115
    484c:	79 f0       	breq	.+30     	; 0x486c <vfprintf+0x13c>
    484e:	93 35       	cpi	r25, 0x53	; 83
    4850:	09 f0       	breq	.+2      	; 0x4854 <vfprintf+0x124>
    4852:	56 c0       	rjmp	.+172    	; 0x4900 <vfprintf+0x1d0>
    4854:	20 c0       	rjmp	.+64     	; 0x4896 <vfprintf+0x166>
    4856:	f5 01       	movw	r30, r10
    4858:	80 81       	ld	r24, Z
    485a:	89 83       	std	Y+1, r24	; 0x01
    485c:	42 e0       	ldi	r20, 0x02	; 2
    485e:	50 e0       	ldi	r21, 0x00	; 0
    4860:	a4 0e       	add	r10, r20
    4862:	b5 1e       	adc	r11, r21
    4864:	61 01       	movw	r12, r2
    4866:	01 e0       	ldi	r16, 0x01	; 1
    4868:	10 e0       	ldi	r17, 0x00	; 0
    486a:	12 c0       	rjmp	.+36     	; 0x4890 <vfprintf+0x160>
    486c:	f5 01       	movw	r30, r10
    486e:	c0 80       	ld	r12, Z
    4870:	d1 80       	ldd	r13, Z+1	; 0x01
    4872:	f6 fc       	sbrc	r15, 6
    4874:	03 c0       	rjmp	.+6      	; 0x487c <vfprintf+0x14c>
    4876:	6f ef       	ldi	r22, 0xFF	; 255
    4878:	7f ef       	ldi	r23, 0xFF	; 255
    487a:	02 c0       	rjmp	.+4      	; 0x4880 <vfprintf+0x150>
    487c:	69 2d       	mov	r22, r9
    487e:	70 e0       	ldi	r23, 0x00	; 0
    4880:	42 e0       	ldi	r20, 0x02	; 2
    4882:	50 e0       	ldi	r21, 0x00	; 0
    4884:	a4 0e       	add	r10, r20
    4886:	b5 1e       	adc	r11, r21
    4888:	c6 01       	movw	r24, r12
    488a:	0e 94 80 25 	call	0x4b00	; 0x4b00 <strnlen>
    488e:	8c 01       	movw	r16, r24
    4890:	5f e7       	ldi	r21, 0x7F	; 127
    4892:	f5 22       	and	r15, r21
    4894:	14 c0       	rjmp	.+40     	; 0x48be <vfprintf+0x18e>
    4896:	f5 01       	movw	r30, r10
    4898:	c0 80       	ld	r12, Z
    489a:	d1 80       	ldd	r13, Z+1	; 0x01
    489c:	f6 fc       	sbrc	r15, 6
    489e:	03 c0       	rjmp	.+6      	; 0x48a6 <vfprintf+0x176>
    48a0:	6f ef       	ldi	r22, 0xFF	; 255
    48a2:	7f ef       	ldi	r23, 0xFF	; 255
    48a4:	02 c0       	rjmp	.+4      	; 0x48aa <vfprintf+0x17a>
    48a6:	69 2d       	mov	r22, r9
    48a8:	70 e0       	ldi	r23, 0x00	; 0
    48aa:	42 e0       	ldi	r20, 0x02	; 2
    48ac:	50 e0       	ldi	r21, 0x00	; 0
    48ae:	a4 0e       	add	r10, r20
    48b0:	b5 1e       	adc	r11, r21
    48b2:	c6 01       	movw	r24, r12
    48b4:	0e 94 75 25 	call	0x4aea	; 0x4aea <strnlen_P>
    48b8:	8c 01       	movw	r16, r24
    48ba:	50 e8       	ldi	r21, 0x80	; 128
    48bc:	f5 2a       	or	r15, r21
    48be:	f3 fe       	sbrs	r15, 3
    48c0:	07 c0       	rjmp	.+14     	; 0x48d0 <vfprintf+0x1a0>
    48c2:	1a c0       	rjmp	.+52     	; 0x48f8 <vfprintf+0x1c8>
    48c4:	80 e2       	ldi	r24, 0x20	; 32
    48c6:	90 e0       	ldi	r25, 0x00	; 0
    48c8:	b3 01       	movw	r22, r6
    48ca:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <fputc>
    48ce:	ea 94       	dec	r14
    48d0:	8e 2d       	mov	r24, r14
    48d2:	90 e0       	ldi	r25, 0x00	; 0
    48d4:	08 17       	cp	r16, r24
    48d6:	19 07       	cpc	r17, r25
    48d8:	a8 f3       	brcs	.-22     	; 0x48c4 <vfprintf+0x194>
    48da:	0e c0       	rjmp	.+28     	; 0x48f8 <vfprintf+0x1c8>
    48dc:	f6 01       	movw	r30, r12
    48de:	f7 fc       	sbrc	r15, 7
    48e0:	85 91       	lpm	r24, Z+
    48e2:	f7 fe       	sbrs	r15, 7
    48e4:	81 91       	ld	r24, Z+
    48e6:	6f 01       	movw	r12, r30
    48e8:	90 e0       	ldi	r25, 0x00	; 0
    48ea:	b3 01       	movw	r22, r6
    48ec:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <fputc>
    48f0:	e1 10       	cpse	r14, r1
    48f2:	ea 94       	dec	r14
    48f4:	01 50       	subi	r16, 0x01	; 1
    48f6:	10 40       	sbci	r17, 0x00	; 0
    48f8:	01 15       	cp	r16, r1
    48fa:	11 05       	cpc	r17, r1
    48fc:	79 f7       	brne	.-34     	; 0x48dc <vfprintf+0x1ac>
    48fe:	ea c0       	rjmp	.+468    	; 0x4ad4 <vfprintf+0x3a4>
    4900:	94 36       	cpi	r25, 0x64	; 100
    4902:	11 f0       	breq	.+4      	; 0x4908 <vfprintf+0x1d8>
    4904:	99 36       	cpi	r25, 0x69	; 105
    4906:	69 f5       	brne	.+90     	; 0x4962 <vfprintf+0x232>
    4908:	f7 fe       	sbrs	r15, 7
    490a:	08 c0       	rjmp	.+16     	; 0x491c <vfprintf+0x1ec>
    490c:	f5 01       	movw	r30, r10
    490e:	20 81       	ld	r18, Z
    4910:	31 81       	ldd	r19, Z+1	; 0x01
    4912:	42 81       	ldd	r20, Z+2	; 0x02
    4914:	53 81       	ldd	r21, Z+3	; 0x03
    4916:	84 e0       	ldi	r24, 0x04	; 4
    4918:	90 e0       	ldi	r25, 0x00	; 0
    491a:	0a c0       	rjmp	.+20     	; 0x4930 <vfprintf+0x200>
    491c:	f5 01       	movw	r30, r10
    491e:	80 81       	ld	r24, Z
    4920:	91 81       	ldd	r25, Z+1	; 0x01
    4922:	9c 01       	movw	r18, r24
    4924:	44 27       	eor	r20, r20
    4926:	37 fd       	sbrc	r19, 7
    4928:	40 95       	com	r20
    492a:	54 2f       	mov	r21, r20
    492c:	82 e0       	ldi	r24, 0x02	; 2
    492e:	90 e0       	ldi	r25, 0x00	; 0
    4930:	a8 0e       	add	r10, r24
    4932:	b9 1e       	adc	r11, r25
    4934:	9f e6       	ldi	r25, 0x6F	; 111
    4936:	f9 22       	and	r15, r25
    4938:	57 ff       	sbrs	r21, 7
    493a:	09 c0       	rjmp	.+18     	; 0x494e <vfprintf+0x21e>
    493c:	50 95       	com	r21
    493e:	40 95       	com	r20
    4940:	30 95       	com	r19
    4942:	21 95       	neg	r18
    4944:	3f 4f       	sbci	r19, 0xFF	; 255
    4946:	4f 4f       	sbci	r20, 0xFF	; 255
    4948:	5f 4f       	sbci	r21, 0xFF	; 255
    494a:	e0 e8       	ldi	r30, 0x80	; 128
    494c:	fe 2a       	or	r15, r30
    494e:	ca 01       	movw	r24, r20
    4950:	b9 01       	movw	r22, r18
    4952:	a1 01       	movw	r20, r2
    4954:	2a e0       	ldi	r18, 0x0A	; 10
    4956:	30 e0       	ldi	r19, 0x00	; 0
    4958:	0e 94 b7 25 	call	0x4b6e	; 0x4b6e <__ultoa_invert>
    495c:	d8 2e       	mov	r13, r24
    495e:	d2 18       	sub	r13, r2
    4960:	40 c0       	rjmp	.+128    	; 0x49e2 <vfprintf+0x2b2>
    4962:	95 37       	cpi	r25, 0x75	; 117
    4964:	29 f4       	brne	.+10     	; 0x4970 <vfprintf+0x240>
    4966:	1f 2d       	mov	r17, r15
    4968:	1f 7e       	andi	r17, 0xEF	; 239
    496a:	2a e0       	ldi	r18, 0x0A	; 10
    496c:	30 e0       	ldi	r19, 0x00	; 0
    496e:	1d c0       	rjmp	.+58     	; 0x49aa <vfprintf+0x27a>
    4970:	1f 2d       	mov	r17, r15
    4972:	19 7f       	andi	r17, 0xF9	; 249
    4974:	9f 36       	cpi	r25, 0x6F	; 111
    4976:	61 f0       	breq	.+24     	; 0x4990 <vfprintf+0x260>
    4978:	90 37       	cpi	r25, 0x70	; 112
    497a:	20 f4       	brcc	.+8      	; 0x4984 <vfprintf+0x254>
    497c:	98 35       	cpi	r25, 0x58	; 88
    497e:	09 f0       	breq	.+2      	; 0x4982 <vfprintf+0x252>
    4980:	ac c0       	rjmp	.+344    	; 0x4ada <vfprintf+0x3aa>
    4982:	0f c0       	rjmp	.+30     	; 0x49a2 <vfprintf+0x272>
    4984:	90 37       	cpi	r25, 0x70	; 112
    4986:	39 f0       	breq	.+14     	; 0x4996 <vfprintf+0x266>
    4988:	98 37       	cpi	r25, 0x78	; 120
    498a:	09 f0       	breq	.+2      	; 0x498e <vfprintf+0x25e>
    498c:	a6 c0       	rjmp	.+332    	; 0x4ada <vfprintf+0x3aa>
    498e:	04 c0       	rjmp	.+8      	; 0x4998 <vfprintf+0x268>
    4990:	28 e0       	ldi	r18, 0x08	; 8
    4992:	30 e0       	ldi	r19, 0x00	; 0
    4994:	0a c0       	rjmp	.+20     	; 0x49aa <vfprintf+0x27a>
    4996:	10 61       	ori	r17, 0x10	; 16
    4998:	14 fd       	sbrc	r17, 4
    499a:	14 60       	ori	r17, 0x04	; 4
    499c:	20 e1       	ldi	r18, 0x10	; 16
    499e:	30 e0       	ldi	r19, 0x00	; 0
    49a0:	04 c0       	rjmp	.+8      	; 0x49aa <vfprintf+0x27a>
    49a2:	14 fd       	sbrc	r17, 4
    49a4:	16 60       	ori	r17, 0x06	; 6
    49a6:	20 e1       	ldi	r18, 0x10	; 16
    49a8:	32 e0       	ldi	r19, 0x02	; 2
    49aa:	17 ff       	sbrs	r17, 7
    49ac:	08 c0       	rjmp	.+16     	; 0x49be <vfprintf+0x28e>
    49ae:	f5 01       	movw	r30, r10
    49b0:	60 81       	ld	r22, Z
    49b2:	71 81       	ldd	r23, Z+1	; 0x01
    49b4:	82 81       	ldd	r24, Z+2	; 0x02
    49b6:	93 81       	ldd	r25, Z+3	; 0x03
    49b8:	44 e0       	ldi	r20, 0x04	; 4
    49ba:	50 e0       	ldi	r21, 0x00	; 0
    49bc:	08 c0       	rjmp	.+16     	; 0x49ce <vfprintf+0x29e>
    49be:	f5 01       	movw	r30, r10
    49c0:	80 81       	ld	r24, Z
    49c2:	91 81       	ldd	r25, Z+1	; 0x01
    49c4:	bc 01       	movw	r22, r24
    49c6:	80 e0       	ldi	r24, 0x00	; 0
    49c8:	90 e0       	ldi	r25, 0x00	; 0
    49ca:	42 e0       	ldi	r20, 0x02	; 2
    49cc:	50 e0       	ldi	r21, 0x00	; 0
    49ce:	a4 0e       	add	r10, r20
    49d0:	b5 1e       	adc	r11, r21
    49d2:	a1 01       	movw	r20, r2
    49d4:	0e 94 b7 25 	call	0x4b6e	; 0x4b6e <__ultoa_invert>
    49d8:	d8 2e       	mov	r13, r24
    49da:	d2 18       	sub	r13, r2
    49dc:	8f e7       	ldi	r24, 0x7F	; 127
    49de:	f8 2e       	mov	r15, r24
    49e0:	f1 22       	and	r15, r17
    49e2:	f6 fe       	sbrs	r15, 6
    49e4:	0b c0       	rjmp	.+22     	; 0x49fc <vfprintf+0x2cc>
    49e6:	5e ef       	ldi	r21, 0xFE	; 254
    49e8:	f5 22       	and	r15, r21
    49ea:	d9 14       	cp	r13, r9
    49ec:	38 f4       	brcc	.+14     	; 0x49fc <vfprintf+0x2cc>
    49ee:	f4 fe       	sbrs	r15, 4
    49f0:	07 c0       	rjmp	.+14     	; 0x4a00 <vfprintf+0x2d0>
    49f2:	f2 fc       	sbrc	r15, 2
    49f4:	05 c0       	rjmp	.+10     	; 0x4a00 <vfprintf+0x2d0>
    49f6:	8f ee       	ldi	r24, 0xEF	; 239
    49f8:	f8 22       	and	r15, r24
    49fa:	02 c0       	rjmp	.+4      	; 0x4a00 <vfprintf+0x2d0>
    49fc:	1d 2d       	mov	r17, r13
    49fe:	01 c0       	rjmp	.+2      	; 0x4a02 <vfprintf+0x2d2>
    4a00:	19 2d       	mov	r17, r9
    4a02:	f4 fe       	sbrs	r15, 4
    4a04:	0d c0       	rjmp	.+26     	; 0x4a20 <vfprintf+0x2f0>
    4a06:	fe 01       	movw	r30, r28
    4a08:	ed 0d       	add	r30, r13
    4a0a:	f1 1d       	adc	r31, r1
    4a0c:	80 81       	ld	r24, Z
    4a0e:	80 33       	cpi	r24, 0x30	; 48
    4a10:	19 f4       	brne	.+6      	; 0x4a18 <vfprintf+0x2e8>
    4a12:	99 ee       	ldi	r25, 0xE9	; 233
    4a14:	f9 22       	and	r15, r25
    4a16:	08 c0       	rjmp	.+16     	; 0x4a28 <vfprintf+0x2f8>
    4a18:	1f 5f       	subi	r17, 0xFF	; 255
    4a1a:	f2 fe       	sbrs	r15, 2
    4a1c:	05 c0       	rjmp	.+10     	; 0x4a28 <vfprintf+0x2f8>
    4a1e:	03 c0       	rjmp	.+6      	; 0x4a26 <vfprintf+0x2f6>
    4a20:	8f 2d       	mov	r24, r15
    4a22:	86 78       	andi	r24, 0x86	; 134
    4a24:	09 f0       	breq	.+2      	; 0x4a28 <vfprintf+0x2f8>
    4a26:	1f 5f       	subi	r17, 0xFF	; 255
    4a28:	0f 2d       	mov	r16, r15
    4a2a:	f3 fc       	sbrc	r15, 3
    4a2c:	14 c0       	rjmp	.+40     	; 0x4a56 <vfprintf+0x326>
    4a2e:	f0 fe       	sbrs	r15, 0
    4a30:	0f c0       	rjmp	.+30     	; 0x4a50 <vfprintf+0x320>
    4a32:	1e 15       	cp	r17, r14
    4a34:	10 f0       	brcs	.+4      	; 0x4a3a <vfprintf+0x30a>
    4a36:	9d 2c       	mov	r9, r13
    4a38:	0b c0       	rjmp	.+22     	; 0x4a50 <vfprintf+0x320>
    4a3a:	9d 2c       	mov	r9, r13
    4a3c:	9e 0c       	add	r9, r14
    4a3e:	91 1a       	sub	r9, r17
    4a40:	1e 2d       	mov	r17, r14
    4a42:	06 c0       	rjmp	.+12     	; 0x4a50 <vfprintf+0x320>
    4a44:	80 e2       	ldi	r24, 0x20	; 32
    4a46:	90 e0       	ldi	r25, 0x00	; 0
    4a48:	b3 01       	movw	r22, r6
    4a4a:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <fputc>
    4a4e:	1f 5f       	subi	r17, 0xFF	; 255
    4a50:	1e 15       	cp	r17, r14
    4a52:	c0 f3       	brcs	.-16     	; 0x4a44 <vfprintf+0x314>
    4a54:	04 c0       	rjmp	.+8      	; 0x4a5e <vfprintf+0x32e>
    4a56:	1e 15       	cp	r17, r14
    4a58:	10 f4       	brcc	.+4      	; 0x4a5e <vfprintf+0x32e>
    4a5a:	e1 1a       	sub	r14, r17
    4a5c:	01 c0       	rjmp	.+2      	; 0x4a60 <vfprintf+0x330>
    4a5e:	ee 24       	eor	r14, r14
    4a60:	04 ff       	sbrs	r16, 4
    4a62:	0f c0       	rjmp	.+30     	; 0x4a82 <vfprintf+0x352>
    4a64:	80 e3       	ldi	r24, 0x30	; 48
    4a66:	90 e0       	ldi	r25, 0x00	; 0
    4a68:	b3 01       	movw	r22, r6
    4a6a:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <fputc>
    4a6e:	02 ff       	sbrs	r16, 2
    4a70:	1d c0       	rjmp	.+58     	; 0x4aac <vfprintf+0x37c>
    4a72:	01 fd       	sbrc	r16, 1
    4a74:	03 c0       	rjmp	.+6      	; 0x4a7c <vfprintf+0x34c>
    4a76:	88 e7       	ldi	r24, 0x78	; 120
    4a78:	90 e0       	ldi	r25, 0x00	; 0
    4a7a:	0e c0       	rjmp	.+28     	; 0x4a98 <vfprintf+0x368>
    4a7c:	88 e5       	ldi	r24, 0x58	; 88
    4a7e:	90 e0       	ldi	r25, 0x00	; 0
    4a80:	0b c0       	rjmp	.+22     	; 0x4a98 <vfprintf+0x368>
    4a82:	80 2f       	mov	r24, r16
    4a84:	86 78       	andi	r24, 0x86	; 134
    4a86:	91 f0       	breq	.+36     	; 0x4aac <vfprintf+0x37c>
    4a88:	01 ff       	sbrs	r16, 1
    4a8a:	02 c0       	rjmp	.+4      	; 0x4a90 <vfprintf+0x360>
    4a8c:	8b e2       	ldi	r24, 0x2B	; 43
    4a8e:	01 c0       	rjmp	.+2      	; 0x4a92 <vfprintf+0x362>
    4a90:	80 e2       	ldi	r24, 0x20	; 32
    4a92:	f7 fc       	sbrc	r15, 7
    4a94:	8d e2       	ldi	r24, 0x2D	; 45
    4a96:	90 e0       	ldi	r25, 0x00	; 0
    4a98:	b3 01       	movw	r22, r6
    4a9a:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <fputc>
    4a9e:	06 c0       	rjmp	.+12     	; 0x4aac <vfprintf+0x37c>
    4aa0:	80 e3       	ldi	r24, 0x30	; 48
    4aa2:	90 e0       	ldi	r25, 0x00	; 0
    4aa4:	b3 01       	movw	r22, r6
    4aa6:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <fputc>
    4aaa:	9a 94       	dec	r9
    4aac:	d9 14       	cp	r13, r9
    4aae:	c0 f3       	brcs	.-16     	; 0x4aa0 <vfprintf+0x370>
    4ab0:	da 94       	dec	r13
    4ab2:	f1 01       	movw	r30, r2
    4ab4:	ed 0d       	add	r30, r13
    4ab6:	f1 1d       	adc	r31, r1
    4ab8:	80 81       	ld	r24, Z
    4aba:	90 e0       	ldi	r25, 0x00	; 0
    4abc:	b3 01       	movw	r22, r6
    4abe:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <fputc>
    4ac2:	dd 20       	and	r13, r13
    4ac4:	a9 f7       	brne	.-22     	; 0x4ab0 <vfprintf+0x380>
    4ac6:	06 c0       	rjmp	.+12     	; 0x4ad4 <vfprintf+0x3a4>
    4ac8:	80 e2       	ldi	r24, 0x20	; 32
    4aca:	90 e0       	ldi	r25, 0x00	; 0
    4acc:	b3 01       	movw	r22, r6
    4ace:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <fputc>
    4ad2:	ea 94       	dec	r14
    4ad4:	ee 20       	and	r14, r14
    4ad6:	c1 f7       	brne	.-16     	; 0x4ac8 <vfprintf+0x398>
    4ad8:	43 ce       	rjmp	.-890    	; 0x4760 <vfprintf+0x30>
    4ada:	f3 01       	movw	r30, r6
    4adc:	66 81       	ldd	r22, Z+6	; 0x06
    4ade:	77 81       	ldd	r23, Z+7	; 0x07
    4ae0:	cb 01       	movw	r24, r22
    4ae2:	2b 96       	adiw	r28, 0x0b	; 11
    4ae4:	e2 e1       	ldi	r30, 0x12	; 18
    4ae6:	0c 94 99 26 	jmp	0x4d32	; 0x4d32 <__epilogue_restores__>

00004aea <strnlen_P>:
    4aea:	fc 01       	movw	r30, r24
    4aec:	05 90       	lpm	r0, Z+
    4aee:	61 50       	subi	r22, 0x01	; 1
    4af0:	70 40       	sbci	r23, 0x00	; 0
    4af2:	01 10       	cpse	r0, r1
    4af4:	d8 f7       	brcc	.-10     	; 0x4aec <strnlen_P+0x2>
    4af6:	80 95       	com	r24
    4af8:	90 95       	com	r25
    4afa:	8e 0f       	add	r24, r30
    4afc:	9f 1f       	adc	r25, r31
    4afe:	08 95       	ret

00004b00 <strnlen>:
    4b00:	fc 01       	movw	r30, r24
    4b02:	61 50       	subi	r22, 0x01	; 1
    4b04:	70 40       	sbci	r23, 0x00	; 0
    4b06:	01 90       	ld	r0, Z+
    4b08:	01 10       	cpse	r0, r1
    4b0a:	d8 f7       	brcc	.-10     	; 0x4b02 <strnlen+0x2>
    4b0c:	80 95       	com	r24
    4b0e:	90 95       	com	r25
    4b10:	8e 0f       	add	r24, r30
    4b12:	9f 1f       	adc	r25, r31
    4b14:	08 95       	ret

00004b16 <fputc>:
    4b16:	0f 93       	push	r16
    4b18:	1f 93       	push	r17
    4b1a:	cf 93       	push	r28
    4b1c:	df 93       	push	r29
    4b1e:	8c 01       	movw	r16, r24
    4b20:	eb 01       	movw	r28, r22
    4b22:	8b 81       	ldd	r24, Y+3	; 0x03
    4b24:	81 ff       	sbrs	r24, 1
    4b26:	1b c0       	rjmp	.+54     	; 0x4b5e <fputc+0x48>
    4b28:	82 ff       	sbrs	r24, 2
    4b2a:	0d c0       	rjmp	.+26     	; 0x4b46 <fputc+0x30>
    4b2c:	2e 81       	ldd	r18, Y+6	; 0x06
    4b2e:	3f 81       	ldd	r19, Y+7	; 0x07
    4b30:	8c 81       	ldd	r24, Y+4	; 0x04
    4b32:	9d 81       	ldd	r25, Y+5	; 0x05
    4b34:	28 17       	cp	r18, r24
    4b36:	39 07       	cpc	r19, r25
    4b38:	64 f4       	brge	.+24     	; 0x4b52 <fputc+0x3c>
    4b3a:	e8 81       	ld	r30, Y
    4b3c:	f9 81       	ldd	r31, Y+1	; 0x01
    4b3e:	01 93       	st	Z+, r16
    4b40:	f9 83       	std	Y+1, r31	; 0x01
    4b42:	e8 83       	st	Y, r30
    4b44:	06 c0       	rjmp	.+12     	; 0x4b52 <fputc+0x3c>
    4b46:	e8 85       	ldd	r30, Y+8	; 0x08
    4b48:	f9 85       	ldd	r31, Y+9	; 0x09
    4b4a:	80 2f       	mov	r24, r16
    4b4c:	09 95       	icall
    4b4e:	89 2b       	or	r24, r25
    4b50:	31 f4       	brne	.+12     	; 0x4b5e <fputc+0x48>
    4b52:	8e 81       	ldd	r24, Y+6	; 0x06
    4b54:	9f 81       	ldd	r25, Y+7	; 0x07
    4b56:	01 96       	adiw	r24, 0x01	; 1
    4b58:	9f 83       	std	Y+7, r25	; 0x07
    4b5a:	8e 83       	std	Y+6, r24	; 0x06
    4b5c:	02 c0       	rjmp	.+4      	; 0x4b62 <fputc+0x4c>
    4b5e:	0f ef       	ldi	r16, 0xFF	; 255
    4b60:	1f ef       	ldi	r17, 0xFF	; 255
    4b62:	c8 01       	movw	r24, r16
    4b64:	df 91       	pop	r29
    4b66:	cf 91       	pop	r28
    4b68:	1f 91       	pop	r17
    4b6a:	0f 91       	pop	r16
    4b6c:	08 95       	ret

00004b6e <__ultoa_invert>:
    4b6e:	fa 01       	movw	r30, r20
    4b70:	aa 27       	eor	r26, r26
    4b72:	28 30       	cpi	r18, 0x08	; 8
    4b74:	51 f1       	breq	.+84     	; 0x4bca <__ultoa_invert+0x5c>
    4b76:	20 31       	cpi	r18, 0x10	; 16
    4b78:	81 f1       	breq	.+96     	; 0x4bda <__ultoa_invert+0x6c>
    4b7a:	e8 94       	clt
    4b7c:	6f 93       	push	r22
    4b7e:	6e 7f       	andi	r22, 0xFE	; 254
    4b80:	6e 5f       	subi	r22, 0xFE	; 254
    4b82:	7f 4f       	sbci	r23, 0xFF	; 255
    4b84:	8f 4f       	sbci	r24, 0xFF	; 255
    4b86:	9f 4f       	sbci	r25, 0xFF	; 255
    4b88:	af 4f       	sbci	r26, 0xFF	; 255
    4b8a:	b1 e0       	ldi	r27, 0x01	; 1
    4b8c:	3e d0       	rcall	.+124    	; 0x4c0a <__ultoa_invert+0x9c>
    4b8e:	b4 e0       	ldi	r27, 0x04	; 4
    4b90:	3c d0       	rcall	.+120    	; 0x4c0a <__ultoa_invert+0x9c>
    4b92:	67 0f       	add	r22, r23
    4b94:	78 1f       	adc	r23, r24
    4b96:	89 1f       	adc	r24, r25
    4b98:	9a 1f       	adc	r25, r26
    4b9a:	a1 1d       	adc	r26, r1
    4b9c:	68 0f       	add	r22, r24
    4b9e:	79 1f       	adc	r23, r25
    4ba0:	8a 1f       	adc	r24, r26
    4ba2:	91 1d       	adc	r25, r1
    4ba4:	a1 1d       	adc	r26, r1
    4ba6:	6a 0f       	add	r22, r26
    4ba8:	71 1d       	adc	r23, r1
    4baa:	81 1d       	adc	r24, r1
    4bac:	91 1d       	adc	r25, r1
    4bae:	a1 1d       	adc	r26, r1
    4bb0:	20 d0       	rcall	.+64     	; 0x4bf2 <__ultoa_invert+0x84>
    4bb2:	09 f4       	brne	.+2      	; 0x4bb6 <__ultoa_invert+0x48>
    4bb4:	68 94       	set
    4bb6:	3f 91       	pop	r19
    4bb8:	2a e0       	ldi	r18, 0x0A	; 10
    4bba:	26 9f       	mul	r18, r22
    4bbc:	11 24       	eor	r1, r1
    4bbe:	30 19       	sub	r19, r0
    4bc0:	30 5d       	subi	r19, 0xD0	; 208
    4bc2:	31 93       	st	Z+, r19
    4bc4:	de f6       	brtc	.-74     	; 0x4b7c <__ultoa_invert+0xe>
    4bc6:	cf 01       	movw	r24, r30
    4bc8:	08 95       	ret
    4bca:	46 2f       	mov	r20, r22
    4bcc:	47 70       	andi	r20, 0x07	; 7
    4bce:	40 5d       	subi	r20, 0xD0	; 208
    4bd0:	41 93       	st	Z+, r20
    4bd2:	b3 e0       	ldi	r27, 0x03	; 3
    4bd4:	0f d0       	rcall	.+30     	; 0x4bf4 <__ultoa_invert+0x86>
    4bd6:	c9 f7       	brne	.-14     	; 0x4bca <__ultoa_invert+0x5c>
    4bd8:	f6 cf       	rjmp	.-20     	; 0x4bc6 <__ultoa_invert+0x58>
    4bda:	46 2f       	mov	r20, r22
    4bdc:	4f 70       	andi	r20, 0x0F	; 15
    4bde:	40 5d       	subi	r20, 0xD0	; 208
    4be0:	4a 33       	cpi	r20, 0x3A	; 58
    4be2:	18 f0       	brcs	.+6      	; 0x4bea <__ultoa_invert+0x7c>
    4be4:	49 5d       	subi	r20, 0xD9	; 217
    4be6:	31 fd       	sbrc	r19, 1
    4be8:	40 52       	subi	r20, 0x20	; 32
    4bea:	41 93       	st	Z+, r20
    4bec:	02 d0       	rcall	.+4      	; 0x4bf2 <__ultoa_invert+0x84>
    4bee:	a9 f7       	brne	.-22     	; 0x4bda <__ultoa_invert+0x6c>
    4bf0:	ea cf       	rjmp	.-44     	; 0x4bc6 <__ultoa_invert+0x58>
    4bf2:	b4 e0       	ldi	r27, 0x04	; 4
    4bf4:	a6 95       	lsr	r26
    4bf6:	97 95       	ror	r25
    4bf8:	87 95       	ror	r24
    4bfa:	77 95       	ror	r23
    4bfc:	67 95       	ror	r22
    4bfe:	ba 95       	dec	r27
    4c00:	c9 f7       	brne	.-14     	; 0x4bf4 <__ultoa_invert+0x86>
    4c02:	00 97       	sbiw	r24, 0x00	; 0
    4c04:	61 05       	cpc	r22, r1
    4c06:	71 05       	cpc	r23, r1
    4c08:	08 95       	ret
    4c0a:	9b 01       	movw	r18, r22
    4c0c:	ac 01       	movw	r20, r24
    4c0e:	0a 2e       	mov	r0, r26
    4c10:	06 94       	lsr	r0
    4c12:	57 95       	ror	r21
    4c14:	47 95       	ror	r20
    4c16:	37 95       	ror	r19
    4c18:	27 95       	ror	r18
    4c1a:	ba 95       	dec	r27
    4c1c:	c9 f7       	brne	.-14     	; 0x4c10 <__ultoa_invert+0xa2>
    4c1e:	62 0f       	add	r22, r18
    4c20:	73 1f       	adc	r23, r19
    4c22:	84 1f       	adc	r24, r20
    4c24:	95 1f       	adc	r25, r21
    4c26:	a0 1d       	adc	r26, r0
    4c28:	08 95       	ret

00004c2a <__mulsi3>:
    4c2a:	62 9f       	mul	r22, r18
    4c2c:	d0 01       	movw	r26, r0
    4c2e:	73 9f       	mul	r23, r19
    4c30:	f0 01       	movw	r30, r0
    4c32:	82 9f       	mul	r24, r18
    4c34:	e0 0d       	add	r30, r0
    4c36:	f1 1d       	adc	r31, r1
    4c38:	64 9f       	mul	r22, r20
    4c3a:	e0 0d       	add	r30, r0
    4c3c:	f1 1d       	adc	r31, r1
    4c3e:	92 9f       	mul	r25, r18
    4c40:	f0 0d       	add	r31, r0
    4c42:	83 9f       	mul	r24, r19
    4c44:	f0 0d       	add	r31, r0
    4c46:	74 9f       	mul	r23, r20
    4c48:	f0 0d       	add	r31, r0
    4c4a:	65 9f       	mul	r22, r21
    4c4c:	f0 0d       	add	r31, r0
    4c4e:	99 27       	eor	r25, r25
    4c50:	72 9f       	mul	r23, r18
    4c52:	b0 0d       	add	r27, r0
    4c54:	e1 1d       	adc	r30, r1
    4c56:	f9 1f       	adc	r31, r25
    4c58:	63 9f       	mul	r22, r19
    4c5a:	b0 0d       	add	r27, r0
    4c5c:	e1 1d       	adc	r30, r1
    4c5e:	f9 1f       	adc	r31, r25
    4c60:	bd 01       	movw	r22, r26
    4c62:	cf 01       	movw	r24, r30
    4c64:	11 24       	eor	r1, r1
    4c66:	08 95       	ret

00004c68 <__udivmodhi4>:
    4c68:	aa 1b       	sub	r26, r26
    4c6a:	bb 1b       	sub	r27, r27
    4c6c:	51 e1       	ldi	r21, 0x11	; 17
    4c6e:	07 c0       	rjmp	.+14     	; 0x4c7e <__udivmodhi4_ep>

00004c70 <__udivmodhi4_loop>:
    4c70:	aa 1f       	adc	r26, r26
    4c72:	bb 1f       	adc	r27, r27
    4c74:	a6 17       	cp	r26, r22
    4c76:	b7 07       	cpc	r27, r23
    4c78:	10 f0       	brcs	.+4      	; 0x4c7e <__udivmodhi4_ep>
    4c7a:	a6 1b       	sub	r26, r22
    4c7c:	b7 0b       	sbc	r27, r23

00004c7e <__udivmodhi4_ep>:
    4c7e:	88 1f       	adc	r24, r24
    4c80:	99 1f       	adc	r25, r25
    4c82:	5a 95       	dec	r21
    4c84:	a9 f7       	brne	.-22     	; 0x4c70 <__udivmodhi4_loop>
    4c86:	80 95       	com	r24
    4c88:	90 95       	com	r25
    4c8a:	bc 01       	movw	r22, r24
    4c8c:	cd 01       	movw	r24, r26
    4c8e:	08 95       	ret

00004c90 <__divmodhi4>:
    4c90:	97 fb       	bst	r25, 7
    4c92:	09 2e       	mov	r0, r25
    4c94:	07 26       	eor	r0, r23
    4c96:	0a d0       	rcall	.+20     	; 0x4cac <__divmodhi4_neg1>
    4c98:	77 fd       	sbrc	r23, 7
    4c9a:	04 d0       	rcall	.+8      	; 0x4ca4 <__divmodhi4_neg2>
    4c9c:	e5 df       	rcall	.-54     	; 0x4c68 <__udivmodhi4>
    4c9e:	06 d0       	rcall	.+12     	; 0x4cac <__divmodhi4_neg1>
    4ca0:	00 20       	and	r0, r0
    4ca2:	1a f4       	brpl	.+6      	; 0x4caa <__divmodhi4_exit>

00004ca4 <__divmodhi4_neg2>:
    4ca4:	70 95       	com	r23
    4ca6:	61 95       	neg	r22
    4ca8:	7f 4f       	sbci	r23, 0xFF	; 255

00004caa <__divmodhi4_exit>:
    4caa:	08 95       	ret

00004cac <__divmodhi4_neg1>:
    4cac:	f6 f7       	brtc	.-4      	; 0x4caa <__divmodhi4_exit>
    4cae:	90 95       	com	r25
    4cb0:	81 95       	neg	r24
    4cb2:	9f 4f       	sbci	r25, 0xFF	; 255
    4cb4:	08 95       	ret

00004cb6 <__udivmodsi4>:
    4cb6:	a1 e2       	ldi	r26, 0x21	; 33
    4cb8:	1a 2e       	mov	r1, r26
    4cba:	aa 1b       	sub	r26, r26
    4cbc:	bb 1b       	sub	r27, r27
    4cbe:	fd 01       	movw	r30, r26
    4cc0:	0d c0       	rjmp	.+26     	; 0x4cdc <__udivmodsi4_ep>

00004cc2 <__udivmodsi4_loop>:
    4cc2:	aa 1f       	adc	r26, r26
    4cc4:	bb 1f       	adc	r27, r27
    4cc6:	ee 1f       	adc	r30, r30
    4cc8:	ff 1f       	adc	r31, r31
    4cca:	a2 17       	cp	r26, r18
    4ccc:	b3 07       	cpc	r27, r19
    4cce:	e4 07       	cpc	r30, r20
    4cd0:	f5 07       	cpc	r31, r21
    4cd2:	20 f0       	brcs	.+8      	; 0x4cdc <__udivmodsi4_ep>
    4cd4:	a2 1b       	sub	r26, r18
    4cd6:	b3 0b       	sbc	r27, r19
    4cd8:	e4 0b       	sbc	r30, r20
    4cda:	f5 0b       	sbc	r31, r21

00004cdc <__udivmodsi4_ep>:
    4cdc:	66 1f       	adc	r22, r22
    4cde:	77 1f       	adc	r23, r23
    4ce0:	88 1f       	adc	r24, r24
    4ce2:	99 1f       	adc	r25, r25
    4ce4:	1a 94       	dec	r1
    4ce6:	69 f7       	brne	.-38     	; 0x4cc2 <__udivmodsi4_loop>
    4ce8:	60 95       	com	r22
    4cea:	70 95       	com	r23
    4cec:	80 95       	com	r24
    4cee:	90 95       	com	r25
    4cf0:	9b 01       	movw	r18, r22
    4cf2:	ac 01       	movw	r20, r24
    4cf4:	bd 01       	movw	r22, r26
    4cf6:	cf 01       	movw	r24, r30
    4cf8:	08 95       	ret

00004cfa <__prologue_saves__>:
    4cfa:	2f 92       	push	r2
    4cfc:	3f 92       	push	r3
    4cfe:	4f 92       	push	r4
    4d00:	5f 92       	push	r5
    4d02:	6f 92       	push	r6
    4d04:	7f 92       	push	r7
    4d06:	8f 92       	push	r8
    4d08:	9f 92       	push	r9
    4d0a:	af 92       	push	r10
    4d0c:	bf 92       	push	r11
    4d0e:	cf 92       	push	r12
    4d10:	df 92       	push	r13
    4d12:	ef 92       	push	r14
    4d14:	ff 92       	push	r15
    4d16:	0f 93       	push	r16
    4d18:	1f 93       	push	r17
    4d1a:	cf 93       	push	r28
    4d1c:	df 93       	push	r29
    4d1e:	cd b7       	in	r28, 0x3d	; 61
    4d20:	de b7       	in	r29, 0x3e	; 62
    4d22:	ca 1b       	sub	r28, r26
    4d24:	db 0b       	sbc	r29, r27
    4d26:	0f b6       	in	r0, 0x3f	; 63
    4d28:	f8 94       	cli
    4d2a:	de bf       	out	0x3e, r29	; 62
    4d2c:	0f be       	out	0x3f, r0	; 63
    4d2e:	cd bf       	out	0x3d, r28	; 61
    4d30:	09 94       	ijmp

00004d32 <__epilogue_restores__>:
    4d32:	2a 88       	ldd	r2, Y+18	; 0x12
    4d34:	39 88       	ldd	r3, Y+17	; 0x11
    4d36:	48 88       	ldd	r4, Y+16	; 0x10
    4d38:	5f 84       	ldd	r5, Y+15	; 0x0f
    4d3a:	6e 84       	ldd	r6, Y+14	; 0x0e
    4d3c:	7d 84       	ldd	r7, Y+13	; 0x0d
    4d3e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4d40:	9b 84       	ldd	r9, Y+11	; 0x0b
    4d42:	aa 84       	ldd	r10, Y+10	; 0x0a
    4d44:	b9 84       	ldd	r11, Y+9	; 0x09
    4d46:	c8 84       	ldd	r12, Y+8	; 0x08
    4d48:	df 80       	ldd	r13, Y+7	; 0x07
    4d4a:	ee 80       	ldd	r14, Y+6	; 0x06
    4d4c:	fd 80       	ldd	r15, Y+5	; 0x05
    4d4e:	0c 81       	ldd	r16, Y+4	; 0x04
    4d50:	1b 81       	ldd	r17, Y+3	; 0x03
    4d52:	aa 81       	ldd	r26, Y+2	; 0x02
    4d54:	b9 81       	ldd	r27, Y+1	; 0x01
    4d56:	ce 0f       	add	r28, r30
    4d58:	d1 1d       	adc	r29, r1
    4d5a:	0f b6       	in	r0, 0x3f	; 63
    4d5c:	f8 94       	cli
    4d5e:	de bf       	out	0x3e, r29	; 62
    4d60:	0f be       	out	0x3f, r0	; 63
    4d62:	cd bf       	out	0x3d, r28	; 61
    4d64:	ed 01       	movw	r28, r26
    4d66:	08 95       	ret
    4d68:	11 f4       	brne	.+4      	; 0x4d6e <__epilogue_restores__+0x3c>
    4d6a:	0e f4       	brtc	.+2      	; 0x4d6e <__epilogue_restores__+0x3c>
    4d6c:	4d c0       	rjmp	.+154    	; 0x4e08 <__fp_nan>
    4d6e:	3e c0       	rjmp	.+124    	; 0x4dec <__fp_mpack>

00004d70 <sqrt>:
    4d70:	5d d0       	rcall	.+186    	; 0x4e2c <__fp_splitA>
    4d72:	d0 f3       	brcs	.-12     	; 0x4d68 <__epilogue_restores__+0x36>
    4d74:	99 23       	and	r25, r25
    4d76:	d9 f3       	breq	.-10     	; 0x4d6e <__epilogue_restores__+0x3c>
    4d78:	ce f3       	brts	.-14     	; 0x4d6c <__epilogue_restores__+0x3a>
    4d7a:	9f 57       	subi	r25, 0x7F	; 127
    4d7c:	55 0b       	sbc	r21, r21
    4d7e:	87 ff       	sbrs	r24, 7
    4d80:	46 d0       	rcall	.+140    	; 0x4e0e <__fp_norm2>
    4d82:	00 24       	eor	r0, r0
    4d84:	a0 e6       	ldi	r26, 0x60	; 96
    4d86:	40 ea       	ldi	r20, 0xA0	; 160
    4d88:	90 01       	movw	r18, r0
    4d8a:	80 58       	subi	r24, 0x80	; 128
    4d8c:	56 95       	lsr	r21
    4d8e:	97 95       	ror	r25
    4d90:	28 f4       	brcc	.+10     	; 0x4d9c <sqrt+0x2c>
    4d92:	80 5c       	subi	r24, 0xC0	; 192
    4d94:	66 0f       	add	r22, r22
    4d96:	77 1f       	adc	r23, r23
    4d98:	88 1f       	adc	r24, r24
    4d9a:	20 f0       	brcs	.+8      	; 0x4da4 <sqrt+0x34>
    4d9c:	26 17       	cp	r18, r22
    4d9e:	37 07       	cpc	r19, r23
    4da0:	48 07       	cpc	r20, r24
    4da2:	30 f4       	brcc	.+12     	; 0x4db0 <sqrt+0x40>
    4da4:	62 1b       	sub	r22, r18
    4da6:	73 0b       	sbc	r23, r19
    4da8:	84 0b       	sbc	r24, r20
    4daa:	20 29       	or	r18, r0
    4dac:	31 29       	or	r19, r1
    4dae:	4a 2b       	or	r20, r26
    4db0:	a6 95       	lsr	r26
    4db2:	17 94       	ror	r1
    4db4:	07 94       	ror	r0
    4db6:	20 25       	eor	r18, r0
    4db8:	31 25       	eor	r19, r1
    4dba:	4a 27       	eor	r20, r26
    4dbc:	58 f7       	brcc	.-42     	; 0x4d94 <sqrt+0x24>
    4dbe:	66 0f       	add	r22, r22
    4dc0:	77 1f       	adc	r23, r23
    4dc2:	88 1f       	adc	r24, r24
    4dc4:	20 f0       	brcs	.+8      	; 0x4dce <sqrt+0x5e>
    4dc6:	26 17       	cp	r18, r22
    4dc8:	37 07       	cpc	r19, r23
    4dca:	48 07       	cpc	r20, r24
    4dcc:	30 f4       	brcc	.+12     	; 0x4dda <sqrt+0x6a>
    4dce:	62 0b       	sbc	r22, r18
    4dd0:	73 0b       	sbc	r23, r19
    4dd2:	84 0b       	sbc	r24, r20
    4dd4:	20 0d       	add	r18, r0
    4dd6:	31 1d       	adc	r19, r1
    4dd8:	41 1d       	adc	r20, r1
    4dda:	a0 95       	com	r26
    4ddc:	81 f7       	brne	.-32     	; 0x4dbe <sqrt+0x4e>
    4dde:	b9 01       	movw	r22, r18
    4de0:	84 2f       	mov	r24, r20
    4de2:	91 58       	subi	r25, 0x81	; 129
    4de4:	88 0f       	add	r24, r24
    4de6:	96 95       	lsr	r25
    4de8:	87 95       	ror	r24
    4dea:	08 95       	ret

00004dec <__fp_mpack>:
    4dec:	9f 3f       	cpi	r25, 0xFF	; 255
    4dee:	31 f0       	breq	.+12     	; 0x4dfc <__fp_mpack_finite+0xc>

00004df0 <__fp_mpack_finite>:
    4df0:	91 50       	subi	r25, 0x01	; 1
    4df2:	20 f4       	brcc	.+8      	; 0x4dfc <__fp_mpack_finite+0xc>
    4df4:	87 95       	ror	r24
    4df6:	77 95       	ror	r23
    4df8:	67 95       	ror	r22
    4dfa:	b7 95       	ror	r27
    4dfc:	88 0f       	add	r24, r24
    4dfe:	91 1d       	adc	r25, r1
    4e00:	96 95       	lsr	r25
    4e02:	87 95       	ror	r24
    4e04:	97 f9       	bld	r25, 7
    4e06:	08 95       	ret

00004e08 <__fp_nan>:
    4e08:	9f ef       	ldi	r25, 0xFF	; 255
    4e0a:	80 ec       	ldi	r24, 0xC0	; 192
    4e0c:	08 95       	ret

00004e0e <__fp_norm2>:
    4e0e:	91 50       	subi	r25, 0x01	; 1
    4e10:	50 40       	sbci	r21, 0x00	; 0
    4e12:	66 0f       	add	r22, r22
    4e14:	77 1f       	adc	r23, r23
    4e16:	88 1f       	adc	r24, r24
    4e18:	d2 f7       	brpl	.-12     	; 0x4e0e <__fp_norm2>
    4e1a:	08 95       	ret

00004e1c <__fp_split3>:
    4e1c:	57 fd       	sbrc	r21, 7
    4e1e:	90 58       	subi	r25, 0x80	; 128
    4e20:	44 0f       	add	r20, r20
    4e22:	55 1f       	adc	r21, r21
    4e24:	59 f0       	breq	.+22     	; 0x4e3c <__fp_splitA+0x10>
    4e26:	5f 3f       	cpi	r21, 0xFF	; 255
    4e28:	71 f0       	breq	.+28     	; 0x4e46 <__fp_splitA+0x1a>
    4e2a:	47 95       	ror	r20

00004e2c <__fp_splitA>:
    4e2c:	88 0f       	add	r24, r24
    4e2e:	97 fb       	bst	r25, 7
    4e30:	99 1f       	adc	r25, r25
    4e32:	61 f0       	breq	.+24     	; 0x4e4c <__fp_splitA+0x20>
    4e34:	9f 3f       	cpi	r25, 0xFF	; 255
    4e36:	79 f0       	breq	.+30     	; 0x4e56 <__fp_splitA+0x2a>
    4e38:	87 95       	ror	r24
    4e3a:	08 95       	ret
    4e3c:	12 16       	cp	r1, r18
    4e3e:	13 06       	cpc	r1, r19
    4e40:	14 06       	cpc	r1, r20
    4e42:	55 1f       	adc	r21, r21
    4e44:	f2 cf       	rjmp	.-28     	; 0x4e2a <__fp_split3+0xe>
    4e46:	46 95       	lsr	r20
    4e48:	f1 df       	rcall	.-30     	; 0x4e2c <__fp_splitA>
    4e4a:	08 c0       	rjmp	.+16     	; 0x4e5c <__fp_splitA+0x30>
    4e4c:	16 16       	cp	r1, r22
    4e4e:	17 06       	cpc	r1, r23
    4e50:	18 06       	cpc	r1, r24
    4e52:	99 1f       	adc	r25, r25
    4e54:	f1 cf       	rjmp	.-30     	; 0x4e38 <__fp_splitA+0xc>
    4e56:	86 95       	lsr	r24
    4e58:	71 05       	cpc	r23, r1
    4e5a:	61 05       	cpc	r22, r1
    4e5c:	08 94       	sec
    4e5e:	08 95       	ret

00004e60 <_exit>:
    4e60:	f8 94       	cli

00004e62 <__stop_program>:
    4e62:	ff cf       	rjmp	.-2      	; 0x4e62 <__stop_program>
