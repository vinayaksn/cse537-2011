
Vibration.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00003f12  00003fa6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003f12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002d2  00800124  00800124  00003fca  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00003fca  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000388  00000000  00000000  00003fea  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002c88  00000000  00000000  00004372  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000046a  00000000  00000000  00006ffa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000222b  00000000  00000000  00007464  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003c0  00000000  00000000  00009690  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000c5c  00000000  00000000  00009a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000034b1  00000000  00000000  0000a6ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002a8  00000000  00000000  0000db5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__ctors_end>
       4:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
       8:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
       c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      10:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      14:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      18:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      1c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      20:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      24:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      28:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      2c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      30:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      34:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      38:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      3c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      40:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      44:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      48:	0c 94 c8 02 	jmp	0x590	; 0x590 <__vector_18>
      4c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      50:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      54:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      58:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      5c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      60:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      64:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>

00000068 <__c.3561>:
      68:	53 44 20 4f 66 66 20 0d 0a 00                       SD Off ...

00000072 <__c.3556>:
      72:	41 20 6e 65 77 20 66 69 6c 65 20 77 69 6c 6c 20     A new file will 
      82:	62 65 20 63 72 65 61 74 65 64 0d 0a 00              be created...

0000008f <__c.3554>:
      8f:	4d 69 63 72 6f 53 44 63 61 72 64 20 69 6e 69 74     MicroSDcard init
      9f:	69 61 6c 69 73 65 64 20 0d 0a 00                    ialised ...

000000aa <__c.3552>:
      aa:	75 61 72 74 20 69 6e 69 74 69 61 6c 69 73 65 64     uart initialised
      ba:	20 0d 0a 00                                          ...

000000be <__c.2212>:
      be:	65 72 72 6f 72 20 64 65 6c 65 74 69 6e 67 20 66     error deleting f
      ce:	69 6c 65 3a 20 00                                   ile: .

000000d4 <__c.2188>:
      d4:	65 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 00        error opening .

000000e3 <__c.2185>:
      e3:	63 61 6c 6c 20 69 6e 69 74 5f 73 64 63 61 72 64     call init_sdcard
      f3:	28 29 20 66 69 72 73 74 20 0a 00                    () first ..

000000fe <__c.2183>:
      fe:	53 44 20 43 61 72 64 20 6e 6f 74 20 69 6e 69 74     SD Card not init
     10e:	69 61 6c 69 7a 65 64 20 70 72 6f 70 65 72 6c 79     ialized properly
     11e:	0a 00                                               ..

00000120 <__c.2166>:
     120:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     130:	20 66 69 6c 65 0a 00                                 file..

00000137 <__c.2164>:
     137:	65 72 72 6f 72 20 73 65 65 6b 69 6e 67 20 6f 6e     error seeking on
     147:	20 00                                                .

00000149 <__c.2162>:
     149:	65 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 00        error opening .

00000158 <__c.2159>:
     158:	63 61 6c 6c 20 69 6e 69 74 5f 73 64 63 61 72 64     call init_sdcard
     168:	28 29 20 66 69 72 73 74 0a 00                       () first..

00000172 <__c.2157>:
     172:	53 44 20 43 61 72 64 20 6e 6f 74 20 69 6e 69 74     SD Card not init
     182:	69 61 6c 69 7a 65 64 20 70 72 6f 70 65 72 6c 79     ialized properly
     192:	0a 00                                               ..

00000194 <__c.2136>:
     194:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     1a4:	20 66 69 6c 65 0a 00                                 file..

000001ab <__c.2134>:
     1ab:	65 72 72 6f 72 20 73 65 65 6b 69 6e 67 20 6f 6e     error seeking on
     1bb:	20 00                                                .

000001bd <__c.2132>:
     1bd:	65 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 00        error opening .

000001cc <__c.2129>:
     1cc:	63 61 6c 6c 20 69 6e 69 74 5f 73 64 63 61 72 64     call init_sdcard
     1dc:	28 29 20 66 69 72 73 74 0a 00                       () first..

000001e6 <__c.2127>:
     1e6:	53 44 20 43 61 72 64 20 6e 6f 74 20 69 6e 69 74     SD Card not init
     1f6:	69 61 6c 69 7a 65 64 20 70 72 6f 70 65 72 6c 79     ialized properly
     206:	0a 00                                               ..

00000208 <__c.2115>:
     208:	65 72 72 6f 72 20 63 72 65 61 74 69 6e 67 20 66     error creating f
     218:	69 6c 65 3a 20 00                                   ile: .

0000021e <__c.2096>:
     21e:	6f 70 65 6e 69 6e 67 20 72 6f 6f 74 20 64 69 72     opening root dir
     22e:	65 63 74 6f 72 79 20 66 61 69 6c 65 64 0a 00        ectory failed..

0000023d <__c.2093>:
     23d:	6f 70 65 6e 69 6e 67 20 66 69 6c 65 73 79 73 74     opening filesyst
     24d:	65 6d 20 66 61 69 6c 65 64 0a 00                    em failed..

00000258 <__c.2091>:
     258:	6f 70 65 6e 69 6e 67 20 70 61 72 74 69 74 69 6f     opening partitio
     268:	6e 20 66 61 69 6c 65 64 0a 00                       n failed..

00000272 <__c.2088>:
     272:	4d 4d 43 2f 53 44 20 69 6e 69 74 69 61 6c 69 7a     MMC/SD initializ
     282:	61 74 69 6f 6e 20 66 61 69 6c 65 64 0a 00           ation failed..

00000290 <__c.2267>:
     290:	66 72 65 65 3a 20 20 20 00                          free:   .

00000299 <__c.2265>:
     299:	66 6f 72 6d 61 74 3a 20 00                          format: .

000002a2 <__c.2263>:
     2a2:	77 72 2e 70 72 2e 3a 20 00                          wr.pr.: .

000002ab <__c.2261>:
     2ab:	63 6f 70 79 3a 20 20 20 00                          copy:   .

000002b4 <__c.2259>:
     2b4:	4d 42 0a 00                                         MB..

000002b8 <__c.2257>:
     2b8:	73 69 7a 65 3a 20 20 20 00                          size:   .

000002c1 <__c.2255>:
     2c1:	64 61 74 65 3a 20 20 20 00                          date:   .

000002ca <__c.2253>:
     2ca:	73 65 72 69 61 6c 3a 20 30 78 00                    serial: 0x.

000002d5 <__c.2251>:
     2d5:	72 65 76 3a 20 20 20 20 00                          rev:    .

000002de <__c.2249>:
     2de:	70 72 6f 64 3a 20 20 20 00                          prod:   .

000002e7 <__c.2247>:
     2e7:	6f 65 6d 3a 20 20 20 20 00                          oem:    .

000002f0 <__c.2245>:
     2f0:	6d 61 6e 75 66 3a 20 20 30 78 00 00                 manuf:  0x..

000002fc <__ctors_end>:
     2fc:	11 24       	eor	r1, r1
     2fe:	1f be       	out	0x3f, r1	; 63
     300:	cf ef       	ldi	r28, 0xFF	; 255
     302:	d8 e0       	ldi	r29, 0x08	; 8
     304:	de bf       	out	0x3e, r29	; 62
     306:	cd bf       	out	0x3d, r28	; 61

00000308 <__do_copy_data>:
     308:	11 e0       	ldi	r17, 0x01	; 1
     30a:	a0 e0       	ldi	r26, 0x00	; 0
     30c:	b1 e0       	ldi	r27, 0x01	; 1
     30e:	e2 e1       	ldi	r30, 0x12	; 18
     310:	ff e3       	ldi	r31, 0x3F	; 63
     312:	02 c0       	rjmp	.+4      	; 0x318 <.do_copy_data_start>

00000314 <.do_copy_data_loop>:
     314:	05 90       	lpm	r0, Z+
     316:	0d 92       	st	X+, r0

00000318 <.do_copy_data_start>:
     318:	a4 32       	cpi	r26, 0x24	; 36
     31a:	b1 07       	cpc	r27, r17
     31c:	d9 f7       	brne	.-10     	; 0x314 <.do_copy_data_loop>

0000031e <__do_clear_bss>:
     31e:	13 e0       	ldi	r17, 0x03	; 3
     320:	a4 e2       	ldi	r26, 0x24	; 36
     322:	b1 e0       	ldi	r27, 0x01	; 1
     324:	01 c0       	rjmp	.+2      	; 0x328 <.do_clear_bss_start>

00000326 <.do_clear_bss_loop>:
     326:	1d 92       	st	X+, r1

00000328 <.do_clear_bss_start>:
     328:	a6 3f       	cpi	r26, 0xF6	; 246
     32a:	b1 07       	cpc	r27, r17
     32c:	e1 f7       	brne	.-8      	; 0x326 <.do_clear_bss_loop>
     32e:	0e 94 8a 1b 	call	0x3714	; 0x3714 <main>
     332:	0c 94 87 1f 	jmp	0x3f0e	; 0x3f0e <_exit>

00000336 <__bad_interrupt>:
     336:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000033a <uart_init>:
#define USE_SLEEP 1

void uart_init()
{
    /* set baud rate */
    UBRRH = UBRRVAL >> 8;
     33a:	10 92 c5 00 	sts	0x00C5, r1
    UBRRL = UBRRVAL & 0xff;
     33e:	87 e6       	ldi	r24, 0x67	; 103
     340:	80 93 c4 00 	sts	0x00C4, r24
    /* set frame format: 8 bit, no parity, 1 bit */
    UCSRC = UCSRC_SELECT | (1 << UCSZ1) | (1 << UCSZ0);
     344:	86 e0       	ldi	r24, 0x06	; 6
     346:	80 93 c2 00 	sts	0x00C2, r24
    /* enable serial receiver and transmitter */
#if !USE_SLEEP
    UCSRB = (1 << RXEN) | (1 << TXEN);
#else
    UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
     34a:	88 e9       	ldi	r24, 0x98	; 152
     34c:	80 93 c1 00 	sts	0x00C1, r24
#endif
}
     350:	08 95       	ret

00000352 <uart_putc>:

void uart_putc(uint8_t c)
{
     352:	1f 93       	push	r17
     354:	18 2f       	mov	r17, r24
    if(c == '\n')
     356:	8a 30       	cpi	r24, 0x0A	; 10
     358:	19 f4       	brne	.+6      	; 0x360 <uart_putc+0xe>
        uart_putc('\r');
     35a:	8d e0       	ldi	r24, 0x0D	; 13
     35c:	0e 94 a9 01 	call	0x352	; 0x352 <uart_putc>

    /* wait until transmit buffer is empty */
    while(!(UCSRA & (1 << UDRE)));
     360:	80 91 c0 00 	lds	r24, 0x00C0
     364:	85 ff       	sbrs	r24, 5
     366:	fc cf       	rjmp	.-8      	; 0x360 <uart_putc+0xe>

    /* send next byte */
    UDR = c;
     368:	10 93 c6 00 	sts	0x00C6, r17
}
     36c:	1f 91       	pop	r17
     36e:	08 95       	ret

00000370 <uart_putc_hex>:

void uart_putc_hex(uint8_t b)
{
     370:	1f 93       	push	r17
     372:	18 2f       	mov	r17, r24
    /* upper nibble */
    if((b >> 4) < 0x0a)
     374:	82 95       	swap	r24
     376:	8f 70       	andi	r24, 0x0F	; 15
     378:	8a 30       	cpi	r24, 0x0A	; 10
     37a:	10 f4       	brcc	.+4      	; 0x380 <uart_putc_hex+0x10>
        uart_putc((b >> 4) + '0');
     37c:	80 5d       	subi	r24, 0xD0	; 208
     37e:	01 c0       	rjmp	.+2      	; 0x382 <uart_putc_hex+0x12>
    else
        uart_putc((b >> 4) - 0x0a + 'a');
     380:	89 5a       	subi	r24, 0xA9	; 169
     382:	0e 94 a9 01 	call	0x352	; 0x352 <uart_putc>

    /* lower nibble */
    if((b & 0x0f) < 0x0a)
     386:	81 2f       	mov	r24, r17
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	8f 70       	andi	r24, 0x0F	; 15
     38c:	90 70       	andi	r25, 0x00	; 0
     38e:	21 2f       	mov	r18, r17
     390:	2f 70       	andi	r18, 0x0F	; 15
     392:	0a 97       	sbiw	r24, 0x0a	; 10
     394:	1c f4       	brge	.+6      	; 0x39c <uart_putc_hex+0x2c>
        uart_putc((b & 0x0f) + '0');
     396:	82 2f       	mov	r24, r18
     398:	80 5d       	subi	r24, 0xD0	; 208
     39a:	02 c0       	rjmp	.+4      	; 0x3a0 <uart_putc_hex+0x30>
    else
        uart_putc((b & 0x0f) - 0x0a + 'a');
     39c:	82 2f       	mov	r24, r18
     39e:	89 5a       	subi	r24, 0xA9	; 169
     3a0:	0e 94 a9 01 	call	0x352	; 0x352 <uart_putc>
}
     3a4:	1f 91       	pop	r17
     3a6:	08 95       	ret

000003a8 <uart_putw_hex>:

void uart_putw_hex(uint16_t w)
{
     3a8:	1f 93       	push	r17
     3aa:	18 2f       	mov	r17, r24
    uart_putc_hex((uint8_t) (w >> 8));
     3ac:	89 2f       	mov	r24, r25
     3ae:	0e 94 b8 01 	call	0x370	; 0x370 <uart_putc_hex>
    uart_putc_hex((uint8_t) (w & 0xff));
     3b2:	81 2f       	mov	r24, r17
     3b4:	0e 94 b8 01 	call	0x370	; 0x370 <uart_putc_hex>
}
     3b8:	1f 91       	pop	r17
     3ba:	08 95       	ret

000003bc <uart_putdw_hex>:

void uart_putdw_hex(uint32_t dw)
{
     3bc:	ef 92       	push	r14
     3be:	ff 92       	push	r15
     3c0:	0f 93       	push	r16
     3c2:	1f 93       	push	r17
     3c4:	7b 01       	movw	r14, r22
     3c6:	8c 01       	movw	r16, r24
    uart_putw_hex((uint16_t) (dw >> 16));
     3c8:	c8 01       	movw	r24, r16
     3ca:	aa 27       	eor	r26, r26
     3cc:	bb 27       	eor	r27, r27
     3ce:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <uart_putw_hex>
    uart_putw_hex((uint16_t) (dw & 0xffff));
     3d2:	c7 01       	movw	r24, r14
     3d4:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <uart_putw_hex>
}
     3d8:	1f 91       	pop	r17
     3da:	0f 91       	pop	r16
     3dc:	ff 90       	pop	r15
     3de:	ef 90       	pop	r14
     3e0:	08 95       	ret

000003e2 <uart_putw_dec>:

void uart_putw_dec(uint16_t w)
{
     3e2:	cf 92       	push	r12
     3e4:	df 92       	push	r13
     3e6:	ff 92       	push	r15
     3e8:	0f 93       	push	r16
     3ea:	1f 93       	push	r17
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
     3f0:	6c 01       	movw	r12, r24
     3f2:	c0 e1       	ldi	r28, 0x10	; 16
     3f4:	d7 e2       	ldi	r29, 0x27	; 39
     3f6:	40 e0       	ldi	r20, 0x00	; 0
     3f8:	00 e0       	ldi	r16, 0x00	; 0
     3fa:	10 e0       	ldi	r17, 0x00	; 0
    uint16_t num = 10000;
    uint8_t started = 0;

    while(num > 0)
    {
        uint8_t b = w / num;
     3fc:	c6 01       	movw	r24, r12
     3fe:	be 01       	movw	r22, r28
     400:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodhi4>
     404:	f6 2e       	mov	r15, r22
        if(b > 0 || started || num == 1)
     406:	66 23       	and	r22, r22
     408:	29 f4       	brne	.+10     	; 0x414 <uart_putw_dec+0x32>
     40a:	44 23       	and	r20, r20
     40c:	19 f4       	brne	.+6      	; 0x414 <uart_putw_dec+0x32>
     40e:	c1 30       	cpi	r28, 0x01	; 1
     410:	d1 05       	cpc	r29, r1
     412:	29 f4       	brne	.+10     	; 0x41e <uart_putw_dec+0x3c>
        {
            uart_putc('0' + b);
     414:	8f 2d       	mov	r24, r15
     416:	80 5d       	subi	r24, 0xD0	; 208
     418:	0e 94 a9 01 	call	0x352	; 0x352 <uart_putc>
     41c:	41 e0       	ldi	r20, 0x01	; 1
            started = 1;
        }
        w -= b * num;

        num /= 10;
     41e:	ce 01       	movw	r24, r28
     420:	6a e0       	ldi	r22, 0x0A	; 10
     422:	70 e0       	ldi	r23, 0x00	; 0
     424:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodhi4>
     428:	0f 5f       	subi	r16, 0xFF	; 255
     42a:	1f 4f       	sbci	r17, 0xFF	; 255
void uart_putw_dec(uint16_t w)
{
    uint16_t num = 10000;
    uint8_t started = 0;

    while(num > 0)
     42c:	05 30       	cpi	r16, 0x05	; 5
     42e:	11 05       	cpc	r17, r1
     430:	71 f0       	breq	.+28     	; 0x44e <uart_putw_dec+0x6c>
        if(b > 0 || started || num == 1)
        {
            uart_putc('0' + b);
            started = 1;
        }
        w -= b * num;
     432:	8f 2d       	mov	r24, r15
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	9c 01       	movw	r18, r24
     438:	2c 9f       	mul	r18, r28
     43a:	c0 01       	movw	r24, r0
     43c:	2d 9f       	mul	r18, r29
     43e:	90 0d       	add	r25, r0
     440:	3c 9f       	mul	r19, r28
     442:	90 0d       	add	r25, r0
     444:	11 24       	eor	r1, r1
     446:	c8 1a       	sub	r12, r24
     448:	d9 0a       	sbc	r13, r25
     44a:	eb 01       	movw	r28, r22
     44c:	d7 cf       	rjmp	.-82     	; 0x3fc <uart_putw_dec+0x1a>

        num /= 10;
    }
}
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	1f 91       	pop	r17
     454:	0f 91       	pop	r16
     456:	ff 90       	pop	r15
     458:	df 90       	pop	r13
     45a:	cf 90       	pop	r12
     45c:	08 95       	ret

0000045e <uart_putdw_dec>:

void uart_putdw_dec(uint32_t dw)
{
     45e:	4f 92       	push	r4
     460:	5f 92       	push	r5
     462:	6f 92       	push	r6
     464:	7f 92       	push	r7
     466:	8f 92       	push	r8
     468:	9f 92       	push	r9
     46a:	af 92       	push	r10
     46c:	bf 92       	push	r11
     46e:	cf 92       	push	r12
     470:	df 92       	push	r13
     472:	ef 92       	push	r14
     474:	ff 92       	push	r15
     476:	0f 93       	push	r16
     478:	1f 93       	push	r17
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	5b 01       	movw	r10, r22
     480:	6c 01       	movw	r12, r24
     482:	e1 2c       	mov	r14, r1
     484:	9a ec       	ldi	r25, 0xCA	; 202
     486:	f9 2e       	mov	r15, r25
     488:	9a e9       	ldi	r25, 0x9A	; 154
     48a:	09 2f       	mov	r16, r25
     48c:	9b e3       	ldi	r25, 0x3B	; 59
     48e:	19 2f       	mov	r17, r25
     490:	44 24       	eor	r4, r4
     492:	c0 e0       	ldi	r28, 0x00	; 0
     494:	d0 e0       	ldi	r29, 0x00	; 0
    uint32_t num = 1000000000;
    uint8_t started = 0;

    while(num > 0)
    {
        uint8_t b = dw / num;
     496:	c6 01       	movw	r24, r12
     498:	b5 01       	movw	r22, r10
     49a:	a8 01       	movw	r20, r16
     49c:	97 01       	movw	r18, r14
     49e:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__udivmodsi4>
     4a2:	92 2e       	mov	r9, r18
        if(b > 0 || started || num == 1)
     4a4:	22 23       	and	r18, r18
     4a6:	41 f4       	brne	.+16     	; 0x4b8 <uart_putdw_dec+0x5a>
     4a8:	44 20       	and	r4, r4
     4aa:	31 f4       	brne	.+12     	; 0x4b8 <uart_putdw_dec+0x5a>
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	e8 16       	cp	r14, r24
     4b0:	f1 04       	cpc	r15, r1
     4b2:	01 05       	cpc	r16, r1
     4b4:	11 05       	cpc	r17, r1
     4b6:	31 f4       	brne	.+12     	; 0x4c4 <uart_putdw_dec+0x66>
        {
            uart_putc('0' + b);
     4b8:	89 2d       	mov	r24, r9
     4ba:	80 5d       	subi	r24, 0xD0	; 208
     4bc:	0e 94 a9 01 	call	0x352	; 0x352 <uart_putc>
     4c0:	44 24       	eor	r4, r4
     4c2:	43 94       	inc	r4
            started = 1;
        }
        dw -= b * num;

        num /= 10;
     4c4:	c8 01       	movw	r24, r16
     4c6:	b7 01       	movw	r22, r14
     4c8:	2a e0       	ldi	r18, 0x0A	; 10
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	40 e0       	ldi	r20, 0x00	; 0
     4ce:	50 e0       	ldi	r21, 0x00	; 0
     4d0:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__udivmodsi4>
     4d4:	82 2e       	mov	r8, r18
     4d6:	73 2e       	mov	r7, r19
     4d8:	64 2e       	mov	r6, r20
     4da:	55 2e       	mov	r5, r21
     4dc:	21 96       	adiw	r28, 0x01	; 1
void uart_putdw_dec(uint32_t dw)
{
    uint32_t num = 1000000000;
    uint8_t started = 0;

    while(num > 0)
     4de:	ca 30       	cpi	r28, 0x0A	; 10
     4e0:	d1 05       	cpc	r29, r1
     4e2:	a9 f0       	breq	.+42     	; 0x50e <uart_putdw_dec+0xb0>
        if(b > 0 || started || num == 1)
        {
            uart_putc('0' + b);
            started = 1;
        }
        dw -= b * num;
     4e4:	69 2d       	mov	r22, r9
     4e6:	70 e0       	ldi	r23, 0x00	; 0
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	a8 01       	movw	r20, r16
     4ee:	97 01       	movw	r18, r14
     4f0:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <__mulsi3>
     4f4:	a6 1a       	sub	r10, r22
     4f6:	b7 0a       	sbc	r11, r23
     4f8:	c8 0a       	sbc	r12, r24
     4fa:	d9 0a       	sbc	r13, r25
     4fc:	28 2d       	mov	r18, r8
     4fe:	37 2d       	mov	r19, r7
     500:	46 2d       	mov	r20, r6
     502:	55 2d       	mov	r21, r5
     504:	c9 01       	movw	r24, r18
     506:	da 01       	movw	r26, r20
     508:	7c 01       	movw	r14, r24
     50a:	8d 01       	movw	r16, r26
     50c:	c4 cf       	rjmp	.-120    	; 0x496 <uart_putdw_dec+0x38>

        num /= 10;
    }
}
     50e:	df 91       	pop	r29
     510:	cf 91       	pop	r28
     512:	1f 91       	pop	r17
     514:	0f 91       	pop	r16
     516:	ff 90       	pop	r15
     518:	ef 90       	pop	r14
     51a:	df 90       	pop	r13
     51c:	cf 90       	pop	r12
     51e:	bf 90       	pop	r11
     520:	af 90       	pop	r10
     522:	9f 90       	pop	r9
     524:	8f 90       	pop	r8
     526:	7f 90       	pop	r7
     528:	6f 90       	pop	r6
     52a:	5f 90       	pop	r5
     52c:	4f 90       	pop	r4
     52e:	08 95       	ret

00000530 <uart_puts>:

void uart_puts(const char* str)
{
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
     534:	ec 01       	movw	r28, r24
     536:	03 c0       	rjmp	.+6      	; 0x53e <uart_puts+0xe>
    while(*str)
        uart_putc(*str++);
     538:	21 96       	adiw	r28, 0x01	; 1
     53a:	0e 94 a9 01 	call	0x352	; 0x352 <uart_putc>
    }
}

void uart_puts(const char* str)
{
    while(*str)
     53e:	88 81       	ld	r24, Y
     540:	88 23       	and	r24, r24
     542:	d1 f7       	brne	.-12     	; 0x538 <uart_puts+0x8>
        uart_putc(*str++);
}
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	08 95       	ret

0000054a <uart_puts_p>:

void uart_puts_p(PGM_P str)
{
     54a:	cf 93       	push	r28
     54c:	df 93       	push	r29
     54e:	ec 01       	movw	r28, r24
     550:	fe 01       	movw	r30, r28
    while(1)
    {
        uint8_t b = pgm_read_byte_near(str++);
     552:	21 96       	adiw	r28, 0x01	; 1
     554:	84 91       	lpm	r24, Z+
        if(!b)
     556:	88 23       	and	r24, r24
     558:	19 f0       	breq	.+6      	; 0x560 <uart_puts_p+0x16>
            break;

        uart_putc(b);
     55a:	0e 94 a9 01 	call	0x352	; 0x352 <uart_putc>
     55e:	f8 cf       	rjmp	.-16     	; 0x550 <uart_puts_p+0x6>
    }
}
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	08 95       	ret

00000566 <uart_getc>:

uint8_t uart_getc()
{
    /* wait until receive buffer is full */
#if USE_SLEEP
    uint8_t sreg = SREG;
     566:	9f b7       	in	r25, 0x3f	; 63
    sei();
     568:	78 94       	sei
     56a:	07 c0       	rjmp	.+14     	; 0x57a <uart_getc+0x14>

    while(!(UCSRA & (1 << RXC)))
        sleep_mode();
     56c:	83 b7       	in	r24, 0x33	; 51
     56e:	81 60       	ori	r24, 0x01	; 1
     570:	83 bf       	out	0x33, r24	; 51
     572:	88 95       	sleep
     574:	83 b7       	in	r24, 0x33	; 51
     576:	8e 7f       	andi	r24, 0xFE	; 254
     578:	83 bf       	out	0x33, r24	; 51
    /* wait until receive buffer is full */
#if USE_SLEEP
    uint8_t sreg = SREG;
    sei();

    while(!(UCSRA & (1 << RXC)))
     57a:	80 91 c0 00 	lds	r24, 0x00C0
     57e:	87 ff       	sbrs	r24, 7
     580:	f5 cf       	rjmp	.-22     	; 0x56c <uart_getc+0x6>
        sleep_mode();

    SREG = sreg;
     582:	9f bf       	out	0x3f, r25	; 63
#else
    while(!(UCSRA & (1 << RXC)));
#endif

    uint8_t b = UDR;
     584:	80 91 c6 00 	lds	r24, 0x00C6
    if(b == '\r')
     588:	8d 30       	cpi	r24, 0x0D	; 13
     58a:	09 f4       	brne	.+2      	; 0x58e <uart_getc+0x28>
     58c:	8a e0       	ldi	r24, 0x0A	; 10
        b = '\n';

    return b;
}
     58e:	08 95       	ret

00000590 <__vector_18>:

EMPTY_INTERRUPT(USART_RXC_vect)
     590:	18 95       	reti

00000592 <fat_close>:
 *
 * \param[in] fs The filesystem to close.
 * \see fat_open
 */
void fat_close(struct fat_fs_struct* fs)
{
     592:	fc 01       	movw	r30, r24
    if(!fs)
     594:	00 97       	sbiw	r24, 0x00	; 0
     596:	11 f0       	breq	.+4      	; 0x59c <fat_close+0xa>
        return;

#if USE_DYNAMIC_MEMORY
    free(fs);
#else
    fs->partition = 0;
     598:	11 82       	std	Z+1, r1	; 0x01
     59a:	10 82       	st	Z, r1
     59c:	08 95       	ret

0000059e <fat_get_next_cluster>:
 * \param[in] fs The filesystem for which to determine the next cluster.
 * \param[in] cluster_num The number of the cluster for which to determine its successor.
 * \returns The wanted cluster number, or 0 on error.
 */
cluster_t fat_get_next_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
     59e:	df 93       	push	r29
     5a0:	cf 93       	push	r28
     5a2:	00 d0       	rcall	.+0      	; 0x5a4 <fat_get_next_cluster+0x6>
     5a4:	cd b7       	in	r28, 0x3d	; 61
     5a6:	de b7       	in	r29, 0x3e	; 62
     5a8:	dc 01       	movw	r26, r24
    if(!fs || cluster_num < 2)
     5aa:	00 97       	sbiw	r24, 0x00	; 0
     5ac:	81 f1       	breq	.+96     	; 0x60e <fat_get_next_cluster+0x70>
     5ae:	62 30       	cpi	r22, 0x02	; 2
     5b0:	71 05       	cpc	r23, r1
     5b2:	68 f1       	brcs	.+90     	; 0x60e <fat_get_next_cluster+0x70>
    else
#endif
    {
        /* read appropriate fat entry */
        uint16_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
     5b4:	ed 91       	ld	r30, X+
     5b6:	fc 91       	ld	r31, X
     5b8:	11 97       	sbiw	r26, 0x01	; 1
     5ba:	66 0f       	add	r22, r22
     5bc:	77 1f       	adc	r23, r23
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	16 96       	adiw	r26, 0x06	; 6
     5c4:	2d 91       	ld	r18, X+
     5c6:	3d 91       	ld	r19, X+
     5c8:	4d 91       	ld	r20, X+
     5ca:	5c 91       	ld	r21, X
     5cc:	19 97       	sbiw	r26, 0x09	; 9
     5ce:	62 0f       	add	r22, r18
     5d0:	73 1f       	adc	r23, r19
     5d2:	84 1f       	adc	r24, r20
     5d4:	95 1f       	adc	r25, r21
     5d6:	01 90       	ld	r0, Z+
     5d8:	f0 81       	ld	r31, Z
     5da:	e0 2d       	mov	r30, r0
     5dc:	ae 01       	movw	r20, r28
     5de:	4f 5f       	subi	r20, 0xFF	; 255
     5e0:	5f 4f       	sbci	r21, 0xFF	; 255
     5e2:	22 e0       	ldi	r18, 0x02	; 2
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	09 95       	icall
     5e8:	88 23       	and	r24, r24
     5ea:	89 f0       	breq	.+34     	; 0x60e <fat_get_next_cluster+0x70>
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh16(fat_entry);
     5ec:	29 81       	ldd	r18, Y+1	; 0x01
     5ee:	3a 81       	ldd	r19, Y+2	; 0x02
        
        if(cluster_num == FAT16_CLUSTER_FREE ||
     5f0:	21 15       	cp	r18, r1
     5f2:	31 05       	cpc	r19, r1
     5f4:	71 f0       	breq	.+28     	; 0x612 <fat_get_next_cluster+0x74>
     5f6:	8f ef       	ldi	r24, 0xFF	; 255
     5f8:	27 3f       	cpi	r18, 0xF7	; 247
     5fa:	38 07       	cpc	r19, r24
     5fc:	41 f0       	breq	.+16     	; 0x60e <fat_get_next_cluster+0x70>
     5fe:	c9 01       	movw	r24, r18
     600:	40 96       	adiw	r24, 0x10	; 16
     602:	07 97       	sbiw	r24, 0x07	; 7
     604:	20 f0       	brcs	.+8      	; 0x60e <fat_get_next_cluster+0x70>
     606:	8f ef       	ldi	r24, 0xFF	; 255
     608:	28 3f       	cpi	r18, 0xF8	; 248
     60a:	38 07       	cpc	r19, r24
     60c:	10 f0       	brcs	.+4      	; 0x612 <fat_get_next_cluster+0x74>
     60e:	20 e0       	ldi	r18, 0x00	; 0
     610:	30 e0       	ldi	r19, 0x00	; 0
           (cluster_num >= FAT16_CLUSTER_LAST_MIN && cluster_num <= FAT16_CLUSTER_LAST_MAX))
            return 0;
    }

    return cluster_num;
}
     612:	c9 01       	movw	r24, r18
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	cf 91       	pop	r28
     61a:	df 91       	pop	r29
     61c:	08 95       	ret

0000061e <fat_free_clusters>:
 * \param[in] cluster_num The starting cluster of the chain which to free.
 * \returns 0 on failure, 1 on success.
 * \see fat_terminate_clusters
 */
uint8_t fat_free_clusters(struct fat_fs_struct* fs, cluster_t cluster_num)
{
     61e:	4f 92       	push	r4
     620:	5f 92       	push	r5
     622:	6f 92       	push	r6
     624:	7f 92       	push	r7
     626:	8f 92       	push	r8
     628:	9f 92       	push	r9
     62a:	af 92       	push	r10
     62c:	bf 92       	push	r11
     62e:	cf 92       	push	r12
     630:	df 92       	push	r13
     632:	ef 92       	push	r14
     634:	ff 92       	push	r15
     636:	0f 93       	push	r16
     638:	1f 93       	push	r17
     63a:	df 93       	push	r29
     63c:	cf 93       	push	r28
     63e:	00 d0       	rcall	.+0      	; 0x640 <fat_free_clusters+0x22>
     640:	cd b7       	in	r28, 0x3d	; 61
     642:	de b7       	in	r29, 0x3e	; 62
     644:	5c 01       	movw	r10, r24
    if(!fs || cluster_num < 2)
     646:	00 97       	sbiw	r24, 0x00	; 0
     648:	09 f4       	brne	.+2      	; 0x64c <fat_free_clusters+0x2e>
     64a:	49 c0       	rjmp	.+146    	; 0x6de <fat_free_clusters+0xc0>
     64c:	62 30       	cpi	r22, 0x02	; 2
     64e:	71 05       	cpc	r23, r1
     650:	08 f4       	brcc	.+2      	; 0x654 <fat_free_clusters+0x36>
     652:	45 c0       	rjmp	.+138    	; 0x6de <fat_free_clusters+0xc0>
        return 0;

    offset_t fat_offset = fs->header.fat_offset;
     654:	dc 01       	movw	r26, r24
     656:	16 96       	adiw	r26, 0x06	; 6
     658:	6d 90       	ld	r6, X+
     65a:	7d 90       	ld	r7, X+
     65c:	8d 90       	ld	r8, X+
     65e:	9c 90       	ld	r9, X
     660:	19 97       	sbiw	r26, 0x09	; 9
#endif
    {
        uint16_t fat_entry;
        while(cluster_num)
        {
            if(!fs->partition->device_read(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
     662:	2e 01       	movw	r4, r28
     664:	08 94       	sec
     666:	41 1c       	adc	r4, r1
     668:	51 1c       	adc	r5, r1
     66a:	66 0f       	add	r22, r22
     66c:	77 1f       	adc	r23, r23
     66e:	7b 01       	movw	r14, r22
     670:	00 e0       	ldi	r16, 0x00	; 0
     672:	10 e0       	ldi	r17, 0x00	; 0
     674:	e6 0c       	add	r14, r6
     676:	f7 1c       	adc	r15, r7
     678:	08 1d       	adc	r16, r8
     67a:	19 1d       	adc	r17, r9
     67c:	d5 01       	movw	r26, r10
     67e:	ed 91       	ld	r30, X+
     680:	fc 91       	ld	r31, X
     682:	01 90       	ld	r0, Z+
     684:	f0 81       	ld	r31, Z
     686:	e0 2d       	mov	r30, r0
     688:	c8 01       	movw	r24, r16
     68a:	b7 01       	movw	r22, r14
     68c:	a2 01       	movw	r20, r4
     68e:	22 e0       	ldi	r18, 0x02	; 2
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	09 95       	icall
     694:	88 23       	and	r24, r24
     696:	19 f1       	breq	.+70     	; 0x6de <fat_free_clusters+0xc0>
                return 0;

            /* get next cluster of current cluster before freeing current cluster */
            uint16_t cluster_num_next = ltoh16(fat_entry);
     698:	c9 80       	ldd	r12, Y+1	; 0x01
     69a:	da 80       	ldd	r13, Y+2	; 0x02

            if(cluster_num_next == FAT16_CLUSTER_FREE)
     69c:	c1 14       	cp	r12, r1
     69e:	d1 04       	cpc	r13, r1
     6a0:	01 f1       	breq	.+64     	; 0x6e2 <fat_free_clusters+0xc4>
                return 1;
            if(cluster_num_next == FAT16_CLUSTER_BAD ||
     6a2:	c6 01       	movw	r24, r12
     6a4:	40 96       	adiw	r24, 0x10	; 16
     6a6:	08 97       	sbiw	r24, 0x08	; 8
     6a8:	d0 f0       	brcs	.+52     	; 0x6de <fat_free_clusters+0xc0>
               (cluster_num_next >= FAT16_CLUSTER_RESERVED_MIN &&
                cluster_num_next <= FAT16_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
            if(cluster_num_next >= FAT16_CLUSTER_LAST_MIN && cluster_num_next <= FAT16_CLUSTER_LAST_MAX)
     6aa:	b8 ef       	ldi	r27, 0xF8	; 248
     6ac:	cb 16       	cp	r12, r27
     6ae:	bf ef       	ldi	r27, 0xFF	; 255
     6b0:	db 06       	cpc	r13, r27
     6b2:	10 f0       	brcs	.+4      	; 0x6b8 <fat_free_clusters+0x9a>
     6b4:	cc 24       	eor	r12, r12
     6b6:	dd 24       	eor	r13, r13
                cluster_num_next = 0;

            /* free cluster */
            fat_entry = HTOL16(FAT16_CLUSTER_FREE);
     6b8:	1a 82       	std	Y+2, r1	; 0x02
     6ba:	19 82       	std	Y+1, r1	; 0x01
            fs->partition->device_write(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry));
     6bc:	d5 01       	movw	r26, r10
     6be:	ed 91       	ld	r30, X+
     6c0:	fc 91       	ld	r31, X
     6c2:	04 80       	ldd	r0, Z+4	; 0x04
     6c4:	f5 81       	ldd	r31, Z+5	; 0x05
     6c6:	e0 2d       	mov	r30, r0
     6c8:	c8 01       	movw	r24, r16
     6ca:	b7 01       	movw	r22, r14
     6cc:	a2 01       	movw	r20, r4
     6ce:	22 e0       	ldi	r18, 0x02	; 2
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	09 95       	icall
     6d4:	b6 01       	movw	r22, r12
    }
    else
#endif
    {
        uint16_t fat_entry;
        while(cluster_num)
     6d6:	c1 14       	cp	r12, r1
     6d8:	d1 04       	cpc	r13, r1
     6da:	39 f6       	brne	.-114    	; 0x66a <fat_free_clusters+0x4c>
     6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <fat_free_clusters+0xc4>
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	01 c0       	rjmp	.+2      	; 0x6e4 <fat_free_clusters+0xc6>
     6e2:	81 e0       	ldi	r24, 0x01	; 1
            cluster_num = cluster_num_next;
        }
    }

    return 1;
}
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
     6e8:	cf 91       	pop	r28
     6ea:	df 91       	pop	r29
     6ec:	1f 91       	pop	r17
     6ee:	0f 91       	pop	r16
     6f0:	ff 90       	pop	r15
     6f2:	ef 90       	pop	r14
     6f4:	df 90       	pop	r13
     6f6:	cf 90       	pop	r12
     6f8:	bf 90       	pop	r11
     6fa:	af 90       	pop	r10
     6fc:	9f 90       	pop	r9
     6fe:	8f 90       	pop	r8
     700:	7f 90       	pop	r7
     702:	6f 90       	pop	r6
     704:	5f 90       	pop	r5
     706:	4f 90       	pop	r4
     708:	08 95       	ret

0000070a <fat_append_clusters>:
 * \param[in] cluster_num The cluster to which to append the new chain.
 * \param[in] count The number of clusters to allocate.
 * \returns 0 on failure, the number of the first new cluster on success.
 */
cluster_t fat_append_clusters(struct fat_fs_struct* fs, cluster_t cluster_num, cluster_t count)
{
     70a:	2f 92       	push	r2
     70c:	3f 92       	push	r3
     70e:	4f 92       	push	r4
     710:	5f 92       	push	r5
     712:	6f 92       	push	r6
     714:	7f 92       	push	r7
     716:	8f 92       	push	r8
     718:	9f 92       	push	r9
     71a:	af 92       	push	r10
     71c:	bf 92       	push	r11
     71e:	cf 92       	push	r12
     720:	df 92       	push	r13
     722:	ef 92       	push	r14
     724:	ff 92       	push	r15
     726:	0f 93       	push	r16
     728:	1f 93       	push	r17
     72a:	df 93       	push	r29
     72c:	cf 93       	push	r28
     72e:	cd b7       	in	r28, 0x3d	; 61
     730:	de b7       	in	r29, 0x3e	; 62
     732:	2c 97       	sbiw	r28, 0x0c	; 12
     734:	0f b6       	in	r0, 0x3f	; 63
     736:	f8 94       	cli
     738:	de bf       	out	0x3e, r29	; 62
     73a:	0f be       	out	0x3f, r0	; 63
     73c:	cd bf       	out	0x3d, r28	; 61
     73e:	4c 01       	movw	r8, r24
     740:	1b 01       	movw	r2, r22
     742:	ca 01       	movw	r24, r20
    if(!fs)
     744:	81 14       	cp	r8, r1
     746:	91 04       	cpc	r9, r1
     748:	09 f4       	brne	.+2      	; 0x74c <fat_append_clusters+0x42>
     74a:	ab c0       	rjmp	.+342    	; 0x8a2 <fat_append_clusters+0x198>
        return 0;

    device_read_t device_read = fs->partition->device_read;
     74c:	d4 01       	movw	r26, r8
     74e:	ed 91       	ld	r30, X+
     750:	fc 91       	ld	r31, X
     752:	11 97       	sbiw	r26, 0x01	; 1
     754:	20 81       	ld	r18, Z
     756:	31 81       	ldd	r19, Z+1	; 0x01
     758:	3c 87       	std	Y+12, r19	; 0x0c
     75a:	2b 87       	std	Y+11, r18	; 0x0b
    device_write_t device_write = fs->partition->device_write;
     75c:	44 81       	ldd	r20, Z+4	; 0x04
     75e:	55 81       	ldd	r21, Z+5	; 0x05
     760:	5a 87       	std	Y+10, r21	; 0x0a
     762:	49 87       	std	Y+9, r20	; 0x09
    offset_t fat_offset = fs->header.fat_offset;
     764:	16 96       	adiw	r26, 0x06	; 6
     766:	2d 91       	ld	r18, X+
     768:	3d 91       	ld	r19, X+
     76a:	4d 91       	ld	r20, X+
     76c:	5c 91       	ld	r21, X
     76e:	19 97       	sbiw	r26, 0x09	; 9
     770:	2d 83       	std	Y+5, r18	; 0x05
     772:	3e 83       	std	Y+6, r19	; 0x06
     774:	4f 83       	std	Y+7, r20	; 0x07
     776:	58 87       	std	Y+8, r21	; 0x08
    cluster_t count_left = count;
    cluster_t cluster_current = fs->cluster_free;
     778:	5a 96       	adiw	r26, 0x1a	; 26
     77a:	ad 90       	ld	r10, X+
     77c:	bc 90       	ld	r11, X
     77e:	5b 97       	sbiw	r26, 0x1b	; 27

    if(is_fat32)
        cluster_count = fs->header.fat_size / sizeof(fat_entry32);
    else
#endif
        cluster_count = fs->header.fat_size / sizeof(fat_entry16);
     780:	1a 96       	adiw	r26, 0x0a	; 10
     782:	2d 91       	ld	r18, X+
     784:	3d 91       	ld	r19, X+
     786:	4d 91       	ld	r20, X+
     788:	5c 91       	ld	r21, X
     78a:	1d 97       	sbiw	r26, 0x0d	; 13
     78c:	56 95       	lsr	r21
     78e:	47 95       	ror	r20
     790:	37 95       	ror	r19
     792:	27 95       	ror	r18
     794:	3c 83       	std	Y+4, r19	; 0x04
     796:	2b 83       	std	Y+3, r18	; 0x03

    fs->cluster_free = 0;
     798:	5b 96       	adiw	r26, 0x1b	; 27
     79a:	1c 92       	st	X, r1
     79c:	1e 92       	st	-X, r1
     79e:	5a 97       	sbiw	r26, 0x1a	; 26
     7a0:	3c 01       	movw	r6, r24
     7a2:	29 01       	movw	r4, r18
     7a4:	cc 24       	eor	r12, r12
     7a6:	dd 24       	eor	r13, r13
     7a8:	54 c0       	rjmp	.+168    	; 0x852 <fat_append_clusters+0x148>
    for(cluster_t cluster_left = cluster_count; cluster_left > 0; --cluster_left, ++cluster_current)
    {
        if(cluster_current < 2 || cluster_current >= cluster_count)
     7aa:	b2 e0       	ldi	r27, 0x02	; 2
     7ac:	ab 16       	cp	r10, r27
     7ae:	b1 04       	cpc	r11, r1
     7b0:	28 f0       	brcs	.+10     	; 0x7bc <fat_append_clusters+0xb2>
     7b2:	eb 81       	ldd	r30, Y+3	; 0x03
     7b4:	fc 81       	ldd	r31, Y+4	; 0x04
     7b6:	ae 16       	cp	r10, r30
     7b8:	bf 06       	cpc	r11, r31
     7ba:	18 f0       	brcs	.+6      	; 0x7c2 <fat_append_clusters+0xb8>
     7bc:	62 e0       	ldi	r22, 0x02	; 2
     7be:	a6 2e       	mov	r10, r22
     7c0:	b1 2c       	mov	r11, r1
                return 0;
        }
        else
#endif
        {
            if(!device_read(fat_offset + cluster_current * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
     7c2:	c5 01       	movw	r24, r10
     7c4:	88 0f       	add	r24, r24
     7c6:	99 1f       	adc	r25, r25
     7c8:	7c 01       	movw	r14, r24
     7ca:	00 e0       	ldi	r16, 0x00	; 0
     7cc:	10 e0       	ldi	r17, 0x00	; 0
     7ce:	2d 81       	ldd	r18, Y+5	; 0x05
     7d0:	3e 81       	ldd	r19, Y+6	; 0x06
     7d2:	4f 81       	ldd	r20, Y+7	; 0x07
     7d4:	58 85       	ldd	r21, Y+8	; 0x08
     7d6:	e2 0e       	add	r14, r18
     7d8:	f3 1e       	adc	r15, r19
     7da:	04 1f       	adc	r16, r20
     7dc:	15 1f       	adc	r17, r21
     7de:	c8 01       	movw	r24, r16
     7e0:	b7 01       	movw	r22, r14
     7e2:	ae 01       	movw	r20, r28
     7e4:	4f 5f       	subi	r20, 0xFF	; 255
     7e6:	5f 4f       	sbci	r21, 0xFF	; 255
     7e8:	22 e0       	ldi	r18, 0x02	; 2
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	ab 85       	ldd	r26, Y+11	; 0x0b
     7ee:	bc 85       	ldd	r27, Y+12	; 0x0c
     7f0:	fd 01       	movw	r30, r26
     7f2:	09 95       	icall
     7f4:	88 23       	and	r24, r24
     7f6:	09 f4       	brne	.+2      	; 0x7fa <fat_append_clusters+0xf0>
     7f8:	54 c0       	rjmp	.+168    	; 0x8a2 <fat_append_clusters+0x198>
        }
        else
#endif
        {
            /* check if this is a free cluster */
            if(fat_entry16 != HTOL16(FAT16_CLUSTER_FREE))
     7fa:	89 81       	ldd	r24, Y+1	; 0x01
     7fc:	9a 81       	ldd	r25, Y+2	; 0x02
     7fe:	89 2b       	or	r24, r25
     800:	11 f5       	brne	.+68     	; 0x846 <fat_append_clusters+0x13c>

            /* If we don't need this free cluster for the
             * current allocation, we keep it in mind for
             * the next time.
             */
            if(count_left == 0)
     802:	61 14       	cp	r6, r1
     804:	71 04       	cpc	r7, r1
     806:	21 f4       	brne	.+8      	; 0x810 <fat_append_clusters+0x106>
            {
                fs->cluster_free = cluster_current;
     808:	f4 01       	movw	r30, r8
     80a:	b3 8e       	std	Z+27, r11	; 0x1b
     80c:	a2 8e       	std	Z+26, r10	; 0x1a
     80e:	27 c0       	rjmp	.+78     	; 0x85e <fat_append_clusters+0x154>
                break;
            }

            /* allocate cluster */
            if(cluster_next == 0)
     810:	c1 14       	cp	r12, r1
     812:	d1 04       	cpc	r13, r1
     814:	29 f4       	brne	.+10     	; 0x820 <fat_append_clusters+0x116>
                fat_entry16 = HTOL16(FAT16_CLUSTER_LAST_MAX);
     816:	2f ef       	ldi	r18, 0xFF	; 255
     818:	3f ef       	ldi	r19, 0xFF	; 255
     81a:	3a 83       	std	Y+2, r19	; 0x02
     81c:	29 83       	std	Y+1, r18	; 0x01
     81e:	02 c0       	rjmp	.+4      	; 0x824 <fat_append_clusters+0x11a>
            else
                fat_entry16 = htol16((uint16_t) cluster_next);
     820:	da 82       	std	Y+2, r13	; 0x02
     822:	c9 82       	std	Y+1, r12	; 0x01

            if(!device_write(fat_offset + cluster_current * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
     824:	c8 01       	movw	r24, r16
     826:	b7 01       	movw	r22, r14
     828:	ae 01       	movw	r20, r28
     82a:	4f 5f       	subi	r20, 0xFF	; 255
     82c:	5f 4f       	sbci	r21, 0xFF	; 255
     82e:	22 e0       	ldi	r18, 0x02	; 2
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	a9 85       	ldd	r26, Y+9	; 0x09
     834:	ba 85       	ldd	r27, Y+10	; 0x0a
     836:	fd 01       	movw	r30, r26
     838:	09 95       	icall
     83a:	88 23       	and	r24, r24
     83c:	71 f1       	breq	.+92     	; 0x89a <fat_append_clusters+0x190>
                break;
        }

        cluster_next = cluster_current;
        --count_left;
     83e:	08 94       	sec
     840:	61 08       	sbc	r6, r1
     842:	71 08       	sbc	r7, r1
     844:	65 01       	movw	r12, r10
    else
#endif
        cluster_count = fs->header.fat_size / sizeof(fat_entry16);

    fs->cluster_free = 0;
    for(cluster_t cluster_left = cluster_count; cluster_left > 0; --cluster_left, ++cluster_current)
     846:	08 94       	sec
     848:	41 08       	sbc	r4, r1
     84a:	51 08       	sbc	r5, r1
     84c:	08 94       	sec
     84e:	a1 1c       	adc	r10, r1
     850:	b1 1c       	adc	r11, r1
     852:	41 14       	cp	r4, r1
     854:	51 04       	cpc	r5, r1
     856:	09 f0       	breq	.+2      	; 0x85a <fat_append_clusters+0x150>
     858:	a8 cf       	rjmp	.-176    	; 0x7aa <fat_append_clusters+0xa0>
        --count_left;
    }

    do
    {
        if(count_left > 0)
     85a:	67 28       	or	r6, r7
     85c:	f1 f4       	brne	.+60     	; 0x89a <fat_append_clusters+0x190>
            break;

        /* We allocated a new cluster chain. Now join
         * it with the existing one (if any).
         */
        if(cluster_num >= 2)
     85e:	b2 e0       	ldi	r27, 0x02	; 2
     860:	2b 16       	cp	r2, r27
     862:	31 04       	cpc	r3, r1
     864:	00 f1       	brcs	.+64     	; 0x8a6 <fat_append_clusters+0x19c>
                    break;
            }
            else
#endif
            {
                fat_entry16 = htol16((uint16_t) cluster_next);
     866:	c9 82       	std	Y+1, r12	; 0x01
     868:	da 82       	std	Y+2, r13	; 0x02

                if(!device_write(fat_offset + cluster_num * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
     86a:	22 0c       	add	r2, r2
     86c:	33 1c       	adc	r3, r3
     86e:	b1 01       	movw	r22, r2
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	2d 81       	ldd	r18, Y+5	; 0x05
     876:	3e 81       	ldd	r19, Y+6	; 0x06
     878:	4f 81       	ldd	r20, Y+7	; 0x07
     87a:	58 85       	ldd	r21, Y+8	; 0x08
     87c:	62 0f       	add	r22, r18
     87e:	73 1f       	adc	r23, r19
     880:	84 1f       	adc	r24, r20
     882:	95 1f       	adc	r25, r21
     884:	ae 01       	movw	r20, r28
     886:	4f 5f       	subi	r20, 0xFF	; 255
     888:	5f 4f       	sbci	r21, 0xFF	; 255
     88a:	22 e0       	ldi	r18, 0x02	; 2
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	a9 85       	ldd	r26, Y+9	; 0x09
     890:	ba 85       	ldd	r27, Y+10	; 0x0a
     892:	fd 01       	movw	r30, r26
     894:	09 95       	icall
     896:	88 23       	and	r24, r24
     898:	31 f4       	brne	.+12     	; 0x8a6 <fat_append_clusters+0x19c>
    } while(0);

    /* No space left on device or writing error.
     * Free up all clusters already allocated.
     */
    fat_free_clusters(fs, cluster_next);
     89a:	c4 01       	movw	r24, r8
     89c:	b6 01       	movw	r22, r12
     89e:	0e 94 0f 03 	call	0x61e	; 0x61e <fat_free_clusters>

    return 0;
     8a2:	cc 24       	eor	r12, r12
     8a4:	dd 24       	eor	r13, r13
}
     8a6:	c6 01       	movw	r24, r12
     8a8:	2c 96       	adiw	r28, 0x0c	; 12
     8aa:	0f b6       	in	r0, 0x3f	; 63
     8ac:	f8 94       	cli
     8ae:	de bf       	out	0x3e, r29	; 62
     8b0:	0f be       	out	0x3f, r0	; 63
     8b2:	cd bf       	out	0x3d, r28	; 61
     8b4:	cf 91       	pop	r28
     8b6:	df 91       	pop	r29
     8b8:	1f 91       	pop	r17
     8ba:	0f 91       	pop	r16
     8bc:	ff 90       	pop	r15
     8be:	ef 90       	pop	r14
     8c0:	df 90       	pop	r13
     8c2:	cf 90       	pop	r12
     8c4:	bf 90       	pop	r11
     8c6:	af 90       	pop	r10
     8c8:	9f 90       	pop	r9
     8ca:	8f 90       	pop	r8
     8cc:	7f 90       	pop	r7
     8ce:	6f 90       	pop	r6
     8d0:	5f 90       	pop	r5
     8d2:	4f 90       	pop	r4
     8d4:	3f 90       	pop	r3
     8d6:	2f 90       	pop	r2
     8d8:	08 95       	ret

000008da <fat_clear_cluster_callback>:
 * Callback function for clearing a cluster.
 */
uintptr_t fat_clear_cluster_callback(uint8_t* buffer, offset_t offset, void* p)
{
    return 16;
}
     8da:	80 e1       	ldi	r24, 0x10	; 16
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	08 95       	ret

000008e0 <fat_close_file>:
 *
 * \param[in] fd The file handle of the file to close.
 * \see fat_open_file
 */
void fat_close_file(struct fat_file_struct* fd)
{
     8e0:	fc 01       	movw	r30, r24
    if(fd)
     8e2:	00 97       	sbiw	r24, 0x00	; 0
     8e4:	11 f0       	breq	.+4      	; 0x8ea <fat_close_file+0xa>
#endif

#if USE_DYNAMIC_MEMORY
        free(fd);
#else
        fd->fs = 0;
     8e6:	11 82       	std	Z+1, r1	; 0x01
     8e8:	10 82       	st	Z, r1
     8ea:	08 95       	ret

000008ec <fat_read_file>:
 * \param[in] buffer_len The amount of data to read.
 * \returns The number of bytes read, 0 on end of file, or -1 on failure.
 * \see fat_write_file
 */
intptr_t fat_read_file(struct fat_file_struct* fd, uint8_t* buffer, uintptr_t buffer_len)
{
     8ec:	2f 92       	push	r2
     8ee:	3f 92       	push	r3
     8f0:	4f 92       	push	r4
     8f2:	5f 92       	push	r5
     8f4:	6f 92       	push	r6
     8f6:	7f 92       	push	r7
     8f8:	8f 92       	push	r8
     8fa:	9f 92       	push	r9
     8fc:	af 92       	push	r10
     8fe:	bf 92       	push	r11
     900:	cf 92       	push	r12
     902:	df 92       	push	r13
     904:	ef 92       	push	r14
     906:	ff 92       	push	r15
     908:	0f 93       	push	r16
     90a:	1f 93       	push	r17
     90c:	df 93       	push	r29
     90e:	cf 93       	push	r28
     910:	cd b7       	in	r28, 0x3d	; 61
     912:	de b7       	in	r29, 0x3e	; 62
     914:	2a 97       	sbiw	r28, 0x0a	; 10
     916:	0f b6       	in	r0, 0x3f	; 63
     918:	f8 94       	cli
     91a:	de bf       	out	0x3e, r29	; 62
     91c:	0f be       	out	0x3f, r0	; 63
     91e:	cd bf       	out	0x3d, r28	; 61
     920:	2c 01       	movw	r4, r24
     922:	7a 83       	std	Y+2, r23	; 0x02
     924:	69 83       	std	Y+1, r22	; 0x01
     926:	5c 83       	std	Y+4, r21	; 0x04
     928:	4b 83       	std	Y+3, r20	; 0x03
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
     92a:	00 97       	sbiw	r24, 0x00	; 0
     92c:	09 f4       	brne	.+2      	; 0x930 <__stack+0x31>
     92e:	09 c1       	rjmp	.+530    	; 0xb42 <__stack+0x243>
     930:	67 2b       	or	r22, r23
     932:	09 f4       	brne	.+2      	; 0x936 <__stack+0x37>
     934:	06 c1       	rjmp	.+524    	; 0xb42 <__stack+0x243>
     936:	45 2b       	or	r20, r21
     938:	09 f4       	brne	.+2      	; 0x93c <__stack+0x3d>
     93a:	03 c1       	rjmp	.+518    	; 0xb42 <__stack+0x243>
        return -1;

    /* determine number of bytes to read */
    if(fd->pos + buffer_len > fd->dir_entry.file_size)
     93c:	dc 01       	movw	r26, r24
     93e:	9d 96       	adiw	r26, 0x2d	; 45
     940:	ad 90       	ld	r10, X+
     942:	bd 90       	ld	r11, X+
     944:	cd 90       	ld	r12, X+
     946:	dc 90       	ld	r13, X
     948:	d0 97       	sbiw	r26, 0x30	; 48
     94a:	95 96       	adiw	r26, 0x25	; 37
     94c:	2d 91       	ld	r18, X+
     94e:	3d 91       	ld	r19, X+
     950:	4d 91       	ld	r20, X+
     952:	5c 91       	ld	r21, X
     954:	98 97       	sbiw	r26, 0x28	; 40
     956:	eb 81       	ldd	r30, Y+3	; 0x03
     958:	fc 81       	ldd	r31, Y+4	; 0x04
     95a:	cf 01       	movw	r24, r30
     95c:	a0 e0       	ldi	r26, 0x00	; 0
     95e:	b0 e0       	ldi	r27, 0x00	; 0
     960:	8a 0d       	add	r24, r10
     962:	9b 1d       	adc	r25, r11
     964:	ac 1d       	adc	r26, r12
     966:	bd 1d       	adc	r27, r13
     968:	28 17       	cp	r18, r24
     96a:	39 07       	cpc	r19, r25
     96c:	4a 07       	cpc	r20, r26
     96e:	5b 07       	cpc	r21, r27
     970:	40 f4       	brcc	.+16     	; 0x982 <__stack+0x83>
        buffer_len = fd->dir_entry.file_size - fd->pos;
     972:	b9 01       	movw	r22, r18
     974:	6a 19       	sub	r22, r10
     976:	7b 09       	sbc	r23, r11
     978:	7c 83       	std	Y+4, r23	; 0x04
     97a:	6b 83       	std	Y+3, r22	; 0x03
    if(buffer_len == 0)
     97c:	67 2b       	or	r22, r23
     97e:	09 f4       	brne	.+2      	; 0x982 <__stack+0x83>
     980:	e3 c0       	rjmp	.+454    	; 0xb48 <__stack+0x249>
        return 0;
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
     982:	d2 01       	movw	r26, r4
     984:	ed 91       	ld	r30, X+
     986:	fc 91       	ld	r31, X
     988:	11 97       	sbiw	r26, 0x01	; 1
     98a:	20 88       	ldd	r2, Z+16	; 0x10
     98c:	31 88       	ldd	r3, Z+17	; 0x11
    cluster_t cluster_num = fd->pos_cluster;
     98e:	d1 96       	adiw	r26, 0x31	; 49
     990:	ed 91       	ld	r30, X+
     992:	fc 91       	ld	r31, X
     994:	d2 97       	sbiw	r26, 0x32	; 50
     996:	fa 87       	std	Y+10, r31	; 0x0a
     998:	e9 87       	std	Y+9, r30	; 0x09
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));

    /* find cluster in which to start reading */
    if(!cluster_num)
     99a:	ef 2b       	or	r30, r31
     99c:	f1 f5       	brne	.+124    	; 0xa1a <__stack+0x11b>
    {
        cluster_num = fd->dir_entry.cluster;
     99e:	93 96       	adiw	r26, 0x23	; 35
     9a0:	2d 91       	ld	r18, X+
     9a2:	3c 91       	ld	r19, X
     9a4:	94 97       	sbiw	r26, 0x24	; 36
     9a6:	3a 87       	std	Y+10, r19	; 0x0a
     9a8:	29 87       	std	Y+9, r18	; 0x09
        
        if(!cluster_num)
     9aa:	23 2b       	or	r18, r19
     9ac:	39 f4       	brne	.+14     	; 0x9bc <__stack+0xbd>
        {
            if(!fd->pos)
     9ae:	a1 14       	cp	r10, r1
     9b0:	b1 04       	cpc	r11, r1
     9b2:	c1 04       	cpc	r12, r1
     9b4:	d1 04       	cpc	r13, r1
     9b6:	09 f4       	brne	.+2      	; 0x9ba <__stack+0xbb>
     9b8:	c7 c0       	rjmp	.+398    	; 0xb48 <__stack+0x249>
     9ba:	c3 c0       	rjmp	.+390    	; 0xb42 <__stack+0x243>
                return 0;
            else
                return -1;
        }

        if(fd->pos)
     9bc:	a1 14       	cp	r10, r1
     9be:	b1 04       	cpc	r11, r1
     9c0:	c1 04       	cpc	r12, r1
     9c2:	d1 04       	cpc	r13, r1
     9c4:	51 f1       	breq	.+84     	; 0xa1a <__stack+0x11b>
     9c6:	86 01       	movw	r16, r12
     9c8:	75 01       	movw	r14, r10
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
     9ca:	31 01       	movw	r6, r2
     9cc:	88 24       	eor	r8, r8
     9ce:	99 24       	eor	r9, r9
            {
                pos -= cluster_size;
                cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
                if(!cluster_num)
     9d0:	66 27       	eor	r22, r22
     9d2:	77 27       	eor	r23, r23
     9d4:	cb 01       	movw	r24, r22
     9d6:	66 19       	sub	r22, r6
     9d8:	77 09       	sbc	r23, r7
     9da:	88 09       	sbc	r24, r8
     9dc:	99 09       	sbc	r25, r9
     9de:	6d 83       	std	Y+5, r22	; 0x05
     9e0:	7e 83       	std	Y+6, r23	; 0x06
     9e2:	8f 83       	std	Y+7, r24	; 0x07
     9e4:	98 87       	std	Y+8, r25	; 0x08
     9e6:	14 c0       	rjmp	.+40     	; 0xa10 <__stack+0x111>
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
                cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
     9e8:	d2 01       	movw	r26, r4
     9ea:	8d 91       	ld	r24, X+
     9ec:	9c 91       	ld	r25, X
     9ee:	69 85       	ldd	r22, Y+9	; 0x09
     9f0:	7a 85       	ldd	r23, Y+10	; 0x0a
     9f2:	0e 94 cf 02 	call	0x59e	; 0x59e <fat_get_next_cluster>
     9f6:	9a 87       	std	Y+10, r25	; 0x0a
     9f8:	89 87       	std	Y+9, r24	; 0x09
                if(!cluster_num)
     9fa:	89 2b       	or	r24, r25
     9fc:	09 f4       	brne	.+2      	; 0xa00 <__stack+0x101>
     9fe:	a1 c0       	rjmp	.+322    	; 0xb42 <__stack+0x243>
     a00:	6d 81       	ldd	r22, Y+5	; 0x05
     a02:	7e 81       	ldd	r23, Y+6	; 0x06
     a04:	8f 81       	ldd	r24, Y+7	; 0x07
     a06:	98 85       	ldd	r25, Y+8	; 0x08
     a08:	e6 0e       	add	r14, r22
     a0a:	f7 1e       	adc	r15, r23
     a0c:	08 1f       	adc	r16, r24
     a0e:	19 1f       	adc	r17, r25
        }

        if(fd->pos)
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
     a10:	e6 14       	cp	r14, r6
     a12:	f7 04       	cpc	r15, r7
     a14:	08 05       	cpc	r16, r8
     a16:	19 05       	cpc	r17, r9
     a18:	38 f7       	brcc	.-50     	; 0x9e8 <__stack+0xe9>
        return 0;
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
    cluster_t cluster_num = fd->pos_cluster;
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
     a1a:	08 94       	sec
     a1c:	21 08       	sbc	r2, r1
     a1e:	31 08       	sbc	r3, r1
     a20:	a2 20       	and	r10, r2
     a22:	b3 20       	and	r11, r3
     a24:	08 94       	sec
     a26:	21 1c       	adc	r2, r1
     a28:	31 1c       	adc	r3, r1
     a2a:	cb 80       	ldd	r12, Y+3	; 0x03
     a2c:	dc 80       	ldd	r13, Y+4	; 0x04
    
    /* read data */
    do
    {
        /* calculate data size to copy from cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
     a2e:	d2 01       	movw	r26, r4
     a30:	ed 90       	ld	r14, X+
     a32:	fc 90       	ld	r15, X
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
     a34:	e1 14       	cp	r14, r1
     a36:	f1 04       	cpc	r15, r1
     a38:	09 f1       	breq	.+66     	; 0xa7c <__stack+0x17d>
     a3a:	e9 85       	ldd	r30, Y+9	; 0x09
     a3c:	fa 85       	ldd	r31, Y+10	; 0x0a
     a3e:	e2 30       	cpi	r30, 0x02	; 2
     a40:	f1 05       	cpc	r31, r1
     a42:	e0 f0       	brcs	.+56     	; 0xa7c <__stack+0x17d>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
     a44:	32 97       	sbiw	r30, 0x02	; 2
     a46:	bf 01       	movw	r22, r30
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	32 96       	adiw	r30, 0x02	; 2
     a4e:	fa 87       	std	Y+10, r31	; 0x0a
     a50:	e9 87       	std	Y+9, r30	; 0x09
     a52:	d7 01       	movw	r26, r14
     a54:	50 96       	adiw	r26, 0x10	; 16
     a56:	2d 91       	ld	r18, X+
     a58:	3c 91       	ld	r19, X
     a5a:	51 97       	sbiw	r26, 0x11	; 17
     a5c:	40 e0       	ldi	r20, 0x00	; 0
     a5e:	50 e0       	ldi	r21, 0x00	; 0
     a60:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <__mulsi3>
     a64:	9b 01       	movw	r18, r22
     a66:	ac 01       	movw	r20, r24
     a68:	f7 01       	movw	r30, r14
     a6a:	82 89       	ldd	r24, Z+18	; 0x12
     a6c:	93 89       	ldd	r25, Z+19	; 0x13
     a6e:	a4 89       	ldd	r26, Z+20	; 0x14
     a70:	b5 89       	ldd	r27, Z+21	; 0x15
     a72:	28 0f       	add	r18, r24
     a74:	39 1f       	adc	r19, r25
     a76:	4a 1f       	adc	r20, r26
     a78:	5b 1f       	adc	r21, r27
     a7a:	04 c0       	rjmp	.+8      	; 0xa84 <__stack+0x185>
     a7c:	20 e0       	ldi	r18, 0x00	; 0
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	40 e0       	ldi	r20, 0x00	; 0
     a82:	50 e0       	ldi	r21, 0x00	; 0
    /* read data */
    do
    {
        /* calculate data size to copy from cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
        uint16_t copy_length = cluster_size - first_cluster_offset;
     a84:	81 01       	movw	r16, r2
     a86:	0a 19       	sub	r16, r10
     a88:	1b 09       	sbc	r17, r11
     a8a:	c0 16       	cp	r12, r16
     a8c:	d1 06       	cpc	r13, r17
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__stack+0x193>
     a90:	86 01       	movw	r16, r12
        if(copy_length > buffer_left)
            copy_length = buffer_left;

        /* read data */
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
     a92:	d7 01       	movw	r26, r14
     a94:	ed 91       	ld	r30, X+
     a96:	fc 91       	ld	r31, X
     a98:	c5 01       	movw	r24, r10
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	28 0f       	add	r18, r24
     aa0:	39 1f       	adc	r19, r25
     aa2:	4a 1f       	adc	r20, r26
     aa4:	5b 1f       	adc	r21, r27
     aa6:	01 90       	ld	r0, Z+
     aa8:	f0 81       	ld	r31, Z
     aaa:	e0 2d       	mov	r30, r0
     aac:	ca 01       	movw	r24, r20
     aae:	b9 01       	movw	r22, r18
     ab0:	49 81       	ldd	r20, Y+1	; 0x01
     ab2:	5a 81       	ldd	r21, Y+2	; 0x02
     ab4:	98 01       	movw	r18, r16
     ab6:	09 95       	icall
     ab8:	88 23       	and	r24, r24
     aba:	41 f1       	breq	.+80     	; 0xb0c <__stack+0x20d>
            return buffer_len - buffer_left;

        /* calculate new file position */
        buffer += copy_length;
        buffer_left -= copy_length;
     abc:	c0 1a       	sub	r12, r16
     abe:	d1 0a       	sbc	r13, r17
        fd->pos += copy_length;
     ac0:	c8 01       	movw	r24, r16
     ac2:	a0 e0       	ldi	r26, 0x00	; 0
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
     ac6:	f2 01       	movw	r30, r4
     ac8:	25 a5       	ldd	r18, Z+45	; 0x2d
     aca:	36 a5       	ldd	r19, Z+46	; 0x2e
     acc:	47 a5       	ldd	r20, Z+47	; 0x2f
     ace:	50 a9       	ldd	r21, Z+48	; 0x30
     ad0:	28 0f       	add	r18, r24
     ad2:	39 1f       	adc	r19, r25
     ad4:	4a 1f       	adc	r20, r26
     ad6:	5b 1f       	adc	r21, r27
     ad8:	d2 01       	movw	r26, r4
     ada:	9d 96       	adiw	r26, 0x2d	; 45
     adc:	2d 93       	st	X+, r18
     ade:	3d 93       	st	X+, r19
     ae0:	4d 93       	st	X+, r20
     ae2:	5c 93       	st	X, r21
     ae4:	d0 97       	sbiw	r26, 0x30	; 48

        if(first_cluster_offset + copy_length >= cluster_size)
     ae6:	c8 01       	movw	r24, r16
     ae8:	8a 0d       	add	r24, r10
     aea:	9b 1d       	adc	r25, r11
     aec:	82 15       	cp	r24, r2
     aee:	93 05       	cpc	r25, r3
     af0:	a0 f0       	brcs	.+40     	; 0xb1a <__stack+0x21b>
        {
            /* we are on a cluster boundary, so get the next cluster */
            if((cluster_num = fat_get_next_cluster(fd->fs, cluster_num)))
     af2:	8d 91       	ld	r24, X+
     af4:	9c 91       	ld	r25, X
     af6:	69 85       	ldd	r22, Y+9	; 0x09
     af8:	7a 85       	ldd	r23, Y+10	; 0x0a
     afa:	0e 94 cf 02 	call	0x59e	; 0x59e <fat_get_next_cluster>
     afe:	9a 87       	std	Y+10, r25	; 0x0a
     b00:	89 87       	std	Y+9, r24	; 0x09
     b02:	89 2b       	or	r24, r25
     b04:	41 f4       	brne	.+16     	; 0xb16 <__stack+0x217>
            {
                first_cluster_offset = 0;
            }
            else
            {
                fd->pos_cluster = 0;
     b06:	f2 01       	movw	r30, r4
     b08:	12 aa       	std	Z+50, r1	; 0x32
     b0a:	11 aa       	std	Z+49, r1	; 0x31
                return buffer_len - buffer_left;
     b0c:	4b 81       	ldd	r20, Y+3	; 0x03
     b0e:	5c 81       	ldd	r21, Y+4	; 0x04
     b10:	4c 19       	sub	r20, r12
     b12:	5d 09       	sbc	r21, r13
     b14:	1b c0       	rjmp	.+54     	; 0xb4c <__stack+0x24d>
     b16:	aa 24       	eor	r10, r10
     b18:	bb 24       	eor	r11, r11
            }
        }

        fd->pos_cluster = cluster_num;
     b1a:	e9 85       	ldd	r30, Y+9	; 0x09
     b1c:	fa 85       	ldd	r31, Y+10	; 0x0a
     b1e:	d2 01       	movw	r26, r4
     b20:	d2 96       	adiw	r26, 0x32	; 50
     b22:	fc 93       	st	X, r31
     b24:	ee 93       	st	-X, r30
     b26:	d1 97       	sbiw	r26, 0x31	; 49

    } while(buffer_left > 0); /* check if we are done */
     b28:	c1 14       	cp	r12, r1
     b2a:	d1 04       	cpc	r13, r1
     b2c:	39 f0       	breq	.+14     	; 0xb3c <__stack+0x23d>
        /* read data */
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
            return buffer_len - buffer_left;

        /* calculate new file position */
        buffer += copy_length;
     b2e:	29 81       	ldd	r18, Y+1	; 0x01
     b30:	3a 81       	ldd	r19, Y+2	; 0x02
     b32:	20 0f       	add	r18, r16
     b34:	31 1f       	adc	r19, r17
     b36:	3a 83       	std	Y+2, r19	; 0x02
     b38:	29 83       	std	Y+1, r18	; 0x01
     b3a:	79 cf       	rjmp	.-270    	; 0xa2e <__stack+0x12f>

        fd->pos_cluster = cluster_num;

    } while(buffer_left > 0); /* check if we are done */

    return buffer_len;
     b3c:	4b 81       	ldd	r20, Y+3	; 0x03
     b3e:	5c 81       	ldd	r21, Y+4	; 0x04
     b40:	05 c0       	rjmp	.+10     	; 0xb4c <__stack+0x24d>
     b42:	4f ef       	ldi	r20, 0xFF	; 255
     b44:	5f ef       	ldi	r21, 0xFF	; 255
     b46:	02 c0       	rjmp	.+4      	; 0xb4c <__stack+0x24d>
     b48:	40 e0       	ldi	r20, 0x00	; 0
     b4a:	50 e0       	ldi	r21, 0x00	; 0
}
     b4c:	ca 01       	movw	r24, r20
     b4e:	2a 96       	adiw	r28, 0x0a	; 10
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	cf 91       	pop	r28
     b5c:	df 91       	pop	r29
     b5e:	1f 91       	pop	r17
     b60:	0f 91       	pop	r16
     b62:	ff 90       	pop	r15
     b64:	ef 90       	pop	r14
     b66:	df 90       	pop	r13
     b68:	cf 90       	pop	r12
     b6a:	bf 90       	pop	r11
     b6c:	af 90       	pop	r10
     b6e:	9f 90       	pop	r9
     b70:	8f 90       	pop	r8
     b72:	7f 90       	pop	r7
     b74:	6f 90       	pop	r6
     b76:	5f 90       	pop	r5
     b78:	4f 90       	pop	r4
     b7a:	3f 90       	pop	r3
     b7c:	2f 90       	pop	r2
     b7e:	08 95       	ret

00000b80 <fat_close_dir>:
 *
 * \param[in] dd The directory descriptor to close.
 * \see fat_open_dir
 */
void fat_close_dir(struct fat_dir_struct* dd)
{
     b80:	fc 01       	movw	r30, r24
    if(dd)
     b82:	00 97       	sbiw	r24, 0x00	; 0
     b84:	11 f0       	breq	.+4      	; 0xb8a <fat_close_dir+0xa>
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
     b86:	11 82       	std	Z+1, r1	; 0x01
     b88:	10 82       	st	Z, r1
     b8a:	08 95       	ret

00000b8c <fat_reset_dir>:
 * \param[in] dd The directory handle to reset.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
     b8c:	fc 01       	movw	r30, r24
    if(!dd)
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	11 f4       	brne	.+4      	; 0xb96 <fat_reset_dir+0xa>
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	08 95       	ret
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
     b96:	83 a1       	ldd	r24, Z+35	; 0x23
     b98:	94 a1       	ldd	r25, Z+36	; 0x24
     b9a:	96 a7       	std	Z+46, r25	; 0x2e
     b9c:	85 a7       	std	Z+45, r24	; 0x2d
    dd->entry_offset = 0;
     b9e:	10 aa       	std	Z+48, r1	; 0x30
     ba0:	17 a6       	std	Z+47, r1	; 0x2f
     ba2:	81 e0       	ldi	r24, 0x01	; 1
    return 1;
}
     ba4:	08 95       	ret

00000ba6 <fat_delete_file>:
 * \param[in] dir_entry The directory entry of the file to delete.
 * \returns 0 on failure, 1 on success.
 * \see fat_create_file
 */
uint8_t fat_delete_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
     ba6:	7f 92       	push	r7
     ba8:	8f 92       	push	r8
     baa:	9f 92       	push	r9
     bac:	af 92       	push	r10
     bae:	bf 92       	push	r11
     bb0:	cf 92       	push	r12
     bb2:	df 92       	push	r13
     bb4:	ef 92       	push	r14
     bb6:	ff 92       	push	r15
     bb8:	0f 93       	push	r16
     bba:	1f 93       	push	r17
     bbc:	df 93       	push	r29
     bbe:	cf 93       	push	r28
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	2c 97       	sbiw	r28, 0x0c	; 12
     bc6:	0f b6       	in	r0, 0x3f	; 63
     bc8:	f8 94       	cli
     bca:	de bf       	out	0x3e, r29	; 62
     bcc:	0f be       	out	0x3f, r0	; 63
     bce:	cd bf       	out	0x3d, r28	; 61
     bd0:	6c 01       	movw	r12, r24
     bd2:	5b 01       	movw	r10, r22
    if(!fs || !dir_entry)
     bd4:	00 97       	sbiw	r24, 0x00	; 0
     bd6:	09 f4       	brne	.+2      	; 0xbda <fat_delete_file+0x34>
     bd8:	53 c0       	rjmp	.+166    	; 0xc80 <fat_delete_file+0xda>
     bda:	61 15       	cp	r22, r1
     bdc:	71 05       	cpc	r23, r1
     bde:	09 f4       	brne	.+2      	; 0xbe2 <fat_delete_file+0x3c>
     be0:	4f c0       	rjmp	.+158    	; 0xc80 <fat_delete_file+0xda>
        return 0;

    /* get offset of the file's directory entry */
    offset_t dir_entry_offset = dir_entry->entry_offset;
     be2:	db 01       	movw	r26, r22
     be4:	97 96       	adiw	r26, 0x27	; 39
     be6:	ed 90       	ld	r14, X+
     be8:	fd 90       	ld	r15, X+
     bea:	0d 91       	ld	r16, X+
     bec:	1c 91       	ld	r17, X
     bee:	9a 97       	sbiw	r26, 0x2a	; 42
    if(!dir_entry_offset)
     bf0:	e1 14       	cp	r14, r1
     bf2:	f1 04       	cpc	r15, r1
     bf4:	01 05       	cpc	r16, r1
     bf6:	11 05       	cpc	r17, r1
     bf8:	09 f4       	brne	.+2      	; 0xbfc <fat_delete_file+0x56>
     bfa:	42 c0       	rjmp	.+132    	; 0xc80 <fat_delete_file+0xda>
#if FAT_LFN_SUPPORT
    uint8_t buffer[12];
    while(1)
    {
        /* read directory entry */
        if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
     bfc:	4e 01       	movw	r8, r28
     bfe:	08 94       	sec
     c00:	81 1c       	adc	r8, r1
     c02:	91 1c       	adc	r9, r1
            return 0;
        
        /* mark the directory entry as deleted */
        buffer[0] = FAT_DIRENTRY_DELETED;
     c04:	e5 ee       	ldi	r30, 0xE5	; 229
     c06:	7e 2e       	mov	r7, r30
#if FAT_LFN_SUPPORT
    uint8_t buffer[12];
    while(1)
    {
        /* read directory entry */
        if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
     c08:	d6 01       	movw	r26, r12
     c0a:	ed 91       	ld	r30, X+
     c0c:	fc 91       	ld	r31, X
     c0e:	01 90       	ld	r0, Z+
     c10:	f0 81       	ld	r31, Z
     c12:	e0 2d       	mov	r30, r0
     c14:	c8 01       	movw	r24, r16
     c16:	b7 01       	movw	r22, r14
     c18:	a4 01       	movw	r20, r8
     c1a:	2c e0       	ldi	r18, 0x0C	; 12
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	09 95       	icall
     c20:	88 23       	and	r24, r24
     c22:	71 f1       	breq	.+92     	; 0xc80 <fat_delete_file+0xda>
            return 0;
        
        /* mark the directory entry as deleted */
        buffer[0] = FAT_DIRENTRY_DELETED;
     c24:	79 82       	std	Y+1, r7	; 0x01
        
        /* write back entry */
        if(!fs->partition->device_write(dir_entry_offset, buffer, sizeof(buffer)))
     c26:	d6 01       	movw	r26, r12
     c28:	ed 91       	ld	r30, X+
     c2a:	fc 91       	ld	r31, X
     c2c:	04 80       	ldd	r0, Z+4	; 0x04
     c2e:	f5 81       	ldd	r31, Z+5	; 0x05
     c30:	e0 2d       	mov	r30, r0
     c32:	c8 01       	movw	r24, r16
     c34:	b7 01       	movw	r22, r14
     c36:	a4 01       	movw	r20, r8
     c38:	2c e0       	ldi	r18, 0x0C	; 12
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	09 95       	icall
     c3e:	88 23       	and	r24, r24
     c40:	f9 f0       	breq	.+62     	; 0xc80 <fat_delete_file+0xda>
            return 0;

        /* check if we deleted the whole entry */
        if(buffer[11] != 0x0f)
     c42:	8c 85       	ldd	r24, Y+12	; 0x0c
     c44:	8f 30       	cpi	r24, 0x0F	; 15
     c46:	49 f4       	brne	.+18     	; 0xc5a <fat_delete_file+0xb4>
            break;

        dir_entry_offset += 32;
     c48:	80 e2       	ldi	r24, 0x20	; 32
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	a0 e0       	ldi	r26, 0x00	; 0
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	e8 0e       	add	r14, r24
     c52:	f9 1e       	adc	r15, r25
     c54:	0a 1f       	adc	r16, r26
     c56:	1b 1f       	adc	r17, r27
     c58:	d7 cf       	rjmp	.-82     	; 0xc08 <fat_delete_file+0x62>
#endif

    /* We deleted the directory entry. The next thing to do is
     * marking all occupied clusters as free.
     */
    return (dir_entry->cluster == 0 || fat_free_clusters(fs, dir_entry->cluster));
     c5a:	d5 01       	movw	r26, r10
     c5c:	91 96       	adiw	r26, 0x21	; 33
     c5e:	6d 91       	ld	r22, X+
     c60:	7c 91       	ld	r23, X
     c62:	92 97       	sbiw	r26, 0x22	; 34
     c64:	61 15       	cp	r22, r1
     c66:	71 05       	cpc	r23, r1
     c68:	39 f0       	breq	.+14     	; 0xc78 <fat_delete_file+0xd2>
     c6a:	c6 01       	movw	r24, r12
     c6c:	0e 94 0f 03 	call	0x61e	; 0x61e <fat_free_clusters>
     c70:	20 e0       	ldi	r18, 0x00	; 0
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	88 23       	and	r24, r24
     c76:	11 f0       	breq	.+4      	; 0xc7c <fat_delete_file+0xd6>
     c78:	21 e0       	ldi	r18, 0x01	; 1
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	82 2f       	mov	r24, r18
     c7e:	01 c0       	rjmp	.+2      	; 0xc82 <fat_delete_file+0xdc>
     c80:	80 e0       	ldi	r24, 0x00	; 0
}
     c82:	2c 96       	adiw	r28, 0x0c	; 12
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	f8 94       	cli
     c88:	de bf       	out	0x3e, r29	; 62
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	cd bf       	out	0x3d, r28	; 61
     c8e:	cf 91       	pop	r28
     c90:	df 91       	pop	r29
     c92:	1f 91       	pop	r17
     c94:	0f 91       	pop	r16
     c96:	ff 90       	pop	r15
     c98:	ef 90       	pop	r14
     c9a:	df 90       	pop	r13
     c9c:	cf 90       	pop	r12
     c9e:	bf 90       	pop	r11
     ca0:	af 90       	pop	r10
     ca2:	9f 90       	pop	r9
     ca4:	8f 90       	pop	r8
     ca6:	7f 90       	pop	r7
     ca8:	08 95       	ret

00000caa <fat_get_fs_size>:
 *
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the filesystem size in bytes otherwise.
 */
offset_t fat_get_fs_size(const struct fat_fs_struct* fs)
{
     caa:	fc 01       	movw	r30, r24
    if(!fs)
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	29 f4       	brne	.+10     	; 0xcba <fat_get_fs_size+0x10>
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	40 e0       	ldi	r20, 0x00	; 0
     cb6:	50 e0       	ldi	r21, 0x00	; 0
     cb8:	14 c0       	rjmp	.+40     	; 0xce2 <fat_get_fs_size+0x38>
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
        return (offset_t) (fs->header.fat_size / 4 - 2) * fs->header.cluster_size;
    else
#endif
        return (offset_t) (fs->header.fat_size / 2 - 2) * fs->header.cluster_size;
     cba:	62 85       	ldd	r22, Z+10	; 0x0a
     cbc:	73 85       	ldd	r23, Z+11	; 0x0b
     cbe:	84 85       	ldd	r24, Z+12	; 0x0c
     cc0:	95 85       	ldd	r25, Z+13	; 0x0d
     cc2:	96 95       	lsr	r25
     cc4:	87 95       	ror	r24
     cc6:	77 95       	ror	r23
     cc8:	67 95       	ror	r22
     cca:	62 50       	subi	r22, 0x02	; 2
     ccc:	70 40       	sbci	r23, 0x00	; 0
     cce:	80 40       	sbci	r24, 0x00	; 0
     cd0:	90 40       	sbci	r25, 0x00	; 0
     cd2:	20 89       	ldd	r18, Z+16	; 0x10
     cd4:	31 89       	ldd	r19, Z+17	; 0x11
     cd6:	40 e0       	ldi	r20, 0x00	; 0
     cd8:	50 e0       	ldi	r21, 0x00	; 0
     cda:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <__mulsi3>
     cde:	9b 01       	movw	r18, r22
     ce0:	ac 01       	movw	r20, r24
}
     ce2:	b9 01       	movw	r22, r18
     ce4:	ca 01       	movw	r24, r20
     ce6:	08 95       	ret

00000ce8 <fat_get_fs_free>:
 *
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the free filesystem space in bytes otherwise.
 */
offset_t fat_get_fs_free(const struct fat_fs_struct* fs)
{
     ce8:	2f 92       	push	r2
     cea:	3f 92       	push	r3
     cec:	4f 92       	push	r4
     cee:	5f 92       	push	r5
     cf0:	6f 92       	push	r6
     cf2:	7f 92       	push	r7
     cf4:	8f 92       	push	r8
     cf6:	9f 92       	push	r9
     cf8:	af 92       	push	r10
     cfa:	bf 92       	push	r11
     cfc:	cf 92       	push	r12
     cfe:	df 92       	push	r13
     d00:	ef 92       	push	r14
     d02:	ff 92       	push	r15
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	df 93       	push	r29
     d0a:	cf 93       	push	r28
     d0c:	cd b7       	in	r28, 0x3d	; 61
     d0e:	de b7       	in	r29, 0x3e	; 62
     d10:	a6 97       	sbiw	r28, 0x26	; 38
     d12:	0f b6       	in	r0, 0x3f	; 63
     d14:	f8 94       	cli
     d16:	de bf       	out	0x3e, r29	; 62
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	cd bf       	out	0x3d, r28	; 61
     d1c:	9e a3       	std	Y+38, r25	; 0x26
     d1e:	8d a3       	std	Y+37, r24	; 0x25
    if(!fs)
     d20:	89 2b       	or	r24, r25
     d22:	09 f4       	brne	.+2      	; 0xd26 <fat_get_fs_free+0x3e>
     d24:	5d c0       	rjmp	.+186    	; 0xde0 <fat_get_fs_free+0xf8>
        return 0;

    uint8_t fat[32];
    struct fat_usage_count_callback_arg count_arg;
    count_arg.cluster_count = 0;
     d26:	1a 82       	std	Y+2, r1	; 0x02
     d28:	19 82       	std	Y+1, r1	; 0x01
    count_arg.buffer_size = sizeof(fat);
     d2a:	80 e2       	ldi	r24, 0x20	; 32
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	9c 83       	std	Y+4, r25	; 0x04
     d30:	8b 83       	std	Y+3, r24	; 0x03

    offset_t fat_offset = fs->header.fat_offset;
     d32:	ad a1       	ldd	r26, Y+37	; 0x25
     d34:	be a1       	ldd	r27, Y+38	; 0x26
     d36:	16 96       	adiw	r26, 0x06	; 6
     d38:	4d 90       	ld	r4, X+
     d3a:	5d 90       	ld	r5, X+
     d3c:	6d 90       	ld	r6, X+
     d3e:	7c 90       	ld	r7, X
     d40:	19 97       	sbiw	r26, 0x09	; 9
    uint32_t fat_size = fs->header.fat_size;
     d42:	1a 96       	adiw	r26, 0x0a	; 10
     d44:	8d 90       	ld	r8, X+
     d46:	9d 90       	ld	r9, X+
     d48:	ad 90       	ld	r10, X+
     d4a:	bc 90       	ld	r11, X
     d4c:	1d 97       	sbiw	r26, 0x0d	; 13
     d4e:	34 c0       	rjmp	.+104    	; 0xdb8 <fat_get_fs_free+0xd0>
    while(fat_size > 0)
    {
        uintptr_t length = UINTPTR_MAX - 1;
        if(fat_size < length)
     d50:	be ef       	ldi	r27, 0xFE	; 254
     d52:	8b 16       	cp	r8, r27
     d54:	bf ef       	ldi	r27, 0xFF	; 255
     d56:	9b 06       	cpc	r9, r27
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	ab 06       	cpc	r10, r27
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	bb 06       	cpc	r11, r27
     d60:	28 f0       	brcs	.+10     	; 0xd6c <fat_get_fs_free+0x84>
     d62:	1e ef       	ldi	r17, 0xFE	; 254
     d64:	21 2e       	mov	r2, r17
     d66:	1f ef       	ldi	r17, 0xFF	; 255
     d68:	31 2e       	mov	r3, r17
     d6a:	01 c0       	rjmp	.+2      	; 0xd6e <fat_get_fs_free+0x86>
            length = fat_size;
     d6c:	14 01       	movw	r2, r8

        if(!fs->partition->device_read_interval(fat_offset,
     d6e:	ad a1       	ldd	r26, Y+37	; 0x25
     d70:	be a1       	ldd	r27, Y+38	; 0x26
     d72:	ed 91       	ld	r30, X+
     d74:	fc 91       	ld	r31, X
     d76:	02 80       	ldd	r0, Z+2	; 0x02
     d78:	f3 81       	ldd	r31, Z+3	; 0x03
     d7a:	e0 2d       	mov	r30, r0
     d7c:	c3 01       	movw	r24, r6
     d7e:	b2 01       	movw	r22, r4
     d80:	ae 01       	movw	r20, r28
     d82:	4b 5f       	subi	r20, 0xFB	; 251
     d84:	5f 4f       	sbci	r21, 0xFF	; 255
     d86:	20 e2       	ldi	r18, 0x20	; 32
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	81 01       	movw	r16, r2
     d8c:	bf e0       	ldi	r27, 0x0F	; 15
     d8e:	eb 2e       	mov	r14, r27
     d90:	b7 e0       	ldi	r27, 0x07	; 7
     d92:	fb 2e       	mov	r15, r27
     d94:	6e 01       	movw	r12, r28
     d96:	08 94       	sec
     d98:	c1 1c       	adc	r12, r1
     d9a:	d1 1c       	adc	r13, r1
     d9c:	09 95       	icall
     d9e:	88 23       	and	r24, r24
     da0:	f9 f0       	breq	.+62     	; 0xde0 <fat_get_fs_free+0xf8>
                                                &count_arg
                                               )
          )
            return 0;

        fat_offset += length;
     da2:	c1 01       	movw	r24, r2
     da4:	a0 e0       	ldi	r26, 0x00	; 0
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	48 0e       	add	r4, r24
     daa:	59 1e       	adc	r5, r25
     dac:	6a 1e       	adc	r6, r26
     dae:	7b 1e       	adc	r7, r27
        fat_size -= length;
     db0:	88 1a       	sub	r8, r24
     db2:	99 0a       	sbc	r9, r25
     db4:	aa 0a       	sbc	r10, r26
     db6:	bb 0a       	sbc	r11, r27
    count_arg.cluster_count = 0;
    count_arg.buffer_size = sizeof(fat);

    offset_t fat_offset = fs->header.fat_offset;
    uint32_t fat_size = fs->header.fat_size;
    while(fat_size > 0)
     db8:	81 14       	cp	r8, r1
     dba:	91 04       	cpc	r9, r1
     dbc:	a1 04       	cpc	r10, r1
     dbe:	b1 04       	cpc	r11, r1
     dc0:	39 f6       	brne	.-114    	; 0xd50 <fat_get_fs_free+0x68>

        fat_offset += length;
        fat_size -= length;
    }

    return (offset_t) count_arg.cluster_count * fs->header.cluster_size;
     dc2:	ed a1       	ldd	r30, Y+37	; 0x25
     dc4:	fe a1       	ldd	r31, Y+38	; 0x26
     dc6:	60 89       	ldd	r22, Z+16	; 0x10
     dc8:	71 89       	ldd	r23, Z+17	; 0x11
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	29 81       	ldd	r18, Y+1	; 0x01
     dd0:	3a 81       	ldd	r19, Y+2	; 0x02
     dd2:	40 e0       	ldi	r20, 0x00	; 0
     dd4:	50 e0       	ldi	r21, 0x00	; 0
     dd6:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <__mulsi3>
     dda:	9b 01       	movw	r18, r22
     ddc:	ac 01       	movw	r20, r24
     dde:	04 c0       	rjmp	.+8      	; 0xde8 <fat_get_fs_free+0x100>
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	40 e0       	ldi	r20, 0x00	; 0
     de6:	50 e0       	ldi	r21, 0x00	; 0
}
     de8:	b9 01       	movw	r22, r18
     dea:	ca 01       	movw	r24, r20
     dec:	a6 96       	adiw	r28, 0x26	; 38
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	f8 94       	cli
     df2:	de bf       	out	0x3e, r29	; 62
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	cd bf       	out	0x3d, r28	; 61
     df8:	cf 91       	pop	r28
     dfa:	df 91       	pop	r29
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	ff 90       	pop	r15
     e02:	ef 90       	pop	r14
     e04:	df 90       	pop	r13
     e06:	cf 90       	pop	r12
     e08:	bf 90       	pop	r11
     e0a:	af 90       	pop	r10
     e0c:	9f 90       	pop	r9
     e0e:	8f 90       	pop	r8
     e10:	7f 90       	pop	r7
     e12:	6f 90       	pop	r6
     e14:	5f 90       	pop	r5
     e16:	4f 90       	pop	r4
     e18:	3f 90       	pop	r3
     e1a:	2f 90       	pop	r2
     e1c:	08 95       	ret

00000e1e <fat_get_fs_free_16_callback>:
/**
 * \ingroup fat_fs
 * Callback function used for counting free clusters in a FAT.
 */
uint8_t fat_get_fs_free_16_callback(uint8_t* buffer, offset_t offset, void* p)
{
     e1e:	dc 01       	movw	r26, r24
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
     e20:	f9 01       	movw	r30, r18
    uintptr_t buffer_size = count_arg->buffer_size;
     e22:	42 81       	ldd	r20, Z+2	; 0x02
     e24:	53 81       	ldd	r21, Z+3	; 0x03
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	0d c0       	rjmp	.+26     	; 0xe46 <fat_get_fs_free_16_callback+0x28>

    for(uintptr_t i = 0; i < buffer_size; i += 2, buffer += 2)
    {
        uint16_t cluster = *((uint16_t*) &buffer[0]);
        if(cluster == HTOL16(FAT16_CLUSTER_FREE))
     e2c:	8d 91       	ld	r24, X+
     e2e:	9c 91       	ld	r25, X
     e30:	11 97       	sbiw	r26, 0x01	; 1
     e32:	89 2b       	or	r24, r25
     e34:	29 f4       	brne	.+10     	; 0xe40 <fat_get_fs_free_16_callback+0x22>
            ++(count_arg->cluster_count);
     e36:	80 81       	ld	r24, Z
     e38:	91 81       	ldd	r25, Z+1	; 0x01
     e3a:	01 96       	adiw	r24, 0x01	; 1
     e3c:	91 83       	std	Z+1, r25	; 0x01
     e3e:	80 83       	st	Z, r24
uint8_t fat_get_fs_free_16_callback(uint8_t* buffer, offset_t offset, void* p)
{
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    uintptr_t buffer_size = count_arg->buffer_size;

    for(uintptr_t i = 0; i < buffer_size; i += 2, buffer += 2)
     e40:	2e 5f       	subi	r18, 0xFE	; 254
     e42:	3f 4f       	sbci	r19, 0xFF	; 255
     e44:	12 96       	adiw	r26, 0x02	; 2
     e46:	24 17       	cp	r18, r20
     e48:	35 07       	cpc	r19, r21
     e4a:	80 f3       	brcs	.-32     	; 0xe2c <fat_get_fs_free_16_callback+0xe>
        if(cluster == HTOL16(FAT16_CLUSTER_FREE))
            ++(count_arg->cluster_count);
    }

    return 1;
}
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	08 95       	ret

00000e50 <sd_raw_available>:
 * \returns 1 if the card is available, 0 if it is not.
 */
uint8_t sd_raw_available()
{
    return get_pin_available() == 0x00;
}
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	08 95       	ret

00000e54 <sd_raw_locked>:
 * \returns 1 if the card is locked, 0 if it is not.
 */
uint8_t sd_raw_locked()
{
    return get_pin_locked() == 0x00;
}
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	08 95       	ret

00000e58 <sd_raw_send_command>:
 * \param[in] command The command to send.
 * \param[in] arg The argument for command.
 * \returns The command answer.
 */
uint8_t sd_raw_send_command(uint8_t command, uint32_t arg)
{
     e58:	28 2f       	mov	r18, r24
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
     e5a:	8f ef       	ldi	r24, 0xFF	; 255
     e5c:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
     e5e:	0d b4       	in	r0, 0x2d	; 45
     e60:	07 fe       	sbrs	r0, 7
     e62:	fd cf       	rjmp	.-6      	; 0xe5e <sd_raw_send_command+0x6>
    SPSR &= ~(1 << SPIF);
     e64:	8d b5       	in	r24, 0x2d	; 45
     e66:	8f 77       	andi	r24, 0x7F	; 127
     e68:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
     e6a:	8e b5       	in	r24, 0x2e	; 46

    /* wait some clock cycles */
    sd_raw_rec_byte();

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
     e6c:	82 2f       	mov	r24, r18
     e6e:	80 64       	ori	r24, 0x40	; 64
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
     e70:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
     e72:	0d b4       	in	r0, 0x2d	; 45
     e74:	07 fe       	sbrs	r0, 7
     e76:	fd cf       	rjmp	.-6      	; 0xe72 <sd_raw_send_command+0x1a>
    SPSR &= ~(1 << SPIF);
     e78:	8d b5       	in	r24, 0x2d	; 45
     e7a:	8f 77       	andi	r24, 0x7F	; 127
     e7c:	8d bd       	out	0x2d, r24	; 45
    /* wait some clock cycles */
    sd_raw_rec_byte();

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
     e7e:	87 2f       	mov	r24, r23
     e80:	99 27       	eor	r25, r25
     e82:	aa 27       	eor	r26, r26
     e84:	bb 27       	eor	r27, r27
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
     e86:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
     e88:	0d b4       	in	r0, 0x2d	; 45
     e8a:	07 fe       	sbrs	r0, 7
     e8c:	fd cf       	rjmp	.-6      	; 0xe88 <sd_raw_send_command+0x30>
    SPSR &= ~(1 << SPIF);
     e8e:	8d b5       	in	r24, 0x2d	; 45
     e90:	8f 77       	andi	r24, 0x7F	; 127
     e92:	8d bd       	out	0x2d, r24	; 45
    sd_raw_rec_byte();

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
     e94:	cb 01       	movw	r24, r22
     e96:	aa 27       	eor	r26, r26
     e98:	bb 27       	eor	r27, r27
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
     e9a:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
     e9c:	0d b4       	in	r0, 0x2d	; 45
     e9e:	07 fe       	sbrs	r0, 7
     ea0:	fd cf       	rjmp	.-6      	; 0xe9c <sd_raw_send_command+0x44>
    SPSR &= ~(1 << SPIF);
     ea2:	8d b5       	in	r24, 0x2d	; 45
     ea4:	8f 77       	andi	r24, 0x7F	; 127
     ea6:	8d bd       	out	0x2d, r24	; 45

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
    sd_raw_send_byte((arg >> 8) & 0xff);
     ea8:	bb 27       	eor	r27, r27
     eaa:	a7 2f       	mov	r26, r23
     eac:	96 2f       	mov	r25, r22
     eae:	85 2f       	mov	r24, r21
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
     eb0:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
     eb2:	0d b4       	in	r0, 0x2d	; 45
     eb4:	07 fe       	sbrs	r0, 7
     eb6:	fd cf       	rjmp	.-6      	; 0xeb2 <sd_raw_send_command+0x5a>
    SPSR &= ~(1 << SPIF);
     eb8:	8d b5       	in	r24, 0x2d	; 45
     eba:	8f 77       	andi	r24, 0x7F	; 127
     ebc:	8d bd       	out	0x2d, r24	; 45
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
     ebe:	4e bd       	out	0x2e, r20	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
     ec0:	0d b4       	in	r0, 0x2d	; 45
     ec2:	07 fe       	sbrs	r0, 7
     ec4:	fd cf       	rjmp	.-6      	; 0xec0 <sd_raw_send_command+0x68>
    SPSR &= ~(1 << SPIF);
     ec6:	8d b5       	in	r24, 0x2d	; 45
     ec8:	8f 77       	andi	r24, 0x7F	; 127
     eca:	8d bd       	out	0x2d, r24	; 45
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
    sd_raw_send_byte((arg >> 8) & 0xff);
    sd_raw_send_byte((arg >> 0) & 0xff);
    switch(command)
     ecc:	22 23       	and	r18, r18
     ece:	19 f0       	breq	.+6      	; 0xed6 <sd_raw_send_command+0x7e>
     ed0:	28 30       	cpi	r18, 0x08	; 8
     ed2:	69 f4       	brne	.+26     	; 0xeee <sd_raw_send_command+0x96>
     ed4:	06 c0       	rjmp	.+12     	; 0xee2 <sd_raw_send_command+0x8a>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
     ed6:	85 e9       	ldi	r24, 0x95	; 149
     ed8:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
     eda:	0d b4       	in	r0, 0x2d	; 45
     edc:	07 fe       	sbrs	r0, 7
     ede:	fd cf       	rjmp	.-6      	; 0xeda <sd_raw_send_command+0x82>
     ee0:	0b c0       	rjmp	.+22     	; 0xef8 <sd_raw_send_command+0xa0>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
     ee2:	87 e8       	ldi	r24, 0x87	; 135
     ee4:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
     ee6:	0d b4       	in	r0, 0x2d	; 45
     ee8:	07 fe       	sbrs	r0, 7
     eea:	fd cf       	rjmp	.-6      	; 0xee6 <sd_raw_send_command+0x8e>
     eec:	05 c0       	rjmp	.+10     	; 0xef8 <sd_raw_send_command+0xa0>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
     eee:	8f ef       	ldi	r24, 0xFF	; 255
     ef0:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
     ef2:	0d b4       	in	r0, 0x2d	; 45
     ef4:	07 fe       	sbrs	r0, 7
     ef6:	fd cf       	rjmp	.-6      	; 0xef2 <sd_raw_send_command+0x9a>
    SPSR &= ~(1 << SPIF);
     ef8:	8d b5       	in	r24, 0x2d	; 45
     efa:	8f 77       	andi	r24, 0x7F	; 127
     efc:	8d bd       	out	0x2d, r24	; 45
     efe:	90 e0       	ldi	r25, 0x00	; 0
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
     f00:	2f ef       	ldi	r18, 0xFF	; 255
     f02:	2e bd       	out	0x2e, r18	; 46
    while(!(SPSR & (1 << SPIF)));
     f04:	0d b4       	in	r0, 0x2d	; 45
     f06:	07 fe       	sbrs	r0, 7
     f08:	fd cf       	rjmp	.-6      	; 0xf04 <sd_raw_send_command+0xac>
    SPSR &= ~(1 << SPIF);
     f0a:	8d b5       	in	r24, 0x2d	; 45
     f0c:	8f 77       	andi	r24, 0x7F	; 127
     f0e:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
     f10:	8e b5       	in	r24, 0x2e	; 46
    
    /* receive response */
    for(uint8_t i = 0; i < 10; ++i)
    {
        response = sd_raw_rec_byte();
        if(response != 0xff)
     f12:	8f 3f       	cpi	r24, 0xFF	; 255
     f14:	19 f4       	brne	.+6      	; 0xf1c <sd_raw_send_command+0xc4>
           sd_raw_send_byte(0xff);
           break;
    }
    
    /* receive response */
    for(uint8_t i = 0; i < 10; ++i)
     f16:	9f 5f       	subi	r25, 0xFF	; 255
     f18:	9a 30       	cpi	r25, 0x0A	; 10
     f1a:	99 f7       	brne	.-26     	; 0xf02 <sd_raw_send_command+0xaa>
        if(response != 0xff)
            break;
    }

    return response;
}
     f1c:	08 95       	ret

00000f1e <partition_close>:
 * \param[in] partition The partition descriptor to destroy.
 * \returns 0 on failure, 1 on success.
 * \see partition_open
 */
uint8_t partition_close(struct partition_struct* partition)
{
     f1e:	fc 01       	movw	r30, r24
    if(!partition)
     f20:	00 97       	sbiw	r24, 0x00	; 0
     f22:	11 f4       	brne	.+4      	; 0xf28 <partition_close+0xa>
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	08 95       	ret

    /* destroy partition descriptor */
#if USE_DYNAMIC_MEMORY
    free(partition);
#else
    partition->type = PARTITION_TYPE_FREE;
     f28:	10 86       	std	Z+8, r1	; 0x08
     f2a:	81 e0       	ldi	r24, 0x01	; 1
#endif

    return 1;
}
     f2c:	08 95       	ret

00000f2e <partition_open>:
 *                  as a single partition (e.g. for "super floppy" use).
 * \returns 0 on failure, a partition descriptor on success.
 * \see partition_close
 */
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, device_write_interval_t device_write_interval, int8_t index)
{
     f2e:	8f 92       	push	r8
     f30:	9f 92       	push	r9
     f32:	af 92       	push	r10
     f34:	bf 92       	push	r11
     f36:	cf 92       	push	r12
     f38:	df 92       	push	r13
     f3a:	ef 92       	push	r14
     f3c:	ff 92       	push	r15
     f3e:	0f 93       	push	r16
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
     f48:	60 97       	sbiw	r28, 0x10	; 16
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	f8 94       	cli
     f4e:	de bf       	out	0x3e, r29	; 62
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	cd bf       	out	0x3d, r28	; 61
     f54:	7c 01       	movw	r14, r24
     f56:	6b 01       	movw	r12, r22
     f58:	5a 01       	movw	r10, r20
     f5a:	49 01       	movw	r8, r18
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
     f5c:	00 97       	sbiw	r24, 0x00	; 0
     f5e:	09 f4       	brne	.+2      	; 0xf62 <partition_open+0x34>
     f60:	93 c0       	rjmp	.+294    	; 0x1088 <partition_open+0x15a>
     f62:	61 15       	cp	r22, r1
     f64:	71 05       	cpc	r23, r1
     f66:	09 f4       	brne	.+2      	; 0xf6a <partition_open+0x3c>
     f68:	8f c0       	rjmp	.+286    	; 0x1088 <partition_open+0x15a>
     f6a:	04 30       	cpi	r16, 0x04	; 4
     f6c:	0c f0       	brlt	.+2      	; 0xf70 <partition_open+0x42>
     f6e:	8c c0       	rjmp	.+280    	; 0x1088 <partition_open+0x15a>
        return 0;

    if(index >= 0)
     f70:	07 fd       	sbrc	r16, 7
     f72:	1d c0       	rjmp	.+58     	; 0xfae <partition_open+0x80>
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
     f74:	60 2f       	mov	r22, r16
     f76:	77 27       	eor	r23, r23
     f78:	67 fd       	sbrc	r22, 7
     f7a:	70 95       	com	r23
     f7c:	e4 e0       	ldi	r30, 0x04	; 4
     f7e:	66 0f       	add	r22, r22
     f80:	77 1f       	adc	r23, r23
     f82:	ea 95       	dec	r30
     f84:	e1 f7       	brne	.-8      	; 0xf7e <partition_open+0x50>
     f86:	62 54       	subi	r22, 0x42	; 66
     f88:	7e 4f       	sbci	r23, 0xFE	; 254
     f8a:	88 27       	eor	r24, r24
     f8c:	77 fd       	sbrc	r23, 7
     f8e:	80 95       	com	r24
     f90:	98 2f       	mov	r25, r24
     f92:	ae 01       	movw	r20, r28
     f94:	4f 5f       	subi	r20, 0xFF	; 255
     f96:	5f 4f       	sbci	r21, 0xFF	; 255
     f98:	20 e1       	ldi	r18, 0x10	; 16
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	f7 01       	movw	r30, r14
     f9e:	09 95       	icall
     fa0:	88 23       	and	r24, r24
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <partition_open+0x78>
     fa4:	71 c0       	rjmp	.+226    	; 0x1088 <partition_open+0x15a>
            return 0;

        /* abort on empty partition entry */
        if(buffer[4] == 0x00)
     fa6:	8d 81       	ldd	r24, Y+5	; 0x05
     fa8:	88 23       	and	r24, r24
     faa:	09 f4       	brne	.+2      	; 0xfae <partition_open+0x80>
     fac:	6d c0       	rjmp	.+218    	; 0x1088 <partition_open+0x15a>
#else
    new_partition = partition_handles;
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
     fae:	80 91 e7 03 	lds	r24, 0x03E7
     fb2:	88 23       	and	r24, r24
     fb4:	09 f0       	breq	.+2      	; 0xfb8 <partition_open+0x8a>
     fb6:	68 c0       	rjmp	.+208    	; 0x1088 <partition_open+0x15a>
     fb8:	7c c0       	rjmp	.+248    	; 0x10b2 <partition_open+0x184>
    new_partition->device_write = device_write;
    new_partition->device_write_interval = device_write_interval;

    if(index >= 0)
    {
        new_partition->type = buffer[4];
     fba:	8d 81       	ldd	r24, Y+5	; 0x05
     fbc:	80 93 e7 03 	sts	0x03E7, r24
        new_partition->offset = ((uint32_t) buffer[8]) |
     fc0:	2a 85       	ldd	r18, Y+10	; 0x0a
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	40 e0       	ldi	r20, 0x00	; 0
     fc6:	50 e0       	ldi	r21, 0x00	; 0
     fc8:	54 2f       	mov	r21, r20
     fca:	43 2f       	mov	r20, r19
     fcc:	32 2f       	mov	r19, r18
     fce:	22 27       	eor	r18, r18
     fd0:	8b 85       	ldd	r24, Y+11	; 0x0b
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	a0 e0       	ldi	r26, 0x00	; 0
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	dc 01       	movw	r26, r24
     fda:	99 27       	eor	r25, r25
     fdc:	88 27       	eor	r24, r24
     fde:	28 2b       	or	r18, r24
     fe0:	39 2b       	or	r19, r25
     fe2:	4a 2b       	or	r20, r26
     fe4:	5b 2b       	or	r21, r27
     fe6:	89 85       	ldd	r24, Y+9	; 0x09
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	a0 e0       	ldi	r26, 0x00	; 0
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	28 2b       	or	r18, r24
     ff0:	39 2b       	or	r19, r25
     ff2:	4a 2b       	or	r20, r26
     ff4:	5b 2b       	or	r21, r27
     ff6:	8c 85       	ldd	r24, Y+12	; 0x0c
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	a0 e0       	ldi	r26, 0x00	; 0
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	b8 2f       	mov	r27, r24
    1000:	aa 27       	eor	r26, r26
    1002:	99 27       	eor	r25, r25
    1004:	88 27       	eor	r24, r24
    1006:	28 2b       	or	r18, r24
    1008:	39 2b       	or	r19, r25
    100a:	4a 2b       	or	r20, r26
    100c:	5b 2b       	or	r21, r27
    100e:	20 93 e8 03 	sts	0x03E8, r18
    1012:	30 93 e9 03 	sts	0x03E9, r19
    1016:	40 93 ea 03 	sts	0x03EA, r20
    101a:	50 93 eb 03 	sts	0x03EB, r21
                                ((uint32_t) buffer[9] << 8) |
                                ((uint32_t) buffer[10] << 16) |
                                ((uint32_t) buffer[11] << 24);
        new_partition->length = ((uint32_t) buffer[12]) |
    101e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	40 e0       	ldi	r20, 0x00	; 0
    1024:	50 e0       	ldi	r21, 0x00	; 0
    1026:	54 2f       	mov	r21, r20
    1028:	43 2f       	mov	r20, r19
    102a:	32 2f       	mov	r19, r18
    102c:	22 27       	eor	r18, r18
    102e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	a0 e0       	ldi	r26, 0x00	; 0
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	dc 01       	movw	r26, r24
    1038:	99 27       	eor	r25, r25
    103a:	88 27       	eor	r24, r24
    103c:	28 2b       	or	r18, r24
    103e:	39 2b       	or	r19, r25
    1040:	4a 2b       	or	r20, r26
    1042:	5b 2b       	or	r21, r27
    1044:	8d 85       	ldd	r24, Y+13	; 0x0d
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	a0 e0       	ldi	r26, 0x00	; 0
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	28 2b       	or	r18, r24
    104e:	39 2b       	or	r19, r25
    1050:	4a 2b       	or	r20, r26
    1052:	5b 2b       	or	r21, r27
    1054:	88 89       	ldd	r24, Y+16	; 0x10
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	a0 e0       	ldi	r26, 0x00	; 0
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	b8 2f       	mov	r27, r24
    105e:	aa 27       	eor	r26, r26
    1060:	99 27       	eor	r25, r25
    1062:	88 27       	eor	r24, r24
    1064:	28 2b       	or	r18, r24
    1066:	39 2b       	or	r19, r25
    1068:	4a 2b       	or	r20, r26
    106a:	5b 2b       	or	r21, r27
    106c:	20 93 ec 03 	sts	0x03EC, r18
    1070:	30 93 ed 03 	sts	0x03ED, r19
    1074:	40 93 ee 03 	sts	0x03EE, r20
    1078:	50 93 ef 03 	sts	0x03EF, r21
    107c:	03 c0       	rjmp	.+6      	; 0x1084 <partition_open+0x156>
                                ((uint32_t) buffer[14] << 16) |
                                ((uint32_t) buffer[15] << 24);
    }
    else
    {
        new_partition->type = 0xff;
    107e:	8f ef       	ldi	r24, 0xFF	; 255
    1080:	80 93 e7 03 	sts	0x03E7, r24
    1084:	9f 01       	movw	r18, r30
    1086:	02 c0       	rjmp	.+4      	; 0x108c <partition_open+0x15e>
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	30 e0       	ldi	r19, 0x00	; 0
    }

    return new_partition;
}
    108c:	c9 01       	movw	r24, r18
    108e:	60 96       	adiw	r28, 0x10	; 16
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	de bf       	out	0x3e, r29	; 62
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	cd bf       	out	0x3d, r28	; 61
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	0f 91       	pop	r16
    10a0:	ff 90       	pop	r15
    10a2:	ef 90       	pop	r14
    10a4:	df 90       	pop	r13
    10a6:	cf 90       	pop	r12
    10a8:	bf 90       	pop	r11
    10aa:	af 90       	pop	r10
    10ac:	9f 90       	pop	r9
    10ae:	8f 90       	pop	r8
    10b0:	08 95       	ret
    }
    if(i >= PARTITION_COUNT)
        return 0;
#endif

    memset(new_partition, 0, sizeof(*new_partition));
    10b2:	ef ed       	ldi	r30, 0xDF	; 223
    10b4:	f3 e0       	ldi	r31, 0x03	; 3
    10b6:	81 e1       	ldi	r24, 0x11	; 17
    10b8:	df 01       	movw	r26, r30
    10ba:	1d 92       	st	X+, r1
    10bc:	8a 95       	dec	r24
    10be:	e9 f7       	brne	.-6      	; 0x10ba <partition_open+0x18c>

    /* fill partition descriptor */
    new_partition->device_read = device_read;
    10c0:	f0 92 e0 03 	sts	0x03E0, r15
    10c4:	e0 92 df 03 	sts	0x03DF, r14
    new_partition->device_read_interval = device_read_interval;
    10c8:	d0 92 e2 03 	sts	0x03E2, r13
    10cc:	c0 92 e1 03 	sts	0x03E1, r12
    new_partition->device_write = device_write;
    10d0:	b0 92 e4 03 	sts	0x03E4, r11
    10d4:	a0 92 e3 03 	sts	0x03E3, r10
    new_partition->device_write_interval = device_write_interval;
    10d8:	90 92 e6 03 	sts	0x03E6, r9
    10dc:	80 92 e5 03 	sts	0x03E5, r8

    if(index >= 0)
    10e0:	07 ff       	sbrs	r16, 7
    10e2:	6b cf       	rjmp	.-298    	; 0xfba <partition_open+0x8c>
    10e4:	cc cf       	rjmp	.-104    	; 0x107e <partition_open+0x150>

000010e6 <sd_raw_get_info>:
 *
 * \param[in] info A pointer to the structure into which to save the information.
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_get_info(struct sd_raw_info* info)
{
    10e6:	cf 92       	push	r12
    10e8:	df 92       	push	r13
    10ea:	ef 92       	push	r14
    10ec:	ff 92       	push	r15
    10ee:	0f 93       	push	r16
    10f0:	1f 93       	push	r17
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	ec 01       	movw	r28, r24
    if(!info || !sd_raw_available())
    10f8:	00 97       	sbiw	r24, 0x00	; 0
    10fa:	81 f0       	breq	.+32     	; 0x111c <sd_raw_get_info+0x36>
        return 0;

    memset(info, 0, sizeof(*info));
    10fc:	89 e1       	ldi	r24, 0x19	; 25
    10fe:	fe 01       	movw	r30, r28
    1100:	11 92       	st	Z+, r1
    1102:	8a 95       	dec	r24
    1104:	e9 f7       	brne	.-6      	; 0x1100 <sd_raw_get_info+0x1a>

    select_card();
    1106:	2a 98       	cbi	0x05, 2	; 5

    /* read cid register */
    if(sd_raw_send_command(CMD_SEND_CID, 0))
    1108:	8a e0       	ldi	r24, 0x0A	; 10
    110a:	40 e0       	ldi	r20, 0x00	; 0
    110c:	50 e0       	ldi	r21, 0x00	; 0
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	70 e0       	ldi	r23, 0x00	; 0
    1112:	0e 94 2c 07 	call	0xe58	; 0xe58 <sd_raw_send_command>
    1116:	88 23       	and	r24, r24
    1118:	19 f0       	breq	.+6      	; 0x1120 <sd_raw_get_info+0x3a>
    {
        unselect_card();
    111a:	2a 9a       	sbi	0x05, 2	; 5
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	f7 c0       	rjmp	.+494    	; 0x130e <sd_raw_get_info+0x228>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    1120:	9f ef       	ldi	r25, 0xFF	; 255
    1122:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR & (1 << SPIF)));
    1124:	0d b4       	in	r0, 0x2d	; 45
    1126:	07 fe       	sbrs	r0, 7
    1128:	fd cf       	rjmp	.-6      	; 0x1124 <sd_raw_get_info+0x3e>
    SPSR &= ~(1 << SPIF);
    112a:	8d b5       	in	r24, 0x2d	; 45
    112c:	8f 77       	andi	r24, 0x7F	; 127
    112e:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    1130:	8e b5       	in	r24, 0x2e	; 46
    if(sd_raw_send_command(CMD_SEND_CID, 0))
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    1132:	8e 3f       	cpi	r24, 0xFE	; 254
    1134:	b1 f7       	brne	.-20     	; 0x1122 <sd_raw_get_info+0x3c>
    1136:	1c 2f       	mov	r17, r28
    1138:	ce 01       	movw	r24, r28
    113a:	fc 01       	movw	r30, r24
    113c:	60 e6       	ldi	r22, 0x60	; 96
    113e:	70 e0       	ldi	r23, 0x00	; 0
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    1140:	0f ef       	ldi	r16, 0xFF	; 255
    if(sd_raw_send_command(CMD_SEND_CID, 0))
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    1142:	9e 2f       	mov	r25, r30
    1144:	91 1b       	sub	r25, r17
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    1146:	0e bd       	out	0x2e, r16	; 46
    while(!(SPSR & (1 << SPIF)));
    1148:	0d b4       	in	r0, 0x2d	; 45
    114a:	07 fe       	sbrs	r0, 7
    114c:	fd cf       	rjmp	.-6      	; 0x1148 <sd_raw_get_info+0x62>
    SPSR &= ~(1 << SPIF);
    114e:	8d b5       	in	r24, 0x2d	; 45
    1150:	8f 77       	andi	r24, 0x7F	; 127
    1152:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    1154:	2e b5       	in	r18, 0x2e	; 46
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    {
        uint8_t b = sd_raw_rec_byte();

        switch(i)
    1156:	98 30       	cpi	r25, 0x08	; 8
    1158:	28 f4       	brcc	.+10     	; 0x1164 <sd_raw_get_info+0x7e>
    115a:	93 30       	cpi	r25, 0x03	; 3
    115c:	88 f4       	brcc	.+34     	; 0x1180 <sd_raw_get_info+0x9a>
    115e:	99 23       	and	r25, r25
    1160:	59 f0       	breq	.+22     	; 0x1178 <sd_raw_get_info+0x92>
    1162:	0c c0       	rjmp	.+24     	; 0x117c <sd_raw_get_info+0x96>
    1164:	9d 30       	cpi	r25, 0x0D	; 13
    1166:	18 f4       	brcc	.+6      	; 0x116e <sd_raw_get_info+0x88>
    1168:	99 30       	cpi	r25, 0x09	; 9
    116a:	70 f4       	brcc	.+28     	; 0x1188 <sd_raw_get_info+0xa2>
    116c:	0b c0       	rjmp	.+22     	; 0x1184 <sd_raw_get_info+0x9e>
    116e:	9d 30       	cpi	r25, 0x0D	; 13
    1170:	19 f1       	breq	.+70     	; 0x11b8 <sd_raw_get_info+0xd2>
    1172:	9e 30       	cpi	r25, 0x0E	; 14
    1174:	69 f5       	brne	.+90     	; 0x11d0 <sd_raw_get_info+0xea>
    1176:	24 c0       	rjmp	.+72     	; 0x11c0 <sd_raw_get_info+0xda>
        {
            case 0:
                info->manufacturer = b;
    1178:	28 83       	st	Y, r18
    117a:	2a c0       	rjmp	.+84     	; 0x11d0 <sd_raw_get_info+0xea>
                break;
            case 1:
            case 2:
                info->oem[i - 1] = b;
    117c:	20 83       	st	Z, r18
    117e:	28 c0       	rjmp	.+80     	; 0x11d0 <sd_raw_get_info+0xea>
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
                info->product[i - 3] = b;
    1180:	21 83       	std	Z+1, r18	; 0x01
    1182:	26 c0       	rjmp	.+76     	; 0x11d0 <sd_raw_get_info+0xea>
                break;
            case 8:
                info->revision = b;
    1184:	2a 87       	std	Y+10, r18	; 0x0a
    1186:	24 c0       	rjmp	.+72     	; 0x11d0 <sd_raw_get_info+0xea>
                break;
            case 9:
            case 10:
            case 11:
            case 12:
                info->serial |= (uint32_t) b << ((12 - i) * 8);
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	40 e0       	ldi	r20, 0x00	; 0
    118c:	50 e0       	ldi	r21, 0x00	; 0
    118e:	06 2e       	mov	r0, r22
    1190:	04 c0       	rjmp	.+8      	; 0x119a <sd_raw_get_info+0xb4>
    1192:	22 0f       	add	r18, r18
    1194:	33 1f       	adc	r19, r19
    1196:	44 1f       	adc	r20, r20
    1198:	55 1f       	adc	r21, r21
    119a:	0a 94       	dec	r0
    119c:	d2 f7       	brpl	.-12     	; 0x1192 <sd_raw_get_info+0xac>
    119e:	8b 85       	ldd	r24, Y+11	; 0x0b
    11a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    11a2:	ad 85       	ldd	r26, Y+13	; 0x0d
    11a4:	be 85       	ldd	r27, Y+14	; 0x0e
    11a6:	82 2b       	or	r24, r18
    11a8:	93 2b       	or	r25, r19
    11aa:	a4 2b       	or	r26, r20
    11ac:	b5 2b       	or	r27, r21
    11ae:	8b 87       	std	Y+11, r24	; 0x0b
    11b0:	9c 87       	std	Y+12, r25	; 0x0c
    11b2:	ad 87       	std	Y+13, r26	; 0x0d
    11b4:	be 87       	std	Y+14, r27	; 0x0e
    11b6:	0c c0       	rjmp	.+24     	; 0x11d0 <sd_raw_get_info+0xea>
                break;
            case 13:
                info->manufacturing_year = b << 4;
    11b8:	22 95       	swap	r18
    11ba:	20 7f       	andi	r18, 0xF0	; 240
    11bc:	2f 87       	std	Y+15, r18	; 0x0f
    11be:	08 c0       	rjmp	.+16     	; 0x11d0 <sd_raw_get_info+0xea>
                break;
            case 14:
                info->manufacturing_year |= b >> 4;
    11c0:	92 2f       	mov	r25, r18
    11c2:	92 95       	swap	r25
    11c4:	9f 70       	andi	r25, 0x0F	; 15
    11c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    11c8:	89 2b       	or	r24, r25
    11ca:	8f 87       	std	Y+15, r24	; 0x0f
                info->manufacturing_month = b & 0x0f;
    11cc:	2f 70       	andi	r18, 0x0F	; 15
    11ce:	28 8b       	std	Y+16, r18	; 0x10
    11d0:	31 96       	adiw	r30, 0x01	; 1
    11d2:	68 50       	subi	r22, 0x08	; 8
    11d4:	70 40       	sbci	r23, 0x00	; 0
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    11d6:	8f ef       	ldi	r24, 0xFF	; 255
    11d8:	60 3d       	cpi	r22, 0xD0	; 208
    11da:	78 07       	cpc	r23, r24
    11dc:	09 f0       	breq	.+2      	; 0x11e0 <sd_raw_get_info+0xfa>
    11de:	b1 cf       	rjmp	.-158    	; 0x1142 <sd_raw_get_info+0x5c>
#if SD_RAW_SDHC
    uint16_t csd_c_size = 0;
#else
    uint32_t csd_c_size = 0;
#endif
    if(sd_raw_send_command(CMD_SEND_CSD, 0))
    11e0:	89 e0       	ldi	r24, 0x09	; 9
    11e2:	40 e0       	ldi	r20, 0x00	; 0
    11e4:	50 e0       	ldi	r21, 0x00	; 0
    11e6:	60 e0       	ldi	r22, 0x00	; 0
    11e8:	70 e0       	ldi	r23, 0x00	; 0
    11ea:	0e 94 2c 07 	call	0xe58	; 0xe58 <sd_raw_send_command>
    11ee:	88 23       	and	r24, r24
    11f0:	09 f0       	breq	.+2      	; 0x11f4 <sd_raw_get_info+0x10e>
    11f2:	93 cf       	rjmp	.-218    	; 0x111a <sd_raw_get_info+0x34>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    11f4:	9f ef       	ldi	r25, 0xFF	; 255
    11f6:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR & (1 << SPIF)));
    11f8:	0d b4       	in	r0, 0x2d	; 45
    11fa:	07 fe       	sbrs	r0, 7
    11fc:	fd cf       	rjmp	.-6      	; 0x11f8 <sd_raw_get_info+0x112>
    SPSR &= ~(1 << SPIF);
    11fe:	8d b5       	in	r24, 0x2d	; 45
    1200:	8f 77       	andi	r24, 0x7F	; 127
    1202:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    1204:	8e b5       	in	r24, 0x2e	; 46
    if(sd_raw_send_command(CMD_SEND_CSD, 0))
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    1206:	8e 3f       	cpi	r24, 0xFE	; 254
    1208:	b1 f7       	brne	.-20     	; 0x11f6 <sd_raw_get_info+0x110>
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	40 e0       	ldi	r20, 0x00	; 0
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	60 e0       	ldi	r22, 0x00	; 0
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    1218:	1f ef       	ldi	r17, 0xFF	; 255
            if(b & 0x40)
                info->flag_copy = 1;
            if(b & 0x20)
                info->flag_write_protect = 1;
            if(b & 0x10)
                info->flag_write_protect_temp = 1;
    121a:	e1 e0       	ldi	r30, 0x01	; 1
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    121c:	1e bd       	out	0x2e, r17	; 46
    while(!(SPSR & (1 << SPIF)));
    121e:	0d b4       	in	r0, 0x2d	; 45
    1220:	07 fe       	sbrs	r0, 7
    1222:	fd cf       	rjmp	.-6      	; 0x121e <sd_raw_get_info+0x138>
    SPSR &= ~(1 << SPIF);
    1224:	8d b5       	in	r24, 0x2d	; 45
    1226:	8f 77       	andi	r24, 0x7F	; 127
    1228:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    122a:	8e b5       	in	r24, 0x2e	; 46
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    {
        uint8_t b = sd_raw_rec_byte();

        if(i == 14)
    122c:	6e 30       	cpi	r22, 0x0E	; 14
    122e:	79 f4       	brne	.+30     	; 0x124e <sd_raw_get_info+0x168>
        {
            if(b & 0x40)
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	86 fd       	sbrc	r24, 6
                info->flag_copy = 1;
    1234:	ed 8b       	std	Y+21, r30	; 0x15
            if(b & 0x20)
    1236:	85 fd       	sbrc	r24, 5
                info->flag_write_protect = 1;
    1238:	ee 8b       	std	Y+22, r30	; 0x16
            if(b & 0x10)
    123a:	84 fd       	sbrc	r24, 4
                info->flag_write_protect_temp = 1;
    123c:	ef 8b       	std	Y+23, r30	; 0x17
            info->format = (b & 0x0c) >> 2;
    123e:	8c 70       	andi	r24, 0x0C	; 12
    1240:	90 70       	andi	r25, 0x00	; 0
    1242:	95 95       	asr	r25
    1244:	87 95       	ror	r24
    1246:	95 95       	asr	r25
    1248:	87 95       	ror	r24
    124a:	88 8f       	std	Y+24, r24	; 0x18
    124c:	5a c0       	rjmp	.+180    	; 0x1302 <sd_raw_get_info+0x21c>
                }
            }
            else
#endif
            {
                switch(i)
    124e:	67 30       	cpi	r22, 0x07	; 7
    1250:	f9 f0       	breq	.+62     	; 0x1290 <sd_raw_get_info+0x1aa>
    1252:	68 30       	cpi	r22, 0x08	; 8
    1254:	30 f4       	brcc	.+12     	; 0x1262 <sd_raw_get_info+0x17c>
    1256:	65 30       	cpi	r22, 0x05	; 5
    1258:	61 f0       	breq	.+24     	; 0x1272 <sd_raw_get_info+0x18c>
    125a:	66 30       	cpi	r22, 0x06	; 6
    125c:	09 f0       	breq	.+2      	; 0x1260 <sd_raw_get_info+0x17a>
    125e:	51 c0       	rjmp	.+162    	; 0x1302 <sd_raw_get_info+0x21c>
    1260:	0b c0       	rjmp	.+22     	; 0x1278 <sd_raw_get_info+0x192>
    1262:	69 30       	cpi	r22, 0x09	; 9
    1264:	a1 f1       	breq	.+104    	; 0x12ce <sd_raw_get_info+0x1e8>
    1266:	69 30       	cpi	r22, 0x09	; 9
    1268:	10 f1       	brcs	.+68     	; 0x12ae <sd_raw_get_info+0x1c8>
    126a:	6a 30       	cpi	r22, 0x0A	; 10
    126c:	09 f0       	breq	.+2      	; 0x1270 <sd_raw_get_info+0x18a>
    126e:	49 c0       	rjmp	.+146    	; 0x1302 <sd_raw_get_info+0x21c>
    1270:	32 c0       	rjmp	.+100    	; 0x12d6 <sd_raw_get_info+0x1f0>
                {
                    case 5:
                        csd_read_bl_len = b & 0x0f;
    1272:	f8 2f       	mov	r31, r24
    1274:	ff 70       	andi	r31, 0x0F	; 15
    1276:	45 c0       	rjmp	.+138    	; 0x1302 <sd_raw_get_info+0x21c>
                        break;
                    case 6:
                        csd_c_size = b & 0x03;
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	a0 e0       	ldi	r26, 0x00	; 0
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	83 70       	andi	r24, 0x03	; 3
    1280:	90 70       	andi	r25, 0x00	; 0
    1282:	a0 70       	andi	r26, 0x00	; 0
    1284:	b0 70       	andi	r27, 0x00	; 0
                        csd_c_size <<= 8;
    1286:	22 27       	eor	r18, r18
    1288:	38 2f       	mov	r19, r24
    128a:	49 2f       	mov	r20, r25
    128c:	5a 2f       	mov	r21, r26
    128e:	39 c0       	rjmp	.+114    	; 0x1302 <sd_raw_get_info+0x21c>
                        break;
                    case 7:
                        csd_c_size |= b;
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	a0 e0       	ldi	r26, 0x00	; 0
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	28 2b       	or	r18, r24
    1298:	39 2b       	or	r19, r25
    129a:	4a 2b       	or	r20, r26
    129c:	5b 2b       	or	r21, r27
                        csd_c_size <<= 2;
    129e:	a2 e0       	ldi	r26, 0x02	; 2
    12a0:	22 0f       	add	r18, r18
    12a2:	33 1f       	adc	r19, r19
    12a4:	44 1f       	adc	r20, r20
    12a6:	55 1f       	adc	r21, r21
    12a8:	aa 95       	dec	r26
    12aa:	d1 f7       	brne	.-12     	; 0x12a0 <sd_raw_get_info+0x1ba>
    12ac:	2a c0       	rjmp	.+84     	; 0x1302 <sd_raw_get_info+0x21c>
                        break;
                    case 8:
                        csd_c_size |= b >> 6;
    12ae:	82 95       	swap	r24
    12b0:	86 95       	lsr	r24
    12b2:	86 95       	lsr	r24
    12b4:	83 70       	andi	r24, 0x03	; 3
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	a0 e0       	ldi	r26, 0x00	; 0
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	28 2b       	or	r18, r24
    12be:	39 2b       	or	r19, r25
    12c0:	4a 2b       	or	r20, r26
    12c2:	5b 2b       	or	r21, r27
                        ++csd_c_size;
    12c4:	2f 5f       	subi	r18, 0xFF	; 255
    12c6:	3f 4f       	sbci	r19, 0xFF	; 255
    12c8:	4f 4f       	sbci	r20, 0xFF	; 255
    12ca:	5f 4f       	sbci	r21, 0xFF	; 255
    12cc:	1a c0       	rjmp	.+52     	; 0x1302 <sd_raw_get_info+0x21c>
                        break;
                    case 9:
                        csd_c_size_mult = b & 0x03;
    12ce:	78 2f       	mov	r23, r24
    12d0:	73 70       	andi	r23, 0x03	; 3
                        csd_c_size_mult <<= 1;
    12d2:	77 0f       	add	r23, r23
    12d4:	16 c0       	rjmp	.+44     	; 0x1302 <sd_raw_get_info+0x21c>
                        break;
                    case 10:
                        csd_c_size_mult |= b >> 7;
    12d6:	88 1f       	adc	r24, r24
    12d8:	88 27       	eor	r24, r24
    12da:	88 1f       	adc	r24, r24
    12dc:	78 2b       	or	r23, r24

                        info->capacity = (uint32_t) csd_c_size << (csd_c_size_mult + csd_read_bl_len + 2);
    12de:	8f 2f       	mov	r24, r31
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	02 96       	adiw	r24, 0x02	; 2
    12e4:	87 0f       	add	r24, r23
    12e6:	91 1d       	adc	r25, r1
    12e8:	69 01       	movw	r12, r18
    12ea:	7a 01       	movw	r14, r20
    12ec:	04 c0       	rjmp	.+8      	; 0x12f6 <sd_raw_get_info+0x210>
    12ee:	cc 0c       	add	r12, r12
    12f0:	dd 1c       	adc	r13, r13
    12f2:	ee 1c       	adc	r14, r14
    12f4:	ff 1c       	adc	r15, r15
    12f6:	8a 95       	dec	r24
    12f8:	d2 f7       	brpl	.-12     	; 0x12ee <sd_raw_get_info+0x208>
    12fa:	c9 8a       	std	Y+17, r12	; 0x11
    12fc:	da 8a       	std	Y+18, r13	; 0x12
    12fe:	eb 8a       	std	Y+19, r14	; 0x13
    1300:	fc 8a       	std	Y+20, r15	; 0x14
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    1302:	6f 5f       	subi	r22, 0xFF	; 255
    1304:	62 31       	cpi	r22, 0x12	; 18
    1306:	09 f0       	breq	.+2      	; 0x130a <sd_raw_get_info+0x224>
    1308:	89 cf       	rjmp	.-238    	; 0x121c <sd_raw_get_info+0x136>
                }
            }
        }
    }

    unselect_card();
    130a:	2a 9a       	sbi	0x05, 2	; 5
    130c:	81 e0       	ldi	r24, 0x01	; 1

    return 1;
}
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	1f 91       	pop	r17
    1314:	0f 91       	pop	r16
    1316:	ff 90       	pop	r15
    1318:	ef 90       	pop	r14
    131a:	df 90       	pop	r13
    131c:	cf 90       	pop	r12
    131e:	08 95       	ret

00001320 <fat_clear_cluster>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] cluster_num The cluster to clear.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_clear_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    1320:	cf 92       	push	r12
    1322:	df 92       	push	r13
    1324:	ef 92       	push	r14
    1326:	ff 92       	push	r15
    1328:	0f 93       	push	r16
    132a:	1f 93       	push	r17
    132c:	df 93       	push	r29
    132e:	cf 93       	push	r28
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	60 97       	sbiw	r28, 0x10	; 16
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
    1340:	8c 01       	movw	r16, r24
    if(cluster_num < 2)
    1342:	62 30       	cpi	r22, 0x02	; 2
    1344:	71 05       	cpc	r23, r1
    1346:	10 f4       	brcc	.+4      	; 0x134c <fat_clear_cluster+0x2c>
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	35 c0       	rjmp	.+106    	; 0x13b6 <fat_clear_cluster+0x96>
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    134c:	00 97       	sbiw	r24, 0x00	; 0
    134e:	29 f4       	brne	.+10     	; 0x135a <fat_clear_cluster+0x3a>
    1350:	40 e0       	ldi	r20, 0x00	; 0
    1352:	50 e0       	ldi	r21, 0x00	; 0
    1354:	60 e0       	ldi	r22, 0x00	; 0
    1356:	70 e0       	ldi	r23, 0x00	; 0
    1358:	16 c0       	rjmp	.+44     	; 0x1386 <fat_clear_cluster+0x66>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    135a:	62 50       	subi	r22, 0x02	; 2
    135c:	70 40       	sbci	r23, 0x00	; 0
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	f8 01       	movw	r30, r16
    1364:	20 89       	ldd	r18, Z+16	; 0x10
    1366:	31 89       	ldd	r19, Z+17	; 0x11
    1368:	40 e0       	ldi	r20, 0x00	; 0
    136a:	50 e0       	ldi	r21, 0x00	; 0
    136c:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <__mulsi3>
    1370:	ab 01       	movw	r20, r22
    1372:	bc 01       	movw	r22, r24
    1374:	f8 01       	movw	r30, r16
    1376:	82 89       	ldd	r24, Z+18	; 0x12
    1378:	93 89       	ldd	r25, Z+19	; 0x13
    137a:	a4 89       	ldd	r26, Z+20	; 0x14
    137c:	b5 89       	ldd	r27, Z+21	; 0x15
    137e:	48 0f       	add	r20, r24
    1380:	59 1f       	adc	r21, r25
    1382:	6a 1f       	adc	r22, r26
    1384:	7b 1f       	adc	r23, r27
        return 0;

    offset_t cluster_offset = fat_cluster_offset(fs, cluster_num);

    uint8_t zero[16];
    memset(zero, 0, sizeof(zero));
    1386:	de 01       	movw	r26, r28
    1388:	11 96       	adiw	r26, 0x01	; 1
    138a:	80 e1       	ldi	r24, 0x10	; 16
    138c:	fd 01       	movw	r30, r26
    138e:	11 92       	st	Z+, r1
    1390:	8a 95       	dec	r24
    1392:	e9 f7       	brne	.-6      	; 0x138e <fat_clear_cluster+0x6e>
    return fs->partition->device_write_interval(cluster_offset,
    1394:	f8 01       	movw	r30, r16
    1396:	80 81       	ld	r24, Z
    1398:	91 81       	ldd	r25, Z+1	; 0x01
    139a:	20 89       	ldd	r18, Z+16	; 0x10
    139c:	31 89       	ldd	r19, Z+17	; 0x11
    139e:	fc 01       	movw	r30, r24
    13a0:	c6 80       	ldd	r12, Z+6	; 0x06
    13a2:	d7 80       	ldd	r13, Z+7	; 0x07
    13a4:	cb 01       	movw	r24, r22
    13a6:	ba 01       	movw	r22, r20
    13a8:	ad 01       	movw	r20, r26
    13aa:	0d e6       	ldi	r16, 0x6D	; 109
    13ac:	14 e0       	ldi	r17, 0x04	; 4
    13ae:	ee 24       	eor	r14, r14
    13b0:	ff 24       	eor	r15, r15
    13b2:	f6 01       	movw	r30, r12
    13b4:	09 95       	icall
                                                zero,
                                                fs->header.cluster_size,
                                                fat_clear_cluster_callback,
                                                0
                                               );
}
    13b6:	60 96       	adiw	r28, 0x10	; 16
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	f8 94       	cli
    13bc:	de bf       	out	0x3e, r29	; 62
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	cd bf       	out	0x3d, r28	; 61
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	1f 91       	pop	r17
    13c8:	0f 91       	pop	r16
    13ca:	ff 90       	pop	r15
    13cc:	ef 90       	pop	r14
    13ce:	df 90       	pop	r13
    13d0:	cf 90       	pop	r12
    13d2:	08 95       	ret

000013d4 <fat_read_dir>:
 * \param[out] dir_entry Pointer to a buffer into which to write the directory entry information.
 * \returns 0 on failure, 1 on success.
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
    13d4:	2f 92       	push	r2
    13d6:	3f 92       	push	r3
    13d8:	4f 92       	push	r4
    13da:	5f 92       	push	r5
    13dc:	6f 92       	push	r6
    13de:	7f 92       	push	r7
    13e0:	8f 92       	push	r8
    13e2:	9f 92       	push	r9
    13e4:	af 92       	push	r10
    13e6:	bf 92       	push	r11
    13e8:	cf 92       	push	r12
    13ea:	df 92       	push	r13
    13ec:	ef 92       	push	r14
    13ee:	ff 92       	push	r15
    13f0:	0f 93       	push	r16
    13f2:	1f 93       	push	r17
    13f4:	df 93       	push	r29
    13f6:	cf 93       	push	r28
    13f8:	cd b7       	in	r28, 0x3d	; 61
    13fa:	de b7       	in	r29, 0x3e	; 62
    13fc:	aa 97       	sbiw	r28, 0x2a	; 42
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	f8 94       	cli
    1402:	de bf       	out	0x3e, r29	; 62
    1404:	0f be       	out	0x3f, r0	; 63
    1406:	cd bf       	out	0x3d, r28	; 61
    1408:	4c 01       	movw	r8, r24
    140a:	db 01       	movw	r26, r22
    if(!dd || !dir_entry)
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	09 f4       	brne	.+2      	; 0x1412 <fat_read_dir+0x3e>
    1410:	b5 c0       	rjmp	.+362    	; 0x157c <fat_read_dir+0x1a8>
    1412:	61 15       	cp	r22, r1
    1414:	71 05       	cpc	r23, r1
    1416:	09 f4       	brne	.+2      	; 0x141a <fat_read_dir+0x46>
    1418:	b1 c0       	rjmp	.+354    	; 0x157c <fat_read_dir+0x1a8>
        return 0;

    /* get current position of directory handle */
    struct fat_fs_struct* fs = dd->fs;
    141a:	fc 01       	movw	r30, r24
    141c:	60 80       	ld	r6, Z
    141e:	71 80       	ldd	r7, Z+1	; 0x01
    const struct fat_header_struct* header = &fs->header;
    uint16_t cluster_size = header->cluster_size;
    1420:	f3 01       	movw	r30, r6
    1422:	20 88       	ldd	r2, Z+16	; 0x10
    1424:	31 88       	ldd	r3, Z+17	; 0x11
    cluster_t cluster_num = dd->entry_cluster;
    1426:	fc 01       	movw	r30, r24
    1428:	a5 a4       	ldd	r10, Z+45	; 0x2d
    142a:	b6 a4       	ldd	r11, Z+46	; 0x2e
    uint16_t cluster_offset = dd->entry_offset;
    142c:	27 a5       	ldd	r18, Z+47	; 0x2f
    142e:	30 a9       	ldd	r19, Z+48	; 0x30
    struct fat_read_dir_callback_arg arg;

    if(cluster_offset >= cluster_size)
    1430:	22 15       	cp	r18, r2
    1432:	33 05       	cpc	r19, r3
    1434:	08 f0       	brcs	.+2      	; 0x1438 <fat_read_dir+0x64>
    1436:	7e c0       	rjmp	.+252    	; 0x1534 <fat_read_dir+0x160>
        fat_reset_dir(dd);
        return 0;
    }

    /* reset callback arguments */
    memset(&arg, 0, sizeof(arg));
    1438:	ae 01       	movw	r20, r28
    143a:	4f 5f       	subi	r20, 0xFF	; 255
    143c:	5f 4f       	sbci	r21, 0xFF	; 255
    143e:	86 e0       	ldi	r24, 0x06	; 6
    1440:	fa 01       	movw	r30, r20
    1442:	11 92       	st	Z+, r1
    1444:	8a 95       	dec	r24
    1446:	e9 f7       	brne	.-6      	; 0x1442 <fat_read_dir+0x6e>
    memset(dir_entry, 0, sizeof(*dir_entry));
    1448:	8b e2       	ldi	r24, 0x2B	; 43
    144a:	fb 01       	movw	r30, r22
    144c:	11 92       	st	Z+, r1
    144e:	8a 95       	dec	r24
    1450:	e9 f7       	brne	.-6      	; 0x144c <fat_read_dir+0x78>
    arg.dir_entry = dir_entry;

    /* check if we read from the root directory */
    if(cluster_num == 0)
    1452:	a1 14       	cp	r10, r1
    1454:	b1 04       	cpc	r11, r1
    1456:	09 f0       	breq	.+2      	; 0x145a <fat_read_dir+0x86>
    1458:	74 c0       	rjmp	.+232    	; 0x1542 <fat_read_dir+0x16e>
#if FAT_FAT32_SUPPORT
        if(fs->partition->type == PARTITION_TYPE_FAT32)
            cluster_num = header->root_dir_cluster;
        else
#endif
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    145a:	f3 01       	movw	r30, r6
    145c:	22 88       	ldd	r2, Z+18	; 0x12
    145e:	33 88       	ldd	r3, Z+19	; 0x13
    1460:	86 89       	ldd	r24, Z+22	; 0x16
    1462:	97 89       	ldd	r25, Z+23	; 0x17
    1464:	28 1a       	sub	r2, r24
    1466:	39 0a       	sbc	r3, r25
    1468:	6c c0       	rjmp	.+216    	; 0x1542 <fat_read_dir+0x16e>
    uint8_t buffer[32];
    while(!arg.finished)
    {
        /* read directory entries up to the cluster border */
        uint16_t cluster_left = cluster_size - cluster_offset;
        offset_t pos = cluster_offset;
    146a:	72 01       	movw	r14, r4
    146c:	00 e0       	ldi	r16, 0x00	; 0
    146e:	10 e0       	ldi	r17, 0x00	; 0
        if(cluster_num == 0)
    1470:	a1 14       	cp	r10, r1
    1472:	b1 04       	cpc	r11, r1
    1474:	41 f4       	brne	.+16     	; 0x1486 <fat_read_dir+0xb2>
            pos += header->root_dir_offset;
    1476:	d3 01       	movw	r26, r6
    1478:	56 96       	adiw	r26, 0x16	; 22
    147a:	6d 91       	ld	r22, X+
    147c:	7d 91       	ld	r23, X+
    147e:	8d 91       	ld	r24, X+
    1480:	9c 91       	ld	r25, X
    1482:	59 97       	sbiw	r26, 0x19	; 25
    1484:	24 c0       	rjmp	.+72     	; 0x14ce <fat_read_dir+0xfa>
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    1486:	61 14       	cp	r6, r1
    1488:	71 04       	cpc	r7, r1
    148a:	d9 f0       	breq	.+54     	; 0x14c2 <fat_read_dir+0xee>
    148c:	b2 e0       	ldi	r27, 0x02	; 2
    148e:	ab 16       	cp	r10, r27
    1490:	b1 04       	cpc	r11, r1
    1492:	b8 f0       	brcs	.+46     	; 0x14c2 <fat_read_dir+0xee>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    1494:	f3 01       	movw	r30, r6
    1496:	20 89       	ldd	r18, Z+16	; 0x10
    1498:	31 89       	ldd	r19, Z+17	; 0x11
    149a:	40 e0       	ldi	r20, 0x00	; 0
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	6f a1       	ldd	r22, Y+39	; 0x27
    14a0:	78 a5       	ldd	r23, Y+40	; 0x28
    14a2:	89 a5       	ldd	r24, Y+41	; 0x29
    14a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    14a6:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <__mulsi3>
    14aa:	9b 01       	movw	r18, r22
    14ac:	ac 01       	movw	r20, r24
    14ae:	f3 01       	movw	r30, r6
    14b0:	82 89       	ldd	r24, Z+18	; 0x12
    14b2:	93 89       	ldd	r25, Z+19	; 0x13
    14b4:	a4 89       	ldd	r26, Z+20	; 0x14
    14b6:	b5 89       	ldd	r27, Z+21	; 0x15
    14b8:	28 0f       	add	r18, r24
    14ba:	39 1f       	adc	r19, r25
    14bc:	4a 1f       	adc	r20, r26
    14be:	5b 1f       	adc	r21, r27
    14c0:	04 c0       	rjmp	.+8      	; 0x14ca <fat_read_dir+0xf6>
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	40 e0       	ldi	r20, 0x00	; 0
    14c8:	50 e0       	ldi	r21, 0x00	; 0
        uint16_t cluster_left = cluster_size - cluster_offset;
        offset_t pos = cluster_offset;
        if(cluster_num == 0)
            pos += header->root_dir_offset;
        else
            pos += fat_cluster_offset(fs, cluster_num);
    14ca:	ca 01       	movw	r24, r20
    14cc:	b9 01       	movw	r22, r18
    14ce:	6e 0d       	add	r22, r14
    14d0:	7f 1d       	adc	r23, r15
    14d2:	80 1f       	adc	r24, r16
    14d4:	91 1f       	adc	r25, r17

        arg.bytes_read = 0;
    14d6:	1c 82       	std	Y+4, r1	; 0x04
    14d8:	1b 82       	std	Y+3, r1	; 0x03
        if(!fs->partition->device_read_interval(pos,
    14da:	d3 01       	movw	r26, r6
    14dc:	ed 91       	ld	r30, X+
    14de:	fc 91       	ld	r31, X
    14e0:	81 01       	movw	r16, r2
    14e2:	04 19       	sub	r16, r4
    14e4:	15 09       	sbc	r17, r5
    14e6:	02 80       	ldd	r0, Z+2	; 0x02
    14e8:	f3 81       	ldd	r31, Z+3	; 0x03
    14ea:	e0 2d       	mov	r30, r0
    14ec:	ae 01       	movw	r20, r28
    14ee:	49 5f       	subi	r20, 0xF9	; 249
    14f0:	5f 4f       	sbci	r21, 0xFF	; 255
    14f2:	20 e2       	ldi	r18, 0x20	; 32
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	b8 ed       	ldi	r27, 0xD8	; 216
    14f8:	eb 2e       	mov	r14, r27
    14fa:	ba e0       	ldi	r27, 0x0A	; 10
    14fc:	fb 2e       	mov	r15, r27
    14fe:	6e 01       	movw	r12, r28
    1500:	08 94       	sec
    1502:	c1 1c       	adc	r12, r1
    1504:	d1 1c       	adc	r13, r1
    1506:	09 95       	icall
    1508:	88 23       	and	r24, r24
    150a:	c1 f1       	breq	.+112    	; 0x157c <fat_read_dir+0x1a8>
                                                fat_dir_entry_read_callback,
                                                &arg)
          )
            return 0;

        cluster_offset += arg.bytes_read;
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	9c 81       	ldd	r25, Y+4	; 0x04
    1510:	48 0e       	add	r4, r24
    1512:	59 1e       	adc	r5, r25

        if(cluster_offset >= cluster_size)
    1514:	42 14       	cp	r4, r2
    1516:	53 04       	cpc	r5, r3
    1518:	30 f1       	brcs	.+76     	; 0x1566 <fat_read_dir+0x192>
        {
            /* we reached the cluster border and switch to the next cluster */

            /* get number of next cluster */
            if((cluster_num = fat_get_next_cluster(fs, cluster_num)) != 0)
    151a:	c3 01       	movw	r24, r6
    151c:	b5 01       	movw	r22, r10
    151e:	0e 94 cf 02 	call	0x59e	; 0x59e <fat_get_next_cluster>
    1522:	5c 01       	movw	r10, r24
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	69 f4       	brne	.+26     	; 0x1546 <fat_read_dir+0x172>
                cluster_offset = 0;
                continue;
            }

            /* we are at the end of the cluster chain */
            if(!arg.finished)
    152c:	8e 81       	ldd	r24, Y+6	; 0x06
    152e:	88 23       	and	r24, r24
    1530:	f1 f4       	brne	.+60     	; 0x156e <fat_read_dir+0x19a>
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    1532:	f4 01       	movw	r30, r8
    1534:	83 a1       	ldd	r24, Z+35	; 0x23
    1536:	94 a1       	ldd	r25, Z+36	; 0x24
    1538:	96 a7       	std	Z+46, r25	; 0x2e
    153a:	85 a7       	std	Z+45, r24	; 0x2d
    dd->entry_offset = 0;
    153c:	10 aa       	std	Z+48, r1	; 0x30
    153e:	17 a6       	std	Z+47, r1	; 0x2f
    1540:	1d c0       	rjmp	.+58     	; 0x157c <fat_read_dir+0x1a8>
    }

    /* reset callback arguments */
    memset(&arg, 0, sizeof(arg));
    memset(dir_entry, 0, sizeof(*dir_entry));
    arg.dir_entry = dir_entry;
    1542:	ba 83       	std	Y+2, r27	; 0x02
    1544:	a9 83       	std	Y+1, r26	; 0x01
    1546:	29 01       	movw	r4, r18
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    1548:	8e ef       	ldi	r24, 0xFE	; 254
    154a:	9f ef       	ldi	r25, 0xFF	; 255
    154c:	a8 0e       	add	r10, r24
    154e:	b9 1e       	adc	r11, r25
    1550:	c5 01       	movw	r24, r10
    1552:	a0 e0       	ldi	r26, 0x00	; 0
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	8f a3       	std	Y+39, r24	; 0x27
    1558:	98 a7       	std	Y+40, r25	; 0x28
    155a:	a9 a7       	std	Y+41, r26	; 0x29
    155c:	ba a7       	std	Y+42, r27	; 0x2a
    155e:	a2 e0       	ldi	r26, 0x02	; 2
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	aa 0e       	add	r10, r26
    1564:	bb 1e       	adc	r11, r27
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    }

    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    1566:	8e 81       	ldd	r24, Y+6	; 0x06
    1568:	88 23       	and	r24, r24
    156a:	09 f4       	brne	.+2      	; 0x156e <fat_read_dir+0x19a>
    156c:	7e cf       	rjmp	.-260    	; 0x146a <fat_read_dir+0x96>

            break;
        }
    }

    dd->entry_cluster = cluster_num;
    156e:	f4 01       	movw	r30, r8
    1570:	b6 a6       	std	Z+46, r11	; 0x2e
    1572:	a5 a6       	std	Z+45, r10	; 0x2d
    dd->entry_offset = cluster_offset;
    1574:	50 aa       	std	Z+48, r5	; 0x30
    1576:	47 a6       	std	Z+47, r4	; 0x2f

    return arg.finished;
    1578:	8e 81       	ldd	r24, Y+6	; 0x06
    157a:	01 c0       	rjmp	.+2      	; 0x157e <fat_read_dir+0x1aa>
    157c:	80 e0       	ldi	r24, 0x00	; 0
}
    157e:	aa 96       	adiw	r28, 0x2a	; 42
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	de bf       	out	0x3e, r29	; 62
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	cd bf       	out	0x3d, r28	; 61
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	1f 91       	pop	r17
    1590:	0f 91       	pop	r16
    1592:	ff 90       	pop	r15
    1594:	ef 90       	pop	r14
    1596:	df 90       	pop	r13
    1598:	cf 90       	pop	r12
    159a:	bf 90       	pop	r11
    159c:	af 90       	pop	r10
    159e:	9f 90       	pop	r9
    15a0:	8f 90       	pop	r8
    15a2:	7f 90       	pop	r7
    15a4:	6f 90       	pop	r6
    15a6:	5f 90       	pop	r5
    15a8:	4f 90       	pop	r4
    15aa:	3f 90       	pop	r3
    15ac:	2f 90       	pop	r2
    15ae:	08 95       	ret

000015b0 <fat_dir_entry_read_callback>:
 * \param[in,out] p An argument structure controlling operation.
 * \returns 0 on failure or completion, 1 if reading has
 *          to be continued
 */
uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
{
    15b0:	cf 92       	push	r12
    15b2:	df 92       	push	r13
    15b4:	ef 92       	push	r14
    15b6:	ff 92       	push	r15
    15b8:	0f 93       	push	r16
    15ba:	1f 93       	push	r17
    15bc:	cf 93       	push	r28
    15be:	df 93       	push	r29
    15c0:	8c 01       	movw	r16, r24
    15c2:	6a 01       	movw	r12, r20
    15c4:	7b 01       	movw	r14, r22
    struct fat_read_dir_callback_arg* arg = p;
    15c6:	a9 01       	movw	r20, r18
    struct fat_dir_entry_struct* dir_entry = arg->dir_entry;
    15c8:	d9 01       	movw	r26, r18
    15ca:	cd 91       	ld	r28, X+
    15cc:	dc 91       	ld	r29, X
    15ce:	11 97       	sbiw	r26, 0x01	; 1

    arg->bytes_read += 32;
    15d0:	12 96       	adiw	r26, 0x02	; 2
    15d2:	8d 91       	ld	r24, X+
    15d4:	9c 91       	ld	r25, X
    15d6:	13 97       	sbiw	r26, 0x03	; 3
    15d8:	80 96       	adiw	r24, 0x20	; 32
    15da:	13 96       	adiw	r26, 0x03	; 3
    15dc:	9c 93       	st	X, r25
    15de:	8e 93       	st	-X, r24
    15e0:	12 97       	sbiw	r26, 0x02	; 2

    /* skip deleted or empty entries */
    if(buffer[0] == FAT_DIRENTRY_DELETED || !buffer[0])
    15e2:	f8 01       	movw	r30, r16
    15e4:	90 81       	ld	r25, Z
    15e6:	95 3e       	cpi	r25, 0xE5	; 229
    15e8:	11 f0       	breq	.+4      	; 0x15ee <fat_dir_entry_read_callback+0x3e>
    15ea:	99 23       	and	r25, r25
    15ec:	21 f4       	brne	.+8      	; 0x15f6 <fat_dir_entry_read_callback+0x46>
    {
#if FAT_LFN_SUPPORT
        arg->checksum = 0;
    15ee:	da 01       	movw	r26, r20
    15f0:	14 96       	adiw	r26, 0x04	; 4
    15f2:	1c 92       	st	X, r1
    15f4:	c3 c0       	rjmp	.+390    	; 0x177c <fat_dir_entry_read_callback+0x1cc>
        return 1;
#endif

    char* long_name = dir_entry->long_name;
#if FAT_LFN_SUPPORT
    if(buffer[11] == 0x0f)
    15f6:	f8 01       	movw	r30, r16
    15f8:	83 85       	ldd	r24, Z+11	; 0x0b
    15fa:	8f 30       	cpi	r24, 0x0F	; 15
    15fc:	e1 f5       	brne	.+120    	; 0x1676 <fat_dir_entry_read_callback+0xc6>
    {
        /* checksum validation */
        if(arg->checksum == 0 || arg->checksum != buffer[13])
    15fe:	d9 01       	movw	r26, r18
    1600:	14 96       	adiw	r26, 0x04	; 4
    1602:	9c 91       	ld	r25, X
    1604:	99 23       	and	r25, r25
    1606:	19 f0       	breq	.+6      	; 0x160e <fat_dir_entry_read_callback+0x5e>
    1608:	85 85       	ldd	r24, Z+13	; 0x0d
    160a:	98 17       	cp	r25, r24
    160c:	71 f0       	breq	.+28     	; 0x162a <fat_dir_entry_read_callback+0x7a>
        {
            /* reset directory entry */
            memset(dir_entry, 0, sizeof(*dir_entry));
    160e:	8b e2       	ldi	r24, 0x2B	; 43
    1610:	fe 01       	movw	r30, r28
    1612:	11 92       	st	Z+, r1
    1614:	8a 95       	dec	r24
    1616:	e9 f7       	brne	.-6      	; 0x1612 <fat_dir_entry_read_callback+0x62>

            arg->checksum = buffer[13];
    1618:	d8 01       	movw	r26, r16
    161a:	1d 96       	adiw	r26, 0x0d	; 13
    161c:	8c 91       	ld	r24, X
    161e:	fa 01       	movw	r30, r20
    1620:	84 83       	std	Z+4, r24	; 0x04
            dir_entry->entry_offset = offset;
    1622:	cf a2       	std	Y+39, r12	; 0x27
    1624:	d8 a6       	std	Y+40, r13	; 0x28
    1626:	e9 a6       	std	Y+41, r14	; 0x29
    1628:	fa a6       	std	Y+42, r15	; 0x2a

        /* lfn supports unicode, but we do not, for now.
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
    162a:	d8 01       	movw	r26, r16
    162c:	8c 91       	ld	r24, X
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	8f 73       	andi	r24, 0x3F	; 63
    1632:	90 70       	andi	r25, 0x00	; 0
    1634:	2d e0       	ldi	r18, 0x0D	; 13
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	82 9f       	mul	r24, r18
    163a:	a0 01       	movw	r20, r0
    163c:	83 9f       	mul	r24, r19
    163e:	50 0d       	add	r21, r0
    1640:	92 9f       	mul	r25, r18
    1642:	50 0d       	add	r21, r0
    1644:	11 24       	eor	r1, r1
    1646:	4d 50       	subi	r20, 0x0D	; 13
    1648:	50 40       	sbci	r21, 0x00	; 0
    164a:	a6 e1       	ldi	r26, 0x16	; 22
    164c:	b1 e0       	ldi	r27, 0x01	; 1
    164e:	c4 0f       	add	r28, r20
    1650:	d5 1f       	adc	r29, r21
    1652:	0d c0       	rjmp	.+26     	; 0x166e <fat_dir_entry_read_callback+0xbe>
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
            long_name[char_offset + i] = buffer[char_mapping[i]];
    1654:	8d 91       	ld	r24, X+
    1656:	f8 01       	movw	r30, r16
    1658:	e8 0f       	add	r30, r24
    165a:	f1 1d       	adc	r31, r1
    165c:	80 81       	ld	r24, Z
    165e:	89 93       	st	Y+, r24
    1660:	4f 5f       	subi	r20, 0xFF	; 255
    1662:	5f 4f       	sbci	r21, 0xFF	; 255
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
    1664:	e1 e0       	ldi	r30, 0x01	; 1
    1666:	a3 32       	cpi	r26, 0x23	; 35
    1668:	be 07       	cpc	r27, r30
    166a:	09 f4       	brne	.+2      	; 0x166e <fat_dir_entry_read_callback+0xbe>
    166c:	87 c0       	rjmp	.+270    	; 0x177c <fat_dir_entry_read_callback+0x1cc>
    166e:	4f 31       	cpi	r20, 0x1F	; 31
    1670:	51 05       	cpc	r21, r1
    1672:	80 f3       	brcs	.-32     	; 0x1654 <fat_dir_entry_read_callback+0xa4>
    1674:	83 c0       	rjmp	.+262    	; 0x177c <fat_dir_entry_read_callback+0x1cc>
    else
#endif
    {
#if FAT_LFN_SUPPORT
        /* if we do not have a long name or the previous lfn does not match, take the 8.3 name */
        if(long_name[0] == '\0' || arg->checksum != fat_calc_83_checksum(buffer))
    1676:	88 81       	ld	r24, Y
    1678:	88 23       	and	r24, r24
    167a:	a1 f0       	breq	.+40     	; 0x16a4 <fat_dir_entry_read_callback+0xf4>
    167c:	d9 01       	movw	r26, r18
    167e:	14 96       	adiw	r26, 0x04	; 4
    1680:	3c 91       	ld	r19, X
    1682:	f8 01       	movw	r30, r16
    1684:	21 e0       	ldi	r18, 0x01	; 1
 */
uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
{
    uint8_t checksum = file_name_83[0];
    for(uint8_t i = 1; i < 11; ++i)
        checksum = ((checksum >> 1) | (checksum << 7)) + file_name_83[i];
    1686:	89 2f       	mov	r24, r25
    1688:	86 95       	lsr	r24
    168a:	97 95       	ror	r25
    168c:	99 27       	eor	r25, r25
    168e:	97 95       	ror	r25
    1690:	98 2b       	or	r25, r24
    1692:	81 81       	ldd	r24, Z+1	; 0x01
    1694:	98 0f       	add	r25, r24
 * \returns The checksum of the given file name.
 */
uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
{
    uint8_t checksum = file_name_83[0];
    for(uint8_t i = 1; i < 11; ++i)
    1696:	2f 5f       	subi	r18, 0xFF	; 255
    1698:	31 96       	adiw	r30, 0x01	; 1
    169a:	2b 30       	cpi	r18, 0x0B	; 11
    169c:	a1 f7       	brne	.-24     	; 0x1686 <fat_dir_entry_read_callback+0xd6>
    else
#endif
    {
#if FAT_LFN_SUPPORT
        /* if we do not have a long name or the previous lfn does not match, take the 8.3 name */
        if(long_name[0] == '\0' || arg->checksum != fat_calc_83_checksum(buffer))
    169e:	39 17       	cp	r19, r25
    16a0:	09 f4       	brne	.+2      	; 0x16a4 <fat_dir_entry_read_callback+0xf4>
    16a2:	57 c0       	rjmp	.+174    	; 0x1752 <fat_dir_entry_read_callback+0x1a2>
#endif
        {
            /* reset directory entry */
            memset(dir_entry, 0, sizeof(*dir_entry));
    16a4:	8b e2       	ldi	r24, 0x2B	; 43
    16a6:	fe 01       	movw	r30, r28
    16a8:	11 92       	st	Z+, r1
    16aa:	8a 95       	dec	r24
    16ac:	e9 f7       	brne	.-6      	; 0x16a8 <fat_dir_entry_read_callback+0xf8>
            dir_entry->entry_offset = offset;
    16ae:	cf a2       	std	Y+39, r12	; 0x27
    16b0:	d8 a6       	std	Y+40, r13	; 0x28
    16b2:	e9 a6       	std	Y+41, r14	; 0x29
    16b4:	fa a6       	std	Y+42, r15	; 0x2a
    16b6:	b8 01       	movw	r22, r16
    16b8:	de 01       	movw	r26, r28
    16ba:	78 01       	movw	r14, r16
    16bc:	20 e0       	ldi	r18, 0x00	; 0

            uint8_t i;
            for(i = 0; i < 8; ++i)
            {
                if(buffer[i] == ' ')
    16be:	f7 01       	movw	r30, r14
    16c0:	90 81       	ld	r25, Z
    16c2:	90 32       	cpi	r25, 0x20	; 32
    16c4:	a1 f0       	breq	.+40     	; 0x16ee <fat_dir_entry_read_callback+0x13e>
                    break;
                long_name[i] = buffer[i];
    16c6:	9c 93       	st	X, r25
                /* Windows NT and later versions do not store lfn entries
                 * for 8.3 names which have a lowercase basename, extension
                 * or both when everything else is uppercase. They use two
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((buffer[12] & 0x08) && buffer[i] >= 'A' && buffer[i] <= 'Z')
    16c8:	f8 01       	movw	r30, r16
    16ca:	84 85       	ldd	r24, Z+12	; 0x0c
    16cc:	83 ff       	sbrs	r24, 3
    16ce:	08 c0       	rjmp	.+16     	; 0x16e0 <fat_dir_entry_read_callback+0x130>
    16d0:	f7 01       	movw	r30, r14
    16d2:	80 81       	ld	r24, Z
    16d4:	81 34       	cpi	r24, 0x41	; 65
    16d6:	20 f0       	brcs	.+8      	; 0x16e0 <fat_dir_entry_read_callback+0x130>
    16d8:	8b 35       	cpi	r24, 0x5B	; 91
    16da:	10 f4       	brcc	.+4      	; 0x16e0 <fat_dir_entry_read_callback+0x130>
                    long_name[i] += 'a' - 'A';
    16dc:	90 5e       	subi	r25, 0xE0	; 224
    16de:	9c 93       	st	X, r25
            /* reset directory entry */
            memset(dir_entry, 0, sizeof(*dir_entry));
            dir_entry->entry_offset = offset;

            uint8_t i;
            for(i = 0; i < 8; ++i)
    16e0:	2f 5f       	subi	r18, 0xFF	; 255
    16e2:	08 94       	sec
    16e4:	e1 1c       	adc	r14, r1
    16e6:	f1 1c       	adc	r15, r1
    16e8:	11 96       	adiw	r26, 0x01	; 1
    16ea:	28 30       	cpi	r18, 0x08	; 8
    16ec:	41 f7       	brne	.-48     	; 0x16be <fat_dir_entry_read_callback+0x10e>
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((buffer[12] & 0x08) && buffer[i] >= 'A' && buffer[i] <= 'Z')
                    long_name[i] += 'a' - 'A';
            }
            if(long_name[0] == 0x05)
    16ee:	88 81       	ld	r24, Y
    16f0:	85 30       	cpi	r24, 0x05	; 5
    16f2:	11 f4       	brne	.+4      	; 0x16f8 <fat_dir_entry_read_callback+0x148>
                long_name[0] = (char) FAT_DIRENTRY_DELETED;
    16f4:	85 ee       	ldi	r24, 0xE5	; 229
    16f6:	88 83       	st	Y, r24

            if(buffer[8] != ' ')
    16f8:	d8 01       	movw	r26, r16
    16fa:	18 96       	adiw	r26, 0x08	; 8
    16fc:	8c 91       	ld	r24, X
    16fe:	80 32       	cpi	r24, 0x20	; 32
    1700:	21 f1       	breq	.+72     	; 0x174a <fat_dir_entry_read_callback+0x19a>
            {
                long_name[i++] = '.';
    1702:	fe 01       	movw	r30, r28
    1704:	e2 0f       	add	r30, r18
    1706:	f1 1d       	adc	r31, r1
    1708:	8e e2       	ldi	r24, 0x2E	; 46
    170a:	80 83       	st	Z, r24
    170c:	32 2f       	mov	r19, r18
    170e:	3f 5f       	subi	r19, 0xFF	; 255

                uint8_t j = 8;
                for(; j < 11; ++j)
    1710:	2c 5f       	subi	r18, 0xFC	; 252
                {
                    if(buffer[j] == ' ')
    1712:	fb 01       	movw	r30, r22
    1714:	90 85       	ldd	r25, Z+8	; 0x08
    1716:	90 32       	cpi	r25, 0x20	; 32
    1718:	b9 f0       	breq	.+46     	; 0x1748 <fat_dir_entry_read_callback+0x198>
                        break;
                    long_name[i] = buffer[j];
    171a:	fe 01       	movw	r30, r28
    171c:	e3 0f       	add	r30, r19
    171e:	f1 1d       	adc	r31, r1
    1720:	90 83       	st	Z, r25

                    /* See above for the lowercase 8.3 name handling of
                     * Windows NT and later.
                     */
                    if((buffer[12] & 0x10) && buffer[j] >= 'A' && buffer[j] <= 'Z')
    1722:	d8 01       	movw	r26, r16
    1724:	1c 96       	adiw	r26, 0x0c	; 12
    1726:	8c 91       	ld	r24, X
    1728:	84 ff       	sbrs	r24, 4
    172a:	09 c0       	rjmp	.+18     	; 0x173e <fat_dir_entry_read_callback+0x18e>
    172c:	db 01       	movw	r26, r22
    172e:	18 96       	adiw	r26, 0x08	; 8
    1730:	8c 91       	ld	r24, X
    1732:	81 34       	cpi	r24, 0x41	; 65
    1734:	20 f0       	brcs	.+8      	; 0x173e <fat_dir_entry_read_callback+0x18e>
    1736:	8b 35       	cpi	r24, 0x5B	; 91
    1738:	10 f4       	brcc	.+4      	; 0x173e <fat_dir_entry_read_callback+0x18e>
                        long_name[i] += 'a' - 'A';
    173a:	90 5e       	subi	r25, 0xE0	; 224
    173c:	90 83       	st	Z, r25

                    ++i;
    173e:	3f 5f       	subi	r19, 0xFF	; 255
    1740:	6f 5f       	subi	r22, 0xFF	; 255
    1742:	7f 4f       	sbci	r23, 0xFF	; 255
            if(buffer[8] != ' ')
            {
                long_name[i++] = '.';

                uint8_t j = 8;
                for(; j < 11; ++j)
    1744:	32 17       	cp	r19, r18
    1746:	29 f7       	brne	.-54     	; 0x1712 <fat_dir_entry_read_callback+0x162>
    1748:	23 2f       	mov	r18, r19

                    ++i;
                }
            } 

            long_name[i] = '\0';
    174a:	fe 01       	movw	r30, r28
    174c:	e2 0f       	add	r30, r18
    174e:	f1 1d       	adc	r31, r1
    1750:	10 82       	st	Z, r1
        }
        
        /* extract properties of file and store them within the structure */
        dir_entry->attributes = buffer[11];
    1752:	f8 01       	movw	r30, r16
    1754:	83 85       	ldd	r24, Z+11	; 0x0b
    1756:	88 a3       	std	Y+32, r24	; 0x20
        dir_entry->cluster = ltoh16(*((uint16_t*) &buffer[26]));
    1758:	82 8d       	ldd	r24, Z+26	; 0x1a
    175a:	93 8d       	ldd	r25, Z+27	; 0x1b
    175c:	9a a3       	std	Y+34, r25	; 0x22
    175e:	89 a3       	std	Y+33, r24	; 0x21
#if FAT_FAT32_SUPPORT
        dir_entry->cluster |= ((cluster_t) ltoh16(*((uint16_t*) &buffer[20]))) << 16;
#endif
        dir_entry->file_size = ltoh32(*((uint32_t*) &buffer[28]));
    1760:	84 8d       	ldd	r24, Z+28	; 0x1c
    1762:	95 8d       	ldd	r25, Z+29	; 0x1d
    1764:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1766:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1768:	8b a3       	std	Y+35, r24	; 0x23
    176a:	9c a3       	std	Y+36, r25	; 0x24
    176c:	ad a3       	std	Y+37, r26	; 0x25
    176e:	be a3       	std	Y+38, r27	; 0x26
#if FAT_DATETIME_SUPPORT
        dir_entry->modification_time = ltoh16(*((uint16_t*) &buffer[22]));
        dir_entry->modification_date = ltoh16(*((uint16_t*) &buffer[24]));
#endif

        arg->finished = 1;
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	da 01       	movw	r26, r20
    1774:	15 96       	adiw	r26, 0x05	; 5
    1776:	8c 93       	st	X, r24
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	01 c0       	rjmp	.+2      	; 0x177e <fat_dir_entry_read_callback+0x1ce>
        return 0;
    177c:	81 e0       	ldi	r24, 0x01	; 1
    }
}
    177e:	df 91       	pop	r29
    1780:	cf 91       	pop	r28
    1782:	1f 91       	pop	r17
    1784:	0f 91       	pop	r16
    1786:	ff 90       	pop	r15
    1788:	ef 90       	pop	r14
    178a:	df 90       	pop	r13
    178c:	cf 90       	pop	r12
    178e:	08 95       	ret

00001790 <fat_open>:
 * \param[in] partition Discriptor of partition on which the filesystem resides.
 * \returns 0 on error, a FAT filesystem descriptor on success.
 * \see fat_close
 */
struct fat_fs_struct* fat_open(struct partition_struct* partition)
{
    1790:	2f 92       	push	r2
    1792:	3f 92       	push	r3
    1794:	4f 92       	push	r4
    1796:	5f 92       	push	r5
    1798:	6f 92       	push	r6
    179a:	7f 92       	push	r7
    179c:	8f 92       	push	r8
    179e:	9f 92       	push	r9
    17a0:	af 92       	push	r10
    17a2:	bf 92       	push	r11
    17a4:	cf 92       	push	r12
    17a6:	df 92       	push	r13
    17a8:	ef 92       	push	r14
    17aa:	ff 92       	push	r15
    17ac:	0f 93       	push	r16
    17ae:	1f 93       	push	r17
    17b0:	df 93       	push	r29
    17b2:	cf 93       	push	r28
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	a8 97       	sbiw	r28, 0x28	; 40
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	f8 94       	cli
    17be:	de bf       	out	0x3e, r29	; 62
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	cd bf       	out	0x3d, r28	; 61
    17c4:	98 a7       	std	Y+40, r25	; 0x28
    17c6:	8f a3       	std	Y+39, r24	; 0x27
    if(!partition ||
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	09 f4       	brne	.+2      	; 0x17ce <fat_open+0x3e>
    17cc:	5c c1       	rjmp	.+696    	; 0x1a86 <fat_open+0x2f6>
    17ce:	dc 01       	movw	r26, r24
    17d0:	14 96       	adiw	r26, 0x04	; 4
    17d2:	8d 91       	ld	r24, X+
    17d4:	9c 91       	ld	r25, X
    17d6:	15 97       	sbiw	r26, 0x05	; 5
    17d8:	89 2b       	or	r24, r25
    17da:	09 f4       	brne	.+2      	; 0x17de <fat_open+0x4e>
    17dc:	54 c1       	rjmp	.+680    	; 0x1a86 <fat_open+0x2f6>
    17de:	16 96       	adiw	r26, 0x06	; 6
    17e0:	8d 91       	ld	r24, X+
    17e2:	9c 91       	ld	r25, X
    17e4:	17 97       	sbiw	r26, 0x07	; 7
    17e6:	89 2b       	or	r24, r25
    17e8:	09 f4       	brne	.+2      	; 0x17ec <fat_open+0x5c>
    17ea:	4d c1       	rjmp	.+666    	; 0x1a86 <fat_open+0x2f6>
    17ec:	68 c1       	rjmp	.+720    	; 0x1abe <fat_open+0x32e>
    }
    if(i >= FAT_FS_COUNT)
        return 0;
#endif

    memset(fs, 0, sizeof(*fs));
    17ee:	e8 e2       	ldi	r30, 0x28	; 40
    17f0:	f1 e0       	ldi	r31, 0x01	; 1
    17f2:	8c e1       	ldi	r24, 0x1C	; 28
    17f4:	df 01       	movw	r26, r30
    17f6:	1d 92       	st	X+, r1
    17f8:	8a 95       	dec	r24
    17fa:	e9 f7       	brne	.-6      	; 0x17f6 <fat_open+0x66>

    fs->partition = partition;
    17fc:	ef a1       	ldd	r30, Y+39	; 0x27
    17fe:	f8 a5       	ldd	r31, Y+40	; 0x28
    1800:	f0 93 29 01 	sts	0x0129, r31
    1804:	e0 93 28 01 	sts	0x0128, r30
#if FAT_FAT32_SUPPORT
    uint8_t buffer[37];
#else
    uint8_t buffer[25];
#endif
    offset_t partition_offset = (offset_t) partition->offset * 512;
    1808:	21 84       	ldd	r2, Z+9	; 0x09
    180a:	32 84       	ldd	r3, Z+10	; 0x0a
    180c:	43 84       	ldd	r4, Z+11	; 0x0b
    180e:	54 84       	ldd	r5, Z+12	; 0x0c
    1810:	59 e0       	ldi	r21, 0x09	; 9
    1812:	22 0c       	add	r2, r2
    1814:	33 1c       	adc	r3, r3
    1816:	44 1c       	adc	r4, r4
    1818:	55 1c       	adc	r5, r5
    181a:	5a 95       	dec	r21
    181c:	d1 f7       	brne	.-12     	; 0x1812 <fat_open+0x82>
    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
    181e:	c2 01       	movw	r24, r4
    1820:	b1 01       	movw	r22, r2
    1822:	65 5f       	subi	r22, 0xF5	; 245
    1824:	7f 4f       	sbci	r23, 0xFF	; 255
    1826:	8f 4f       	sbci	r24, 0xFF	; 255
    1828:	9f 4f       	sbci	r25, 0xFF	; 255
    182a:	01 90       	ld	r0, Z+
    182c:	f0 81       	ld	r31, Z
    182e:	e0 2d       	mov	r30, r0
    1830:	ae 01       	movw	r20, r28
    1832:	4f 5f       	subi	r20, 0xFF	; 255
    1834:	5f 4f       	sbci	r21, 0xFF	; 255
    1836:	29 e1       	ldi	r18, 0x19	; 25
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	09 95       	icall
    183c:	88 23       	and	r24, r24
    183e:	09 f4       	brne	.+2      	; 0x1842 <fat_open+0xb2>
    1840:	45 c1       	rjmp	.+650    	; 0x1acc <fat_open+0x33c>
        return 0;

    uint16_t bytes_per_sector = ltoh16(*((uint16_t*) &buffer[0x00]));
    1842:	e9 81       	ldd	r30, Y+1	; 0x01
    1844:	fa 81       	ldd	r31, Y+2	; 0x02
    1846:	fb a3       	std	Y+35, r31	; 0x23
    1848:	ea a3       	std	Y+34, r30	; 0x22
    uint16_t reserved_sectors = ltoh16(*((uint16_t*) &buffer[0x03]));
    184a:	2c 81       	ldd	r18, Y+4	; 0x04
    184c:	3d 81       	ldd	r19, Y+5	; 0x05
    uint8_t sectors_per_cluster = buffer[0x02];
    184e:	fb 81       	ldd	r31, Y+3	; 0x03
    1850:	fc a3       	std	Y+36, r31	; 0x24
    uint8_t fat_copies = buffer[0x05];
    1852:	4e 81       	ldd	r20, Y+6	; 0x06
    uint16_t max_root_entries = ltoh16(*((uint16_t*) &buffer[0x06]));
    1854:	8f 81       	ldd	r24, Y+7	; 0x07
    1856:	98 85       	ldd	r25, Y+8	; 0x08
    1858:	9e a3       	std	Y+38, r25	; 0x26
    185a:	8d a3       	std	Y+37, r24	; 0x25
    uint16_t sector_count_16 = ltoh16(*((uint16_t*) &buffer[0x08]));
    185c:	e9 85       	ldd	r30, Y+9	; 0x09
    185e:	fa 85       	ldd	r31, Y+10	; 0x0a
    uint16_t sectors_per_fat = ltoh16(*((uint16_t*) &buffer[0x0b]));
    1860:	6c 85       	ldd	r22, Y+12	; 0x0c
    1862:	7d 85       	ldd	r23, Y+13	; 0x0d
    uint32_t sector_count = ltoh32(*((uint32_t*) &buffer[0x15]));
    1864:	6e 88       	ldd	r6, Y+22	; 0x16
    1866:	7f 88       	ldd	r7, Y+23	; 0x17
    1868:	88 8c       	ldd	r8, Y+24	; 0x18
    186a:	99 8c       	ldd	r9, Y+25	; 0x19
#if FAT_FAT32_SUPPORT
    uint32_t sectors_per_fat32 = ltoh32(*((uint32_t*) &buffer[0x19]));
    uint32_t cluster_root_dir = ltoh32(*((uint32_t*) &buffer[0x21]));
#endif

    if(sector_count == 0)
    186c:	61 14       	cp	r6, r1
    186e:	71 04       	cpc	r7, r1
    1870:	81 04       	cpc	r8, r1
    1872:	91 04       	cpc	r9, r1
    1874:	31 f4       	brne	.+12     	; 0x1882 <fat_open+0xf2>
    {
        if(sector_count_16 == 0)
    1876:	30 97       	sbiw	r30, 0x00	; 0
    1878:	09 f4       	brne	.+2      	; 0x187c <fat_open+0xec>
    187a:	28 c1       	rjmp	.+592    	; 0x1acc <fat_open+0x33c>
            /* illegal volume size */
            return 0;
        else
            sector_count = sector_count_16;
    187c:	3f 01       	movw	r6, r30
    187e:	88 24       	eor	r8, r8
    1880:	99 24       	eor	r9, r9
        sectors_per_fat32 = sectors_per_fat;
    else if(sectors_per_fat32 == 0)
        /* this is neither FAT16 nor FAT32 */
        return 0;
#else
    if(sectors_per_fat == 0)
    1882:	61 15       	cp	r22, r1
    1884:	71 05       	cpc	r23, r1
    1886:	09 f4       	brne	.+2      	; 0x188a <fat_open+0xfa>
    1888:	21 c1       	rjmp	.+578    	; 0x1acc <fat_open+0x33c>
#if FAT_FAT32_SUPPORT
                                 - sectors_per_fat32 * fat_copies
#else
                                 - (uint32_t) sectors_per_fat * fat_copies
#endif
                                 - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
    188a:	c9 01       	movw	r24, r18
    188c:	a0 e0       	ldi	r26, 0x00	; 0
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	8e 8f       	std	Y+30, r24	; 0x1e
    1892:	9f 8f       	std	Y+31, r25	; 0x1f
    1894:	a8 a3       	std	Y+32, r26	; 0x20
    1896:	b9 a3       	std	Y+33, r27	; 0x21
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	24 2f       	mov	r18, r20
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	40 e0       	ldi	r20, 0x00	; 0
    18a2:	50 e0       	ldi	r21, 0x00	; 0
    18a4:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <__mulsi3>
    18a8:	6a 8f       	std	Y+26, r22	; 0x1a
    18aa:	7b 8f       	std	Y+27, r23	; 0x1b
    18ac:	8c 8f       	std	Y+28, r24	; 0x1c
    18ae:	9d 8f       	std	Y+29, r25	; 0x1d
    uint32_t data_cluster_count = data_sector_count / sectors_per_cluster;
    18b0:	84 01       	movw	r16, r8
    18b2:	73 01       	movw	r14, r6
    18b4:	2e 8d       	ldd	r18, Y+30	; 0x1e
    18b6:	3f 8d       	ldd	r19, Y+31	; 0x1f
    18b8:	48 a1       	ldd	r20, Y+32	; 0x20
    18ba:	59 a1       	ldd	r21, Y+33	; 0x21
    18bc:	e2 1a       	sub	r14, r18
    18be:	f3 0a       	sbc	r15, r19
    18c0:	04 0b       	sbc	r16, r20
    18c2:	15 0b       	sbc	r17, r21
    18c4:	e6 1a       	sub	r14, r22
    18c6:	f7 0a       	sbc	r15, r23
    18c8:	08 0b       	sbc	r16, r24
    18ca:	19 0b       	sbc	r17, r25
    18cc:	8a a1       	ldd	r24, Y+34	; 0x22
    18ce:	9b a1       	ldd	r25, Y+35	; 0x23
    18d0:	01 97       	sbiw	r24, 0x01	; 1
    18d2:	2d a1       	ldd	r18, Y+37	; 0x25
    18d4:	3e a1       	ldd	r19, Y+38	; 0x26
    18d6:	45 e0       	ldi	r20, 0x05	; 5
    18d8:	22 0f       	add	r18, r18
    18da:	33 1f       	adc	r19, r19
    18dc:	4a 95       	dec	r20
    18de:	e1 f7       	brne	.-8      	; 0x18d8 <fat_open+0x148>
    18e0:	82 0f       	add	r24, r18
    18e2:	93 1f       	adc	r25, r19
    18e4:	6a a1       	ldd	r22, Y+34	; 0x22
    18e6:	7b a1       	ldd	r23, Y+35	; 0x23
    18e8:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodhi4>
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	e6 1a       	sub	r14, r22
    18f2:	f7 0a       	sbc	r15, r23
    18f4:	08 0b       	sbc	r16, r24
    18f6:	19 0b       	sbc	r17, r25
    18f8:	8c a1       	ldd	r24, Y+36	; 0x24
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	40 e0       	ldi	r20, 0x00	; 0
    1900:	50 e0       	ldi	r21, 0x00	; 0
    1902:	c8 01       	movw	r24, r16
    1904:	b7 01       	movw	r22, r14
    1906:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__udivmodsi4>
    190a:	79 01       	movw	r14, r18
    190c:	8a 01       	movw	r16, r20
    if(data_cluster_count < 4085)
    190e:	95 ef       	ldi	r25, 0xF5	; 245
    1910:	e9 16       	cp	r14, r25
    1912:	9f e0       	ldi	r25, 0x0F	; 15
    1914:	f9 06       	cpc	r15, r25
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	09 07       	cpc	r16, r25
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	19 07       	cpc	r17, r25
    191e:	08 f4       	brcc	.+2      	; 0x1922 <fat_open+0x192>
    1920:	d5 c0       	rjmp	.+426    	; 0x1acc <fat_open+0x33c>
        /* this is a FAT12, not supported */
        return 0;
    else if(data_cluster_count < 65525)
    1922:	a5 ef       	ldi	r26, 0xF5	; 245
    1924:	ea 16       	cp	r14, r26
    1926:	af ef       	ldi	r26, 0xFF	; 255
    1928:	fa 06       	cpc	r15, r26
    192a:	a0 e0       	ldi	r26, 0x00	; 0
    192c:	0a 07       	cpc	r16, r26
    192e:	a0 e0       	ldi	r26, 0x00	; 0
    1930:	1a 07       	cpc	r17, r26
    1932:	28 f4       	brcc	.+10     	; 0x193e <fat_open+0x1ae>
        /* this is a FAT16 */
        partition->type = PARTITION_TYPE_FAT16;
    1934:	86 e0       	ldi	r24, 0x06	; 6
    1936:	ef a1       	ldd	r30, Y+39	; 0x27
    1938:	f8 a5       	ldd	r31, Y+40	; 0x28
    193a:	80 87       	std	Z+8, r24	; 0x08
    193c:	05 c0       	rjmp	.+10     	; 0x1948 <fat_open+0x1b8>
    else
        /* this is a FAT32 */
        partition->type = PARTITION_TYPE_FAT32;
    193e:	8b e0       	ldi	r24, 0x0B	; 11
    1940:	af a1       	ldd	r26, Y+39	; 0x27
    1942:	b8 a5       	ldd	r27, Y+40	; 0x28
    1944:	18 96       	adiw	r26, 0x08	; 8
    1946:	8c 93       	st	X, r24

    /* fill header information */
    struct fat_header_struct* header = &fs->header;
    memset(header, 0, sizeof(*header));
    1948:	88 e1       	ldi	r24, 0x18	; 24
    194a:	ea e2       	ldi	r30, 0x2A	; 42
    194c:	f1 e0       	ldi	r31, 0x01	; 1
    194e:	df 01       	movw	r26, r30
    1950:	1d 92       	st	X+, r1
    1952:	8a 95       	dec	r24
    1954:	e9 f7       	brne	.-6      	; 0x1950 <fat_open+0x1c0>
    
    header->size = (offset_t) sector_count * bytes_per_sector;
    1956:	ea a1       	ldd	r30, Y+34	; 0x22
    1958:	fb a1       	ldd	r31, Y+35	; 0x23
    195a:	5f 01       	movw	r10, r30
    195c:	cc 24       	eor	r12, r12
    195e:	dd 24       	eor	r13, r13
    1960:	c4 01       	movw	r24, r8
    1962:	b3 01       	movw	r22, r6
    1964:	a6 01       	movw	r20, r12
    1966:	95 01       	movw	r18, r10
    1968:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <__mulsi3>
    196c:	60 93 2a 01 	sts	0x012A, r22
    1970:	70 93 2b 01 	sts	0x012B, r23
    1974:	80 93 2c 01 	sts	0x012C, r24
    1978:	90 93 2d 01 	sts	0x012D, r25

    header->fat_offset = /* jump to partition */
    197c:	c6 01       	movw	r24, r12
    197e:	b5 01       	movw	r22, r10
    1980:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1982:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1984:	48 a1       	ldd	r20, Y+32	; 0x20
    1986:	59 a1       	ldd	r21, Y+33	; 0x21
    1988:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <__mulsi3>
    198c:	26 0e       	add	r2, r22
    198e:	37 1e       	adc	r3, r23
    1990:	48 1e       	adc	r4, r24
    1992:	59 1e       	adc	r5, r25
    1994:	20 92 2e 01 	sts	0x012E, r2
    1998:	30 92 2f 01 	sts	0x012F, r3
    199c:	40 92 30 01 	sts	0x0130, r4
    19a0:	50 92 31 01 	sts	0x0131, r5
                         partition_offset +
                         /* jump to fat */
                         (offset_t) reserved_sectors * bytes_per_sector;
    header->fat_size = (data_cluster_count + 2) * (partition->type == PARTITION_TYPE_FAT16 ? 2 : 4);
    19a4:	af a1       	ldd	r26, Y+39	; 0x27
    19a6:	b8 a5       	ldd	r27, Y+40	; 0x28
    19a8:	18 96       	adiw	r26, 0x08	; 8
    19aa:	8c 91       	ld	r24, X
    19ac:	86 30       	cpi	r24, 0x06	; 6
    19ae:	29 f0       	breq	.+10     	; 0x19ba <fat_open+0x22a>
    19b0:	64 e0       	ldi	r22, 0x04	; 4
    19b2:	70 e0       	ldi	r23, 0x00	; 0
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	04 c0       	rjmp	.+8      	; 0x19c2 <fat_open+0x232>
    19ba:	62 e0       	ldi	r22, 0x02	; 2
    19bc:	70 e0       	ldi	r23, 0x00	; 0
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	22 e0       	ldi	r18, 0x02	; 2
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	40 e0       	ldi	r20, 0x00	; 0
    19c8:	50 e0       	ldi	r21, 0x00	; 0
    19ca:	e2 0e       	add	r14, r18
    19cc:	f3 1e       	adc	r15, r19
    19ce:	04 1f       	adc	r16, r20
    19d0:	15 1f       	adc	r17, r21
    19d2:	a8 01       	movw	r20, r16
    19d4:	97 01       	movw	r18, r14
    19d6:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <__mulsi3>
    19da:	60 93 32 01 	sts	0x0132, r22
    19de:	70 93 33 01 	sts	0x0133, r23
    19e2:	80 93 34 01 	sts	0x0134, r24
    19e6:	90 93 35 01 	sts	0x0135, r25

    header->sector_size = bytes_per_sector;
    19ea:	4a a1       	ldd	r20, Y+34	; 0x22
    19ec:	5b a1       	ldd	r21, Y+35	; 0x23
    19ee:	50 93 37 01 	sts	0x0137, r21
    19f2:	40 93 36 01 	sts	0x0136, r20
    header->cluster_size = (uint16_t) bytes_per_sector * sectors_per_cluster;
    19f6:	5c a1       	ldd	r21, Y+36	; 0x24
    19f8:	85 2f       	mov	r24, r21
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	dc 01       	movw	r26, r24
    19fe:	ea a1       	ldd	r30, Y+34	; 0x22
    1a00:	fb a1       	ldd	r31, Y+35	; 0x23
    1a02:	ae 9f       	mul	r26, r30
    1a04:	c0 01       	movw	r24, r0
    1a06:	af 9f       	mul	r26, r31
    1a08:	90 0d       	add	r25, r0
    1a0a:	be 9f       	mul	r27, r30
    1a0c:	90 0d       	add	r25, r0
    1a0e:	11 24       	eor	r1, r1
    1a10:	90 93 39 01 	sts	0x0139, r25
    1a14:	80 93 38 01 	sts	0x0138, r24

#if FAT_FAT32_SUPPORT
    if(partition->type == PARTITION_TYPE_FAT16)
#endif
    {
        header->root_dir_offset = /* jump to fats */
    1a18:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1a1a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1a1c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a1e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a20:	a6 01       	movw	r20, r12
    1a22:	95 01       	movw	r18, r10
    1a24:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <__mulsi3>
    1a28:	20 91 2e 01 	lds	r18, 0x012E
    1a2c:	30 91 2f 01 	lds	r19, 0x012F
    1a30:	40 91 30 01 	lds	r20, 0x0130
    1a34:	50 91 31 01 	lds	r21, 0x0131
    1a38:	62 0f       	add	r22, r18
    1a3a:	73 1f       	adc	r23, r19
    1a3c:	84 1f       	adc	r24, r20
    1a3e:	95 1f       	adc	r25, r21
    1a40:	60 93 3e 01 	sts	0x013E, r22
    1a44:	70 93 3f 01 	sts	0x013F, r23
    1a48:	80 93 40 01 	sts	0x0140, r24
    1a4c:	90 93 41 01 	sts	0x0141, r25
                                  header->fat_offset +
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
    1a50:	ad a1       	ldd	r26, Y+37	; 0x25
    1a52:	be a1       	ldd	r27, Y+38	; 0x26
    1a54:	9d 01       	movw	r18, r26
    1a56:	40 e0       	ldi	r20, 0x00	; 0
    1a58:	50 e0       	ldi	r21, 0x00	; 0
    1a5a:	15 e0       	ldi	r17, 0x05	; 5
    1a5c:	22 0f       	add	r18, r18
    1a5e:	33 1f       	adc	r19, r19
    1a60:	44 1f       	adc	r20, r20
    1a62:	55 1f       	adc	r21, r21
    1a64:	1a 95       	dec	r17
    1a66:	d1 f7       	brne	.-12     	; 0x1a5c <fat_open+0x2cc>
    1a68:	62 0f       	add	r22, r18
    1a6a:	73 1f       	adc	r23, r19
    1a6c:	84 1f       	adc	r24, r20
    1a6e:	95 1f       	adc	r25, r21
    1a70:	60 93 3a 01 	sts	0x013A, r22
    1a74:	70 93 3b 01 	sts	0x013B, r23
    1a78:	80 93 3c 01 	sts	0x013C, r24
    1a7c:	90 93 3d 01 	sts	0x013D, r25
    1a80:	28 e2       	ldi	r18, 0x28	; 40
    1a82:	31 e0       	ldi	r19, 0x01	; 1
    1a84:	02 c0       	rjmp	.+4      	; 0x1a8a <fat_open+0x2fa>
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
#endif
        return 0;
    }
    
    return fs;
}
    1a8a:	c9 01       	movw	r24, r18
    1a8c:	a8 96       	adiw	r28, 0x28	; 40
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	f8 94       	cli
    1a92:	de bf       	out	0x3e, r29	; 62
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	cd bf       	out	0x3d, r28	; 61
    1a98:	cf 91       	pop	r28
    1a9a:	df 91       	pop	r29
    1a9c:	1f 91       	pop	r17
    1a9e:	0f 91       	pop	r16
    1aa0:	ff 90       	pop	r15
    1aa2:	ef 90       	pop	r14
    1aa4:	df 90       	pop	r13
    1aa6:	cf 90       	pop	r12
    1aa8:	bf 90       	pop	r11
    1aaa:	af 90       	pop	r10
    1aac:	9f 90       	pop	r9
    1aae:	8f 90       	pop	r8
    1ab0:	7f 90       	pop	r7
    1ab2:	6f 90       	pop	r6
    1ab4:	5f 90       	pop	r5
    1ab6:	4f 90       	pop	r4
    1ab8:	3f 90       	pop	r3
    1aba:	2f 90       	pop	r2
    1abc:	08 95       	ret
#else
    struct fat_fs_struct* fs = fat_fs_handles;
    uint8_t i;
    for(i = 0; i < FAT_FS_COUNT; ++i)
    {
        if(!fs->partition)
    1abe:	80 91 28 01 	lds	r24, 0x0128
    1ac2:	90 91 29 01 	lds	r25, 0x0129
    1ac6:	89 2b       	or	r24, r25
    1ac8:	f1 f6       	brne	.-68     	; 0x1a86 <fat_open+0x2f6>
    1aca:	91 ce       	rjmp	.-734    	; 0x17ee <fat_open+0x5e>
    if(!fat_read_header(fs))
    {
#if USE_DYNAMIC_MEMORY
        free(fs);
#else
        fs->partition = 0;
    1acc:	10 92 29 01 	sts	0x0129, r1
    1ad0:	10 92 28 01 	sts	0x0128, r1
    1ad4:	d8 cf       	rjmp	.-80     	; 0x1a86 <fat_open+0x2f6>

00001ad6 <sd_raw_write>:
 * \param[in] length The number of bytes to write.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_read_interval
 */
uint8_t sd_raw_write(offset_t offset, const uint8_t* buffer, uintptr_t length)
{
    1ad6:	2f 92       	push	r2
    1ad8:	3f 92       	push	r3
    1ada:	4f 92       	push	r4
    1adc:	5f 92       	push	r5
    1ade:	6f 92       	push	r6
    1ae0:	7f 92       	push	r7
    1ae2:	8f 92       	push	r8
    1ae4:	9f 92       	push	r9
    1ae6:	af 92       	push	r10
    1ae8:	bf 92       	push	r11
    1aea:	cf 92       	push	r12
    1aec:	df 92       	push	r13
    1aee:	ef 92       	push	r14
    1af0:	ff 92       	push	r15
    1af2:	0f 93       	push	r16
    1af4:	1f 93       	push	r17
    1af6:	cf 93       	push	r28
    1af8:	df 93       	push	r29
    1afa:	4b 01       	movw	r8, r22
    1afc:	5c 01       	movw	r10, r24
    1afe:	2a 01       	movw	r4, r20
    1b00:	39 01       	movw	r6, r18
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    1b02:	33 24       	eor	r3, r3
    1b04:	3a 94       	dec	r3
        buffer += write_length;
        offset += write_length;
        length -= write_length;

#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
    1b06:	22 24       	eor	r2, r2
    1b08:	23 94       	inc	r2
    1b0a:	a1 c0       	rjmp	.+322    	; 0x1c4e <sd_raw_write+0x178>
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    {
        /* determine byte count to write at once */
        block_offset = offset & 0x01ff;
    1b0c:	e4 01       	movw	r28, r8
    1b0e:	d1 70       	andi	r29, 0x01	; 1
        block_address = offset - block_offset;
    1b10:	ce 01       	movw	r24, r28
    1b12:	a0 e0       	ldi	r26, 0x00	; 0
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	85 01       	movw	r16, r10
    1b18:	74 01       	movw	r14, r8
    1b1a:	e8 1a       	sub	r14, r24
    1b1c:	f9 0a       	sbc	r15, r25
    1b1e:	0a 0b       	sbc	r16, r26
    1b20:	1b 0b       	sbc	r17, r27
        write_length = 512 - block_offset; /* write up to block border */
    1b22:	c1 2c       	mov	r12, r1
    1b24:	62 e0       	ldi	r22, 0x02	; 2
    1b26:	d6 2e       	mov	r13, r22
    1b28:	cc 1a       	sub	r12, r28
    1b2a:	dd 0a       	sbc	r13, r29
    1b2c:	6c 14       	cp	r6, r12
    1b2e:	7d 04       	cpc	r7, r13
    1b30:	08 f4       	brcc	.+2      	; 0x1b34 <sd_raw_write+0x5e>
    1b32:	63 01       	movw	r12, r6
            write_length = length;
        
        /* Merge the data to write with the content of the block.
         * Use the cached block if available.
         */
        if(block_address != raw_block_address)
    1b34:	80 91 d9 03 	lds	r24, 0x03D9
    1b38:	90 91 da 03 	lds	r25, 0x03DA
    1b3c:	a0 91 db 03 	lds	r26, 0x03DB
    1b40:	b0 91 dc 03 	lds	r27, 0x03DC
    1b44:	e8 16       	cp	r14, r24
    1b46:	f9 06       	cpc	r15, r25
    1b48:	0a 07       	cpc	r16, r26
    1b4a:	1b 07       	cpc	r17, r27
    1b4c:	f9 f0       	breq	.+62     	; 0x1b8c <sd_raw_write+0xb6>
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    1b4e:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <sd_raw_sync>
    1b52:	88 23       	and	r24, r24
    1b54:	09 f4       	brne	.+2      	; 0x1b58 <sd_raw_write+0x82>
    1b56:	81 c0       	rjmp	.+258    	; 0x1c5a <sd_raw_write+0x184>
                return 0;
#endif

            if(block_offset || write_length < 512)
    1b58:	20 97       	sbiw	r28, 0x00	; 0
    1b5a:	29 f4       	brne	.+10     	; 0x1b66 <sd_raw_write+0x90>
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	c8 16       	cp	r12, r24
    1b60:	82 e0       	ldi	r24, 0x02	; 2
    1b62:	d8 06       	cpc	r13, r24
    1b64:	58 f4       	brcc	.+22     	; 0x1b7c <sd_raw_write+0xa6>
            {
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
    1b66:	c8 01       	movw	r24, r16
    1b68:	b7 01       	movw	r22, r14
    1b6a:	49 ed       	ldi	r20, 0xD9	; 217
    1b6c:	51 e0       	ldi	r21, 0x01	; 1
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	32 e0       	ldi	r19, 0x02	; 2
    1b72:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <sd_raw_read>
    1b76:	88 23       	and	r24, r24
    1b78:	09 f4       	brne	.+2      	; 0x1b7c <sd_raw_write+0xa6>
    1b7a:	6f c0       	rjmp	.+222    	; 0x1c5a <sd_raw_write+0x184>
                    return 0;
            }
            raw_block_address = block_address;
    1b7c:	e0 92 d9 03 	sts	0x03D9, r14
    1b80:	f0 92 da 03 	sts	0x03DA, r15
    1b84:	00 93 db 03 	sts	0x03DB, r16
    1b88:	10 93 dc 03 	sts	0x03DC, r17
        }

        if(buffer != raw_block)
    1b8c:	89 ed       	ldi	r24, 0xD9	; 217
    1b8e:	48 16       	cp	r4, r24
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	58 06       	cpc	r5, r24
    1b94:	71 f0       	breq	.+28     	; 0x1bb2 <sd_raw_write+0xdc>
        {
            memcpy(raw_block + block_offset, buffer, write_length);
    1b96:	9e 01       	movw	r18, r28
    1b98:	27 52       	subi	r18, 0x27	; 39
    1b9a:	3e 4f       	sbci	r19, 0xFE	; 254
    1b9c:	c9 01       	movw	r24, r18
    1b9e:	b2 01       	movw	r22, r4
    1ba0:	a6 01       	movw	r20, r12
    1ba2:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <memcpy>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;
    1ba6:	10 92 dd 03 	sts	0x03DD, r1

            if(length == write_length)
    1baa:	6c 14       	cp	r6, r12
    1bac:	7d 04       	cpc	r7, r13
    1bae:	09 f4       	brne	.+2      	; 0x1bb2 <sd_raw_write+0xdc>
    1bb0:	52 c0       	rjmp	.+164    	; 0x1c56 <sd_raw_write+0x180>
                return 1;
#endif
        }

        /* address card */
        select_card();
    1bb2:	2a 98       	cbi	0x05, 2	; 5

        /* send single block request */
#if SD_RAW_SDHC
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
#else
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, block_address))
    1bb4:	88 e1       	ldi	r24, 0x18	; 24
    1bb6:	b8 01       	movw	r22, r16
    1bb8:	a7 01       	movw	r20, r14
    1bba:	0e 94 2c 07 	call	0xe58	; 0xe58 <sd_raw_send_command>
    1bbe:	88 23       	and	r24, r24
    1bc0:	11 f0       	breq	.+4      	; 0x1bc6 <sd_raw_write+0xf0>
#endif
        {
            unselect_card();
    1bc2:	2a 9a       	sbi	0x05, 2	; 5
    1bc4:	4a c0       	rjmp	.+148    	; 0x1c5a <sd_raw_write+0x184>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    1bc6:	8e ef       	ldi	r24, 0xFE	; 254
    1bc8:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    1bca:	0d b4       	in	r0, 0x2d	; 45
    1bcc:	07 fe       	sbrs	r0, 7
    1bce:	fd cf       	rjmp	.-6      	; 0x1bca <sd_raw_write+0xf4>
    SPSR &= ~(1 << SPIF);
    1bd0:	8d b5       	in	r24, 0x2d	; 45
    1bd2:	8f 77       	andi	r24, 0x7F	; 127
    1bd4:	8d bd       	out	0x2d, r24	; 45
    1bd6:	e9 ed       	ldi	r30, 0xD9	; 217
    1bd8:	f1 e0       	ldi	r31, 0x01	; 1
        sd_raw_send_byte(0xfe);

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
            sd_raw_send_byte(*cache++);
    1bda:	81 91       	ld	r24, Z+
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    1bdc:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    1bde:	0d b4       	in	r0, 0x2d	; 45
    1be0:	07 fe       	sbrs	r0, 7
    1be2:	fd cf       	rjmp	.-6      	; 0x1bde <sd_raw_write+0x108>
    SPSR &= ~(1 << SPIF);
    1be4:	8d b5       	in	r24, 0x2d	; 45
    1be6:	8f 77       	andi	r24, 0x7F	; 127
    1be8:	8d bd       	out	0x2d, r24	; 45
        /* send start byte */
        sd_raw_send_byte(0xfe);

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
    1bea:	83 e0       	ldi	r24, 0x03	; 3
    1bec:	e9 3d       	cpi	r30, 0xD9	; 217
    1bee:	f8 07       	cpc	r31, r24
    1bf0:	a1 f7       	brne	.-24     	; 0x1bda <sd_raw_write+0x104>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    1bf2:	3e bc       	out	0x2e, r3	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    1bf4:	0d b4       	in	r0, 0x2d	; 45
    1bf6:	07 fe       	sbrs	r0, 7
    1bf8:	fd cf       	rjmp	.-6      	; 0x1bf4 <sd_raw_write+0x11e>
    SPSR &= ~(1 << SPIF);
    1bfa:	8d b5       	in	r24, 0x2d	; 45
    1bfc:	8f 77       	andi	r24, 0x7F	; 127
    1bfe:	8d bd       	out	0x2d, r24	; 45
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    1c00:	3e bc       	out	0x2e, r3	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    1c02:	0d b4       	in	r0, 0x2d	; 45
    1c04:	07 fe       	sbrs	r0, 7
    1c06:	fd cf       	rjmp	.-6      	; 0x1c02 <sd_raw_write+0x12c>
    SPSR &= ~(1 << SPIF);
    1c08:	8d b5       	in	r24, 0x2d	; 45
    1c0a:	8f 77       	andi	r24, 0x7F	; 127
    1c0c:	8d bd       	out	0x2d, r24	; 45
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    1c0e:	3e bc       	out	0x2e, r3	; 46
    while(!(SPSR & (1 << SPIF)));
    1c10:	0d b4       	in	r0, 0x2d	; 45
    1c12:	07 fe       	sbrs	r0, 7
    1c14:	fd cf       	rjmp	.-6      	; 0x1c10 <sd_raw_write+0x13a>
    SPSR &= ~(1 << SPIF);
    1c16:	8d b5       	in	r24, 0x2d	; 45
    1c18:	8f 77       	andi	r24, 0x7F	; 127
    1c1a:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    1c1c:	8e b5       	in	r24, 0x2e	; 46
        /* write dummy crc16 */
        sd_raw_send_byte(0xff);
        sd_raw_send_byte(0xff);

        /* wait while card is busy */
        while(sd_raw_rec_byte() != 0xff);
    1c1e:	8f 3f       	cpi	r24, 0xFF	; 255
    1c20:	b1 f7       	brne	.-20     	; 0x1c0e <sd_raw_write+0x138>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    1c22:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    1c24:	0d b4       	in	r0, 0x2d	; 45
    1c26:	07 fe       	sbrs	r0, 7
    1c28:	fd cf       	rjmp	.-6      	; 0x1c24 <sd_raw_write+0x14e>
    SPSR &= ~(1 << SPIF);
    1c2a:	8d b5       	in	r24, 0x2d	; 45
    1c2c:	8f 77       	andi	r24, 0x7F	; 127
    1c2e:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    1c30:	8e b5       	in	r24, 0x2e	; 46
        /* wait while card is busy */
        while(sd_raw_rec_byte() != 0xff);
        sd_raw_rec_byte();

        /* deaddress card */
        unselect_card();
    1c32:	2a 9a       	sbi	0x05, 2	; 5

        buffer += write_length;
    1c34:	4c 0c       	add	r4, r12
    1c36:	5d 1c       	adc	r5, r13
        offset += write_length;
    1c38:	c6 01       	movw	r24, r12
    1c3a:	a0 e0       	ldi	r26, 0x00	; 0
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	88 0e       	add	r8, r24
    1c40:	99 1e       	adc	r9, r25
    1c42:	aa 1e       	adc	r10, r26
    1c44:	bb 1e       	adc	r11, r27
        length -= write_length;
    1c46:	6c 18       	sub	r6, r12
    1c48:	7d 08       	sbc	r7, r13

#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
    1c4a:	20 92 dd 03 	sts	0x03DD, r2
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    1c4e:	61 14       	cp	r6, r1
    1c50:	71 04       	cpc	r7, r1
    1c52:	09 f0       	breq	.+2      	; 0x1c56 <sd_raw_write+0x180>
    1c54:	5b cf       	rjmp	.-330    	; 0x1b0c <sd_raw_write+0x36>
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	01 c0       	rjmp	.+2      	; 0x1c5c <sd_raw_write+0x186>
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
        raw_block_written = 1;
#endif
    }

    return 1;
}
    1c5c:	df 91       	pop	r29
    1c5e:	cf 91       	pop	r28
    1c60:	1f 91       	pop	r17
    1c62:	0f 91       	pop	r16
    1c64:	ff 90       	pop	r15
    1c66:	ef 90       	pop	r14
    1c68:	df 90       	pop	r13
    1c6a:	cf 90       	pop	r12
    1c6c:	bf 90       	pop	r11
    1c6e:	af 90       	pop	r10
    1c70:	9f 90       	pop	r9
    1c72:	8f 90       	pop	r8
    1c74:	7f 90       	pop	r7
    1c76:	6f 90       	pop	r6
    1c78:	5f 90       	pop	r5
    1c7a:	4f 90       	pop	r4
    1c7c:	3f 90       	pop	r3
    1c7e:	2f 90       	pop	r2
    1c80:	08 95       	ret

00001c82 <sd_raw_sync>:
 * \see sd_raw_write
 */
uint8_t sd_raw_sync()
{
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
    1c82:	80 91 dd 03 	lds	r24, 0x03DD
    1c86:	88 23       	and	r24, r24
    1c88:	11 f0       	breq	.+4      	; 0x1c8e <sd_raw_sync+0xc>
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	08 95       	ret
        return 1;
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
    1c8e:	60 91 d9 03 	lds	r22, 0x03D9
    1c92:	70 91 da 03 	lds	r23, 0x03DA
    1c96:	80 91 db 03 	lds	r24, 0x03DB
    1c9a:	90 91 dc 03 	lds	r25, 0x03DC
    1c9e:	49 ed       	ldi	r20, 0xD9	; 217
    1ca0:	51 e0       	ldi	r21, 0x01	; 1
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	32 e0       	ldi	r19, 0x02	; 2
    1ca6:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <sd_raw_write>
    1caa:	88 23       	and	r24, r24
    1cac:	19 f0       	breq	.+6      	; 0x1cb4 <sd_raw_sync+0x32>
        return 0;
    raw_block_written = 1;
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	80 93 dd 03 	sts	0x03DD, r24
#endif
    return 1;
}
    1cb4:	08 95       	ret

00001cb6 <sd_raw_read>:
 * \param[in] length The number of bytes to read.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_write_interval
 */
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    1cb6:	3f 92       	push	r3
    1cb8:	4f 92       	push	r4
    1cba:	5f 92       	push	r5
    1cbc:	6f 92       	push	r6
    1cbe:	7f 92       	push	r7
    1cc0:	8f 92       	push	r8
    1cc2:	9f 92       	push	r9
    1cc4:	af 92       	push	r10
    1cc6:	bf 92       	push	r11
    1cc8:	cf 92       	push	r12
    1cca:	df 92       	push	r13
    1ccc:	ef 92       	push	r14
    1cce:	ff 92       	push	r15
    1cd0:	0f 93       	push	r16
    1cd2:	1f 93       	push	r17
    1cd4:	cf 93       	push	r28
    1cd6:	df 93       	push	r29
    1cd8:	3b 01       	movw	r6, r22
    1cda:	4c 01       	movw	r8, r24
    1cdc:	6a 01       	movw	r12, r20
    1cde:	29 01       	movw	r4, r18
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    1ce0:	33 24       	eor	r3, r3
    1ce2:	3a 94       	dec	r3
    1ce4:	8f c0       	rjmp	.+286    	; 0x1e04 <sd_raw_read+0x14e>
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
    1ce6:	7f ef       	ldi	r23, 0xFF	; 255
    1ce8:	a7 2e       	mov	r10, r23
    1cea:	71 e0       	ldi	r23, 0x01	; 1
    1cec:	b7 2e       	mov	r11, r23
    1cee:	a6 20       	and	r10, r6
    1cf0:	b7 20       	and	r11, r7
        block_address = offset - block_offset;
    1cf2:	c5 01       	movw	r24, r10
    1cf4:	a0 e0       	ldi	r26, 0x00	; 0
    1cf6:	b0 e0       	ldi	r27, 0x00	; 0
    1cf8:	84 01       	movw	r16, r8
    1cfa:	73 01       	movw	r14, r6
    1cfc:	e8 1a       	sub	r14, r24
    1cfe:	f9 0a       	sbc	r15, r25
    1d00:	0a 0b       	sbc	r16, r26
    1d02:	1b 0b       	sbc	r17, r27
        read_length = 512 - block_offset; /* read up to block border */
    1d04:	c0 e0       	ldi	r28, 0x00	; 0
    1d06:	d2 e0       	ldi	r29, 0x02	; 2
    1d08:	ca 19       	sub	r28, r10
    1d0a:	db 09       	sbc	r29, r11
    1d0c:	4c 16       	cp	r4, r28
    1d0e:	5d 06       	cpc	r5, r29
    1d10:	08 f4       	brcc	.+2      	; 0x1d14 <sd_raw_read+0x5e>
    1d12:	e2 01       	movw	r28, r4
        if(read_length > length)
            read_length = length;
        
#if !SD_RAW_SAVE_RAM
        /* check if the requested data is cached */
        if(block_address != raw_block_address)
    1d14:	80 91 d9 03 	lds	r24, 0x03D9
    1d18:	90 91 da 03 	lds	r25, 0x03DA
    1d1c:	a0 91 db 03 	lds	r26, 0x03DB
    1d20:	b0 91 dc 03 	lds	r27, 0x03DC
    1d24:	e8 16       	cp	r14, r24
    1d26:	f9 06       	cpc	r15, r25
    1d28:	0a 07       	cpc	r16, r26
    1d2a:	1b 07       	cpc	r17, r27
    1d2c:	09 f4       	brne	.+2      	; 0x1d30 <sd_raw_read+0x7a>
    1d2e:	57 c0       	rjmp	.+174    	; 0x1dde <sd_raw_read+0x128>
#endif
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    1d30:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <sd_raw_sync>
    1d34:	88 23       	and	r24, r24
    1d36:	09 f4       	brne	.+2      	; 0x1d3a <sd_raw_read+0x84>
    1d38:	6a c0       	rjmp	.+212    	; 0x1e0e <sd_raw_read+0x158>
                return 0;
#endif

            /* address card */
            select_card();
    1d3a:	2a 98       	cbi	0x05, 2	; 5

            /* send single block request */
#if SD_RAW_SDHC
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
#else
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, block_address))
    1d3c:	81 e1       	ldi	r24, 0x11	; 17
    1d3e:	b8 01       	movw	r22, r16
    1d40:	a7 01       	movw	r20, r14
    1d42:	0e 94 2c 07 	call	0xe58	; 0xe58 <sd_raw_send_command>
    1d46:	88 23       	and	r24, r24
    1d48:	19 f0       	breq	.+6      	; 0x1d50 <sd_raw_read+0x9a>
#endif
            {
                unselect_card();
    1d4a:	2a 9a       	sbi	0x05, 2	; 5
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	5f c0       	rjmp	.+190    	; 0x1e0e <sd_raw_read+0x158>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    1d50:	3e bc       	out	0x2e, r3	; 46
    while(!(SPSR & (1 << SPIF)));
    1d52:	0d b4       	in	r0, 0x2d	; 45
    1d54:	07 fe       	sbrs	r0, 7
    1d56:	fd cf       	rjmp	.-6      	; 0x1d52 <sd_raw_read+0x9c>
    SPSR &= ~(1 << SPIF);
    1d58:	8d b5       	in	r24, 0x2d	; 45
    1d5a:	8f 77       	andi	r24, 0x7F	; 127
    1d5c:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    1d5e:	8e b5       	in	r24, 0x2e	; 46
                unselect_card();
                return 0;
            }

            /* wait for data block (start byte 0xfe) */
            while(sd_raw_rec_byte() != 0xfe);
    1d60:	8e 3f       	cpi	r24, 0xFE	; 254
    1d62:	b1 f7       	brne	.-20     	; 0x1d50 <sd_raw_read+0x9a>
    1d64:	e9 ed       	ldi	r30, 0xD9	; 217
    1d66:	f1 e0       	ldi	r31, 0x01	; 1
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    1d68:	3e bc       	out	0x2e, r3	; 46
    while(!(SPSR & (1 << SPIF)));
    1d6a:	0d b4       	in	r0, 0x2d	; 45
    1d6c:	07 fe       	sbrs	r0, 7
    1d6e:	fd cf       	rjmp	.-6      	; 0x1d6a <sd_raw_read+0xb4>
    SPSR &= ~(1 << SPIF);
    1d70:	8d b5       	in	r24, 0x2d	; 45
    1d72:	8f 77       	andi	r24, 0x7F	; 127
    1d74:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    1d76:	8e b5       	in	r24, 0x2e	; 46
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
    1d78:	80 83       	st	Z, r24
                    *buffer++ = b;
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
    1d7a:	83 e0       	ldi	r24, 0x03	; 3
    1d7c:	e8 3d       	cpi	r30, 0xD8	; 216
    1d7e:	f8 07       	cpc	r31, r24
    1d80:	11 f0       	breq	.+4      	; 0x1d86 <sd_raw_read+0xd0>
                *cache++ = sd_raw_rec_byte();
    1d82:	31 96       	adiw	r30, 0x01	; 1
    1d84:	f1 cf       	rjmp	.-30     	; 0x1d68 <sd_raw_read+0xb2>
            raw_block_address = block_address;
    1d86:	e0 92 d9 03 	sts	0x03D9, r14
    1d8a:	f0 92 da 03 	sts	0x03DA, r15
    1d8e:	00 93 db 03 	sts	0x03DB, r16
    1d92:	10 93 dc 03 	sts	0x03DC, r17

            memcpy(buffer, raw_block + block_offset, read_length);
    1d96:	95 01       	movw	r18, r10
    1d98:	27 52       	subi	r18, 0x27	; 39
    1d9a:	3e 4f       	sbci	r19, 0xFE	; 254
    1d9c:	c6 01       	movw	r24, r12
    1d9e:	b9 01       	movw	r22, r18
    1da0:	ae 01       	movw	r20, r28
    1da2:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <memcpy>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    1da6:	3e bc       	out	0x2e, r3	; 46
    while(!(SPSR & (1 << SPIF)));
    1da8:	0d b4       	in	r0, 0x2d	; 45
    1daa:	07 fe       	sbrs	r0, 7
    1dac:	fd cf       	rjmp	.-6      	; 0x1da8 <sd_raw_read+0xf2>
    SPSR &= ~(1 << SPIF);
    1dae:	8d b5       	in	r24, 0x2d	; 45
    1db0:	8f 77       	andi	r24, 0x7F	; 127
    1db2:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    1db4:	8e b5       	in	r24, 0x2e	; 46
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    1db6:	3e bc       	out	0x2e, r3	; 46
    while(!(SPSR & (1 << SPIF)));
    1db8:	0d b4       	in	r0, 0x2d	; 45
    1dba:	07 fe       	sbrs	r0, 7
    1dbc:	fd cf       	rjmp	.-6      	; 0x1db8 <sd_raw_read+0x102>
    SPSR &= ~(1 << SPIF);
    1dbe:	8d b5       	in	r24, 0x2d	; 45
    1dc0:	8f 77       	andi	r24, 0x7F	; 127
    1dc2:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    1dc4:	8e b5       	in	r24, 0x2e	; 46
            /* read crc16 */
            sd_raw_rec_byte();
            sd_raw_rec_byte();
            
            /* deaddress card */
            unselect_card();
    1dc6:	2a 9a       	sbi	0x05, 2	; 5
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    1dc8:	3e bc       	out	0x2e, r3	; 46
    while(!(SPSR & (1 << SPIF)));
    1dca:	0d b4       	in	r0, 0x2d	; 45
    1dcc:	07 fe       	sbrs	r0, 7
    1dce:	fd cf       	rjmp	.-6      	; 0x1dca <sd_raw_read+0x114>
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
            raw_block_address = block_address;

            memcpy(buffer, raw_block + block_offset, read_length);
            buffer += read_length;
    1dd0:	cc 0e       	add	r12, r28
    1dd2:	dd 1e       	adc	r13, r29
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    while(!(SPSR & (1 << SPIF)));
    SPSR &= ~(1 << SPIF);
    1dd4:	8d b5       	in	r24, 0x2d	; 45
    1dd6:	8f 77       	andi	r24, 0x7F	; 127
    1dd8:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    1dda:	8e b5       	in	r24, 0x2e	; 46
    1ddc:	0a c0       	rjmp	.+20     	; 0x1df2 <sd_raw_read+0x13c>
        }
#if !SD_RAW_SAVE_RAM
        else
        {
            /* use cached data */
            memcpy(buffer, raw_block + block_offset, read_length);
    1dde:	95 01       	movw	r18, r10
    1de0:	27 52       	subi	r18, 0x27	; 39
    1de2:	3e 4f       	sbci	r19, 0xFE	; 254
    1de4:	c6 01       	movw	r24, r12
    1de6:	b9 01       	movw	r22, r18
    1de8:	ae 01       	movw	r20, r28
    1dea:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <memcpy>
            buffer += read_length;
    1dee:	cc 0e       	add	r12, r28
    1df0:	dd 1e       	adc	r13, r29
        }
#endif

        length -= read_length;
    1df2:	4c 1a       	sub	r4, r28
    1df4:	5d 0a       	sbc	r5, r29
        offset += read_length;
    1df6:	ce 01       	movw	r24, r28
    1df8:	a0 e0       	ldi	r26, 0x00	; 0
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	68 0e       	add	r6, r24
    1dfe:	79 1e       	adc	r7, r25
    1e00:	8a 1e       	adc	r8, r26
    1e02:	9b 1e       	adc	r9, r27
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    1e04:	41 14       	cp	r4, r1
    1e06:	51 04       	cpc	r5, r1
    1e08:	09 f0       	breq	.+2      	; 0x1e0c <sd_raw_read+0x156>
    1e0a:	6d cf       	rjmp	.-294    	; 0x1ce6 <sd_raw_read+0x30>
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
        length -= read_length;
        offset += read_length;
    }

    return 1;
}
    1e0e:	df 91       	pop	r29
    1e10:	cf 91       	pop	r28
    1e12:	1f 91       	pop	r17
    1e14:	0f 91       	pop	r16
    1e16:	ff 90       	pop	r15
    1e18:	ef 90       	pop	r14
    1e1a:	df 90       	pop	r13
    1e1c:	cf 90       	pop	r12
    1e1e:	bf 90       	pop	r11
    1e20:	af 90       	pop	r10
    1e22:	9f 90       	pop	r9
    1e24:	8f 90       	pop	r8
    1e26:	7f 90       	pop	r7
    1e28:	6f 90       	pop	r6
    1e2a:	5f 90       	pop	r5
    1e2c:	4f 90       	pop	r4
    1e2e:	3f 90       	pop	r3
    1e30:	08 95       	ret

00001e32 <sd_raw_read_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    1e32:	2f 92       	push	r2
    1e34:	3f 92       	push	r3
    1e36:	4f 92       	push	r4
    1e38:	5f 92       	push	r5
    1e3a:	6f 92       	push	r6
    1e3c:	7f 92       	push	r7
    1e3e:	8f 92       	push	r8
    1e40:	9f 92       	push	r9
    1e42:	af 92       	push	r10
    1e44:	bf 92       	push	r11
    1e46:	cf 92       	push	r12
    1e48:	df 92       	push	r13
    1e4a:	ef 92       	push	r14
    1e4c:	ff 92       	push	r15
    1e4e:	0f 93       	push	r16
    1e50:	1f 93       	push	r17
    1e52:	df 93       	push	r29
    1e54:	cf 93       	push	r28
    1e56:	00 d0       	rcall	.+0      	; 0x1e58 <sd_raw_read_interval+0x26>
    1e58:	00 d0       	rcall	.+0      	; 0x1e5a <sd_raw_read_interval+0x28>
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
    1e5e:	4b 01       	movw	r8, r22
    1e60:	5c 01       	movw	r10, r24
    1e62:	3a 01       	movw	r6, r20
    1e64:	3c 83       	std	Y+4, r19	; 0x04
    1e66:	2b 83       	std	Y+3, r18	; 0x03
    1e68:	27 01       	movw	r4, r14
    1e6a:	da 82       	std	Y+2, r13	; 0x02
    1e6c:	c9 82       	std	Y+1, r12	; 0x01
    if(!buffer || interval == 0 || length < interval || !callback)
    1e6e:	41 15       	cp	r20, r1
    1e70:	51 05       	cpc	r21, r1
    1e72:	a9 f1       	breq	.+106    	; 0x1ede <sd_raw_read_interval+0xac>
    1e74:	21 15       	cp	r18, r1
    1e76:	31 05       	cpc	r19, r1
    1e78:	91 f1       	breq	.+100    	; 0x1ede <sd_raw_read_interval+0xac>
    1e7a:	02 17       	cp	r16, r18
    1e7c:	13 07       	cpc	r17, r19
    1e7e:	78 f1       	brcs	.+94     	; 0x1ede <sd_raw_read_interval+0xac>
    1e80:	e1 14       	cp	r14, r1
    1e82:	f1 04       	cpc	r15, r1
    1e84:	61 f1       	breq	.+88     	; 0x1ede <sd_raw_read_interval+0xac>
    1e86:	19 01       	movw	r2, r18
    1e88:	30 94       	com	r3
    1e8a:	21 94       	neg	r2
    1e8c:	31 08       	sbc	r3, r1
    1e8e:	33 94       	inc	r3
    1e90:	02 1b       	sub	r16, r18
    1e92:	13 0b       	sbc	r17, r19
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
    1e94:	69 01       	movw	r12, r18
    1e96:	ee 24       	eor	r14, r14
    1e98:	ff 24       	eor	r15, r15
    {
        /* as reading is now buffered, we directly
         * hand over the request to sd_raw_read()
         */
        if(!sd_raw_read(offset, buffer, interval))
    1e9a:	c5 01       	movw	r24, r10
    1e9c:	b4 01       	movw	r22, r8
    1e9e:	a3 01       	movw	r20, r6
    1ea0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ea2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ea4:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <sd_raw_read>
    1ea8:	88 23       	and	r24, r24
    1eaa:	c9 f0       	breq	.+50     	; 0x1ede <sd_raw_read_interval+0xac>
            return 0;
        if(!callback(buffer, offset, p))
    1eac:	c3 01       	movw	r24, r6
    1eae:	b5 01       	movw	r22, r10
    1eb0:	a4 01       	movw	r20, r8
    1eb2:	29 81       	ldd	r18, Y+1	; 0x01
    1eb4:	3a 81       	ldd	r19, Y+2	; 0x02
    1eb6:	f2 01       	movw	r30, r4
    1eb8:	09 95       	icall
    1eba:	88 23       	and	r24, r24
    1ebc:	91 f0       	breq	.+36     	; 0x1ee2 <sd_raw_read_interval+0xb0>
            break;
    1ebe:	02 0d       	add	r16, r2
    1ec0:	13 1d       	adc	r17, r3
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
    1ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec6:	80 0f       	add	r24, r16
    1ec8:	91 1f       	adc	r25, r17
    1eca:	2b 81       	ldd	r18, Y+3	; 0x03
    1ecc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ece:	82 17       	cp	r24, r18
    1ed0:	93 07       	cpc	r25, r19
    1ed2:	38 f0       	brcs	.+14     	; 0x1ee2 <sd_raw_read_interval+0xb0>
    1ed4:	8c 0c       	add	r8, r12
    1ed6:	9d 1c       	adc	r9, r13
    1ed8:	ae 1c       	adc	r10, r14
    1eda:	bf 1c       	adc	r11, r15
    1edc:	de cf       	rjmp	.-68     	; 0x1e9a <sd_raw_read_interval+0x68>
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	01 c0       	rjmp	.+2      	; 0x1ee4 <sd_raw_read_interval+0xb2>
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    /* let card some time to finish */
    sd_raw_rec_byte();

    return 1;
#endif
}
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	cf 91       	pop	r28
    1eee:	df 91       	pop	r29
    1ef0:	1f 91       	pop	r17
    1ef2:	0f 91       	pop	r16
    1ef4:	ff 90       	pop	r15
    1ef6:	ef 90       	pop	r14
    1ef8:	df 90       	pop	r13
    1efa:	cf 90       	pop	r12
    1efc:	bf 90       	pop	r11
    1efe:	af 90       	pop	r10
    1f00:	9f 90       	pop	r9
    1f02:	8f 90       	pop	r8
    1f04:	7f 90       	pop	r7
    1f06:	6f 90       	pop	r6
    1f08:	5f 90       	pop	r5
    1f0a:	4f 90       	pop	r4
    1f0c:	3f 90       	pop	r3
    1f0e:	2f 90       	pop	r2
    1f10:	08 95       	ret

00001f12 <sd_raw_init>:
 * Initializes memory card communication.
 *
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_init()
{
    1f12:	0f 93       	push	r16
    1f14:	1f 93       	push	r17
    1f16:	cf 93       	push	r28
    1f18:	df 93       	push	r29
    /* enable inputs for reading card status */
    configure_pin_available();
    configure_pin_locked();

    /* enable outputs for MOSI, SCK, SS, input for MISO */
    configure_pin_mosi();
    1f1a:	23 9a       	sbi	0x04, 3	; 4
    configure_pin_sck();
    1f1c:	25 9a       	sbi	0x04, 5	; 4
    configure_pin_ss();
    1f1e:	22 9a       	sbi	0x04, 2	; 4
    configure_pin_miso();
    1f20:	24 98       	cbi	0x04, 4	; 4

    unselect_card();
    1f22:	2a 9a       	sbi	0x05, 2	; 5

    /* initialize SPI with lowest frequency; max. 400kHz during identification mode of card */
    SPCR = (0 << SPIE) | /* SPI Interrupt Enable */
    1f24:	83 e5       	ldi	r24, 0x53	; 83
    1f26:	8c bd       	out	0x2c, r24	; 44
           (1 << MSTR) | /* Master mode */
           (0 << CPOL) | /* Clock Polarity: SCK low when idle */
           (0 << CPHA) | /* Clock Phase: sample on rising SCK edge */
           (1 << SPR1) | /* Clock Frequency: f_OSC / 128 */
           (1 << SPR0);
    SPSR &= ~(1 << SPI2X); /* No doubled clock frequency */
    1f28:	8d b5       	in	r24, 0x2d	; 45
    1f2a:	8e 7f       	andi	r24, 0xFE	; 254
    1f2c:	8d bd       	out	0x2d, r24	; 45

    /* initialization procedure */
    sd_raw_card_type = 0;
    1f2e:	10 92 de 03 	sts	0x03DE, r1
    1f32:	90 e0       	ldi	r25, 0x00	; 0
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    1f34:	2f ef       	ldi	r18, 0xFF	; 255
    1f36:	2e bd       	out	0x2e, r18	; 46
    while(!(SPSR & (1 << SPIF)));
    1f38:	0d b4       	in	r0, 0x2d	; 45
    1f3a:	07 fe       	sbrs	r0, 7
    1f3c:	fd cf       	rjmp	.-6      	; 0x1f38 <sd_raw_init+0x26>
    SPSR &= ~(1 << SPIF);
    1f3e:	8d b5       	in	r24, 0x2d	; 45
    1f40:	8f 77       	andi	r24, 0x7F	; 127
    1f42:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    1f44:	8e b5       	in	r24, 0x2e	; 46
    
    if(!sd_raw_available())
        return 0;

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
    1f46:	9f 5f       	subi	r25, 0xFF	; 255
    1f48:	9a 30       	cpi	r25, 0x0A	; 10
    1f4a:	a9 f7       	brne	.-22     	; 0x1f36 <sd_raw_init+0x24>
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
    1f4c:	2a 98       	cbi	0x05, 2	; 5
    1f4e:	c0 e0       	ldi	r28, 0x00	; 0
    1f50:	d0 e0       	ldi	r29, 0x00	; 0

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    {
        response = sd_raw_send_command(CMD_GO_IDLE_STATE, 0);
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	40 e0       	ldi	r20, 0x00	; 0
    1f56:	50 e0       	ldi	r21, 0x00	; 0
    1f58:	60 e0       	ldi	r22, 0x00	; 0
    1f5a:	70 e0       	ldi	r23, 0x00	; 0
    1f5c:	0e 94 2c 07 	call	0xe58	; 0xe58 <sd_raw_send_command>
    1f60:	18 2f       	mov	r17, r24
        if(response == (1 << R1_IDLE_STATE))
    1f62:	81 30       	cpi	r24, 0x01	; 1
    1f64:	39 f0       	breq	.+14     	; 0x1f74 <sd_raw_init+0x62>
            break;

        if(i == 0x1ff)
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	cf 3f       	cpi	r28, 0xFF	; 255
    1f6a:	d8 07       	cpc	r29, r24
    1f6c:	09 f4       	brne	.+2      	; 0x1f70 <sd_raw_init+0x5e>
    1f6e:	40 c0       	rjmp	.+128    	; 0x1ff0 <sd_raw_init+0xde>
    /* address card */
    select_card();

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    1f70:	21 96       	adiw	r28, 0x01	; 1
    1f72:	ef cf       	rjmp	.-34     	; 0x1f52 <sd_raw_init+0x40>
    }
    else
#endif
    {
        /* determine SD/MMC card type */
        sd_raw_send_command(CMD_APP, 0);
    1f74:	87 e3       	ldi	r24, 0x37	; 55
    1f76:	40 e0       	ldi	r20, 0x00	; 0
    1f78:	50 e0       	ldi	r21, 0x00	; 0
    1f7a:	60 e0       	ldi	r22, 0x00	; 0
    1f7c:	70 e0       	ldi	r23, 0x00	; 0
    1f7e:	0e 94 2c 07 	call	0xe58	; 0xe58 <sd_raw_send_command>
        response = sd_raw_send_command(CMD_SD_SEND_OP_COND, 0);
    1f82:	89 e2       	ldi	r24, 0x29	; 41
    1f84:	40 e0       	ldi	r20, 0x00	; 0
    1f86:	50 e0       	ldi	r21, 0x00	; 0
    1f88:	60 e0       	ldi	r22, 0x00	; 0
    1f8a:	70 e0       	ldi	r23, 0x00	; 0
    1f8c:	0e 94 2c 07 	call	0xe58	; 0xe58 <sd_raw_send_command>
        if((response & (1 << R1_ILL_COMMAND)) == 0)
    1f90:	82 fd       	sbrc	r24, 2
    1f92:	02 c0       	rjmp	.+4      	; 0x1f98 <sd_raw_init+0x86>
        {
            /* card conforms to SD 1 card specification */
            sd_raw_card_type |= (1 << SD_RAW_SPEC_1);
    1f94:	10 93 de 03 	sts	0x03DE, r17
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
    1f98:	80 91 de 03 	lds	r24, 0x03DE
    1f9c:	08 2f       	mov	r16, r24
    1f9e:	10 e0       	ldi	r17, 0x00	; 0
    1fa0:	03 70       	andi	r16, 0x03	; 3
    1fa2:	10 70       	andi	r17, 0x00	; 0
    1fa4:	c0 e0       	ldi	r28, 0x00	; 0
    1fa6:	d0 e0       	ldi	r29, 0x00	; 0
    1fa8:	01 15       	cp	r16, r1
    1faa:	11 05       	cpc	r17, r1
    1fac:	49 f0       	breq	.+18     	; 0x1fc0 <sd_raw_init+0xae>
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
                arg = 0x40000000;
#endif
            sd_raw_send_command(CMD_APP, 0);
    1fae:	87 e3       	ldi	r24, 0x37	; 55
    1fb0:	40 e0       	ldi	r20, 0x00	; 0
    1fb2:	50 e0       	ldi	r21, 0x00	; 0
    1fb4:	60 e0       	ldi	r22, 0x00	; 0
    1fb6:	70 e0       	ldi	r23, 0x00	; 0
    1fb8:	0e 94 2c 07 	call	0xe58	; 0xe58 <sd_raw_send_command>
            response = sd_raw_send_command(CMD_SD_SEND_OP_COND, arg);
    1fbc:	89 e2       	ldi	r24, 0x29	; 41
    1fbe:	01 c0       	rjmp	.+2      	; 0x1fc2 <sd_raw_init+0xb0>
        }
        else
        {
            response = sd_raw_send_command(CMD_SEND_OP_COND, 0);
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	40 e0       	ldi	r20, 0x00	; 0
    1fc4:	50 e0       	ldi	r21, 0x00	; 0
    1fc6:	60 e0       	ldi	r22, 0x00	; 0
    1fc8:	70 e0       	ldi	r23, 0x00	; 0
    1fca:	0e 94 2c 07 	call	0xe58	; 0xe58 <sd_raw_send_command>
        }

        if((response & (1 << R1_IDLE_STATE)) == 0)
    1fce:	80 ff       	sbrs	r24, 0
    1fd0:	06 c0       	rjmp	.+12     	; 0x1fde <sd_raw_init+0xcc>
            break;

        if(i == 0x7fff)
    1fd2:	8f e7       	ldi	r24, 0x7F	; 127
    1fd4:	cf 3f       	cpi	r28, 0xFF	; 255
    1fd6:	d8 07       	cpc	r29, r24
    1fd8:	59 f0       	breq	.+22     	; 0x1ff0 <sd_raw_init+0xde>
            /* MMC card */
        }
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    1fda:	21 96       	adiw	r28, 0x01	; 1
    1fdc:	e5 cf       	rjmp	.-54     	; 0x1fa8 <sd_raw_init+0x96>
        sd_raw_rec_byte();
    }
#endif

    /* set block size to 512 bytes */
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
    1fde:	80 e1       	ldi	r24, 0x10	; 16
    1fe0:	40 e0       	ldi	r20, 0x00	; 0
    1fe2:	52 e0       	ldi	r21, 0x02	; 2
    1fe4:	60 e0       	ldi	r22, 0x00	; 0
    1fe6:	70 e0       	ldi	r23, 0x00	; 0
    1fe8:	0e 94 2c 07 	call	0xe58	; 0xe58 <sd_raw_send_command>
    1fec:	88 23       	and	r24, r24
    1fee:	19 f0       	breq	.+6      	; 0x1ff6 <sd_raw_init+0xe4>
    {
        unselect_card();
    1ff0:	2a 9a       	sbi	0x05, 2	; 5
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	22 c0       	rjmp	.+68     	; 0x203a <sd_raw_init+0x128>
        return 0;
    }

    /* deaddress card */
    unselect_card();
    1ff6:	2a 9a       	sbi	0x05, 2	; 5

    /* switch to highest SPI frequency possible */
    SPCR &= ~((1 << SPR1) | (1 << SPR0)); /* Clock Frequency: f_OSC / 4 */
    1ff8:	8c b5       	in	r24, 0x2c	; 44
    1ffa:	8c 7f       	andi	r24, 0xFC	; 252
    1ffc:	8c bd       	out	0x2c, r24	; 44
    SPSR |= (1 << SPI2X); /* Doubled Clock Frequency: f_OSC / 2 */
    1ffe:	8d b5       	in	r24, 0x2d	; 45
    2000:	81 60       	ori	r24, 0x01	; 1
    2002:	8d bd       	out	0x2d, r24	; 45

#if !SD_RAW_SAVE_RAM
    /* the first block is likely to be accessed first, so precache it here */
    raw_block_address = (offset_t) -1;
    2004:	8f ef       	ldi	r24, 0xFF	; 255
    2006:	9f ef       	ldi	r25, 0xFF	; 255
    2008:	af ef       	ldi	r26, 0xFF	; 255
    200a:	bf ef       	ldi	r27, 0xFF	; 255
    200c:	80 93 d9 03 	sts	0x03D9, r24
    2010:	90 93 da 03 	sts	0x03DA, r25
    2014:	a0 93 db 03 	sts	0x03DB, r26
    2018:	b0 93 dc 03 	sts	0x03DC, r27
#if SD_RAW_WRITE_BUFFERING
    raw_block_written = 1;
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	80 93 dd 03 	sts	0x03DD, r24
#endif
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
    2022:	60 e0       	ldi	r22, 0x00	; 0
    2024:	70 e0       	ldi	r23, 0x00	; 0
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	49 ed       	ldi	r20, 0xD9	; 217
    202c:	51 e0       	ldi	r21, 0x01	; 1
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	32 e0       	ldi	r19, 0x02	; 2
    2032:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <sd_raw_read>
    2036:	81 11       	cpse	r24, r1
    2038:	81 e0       	ldi	r24, 0x01	; 1
        return 0;
#endif

    return 1;
}
    203a:	df 91       	pop	r29
    203c:	cf 91       	pop	r28
    203e:	1f 91       	pop	r17
    2040:	0f 91       	pop	r16
    2042:	08 95       	ret

00002044 <sd_raw_write_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_read
 */
uint8_t sd_raw_write_interval(offset_t offset, uint8_t* buffer, uintptr_t length, sd_raw_write_interval_handler_t callback, void* p)
{
    2044:	4f 92       	push	r4
    2046:	5f 92       	push	r5
    2048:	6f 92       	push	r6
    204a:	7f 92       	push	r7
    204c:	8f 92       	push	r8
    204e:	9f 92       	push	r9
    2050:	af 92       	push	r10
    2052:	bf 92       	push	r11
    2054:	cf 92       	push	r12
    2056:	df 92       	push	r13
    2058:	ef 92       	push	r14
    205a:	ff 92       	push	r15
    205c:	0f 93       	push	r16
    205e:	1f 93       	push	r17
    2060:	cf 93       	push	r28
    2062:	df 93       	push	r29
    2064:	5b 01       	movw	r10, r22
    2066:	6c 01       	movw	r12, r24
    2068:	4a 01       	movw	r8, r20
    206a:	e9 01       	movw	r28, r18
    206c:	38 01       	movw	r6, r16
    206e:	27 01       	movw	r4, r14
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
    2070:	41 15       	cp	r20, r1
    2072:	51 05       	cpc	r21, r1
    2074:	71 f1       	breq	.+92     	; 0x20d2 <sd_raw_write_interval+0x8e>
    2076:	01 15       	cp	r16, r1
    2078:	11 05       	cpc	r17, r1
    207a:	59 f1       	breq	.+86     	; 0x20d2 <sd_raw_write_interval+0x8e>
        return 0;

    uint8_t endless = (length == 0);
    207c:	ff 24       	eor	r15, r15
    207e:	21 15       	cp	r18, r1
    2080:	31 05       	cpc	r19, r1
    2082:	11 f5       	brne	.+68     	; 0x20c8 <sd_raw_write_interval+0x84>
    2084:	ff 24       	eor	r15, r15
    2086:	f3 94       	inc	r15
    2088:	1f c0       	rjmp	.+62     	; 0x20c8 <sd_raw_write_interval+0x84>
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
    208a:	c4 01       	movw	r24, r8
    208c:	b6 01       	movw	r22, r12
    208e:	a5 01       	movw	r20, r10
    2090:	92 01       	movw	r18, r4
    2092:	f3 01       	movw	r30, r6
    2094:	09 95       	icall
    2096:	8c 01       	movw	r16, r24
        if(!bytes_to_write)
    2098:	00 97       	sbiw	r24, 0x00	; 0
    209a:	e9 f0       	breq	.+58     	; 0x20d6 <sd_raw_write_interval+0x92>
            break;
        if(!endless && bytes_to_write > length)
    209c:	ff 20       	and	r15, r15
    209e:	19 f4       	brne	.+6      	; 0x20a6 <sd_raw_write_interval+0x62>
    20a0:	c8 17       	cp	r28, r24
    20a2:	d9 07       	cpc	r29, r25
    20a4:	b0 f0       	brcs	.+44     	; 0x20d2 <sd_raw_write_interval+0x8e>
            return 0;

        /* as writing is always buffered, we directly
         * hand over the request to sd_raw_write()
         */
        if(!sd_raw_write(offset, buffer, bytes_to_write))
    20a6:	c6 01       	movw	r24, r12
    20a8:	b5 01       	movw	r22, r10
    20aa:	a4 01       	movw	r20, r8
    20ac:	98 01       	movw	r18, r16
    20ae:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <sd_raw_write>
    20b2:	88 23       	and	r24, r24
    20b4:	71 f0       	breq	.+28     	; 0x20d2 <sd_raw_write_interval+0x8e>
            return 0;

        offset += bytes_to_write;
    20b6:	c8 01       	movw	r24, r16
    20b8:	a0 e0       	ldi	r26, 0x00	; 0
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	a8 0e       	add	r10, r24
    20be:	b9 1e       	adc	r11, r25
    20c0:	ca 1e       	adc	r12, r26
    20c2:	db 1e       	adc	r13, r27
        length -= bytes_to_write;
    20c4:	c0 1b       	sub	r28, r16
    20c6:	d1 0b       	sbc	r29, r17

    if(!buffer || !callback)
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    20c8:	ff 20       	and	r15, r15
    20ca:	f9 f6       	brne	.-66     	; 0x208a <sd_raw_write_interval+0x46>
    20cc:	20 97       	sbiw	r28, 0x00	; 0
    20ce:	e9 f6       	brne	.-70     	; 0x208a <sd_raw_write_interval+0x46>
    20d0:	02 c0       	rjmp	.+4      	; 0x20d6 <sd_raw_write_interval+0x92>
    20d2:	80 e0       	ldi	r24, 0x00	; 0
    20d4:	01 c0       	rjmp	.+2      	; 0x20d8 <sd_raw_write_interval+0x94>
    20d6:	81 e0       	ldi	r24, 0x01	; 1
        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
}
    20d8:	df 91       	pop	r29
    20da:	cf 91       	pop	r28
    20dc:	1f 91       	pop	r17
    20de:	0f 91       	pop	r16
    20e0:	ff 90       	pop	r15
    20e2:	ef 90       	pop	r14
    20e4:	df 90       	pop	r13
    20e6:	cf 90       	pop	r12
    20e8:	bf 90       	pop	r11
    20ea:	af 90       	pop	r10
    20ec:	9f 90       	pop	r9
    20ee:	8f 90       	pop	r8
    20f0:	7f 90       	pop	r7
    20f2:	6f 90       	pop	r6
    20f4:	5f 90       	pop	r5
    20f6:	4f 90       	pop	r4
    20f8:	08 95       	ret

000020fa <fat_open_dir>:
 * \param[in] dir_entry The directory entry which stands for the directory to open.
 * \returns An opaque directory descriptor on success, 0 on failure.
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    20fa:	cf 93       	push	r28
    20fc:	df 93       	push	r29
    20fe:	ac 01       	movw	r20, r24
    2100:	db 01       	movw	r26, r22
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
    2102:	00 97       	sbiw	r24, 0x00	; 0
    2104:	89 f1       	breq	.+98     	; 0x2168 <fat_open_dir+0x6e>
    2106:	61 15       	cp	r22, r1
    2108:	71 05       	cpc	r23, r1
    210a:	71 f1       	breq	.+92     	; 0x2168 <fat_open_dir+0x6e>
    210c:	90 96       	adiw	r26, 0x20	; 32
    210e:	8c 91       	ld	r24, X
    2110:	90 97       	sbiw	r26, 0x20	; 32
    2112:	84 ff       	sbrs	r24, 4
    2114:	29 c0       	rjmp	.+82     	; 0x2168 <fat_open_dir+0x6e>
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    uint8_t i;
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
    2116:	80 91 77 01 	lds	r24, 0x0177
    211a:	90 91 78 01 	lds	r25, 0x0178
    211e:	89 2b       	or	r24, r25
    2120:	19 f4       	brne	.+6      	; 0x2128 <fat_open_dir+0x2e>
    2122:	e7 e7       	ldi	r30, 0x77	; 119
    2124:	f1 e0       	ldi	r31, 0x01	; 1
    2126:	08 c0       	rjmp	.+16     	; 0x2138 <fat_open_dir+0x3e>
    2128:	80 91 a8 01 	lds	r24, 0x01A8
    212c:	90 91 a9 01 	lds	r25, 0x01A9
    2130:	89 2b       	or	r24, r25
    2132:	d1 f4       	brne	.+52     	; 0x2168 <fat_open_dir+0x6e>
    2134:	e8 ea       	ldi	r30, 0xA8	; 168
    2136:	f1 e0       	ldi	r31, 0x01	; 1
    }
    if(i >= FAT_DIR_COUNT)
        return 0;
#endif
    
    memcpy(&dd->dir_entry, dir_entry, sizeof(*dir_entry));
    2138:	9f 01       	movw	r18, r30
    213a:	2e 5f       	subi	r18, 0xFE	; 254
    213c:	3f 4f       	sbci	r19, 0xFF	; 255
    213e:	bd 01       	movw	r22, r26
    2140:	8b e2       	ldi	r24, 0x2B	; 43
    2142:	eb 01       	movw	r28, r22
    2144:	09 90       	ld	r0, Y+
    2146:	be 01       	movw	r22, r28
    2148:	e9 01       	movw	r28, r18
    214a:	09 92       	st	Y+, r0
    214c:	9e 01       	movw	r18, r28
    214e:	81 50       	subi	r24, 0x01	; 1
    2150:	c1 f7       	brne	.-16     	; 0x2142 <fat_open_dir+0x48>
    dd->fs = fs;
    2152:	51 83       	std	Z+1, r21	; 0x01
    2154:	40 83       	st	Z, r20
    dd->entry_cluster = dir_entry->cluster;
    2156:	91 96       	adiw	r26, 0x21	; 33
    2158:	8d 91       	ld	r24, X+
    215a:	9c 91       	ld	r25, X
    215c:	92 97       	sbiw	r26, 0x22	; 34
    215e:	96 a7       	std	Z+46, r25	; 0x2e
    2160:	85 a7       	std	Z+45, r24	; 0x2d
    dd->entry_offset = 0;
    2162:	10 aa       	std	Z+48, r1	; 0x30
    2164:	17 a6       	std	Z+47, r1	; 0x2f
    2166:	02 c0       	rjmp	.+4      	; 0x216c <fat_open_dir+0x72>

    return dd;
    2168:	e0 e0       	ldi	r30, 0x00	; 0
    216a:	f0 e0       	ldi	r31, 0x00	; 0
}
    216c:	cf 01       	movw	r24, r30
    216e:	df 91       	pop	r29
    2170:	cf 91       	pop	r28
    2172:	08 95       	ret

00002174 <fat_open_file>:
 * \param[in] dir_entry The directory entry of the file to open.
 * \returns The file handle, or 0 on failure.
 * \see fat_close_file
 */
struct fat_file_struct* fat_open_file(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    2174:	cf 93       	push	r28
    2176:	df 93       	push	r29
    2178:	9c 01       	movw	r18, r24
    217a:	fb 01       	movw	r30, r22
    if(!fs || !dir_entry || (dir_entry->attributes & FAT_ATTRIB_DIR))
    217c:	00 97       	sbiw	r24, 0x00	; 0
    217e:	31 f0       	breq	.+12     	; 0x218c <fat_open_file+0x18>
    2180:	61 15       	cp	r22, r1
    2182:	71 05       	cpc	r23, r1
    2184:	19 f0       	breq	.+6      	; 0x218c <fat_open_file+0x18>
    2186:	80 a1       	ldd	r24, Z+32	; 0x20
    2188:	84 ff       	sbrs	r24, 4
    218a:	23 c0       	rjmp	.+70     	; 0x21d2 <fat_open_file+0x5e>
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    fd->fs = fs;
    fd->pos = 0;
    fd->pos_cluster = dir_entry->cluster;

    return fd;
}
    2190:	c9 01       	movw	r24, r18
    2192:	df 91       	pop	r29
    2194:	cf 91       	pop	r28
    2196:	08 95       	ret
    }
    if(i >= FAT_FILE_COUNT)
        return 0;
#endif
    
    memcpy(&fd->dir_entry, dir_entry, sizeof(*dir_entry));
    2198:	c6 e4       	ldi	r28, 0x46	; 70
    219a:	d1 e0       	ldi	r29, 0x01	; 1
    219c:	df 01       	movw	r26, r30
    219e:	8b e2       	ldi	r24, 0x2B	; 43
    21a0:	0d 90       	ld	r0, X+
    21a2:	09 92       	st	Y+, r0
    21a4:	81 50       	subi	r24, 0x01	; 1
    21a6:	e1 f7       	brne	.-8      	; 0x21a0 <fat_open_file+0x2c>
    fd->fs = fs;
    21a8:	30 93 45 01 	sts	0x0145, r19
    21ac:	20 93 44 01 	sts	0x0144, r18
    fd->pos = 0;
    21b0:	10 92 71 01 	sts	0x0171, r1
    21b4:	10 92 72 01 	sts	0x0172, r1
    21b8:	10 92 73 01 	sts	0x0173, r1
    21bc:	10 92 74 01 	sts	0x0174, r1
    fd->pos_cluster = dir_entry->cluster;
    21c0:	81 a1       	ldd	r24, Z+33	; 0x21
    21c2:	92 a1       	ldd	r25, Z+34	; 0x22
    21c4:	90 93 76 01 	sts	0x0176, r25
    21c8:	80 93 75 01 	sts	0x0175, r24
    21cc:	24 e4       	ldi	r18, 0x44	; 68
    21ce:	31 e0       	ldi	r19, 0x01	; 1
    21d0:	df cf       	rjmp	.-66     	; 0x2190 <fat_open_file+0x1c>
#else
    struct fat_file_struct* fd = fat_file_handles;
    uint8_t i;
    for(i = 0; i < FAT_FILE_COUNT; ++i)
    {
        if(!fd->fs)
    21d2:	80 91 44 01 	lds	r24, 0x0144
    21d6:	90 91 45 01 	lds	r25, 0x0145
    21da:	89 2b       	or	r24, r25
    21dc:	b9 f6       	brne	.-82     	; 0x218c <fat_open_file+0x18>
    21de:	dc cf       	rjmp	.-72     	; 0x2198 <fat_open_file+0x24>

000021e0 <find_file_in_dir>:
}



uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
    21e0:	ef 92       	push	r14
    21e2:	ff 92       	push	r15
    21e4:	0f 93       	push	r16
    21e6:	1f 93       	push	r17
    21e8:	cf 93       	push	r28
    21ea:	df 93       	push	r29
    21ec:	eb 01       	movw	r28, r22
    21ee:	8a 01       	movw	r16, r20
    21f0:	79 01       	movw	r14, r18
    21f2:	10 c0       	rjmp	.+32     	; 0x2214 <find_file_in_dir+0x34>
    while(fat_read_dir(dd, dir_entry))
    21f4:	c7 01       	movw	r24, r14
    21f6:	b8 01       	movw	r22, r16
    21f8:	0e 94 16 1c 	call	0x382c	; 0x382c <strcmp>
    {
        if(strcmp(dir_entry->long_name, name) == 0)
    21fc:	00 97       	sbiw	r24, 0x00	; 0
    21fe:	51 f4       	brne	.+20     	; 0x2214 <find_file_in_dir+0x34>
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
    2200:	20 97       	sbiw	r28, 0x00	; 0
    2202:	31 f0       	breq	.+12     	; 0x2210 <find_file_in_dir+0x30>
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    2204:	8b a1       	ldd	r24, Y+35	; 0x23
    2206:	9c a1       	ldd	r25, Y+36	; 0x24
    2208:	9e a7       	std	Y+46, r25	; 0x2e
    220a:	8d a7       	std	Y+45, r24	; 0x2d
    dd->entry_offset = 0;
    220c:	18 aa       	std	Y+48, r1	; 0x30
    220e:	1f a6       	std	Y+47, r1	; 0x2f
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	06 c0       	rjmp	.+12     	; 0x2220 <find_file_in_dir+0x40>



uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
    while(fat_read_dir(dd, dir_entry))
    2214:	ce 01       	movw	r24, r28
    2216:	b7 01       	movw	r22, r14
    2218:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <fat_read_dir>
    221c:	88 23       	and	r24, r24
    221e:	51 f7       	brne	.-44     	; 0x21f4 <find_file_in_dir+0x14>
            return 1;
        }
    }

    return 0;
}
    2220:	df 91       	pop	r29
    2222:	cf 91       	pop	r28
    2224:	1f 91       	pop	r17
    2226:	0f 91       	pop	r16
    2228:	ff 90       	pop	r15
    222a:	ef 90       	pop	r14
    222c:	08 95       	ret

0000222e <delete_file>:
    return 0;
}


int delete_file( const char* fname )
{
    222e:	ef 92       	push	r14
    2230:	ff 92       	push	r15
    2232:	0f 93       	push	r16
    2234:	1f 93       	push	r17
    2236:	df 93       	push	r29
    2238:	cf 93       	push	r28
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
    223e:	ab 97       	sbiw	r28, 0x2b	; 43
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	f8 94       	cli
    2244:	de bf       	out	0x3e, r29	; 62
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	cd bf       	out	0x3d, r28	; 61
    224a:	7c 01       	movw	r14, r24
	struct fat_dir_entry_struct file_entry;
	if(find_file_in_dir(fs, dd, fname, &file_entry))
    224c:	60 91 f4 03 	lds	r22, 0x03F4
    2250:	70 91 f5 03 	lds	r23, 0x03F5
    2254:	80 91 f0 03 	lds	r24, 0x03F0
    2258:	90 91 f1 03 	lds	r25, 0x03F1
    225c:	a7 01       	movw	r20, r14
    225e:	8e 01       	movw	r16, r28
    2260:	0f 5f       	subi	r16, 0xFF	; 255
    2262:	1f 4f       	sbci	r17, 0xFF	; 255
    2264:	98 01       	movw	r18, r16
    2266:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <find_file_in_dir>
    226a:	88 23       	and	r24, r24
    226c:	61 f0       	breq	.+24     	; 0x2286 <delete_file+0x58>
	{
		if(fat_delete_file(fs, &file_entry))
    226e:	80 91 f0 03 	lds	r24, 0x03F0
    2272:	90 91 f1 03 	lds	r25, 0x03F1
    2276:	b8 01       	movw	r22, r16
    2278:	0e 94 d3 05 	call	0xba6	; 0xba6 <fat_delete_file>
    227c:	88 23       	and	r24, r24
    227e:	19 f0       	breq	.+6      	; 0x2286 <delete_file+0x58>
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	0c c0       	rjmp	.+24     	; 0x229e <delete_file+0x70>
			return 0;
	}

	uart_puts_p(PSTR("error deleting file: "));
    2286:	8e eb       	ldi	r24, 0xBE	; 190
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_puts_p>
	uart_puts(fname);
    228e:	c7 01       	movw	r24, r14
    2290:	0e 94 98 02 	call	0x530	; 0x530 <uart_puts>
	uart_putc('\n');
    2294:	8a e0       	ldi	r24, 0x0A	; 10
    2296:	0e 94 a9 01 	call	0x352	; 0x352 <uart_putc>
    229a:	2f ef       	ldi	r18, 0xFF	; 255
    229c:	3f ef       	ldi	r19, 0xFF	; 255

	return -1;
}
    229e:	c9 01       	movw	r24, r18
    22a0:	ab 96       	adiw	r28, 0x2b	; 43
    22a2:	0f b6       	in	r0, 0x3f	; 63
    22a4:	f8 94       	cli
    22a6:	de bf       	out	0x3e, r29	; 62
    22a8:	0f be       	out	0x3f, r0	; 63
    22aa:	cd bf       	out	0x3d, r28	; 61
    22ac:	cf 91       	pop	r28
    22ae:	df 91       	pop	r29
    22b0:	1f 91       	pop	r17
    22b2:	0f 91       	pop	r16
    22b4:	ff 90       	pop	r15
    22b6:	ef 90       	pop	r14
    22b8:	08 95       	ret

000022ba <open_file_in_dir>:

    return 0;
}

struct fat_file_struct* open_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name)
{
    22ba:	ef 92       	push	r14
    22bc:	ff 92       	push	r15
    22be:	0f 93       	push	r16
    22c0:	1f 93       	push	r17
    22c2:	df 93       	push	r29
    22c4:	cf 93       	push	r28
    22c6:	cd b7       	in	r28, 0x3d	; 61
    22c8:	de b7       	in	r29, 0x3e	; 62
    22ca:	ab 97       	sbiw	r28, 0x2b	; 43
    22cc:	0f b6       	in	r0, 0x3f	; 63
    22ce:	f8 94       	cli
    22d0:	de bf       	out	0x3e, r29	; 62
    22d2:	0f be       	out	0x3f, r0	; 63
    22d4:	cd bf       	out	0x3d, r28	; 61
    22d6:	8c 01       	movw	r16, r24
    struct fat_dir_entry_struct file_entry;
    if(!find_file_in_dir(fs, dd, name, &file_entry))
    22d8:	7e 01       	movw	r14, r28
    22da:	08 94       	sec
    22dc:	e1 1c       	adc	r14, r1
    22de:	f1 1c       	adc	r15, r1
    22e0:	97 01       	movw	r18, r14
    22e2:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <find_file_in_dir>
    22e6:	88 23       	and	r24, r24
    22e8:	19 f4       	brne	.+6      	; 0x22f0 <open_file_in_dir+0x36>
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	05 c0       	rjmp	.+10     	; 0x22fa <open_file_in_dir+0x40>
        return 0;

    return fat_open_file(fs, &file_entry);
    22f0:	c8 01       	movw	r24, r16
    22f2:	b7 01       	movw	r22, r14
    22f4:	0e 94 ba 10 	call	0x2174	; 0x2174 <fat_open_file>
    22f8:	9c 01       	movw	r18, r24
}
    22fa:	c9 01       	movw	r24, r18
    22fc:	ab 96       	adiw	r28, 0x2b	; 43
    22fe:	0f b6       	in	r0, 0x3f	; 63
    2300:	f8 94       	cli
    2302:	de bf       	out	0x3e, r29	; 62
    2304:	0f be       	out	0x3f, r0	; 63
    2306:	cd bf       	out	0x3d, r28	; 61
    2308:	cf 91       	pop	r28
    230a:	df 91       	pop	r29
    230c:	1f 91       	pop	r17
    230e:	0f 91       	pop	r16
    2310:	ff 90       	pop	r15
    2312:	ef 90       	pop	r14
    2314:	08 95       	ret

00002316 <display_file>:

    return 0;
}

int display_file(const char* fname)
{
    2316:	af 92       	push	r10
    2318:	bf 92       	push	r11
    231a:	cf 92       	push	r12
    231c:	df 92       	push	r13
    231e:	ef 92       	push	r14
    2320:	ff 92       	push	r15
    2322:	0f 93       	push	r16
    2324:	1f 93       	push	r17
    2326:	df 93       	push	r29
    2328:	cf 93       	push	r28
    232a:	cd b7       	in	r28, 0x3d	; 61
    232c:	de b7       	in	r29, 0x3e	; 62
    232e:	28 97       	sbiw	r28, 0x08	; 8
    2330:	0f b6       	in	r0, 0x3f	; 63
    2332:	f8 94       	cli
    2334:	de bf       	out	0x3e, r29	; 62
    2336:	0f be       	out	0x3f, r0	; 63
    2338:	cd bf       	out	0x3d, r28	; 61
    233a:	8c 01       	movw	r16, r24
	if(!fs || !dd )
    233c:	80 91 f0 03 	lds	r24, 0x03F0
    2340:	90 91 f1 03 	lds	r25, 0x03F1
    2344:	00 97       	sbiw	r24, 0x00	; 0
    2346:	39 f0       	breq	.+14     	; 0x2356 <display_file+0x40>
    2348:	60 91 f4 03 	lds	r22, 0x03F4
    234c:	70 91 f5 03 	lds	r23, 0x03F5
    2350:	61 15       	cp	r22, r1
    2352:	71 05       	cpc	r23, r1
    2354:	59 f4       	brne	.+22     	; 0x236c <display_file+0x56>
	{
		uart_puts_p(PSTR("SD Card not initialized properly\n"));
    2356:	8e ef       	ldi	r24, 0xFE	; 254
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_puts_p>
		uart_puts_p(PSTR("call init_sdcard() first \n"));
    235e:	83 ee       	ldi	r24, 0xE3	; 227
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_puts_p>
    2366:	2f ef       	ldi	r18, 0xFF	; 255
    2368:	3f ef       	ldi	r19, 0xFF	; 255
    236a:	35 c0       	rjmp	.+106    	; 0x23d6 <display_file+0xc0>
		return -1;
	}

    /* search file in current directory and open it */
    struct fat_file_struct* fd = open_file_in_dir(fs, dd, fname );
    236c:	a8 01       	movw	r20, r16
    236e:	0e 94 5d 11 	call	0x22ba	; 0x22ba <open_file_in_dir>
    2372:	7c 01       	movw	r14, r24
    if(!fd)
    2374:	00 97       	sbiw	r24, 0x00	; 0
    2376:	b1 f4       	brne	.+44     	; 0x23a4 <display_file+0x8e>
    {
        uart_puts_p(PSTR("error opening "));
    2378:	84 ed       	ldi	r24, 0xD4	; 212
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_puts_p>
        uart_puts(fname);
    2380:	c8 01       	movw	r24, r16
    2382:	0e 94 98 02 	call	0x530	; 0x530 <uart_puts>
        uart_putc('\n');
    2386:	8a e0       	ldi	r24, 0x0A	; 10
    2388:	0e 94 a9 01 	call	0x352	; 0x352 <uart_putc>
    238c:	2e ef       	ldi	r18, 0xFE	; 254
    238e:	3f ef       	ldi	r19, 0xFF	; 255
    2390:	22 c0       	rjmp	.+68     	; 0x23d6 <display_file+0xc0>
    {

        for(uint8_t i = 0; i < 8; ++i)
        {
        
            uart_putc(buffer[i]);
    2392:	f8 01       	movw	r30, r16
    2394:	81 91       	ld	r24, Z+
    2396:	8f 01       	movw	r16, r30
    2398:	0e 94 a9 01 	call	0x352	; 0x352 <uart_putc>
    uint8_t buffer[8];
    uint32_t offset = 0;
    while(fat_read_file(fd, buffer, sizeof(buffer)) > 0)
    {

        for(uint8_t i = 0; i < 8; ++i)
    239c:	0a 15       	cp	r16, r10
    239e:	1b 05       	cpc	r17, r11
    23a0:	c1 f7       	brne	.-16     	; 0x2392 <display_file+0x7c>
    23a2:	09 c0       	rjmp	.+18     	; 0x23b6 <display_file+0xa0>
    

    /* print file contents */
    uint8_t buffer[8];
    uint32_t offset = 0;
    while(fat_read_file(fd, buffer, sizeof(buffer)) > 0)
    23a4:	6e 01       	movw	r12, r28
    23a6:	08 94       	sec
    23a8:	c1 1c       	adc	r12, r1
    23aa:	d1 1c       	adc	r13, r1
    {

        for(uint8_t i = 0; i < 8; ++i)
    23ac:	e9 e0       	ldi	r30, 0x09	; 9
    23ae:	ae 2e       	mov	r10, r30
    23b0:	b1 2c       	mov	r11, r1
    23b2:	ac 0e       	add	r10, r28
    23b4:	bd 1e       	adc	r11, r29
    

    /* print file contents */
    uint8_t buffer[8];
    uint32_t offset = 0;
    while(fat_read_file(fd, buffer, sizeof(buffer)) > 0)
    23b6:	c7 01       	movw	r24, r14
    23b8:	b6 01       	movw	r22, r12
    23ba:	48 e0       	ldi	r20, 0x08	; 8
    23bc:	50 e0       	ldi	r21, 0x00	; 0
    23be:	0e 94 76 04 	call	0x8ec	; 0x8ec <fat_read_file>
    23c2:	18 16       	cp	r1, r24
    23c4:	19 06       	cpc	r1, r25
    23c6:	14 f4       	brge	.+4      	; 0x23cc <display_file+0xb6>
    23c8:	86 01       	movw	r16, r12
    23ca:	e3 cf       	rjmp	.-58     	; 0x2392 <display_file+0x7c>
#endif

#if USE_DYNAMIC_MEMORY
        free(fd);
#else
        fd->fs = 0;
    23cc:	f7 01       	movw	r30, r14
    23ce:	11 82       	std	Z+1, r1	; 0x01
    23d0:	10 82       	st	Z, r1
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0

    

    fat_close_file(fd);
    return 0;
}
    23d6:	c9 01       	movw	r24, r18
    23d8:	28 96       	adiw	r28, 0x08	; 8
    23da:	0f b6       	in	r0, 0x3f	; 63
    23dc:	f8 94       	cli
    23de:	de bf       	out	0x3e, r29	; 62
    23e0:	0f be       	out	0x3f, r0	; 63
    23e2:	cd bf       	out	0x3d, r28	; 61
    23e4:	cf 91       	pop	r28
    23e6:	df 91       	pop	r29
    23e8:	1f 91       	pop	r17
    23ea:	0f 91       	pop	r16
    23ec:	ff 90       	pop	r15
    23ee:	ef 90       	pop	r14
    23f0:	df 90       	pop	r13
    23f2:	cf 90       	pop	r12
    23f4:	bf 90       	pop	r11
    23f6:	af 90       	pop	r10
    23f8:	08 95       	ret

000023fa <fat_find_offset_for_dir_entry>:
 * \param[in] parent The directory in which to search.
 * \param[in] dir_entry The directory entry for which to search space.
 * \returns 0 on failure, a device offset on success.
 */
offset_t fat_find_offset_for_dir_entry(struct fat_fs_struct* fs, const struct fat_dir_struct* parent, const struct fat_dir_entry_struct* dir_entry)
{
    23fa:	2f 92       	push	r2
    23fc:	3f 92       	push	r3
    23fe:	4f 92       	push	r4
    2400:	5f 92       	push	r5
    2402:	6f 92       	push	r6
    2404:	7f 92       	push	r7
    2406:	8f 92       	push	r8
    2408:	9f 92       	push	r9
    240a:	af 92       	push	r10
    240c:	bf 92       	push	r11
    240e:	cf 92       	push	r12
    2410:	df 92       	push	r13
    2412:	ef 92       	push	r14
    2414:	ff 92       	push	r15
    2416:	0f 93       	push	r16
    2418:	1f 93       	push	r17
    241a:	df 93       	push	r29
    241c:	cf 93       	push	r28
    241e:	00 d0       	rcall	.+0      	; 0x2420 <fat_find_offset_for_dir_entry+0x26>
    2420:	0f 92       	push	r0
    2422:	cd b7       	in	r28, 0x3d	; 61
    2424:	de b7       	in	r29, 0x3e	; 62
    2426:	1c 01       	movw	r2, r24
    2428:	9b 01       	movw	r18, r22
    if(!fs || !dir_entry)
    242a:	00 97       	sbiw	r24, 0x00	; 0
    242c:	09 f4       	brne	.+2      	; 0x2430 <fat_find_offset_for_dir_entry+0x36>
    242e:	d2 c0       	rjmp	.+420    	; 0x25d4 <fat_find_offset_for_dir_entry+0x1da>
    2430:	41 15       	cp	r20, r1
    2432:	51 05       	cpc	r21, r1
    2434:	09 f4       	brne	.+2      	; 0x2438 <fat_find_offset_for_dir_entry+0x3e>
    2436:	ce c0       	rjmp	.+412    	; 0x25d4 <fat_find_offset_for_dir_entry+0x1da>
        return 0;

    /* search for a place where to write the directory entry to disk */
#if FAT_LFN_SUPPORT
    uint8_t free_dir_entries_needed = (strlen(dir_entry->long_name) + 12) / 13 + 1;
    2438:	fa 01       	movw	r30, r20
    243a:	01 90       	ld	r0, Z+
    243c:	00 20       	and	r0, r0
    243e:	e9 f7       	brne	.-6      	; 0x243a <fat_find_offset_for_dir_entry+0x40>
    2440:	e4 1b       	sub	r30, r20
    2442:	f5 0b       	sbc	r31, r21
    2444:	cf 01       	movw	r24, r30
    2446:	0b 96       	adiw	r24, 0x0b	; 11
    2448:	6d e0       	ldi	r22, 0x0D	; 13
    244a:	70 e0       	ldi	r23, 0x00	; 0
    244c:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodhi4>
    2450:	86 2f       	mov	r24, r22
    2452:	8f 5f       	subi	r24, 0xFF	; 255
    2454:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t free_dir_entries_found = 0;
#endif
    cluster_t cluster_num = parent->dir_entry.cluster;
    2456:	d9 01       	movw	r26, r18
    2458:	93 96       	adiw	r26, 0x23	; 35
    245a:	4d 90       	ld	r4, X+
    245c:	5c 90       	ld	r5, X
    245e:	94 97       	sbiw	r26, 0x24	; 36
    offset_t offset_to = 0;
#if FAT_FAT32_SUPPORT
    uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
#endif

    if(cluster_num == 0)
    2460:	41 14       	cp	r4, r1
    2462:	51 04       	cpc	r5, r1
    2464:	51 f0       	breq	.+20     	; 0x247a <fat_find_offset_for_dir_entry+0x80>
    2466:	aa 24       	eor	r10, r10
    2468:	bb 24       	eor	r11, r11
    246a:	65 01       	movw	r12, r10
    246c:	ee 24       	eor	r14, r14
    246e:	ff 24       	eor	r15, r15
    2470:	87 01       	movw	r16, r14
    2472:	66 24       	eor	r6, r6
    2474:	77 24       	eor	r7, r7
    2476:	43 01       	movw	r8, r6
    2478:	0b c0       	rjmp	.+22     	; 0x2490 <fat_find_offset_for_dir_entry+0x96>
        }
        else
#endif
        {
            /* we read/write from the root directory entry */
            offset = fs->header.root_dir_offset;
    247a:	f1 01       	movw	r30, r2
    247c:	e6 88       	ldd	r14, Z+22	; 0x16
    247e:	f7 88       	ldd	r15, Z+23	; 0x17
    2480:	00 8d       	ldd	r16, Z+24	; 0x18
    2482:	11 8d       	ldd	r17, Z+25	; 0x19
            offset_to = fs->header.cluster_zero_offset;
    2484:	62 88       	ldd	r6, Z+18	; 0x12
    2486:	73 88       	ldd	r7, Z+19	; 0x13
    2488:	84 88       	ldd	r8, Z+20	; 0x14
    248a:	95 88       	ldd	r9, Z+21	; 0x15
    248c:	57 01       	movw	r10, r14
    248e:	68 01       	movw	r12, r16
    2490:	1a 82       	std	Y+2, r1	; 0x02
        }
    }
    
    while(1)
    {
        if(offset == offset_to)
    2492:	e6 14       	cp	r14, r6
    2494:	f7 04       	cpc	r15, r7
    2496:	08 05       	cpc	r16, r8
    2498:	19 05       	cpc	r17, r9
    249a:	09 f0       	breq	.+2      	; 0x249e <fat_find_offset_for_dir_entry+0xa4>
    249c:	6e c0       	rjmp	.+220    	; 0x257a <fat_find_offset_for_dir_entry+0x180>
        {
            if(cluster_num == 0)
    249e:	41 14       	cp	r4, r1
    24a0:	51 04       	cpc	r5, r1
    24a2:	09 f4       	brne	.+2      	; 0x24a6 <fat_find_offset_for_dir_entry+0xac>
    24a4:	97 c0       	rjmp	.+302    	; 0x25d4 <fat_find_offset_for_dir_entry+0x1da>
                /* We iterated through the whole root directory and
                 * could not find enough space for the directory entry.
                 */
                return 0;

            if(offset)
    24a6:	e1 14       	cp	r14, r1
    24a8:	f1 04       	cpc	r15, r1
    24aa:	01 05       	cpc	r16, r1
    24ac:	11 05       	cpc	r17, r1
    24ae:	89 f1       	breq	.+98     	; 0x2512 <fat_find_offset_for_dir_entry+0x118>
            {
                /* We reached a cluster boundary and have to
                 * switch to the next cluster.
                 */

                cluster_t cluster_next = fat_get_next_cluster(fs, cluster_num);
    24b0:	c1 01       	movw	r24, r2
    24b2:	b2 01       	movw	r22, r4
    24b4:	0e 94 cf 02 	call	0x59e	; 0x59e <fat_get_next_cluster>
                if(!cluster_next)
    24b8:	00 97       	sbiw	r24, 0x00	; 0
    24ba:	51 f5       	brne	.+84     	; 0x2510 <fat_find_offset_for_dir_entry+0x116>
                {
                    cluster_next = fat_append_clusters(fs, cluster_num, 1);
    24bc:	c1 01       	movw	r24, r2
    24be:	b2 01       	movw	r22, r4
    24c0:	41 e0       	ldi	r20, 0x01	; 1
    24c2:	50 e0       	ldi	r21, 0x00	; 0
    24c4:	0e 94 85 03 	call	0x70a	; 0x70a <fat_append_clusters>
    24c8:	8c 01       	movw	r16, r24
                    if(!cluster_next)
    24ca:	00 97       	sbiw	r24, 0x00	; 0
    24cc:	09 f4       	brne	.+2      	; 0x24d0 <fat_find_offset_for_dir_entry+0xd6>
    24ce:	82 c0       	rjmp	.+260    	; 0x25d4 <fat_find_offset_for_dir_entry+0x1da>
                        return 0;

                    /* we appended a new cluster and know it is free */
                    dir_entry_offset = fs->header.cluster_zero_offset +
    24d0:	02 50       	subi	r16, 0x02	; 2
    24d2:	10 40       	sbci	r17, 0x00	; 0
    24d4:	b8 01       	movw	r22, r16
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	0e 5f       	subi	r16, 0xFE	; 254
    24dc:	1f 4f       	sbci	r17, 0xFF	; 255
    24de:	d1 01       	movw	r26, r2
    24e0:	50 96       	adiw	r26, 0x10	; 16
    24e2:	2d 91       	ld	r18, X+
    24e4:	3c 91       	ld	r19, X
    24e6:	51 97       	sbiw	r26, 0x11	; 17
    24e8:	40 e0       	ldi	r20, 0x00	; 0
    24ea:	50 e0       	ldi	r21, 0x00	; 0
    24ec:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <__mulsi3>
    24f0:	5b 01       	movw	r10, r22
    24f2:	6c 01       	movw	r12, r24
    24f4:	f1 01       	movw	r30, r2
    24f6:	82 89       	ldd	r24, Z+18	; 0x12
    24f8:	93 89       	ldd	r25, Z+19	; 0x13
    24fa:	a4 89       	ldd	r26, Z+20	; 0x14
    24fc:	b5 89       	ldd	r27, Z+21	; 0x15
    24fe:	a8 0e       	add	r10, r24
    2500:	b9 1e       	adc	r11, r25
    2502:	ca 1e       	adc	r12, r26
    2504:	db 1e       	adc	r13, r27
                                       (offset_t) (cluster_next - 2) * fs->header.cluster_size;

                    /* clear cluster to avoid garbage directory entries */
                    fat_clear_cluster(fs, cluster_next);
    2506:	c1 01       	movw	r24, r2
    2508:	b8 01       	movw	r22, r16
    250a:	0e 94 90 09 	call	0x1320	; 0x1320 <fat_clear_cluster>
    250e:	65 c0       	rjmp	.+202    	; 0x25da <fat_find_offset_for_dir_entry+0x1e0>

                    break;
    2510:	2c 01       	movw	r4, r24
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    2512:	f2 e0       	ldi	r31, 0x02	; 2
    2514:	4f 16       	cp	r4, r31
    2516:	51 04       	cpc	r5, r1
    2518:	20 f4       	brcc	.+8      	; 0x2522 <fat_find_offset_for_dir_entry+0x128>
    251a:	ee 24       	eor	r14, r14
    251c:	ff 24       	eor	r15, r15
    251e:	87 01       	movw	r16, r14
    2520:	1d c0       	rjmp	.+58     	; 0x255c <fat_find_offset_for_dir_entry+0x162>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    2522:	2e ef       	ldi	r18, 0xFE	; 254
    2524:	3f ef       	ldi	r19, 0xFF	; 255
    2526:	42 0e       	add	r4, r18
    2528:	53 1e       	adc	r5, r19
    252a:	b2 01       	movw	r22, r4
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	a2 e0       	ldi	r26, 0x02	; 2
    2532:	b0 e0       	ldi	r27, 0x00	; 0
    2534:	4a 0e       	add	r4, r26
    2536:	5b 1e       	adc	r5, r27
    2538:	f1 01       	movw	r30, r2
    253a:	20 89       	ldd	r18, Z+16	; 0x10
    253c:	31 89       	ldd	r19, Z+17	; 0x11
    253e:	40 e0       	ldi	r20, 0x00	; 0
    2540:	50 e0       	ldi	r21, 0x00	; 0
    2542:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <__mulsi3>
    2546:	7b 01       	movw	r14, r22
    2548:	8c 01       	movw	r16, r24
    254a:	f1 01       	movw	r30, r2
    254c:	82 89       	ldd	r24, Z+18	; 0x12
    254e:	93 89       	ldd	r25, Z+19	; 0x13
    2550:	a4 89       	ldd	r26, Z+20	; 0x14
    2552:	b5 89       	ldd	r27, Z+21	; 0x15
    2554:	e8 0e       	add	r14, r24
    2556:	f9 1e       	adc	r15, r25
    2558:	0a 1f       	adc	r16, r26
    255a:	1b 1f       	adc	r17, r27
                }
                cluster_num = cluster_next;
            }

            offset = fat_cluster_offset(fs, cluster_num);
            offset_to = offset + fs->header.cluster_size;
    255c:	d1 01       	movw	r26, r2
    255e:	50 96       	adiw	r26, 0x10	; 16
    2560:	8d 91       	ld	r24, X+
    2562:	9c 91       	ld	r25, X
    2564:	51 97       	sbiw	r26, 0x11	; 17
    2566:	3c 01       	movw	r6, r24
    2568:	88 24       	eor	r8, r8
    256a:	99 24       	eor	r9, r9
    256c:	6e 0c       	add	r6, r14
    256e:	7f 1c       	adc	r7, r15
    2570:	80 1e       	adc	r8, r16
    2572:	91 1e       	adc	r9, r17
    2574:	57 01       	movw	r10, r14
    2576:	68 01       	movw	r12, r16
    2578:	1a 82       	std	Y+2, r1	; 0x02
#endif
        }
        
        /* read next lfn or 8.3 entry */
        uint8_t first_char;
        if(!fs->partition->device_read(offset, &first_char, sizeof(first_char)))
    257a:	d1 01       	movw	r26, r2
    257c:	ed 91       	ld	r30, X+
    257e:	fc 91       	ld	r31, X
    2580:	01 90       	ld	r0, Z+
    2582:	f0 81       	ld	r31, Z
    2584:	e0 2d       	mov	r30, r0
    2586:	c8 01       	movw	r24, r16
    2588:	b7 01       	movw	r22, r14
    258a:	ae 01       	movw	r20, r28
    258c:	4f 5f       	subi	r20, 0xFF	; 255
    258e:	5f 4f       	sbci	r21, 0xFF	; 255
    2590:	21 e0       	ldi	r18, 0x01	; 1
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	09 95       	icall
    2596:	88 23       	and	r24, r24
    2598:	e9 f0       	breq	.+58     	; 0x25d4 <fat_find_offset_for_dir_entry+0x1da>
            return 0;

        /* check if we found a free directory entry */
        if(first_char == FAT_DIRENTRY_DELETED || !first_char)
    259a:	89 81       	ldd	r24, Y+1	; 0x01
    259c:	85 3e       	cpi	r24, 0xE5	; 229
    259e:	11 f0       	breq	.+4      	; 0x25a4 <fat_find_offset_for_dir_entry+0x1aa>
    25a0:	88 23       	and	r24, r24
    25a2:	79 f4       	brne	.+30     	; 0x25c2 <fat_find_offset_for_dir_entry+0x1c8>
        {
            /* check if we have the needed number of available entries */
#if FAT_LFN_SUPPORT
            ++free_dir_entries_found;
    25a4:	ba 81       	ldd	r27, Y+2	; 0x02
    25a6:	bf 5f       	subi	r27, 0xFF	; 255
    25a8:	ba 83       	std	Y+2, r27	; 0x02
            if(free_dir_entries_found >= free_dir_entries_needed)
    25aa:	eb 81       	ldd	r30, Y+3	; 0x03
    25ac:	be 17       	cp	r27, r30
    25ae:	a8 f4       	brcc	.+42     	; 0x25da <fat_find_offset_for_dir_entry+0x1e0>
#endif
                break;

            offset += 32;
    25b0:	80 e2       	ldi	r24, 0x20	; 32
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	a0 e0       	ldi	r26, 0x00	; 0
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	e8 0e       	add	r14, r24
    25ba:	f9 1e       	adc	r15, r25
    25bc:	0a 1f       	adc	r16, r26
    25be:	1b 1f       	adc	r17, r27
    25c0:	68 cf       	rjmp	.-304    	; 0x2492 <fat_find_offset_for_dir_entry+0x98>
        }
        else
        {
            offset += 32;
    25c2:	80 e2       	ldi	r24, 0x20	; 32
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	a0 e0       	ldi	r26, 0x00	; 0
    25c8:	b0 e0       	ldi	r27, 0x00	; 0
    25ca:	e8 0e       	add	r14, r24
    25cc:	f9 1e       	adc	r15, r25
    25ce:	0a 1f       	adc	r16, r26
    25d0:	1b 1f       	adc	r17, r27
    25d2:	5c cf       	rjmp	.-328    	; 0x248c <fat_find_offset_for_dir_entry+0x92>
    25d4:	aa 24       	eor	r10, r10
    25d6:	bb 24       	eor	r11, r11
    25d8:	65 01       	movw	r12, r10
#endif
        }
    }

    return dir_entry_offset;
}
    25da:	b5 01       	movw	r22, r10
    25dc:	c6 01       	movw	r24, r12
    25de:	0f 90       	pop	r0
    25e0:	0f 90       	pop	r0
    25e2:	0f 90       	pop	r0
    25e4:	cf 91       	pop	r28
    25e6:	df 91       	pop	r29
    25e8:	1f 91       	pop	r17
    25ea:	0f 91       	pop	r16
    25ec:	ff 90       	pop	r15
    25ee:	ef 90       	pop	r14
    25f0:	df 90       	pop	r13
    25f2:	cf 90       	pop	r12
    25f4:	bf 90       	pop	r11
    25f6:	af 90       	pop	r10
    25f8:	9f 90       	pop	r9
    25fa:	8f 90       	pop	r8
    25fc:	7f 90       	pop	r7
    25fe:	6f 90       	pop	r6
    2600:	5f 90       	pop	r5
    2602:	4f 90       	pop	r4
    2604:	3f 90       	pop	r3
    2606:	2f 90       	pop	r2
    2608:	08 95       	ret

0000260a <fat_write_dir_entry>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] dir_entry The directory entry to write.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_write_dir_entry(const struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    260a:	3f 92       	push	r3
    260c:	4f 92       	push	r4
    260e:	5f 92       	push	r5
    2610:	6f 92       	push	r6
    2612:	7f 92       	push	r7
    2614:	8f 92       	push	r8
    2616:	9f 92       	push	r9
    2618:	af 92       	push	r10
    261a:	bf 92       	push	r11
    261c:	cf 92       	push	r12
    261e:	df 92       	push	r13
    2620:	ef 92       	push	r14
    2622:	ff 92       	push	r15
    2624:	0f 93       	push	r16
    2626:	1f 93       	push	r17
    2628:	df 93       	push	r29
    262a:	cf 93       	push	r28
    262c:	cd b7       	in	r28, 0x3d	; 61
    262e:	de b7       	in	r29, 0x3e	; 62
    2630:	a0 97       	sbiw	r28, 0x20	; 32
    2632:	0f b6       	in	r0, 0x3f	; 63
    2634:	f8 94       	cli
    2636:	de bf       	out	0x3e, r29	; 62
    2638:	0f be       	out	0x3f, r0	; 63
    263a:	cd bf       	out	0x3d, r28	; 61
    263c:	fc 01       	movw	r30, r24
    263e:	8b 01       	movw	r16, r22
    if(!fs || !dir_entry)
    2640:	00 97       	sbiw	r24, 0x00	; 0
    2642:	09 f4       	brne	.+2      	; 0x2646 <fat_write_dir_entry+0x3c>
    2644:	1f c1       	rjmp	.+574    	; 0x2884 <fat_write_dir_entry+0x27a>
    2646:	61 15       	cp	r22, r1
    2648:	71 05       	cpc	r23, r1
    264a:	09 f4       	brne	.+2      	; 0x264e <fat_write_dir_entry+0x44>
    264c:	1b c1       	rjmp	.+566    	; 0x2884 <fat_write_dir_entry+0x27a>
        fat_set_file_modification_date(dir_entry, year, month, day);
        fat_set_file_modification_time(dir_entry, hour, min, sec);
    }
#endif

    device_write_t device_write = fs->partition->device_write;
    264e:	01 90       	ld	r0, Z+
    2650:	f0 81       	ld	r31, Z
    2652:	e0 2d       	mov	r30, r0
    2654:	44 80       	ldd	r4, Z+4	; 0x04
    2656:	55 80       	ldd	r5, Z+5	; 0x05
    offset_t offset = dir_entry->entry_offset;
    2658:	db 01       	movw	r26, r22
    265a:	97 96       	adiw	r26, 0x27	; 39
    265c:	ad 90       	ld	r10, X+
    265e:	bd 90       	ld	r11, X+
    2660:	cd 90       	ld	r12, X+
    2662:	dc 90       	ld	r13, X
    2664:	9a 97       	sbiw	r26, 0x2a	; 42
    const char* name = dir_entry->long_name;
    2666:	e6 2e       	mov	r14, r22
    2668:	91 2e       	mov	r9, r17
    uint8_t name_len = strlen(name);
    266a:	fb 01       	movw	r30, r22
    266c:	01 90       	ld	r0, Z+
    266e:	00 20       	and	r0, r0
    2670:	e9 f7       	brne	.-6      	; 0x266c <fat_write_dir_entry+0x62>
    2672:	31 97       	sbiw	r30, 0x01	; 1
    2674:	fe 2e       	mov	r15, r30
    2676:	f6 1a       	sub	r15, r22
#if FAT_LFN_SUPPORT
    uint8_t lfn_entry_count = (name_len + 12) / 13;
    2678:	8f 2d       	mov	r24, r15
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	0c 96       	adiw	r24, 0x0c	; 12
    267e:	6d e0       	ldi	r22, 0x0D	; 13
    2680:	70 e0       	ldi	r23, 0x00	; 0
    2682:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__divmodhi4>
    2686:	76 2e       	mov	r7, r22
    uint8_t buffer[32];

    /* write 8.3 entry */

    /* generate 8.3 file name */
    memset(&buffer[0], ' ', 11);
    2688:	ce 01       	movw	r24, r28
    268a:	01 96       	adiw	r24, 0x01	; 1
    268c:	60 e2       	ldi	r22, 0x20	; 32
    268e:	70 e0       	ldi	r23, 0x00	; 0
    2690:	4b e0       	ldi	r20, 0x0B	; 11
    2692:	50 e0       	ldi	r21, 0x00	; 0
    2694:	0e 94 04 1c 	call	0x3808	; 0x3808 <memset>
    char* name_ext = strrchr(name, '.');
    2698:	c8 01       	movw	r24, r16
    269a:	6e e2       	ldi	r22, 0x2E	; 46
    269c:	70 e0       	ldi	r23, 0x00	; 0
    269e:	0e 94 3c 1c 	call	0x3878	; 0x3878 <strrchr>
    26a2:	fc 01       	movw	r30, r24
    if(name_ext && *++name_ext)
    26a4:	00 97       	sbiw	r24, 0x00	; 0
    26a6:	e1 f0       	breq	.+56     	; 0x26e0 <fat_write_dir_entry+0xd6>
    26a8:	9c 01       	movw	r18, r24
    26aa:	2f 5f       	subi	r18, 0xFF	; 255
    26ac:	3f 4f       	sbci	r19, 0xFF	; 255
    26ae:	81 81       	ldd	r24, Z+1	; 0x01
    26b0:	88 23       	and	r24, r24
    26b2:	b1 f0       	breq	.+44     	; 0x26e0 <fat_write_dir_entry+0xd6>
    {
        uint8_t name_ext_len = strlen(name_ext);
    26b4:	d9 01       	movw	r26, r18
    26b6:	0d 90       	ld	r0, X+
    26b8:	00 20       	and	r0, r0
    26ba:	e9 f7       	brne	.-6      	; 0x26b6 <fat_write_dir_entry+0xac>
    26bc:	11 97       	sbiw	r26, 0x01	; 1
    26be:	a2 1b       	sub	r26, r18
    26c0:	b3 0b       	sbc	r27, r19
        name_len -= name_ext_len + 1;
    26c2:	8a 2f       	mov	r24, r26
    26c4:	80 95       	com	r24
    26c6:	f8 0e       	add	r15, r24
            name_ext_len = 3;
#else
            return 0;
#endif
        
        memcpy(&buffer[8], name_ext, name_ext_len);
    26c8:	be 01       	movw	r22, r28
    26ca:	67 5f       	subi	r22, 0xF7	; 247
    26cc:	7f 4f       	sbci	r23, 0xFF	; 255
    26ce:	4a 2f       	mov	r20, r26
    26d0:	a4 30       	cpi	r26, 0x04	; 4
    26d2:	08 f0       	brcs	.+2      	; 0x26d6 <fat_write_dir_entry+0xcc>
    26d4:	43 e0       	ldi	r20, 0x03	; 3
    26d6:	cb 01       	movw	r24, r22
    26d8:	b9 01       	movw	r22, r18
    26da:	50 e0       	ldi	r21, 0x00	; 0
    26dc:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <memcpy>
    26e0:	ce 01       	movw	r24, r28
    26e2:	01 96       	adiw	r24, 0x01	; 1
    }
    
    if(name_len <= 8)
    26e4:	b8 e0       	ldi	r27, 0x08	; 8
    26e6:	bf 15       	cp	r27, r15
    26e8:	88 f0       	brcs	.+34     	; 0x270c <fat_write_dir_entry+0x102>
    {
        memcpy(buffer, name, name_len);
    26ea:	6e 2d       	mov	r22, r14
    26ec:	79 2d       	mov	r23, r9
    26ee:	4f 2d       	mov	r20, r15
    26f0:	50 e0       	ldi	r21, 0x00	; 0
    26f2:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <memcpy>
         *
         * Theoretically it would be possible to leave
         * the 8.3 entry alone if the basename and the
         * extension have no mixed capitalization.
         */
        if(name[0] == '.' &&
    26f6:	f8 01       	movw	r30, r16
    26f8:	80 81       	ld	r24, Z
    26fa:	8e 32       	cpi	r24, 0x2E	; 46
    26fc:	31 f5       	brne	.+76     	; 0x274a <fat_write_dir_entry+0x140>
    26fe:	81 81       	ldd	r24, Z+1	; 0x01
    2700:	8e 32       	cpi	r24, 0x2E	; 46
    2702:	09 f4       	brne	.+2      	; 0x2706 <fat_write_dir_entry+0xfc>
    2704:	82 81       	ldd	r24, Z+2	; 0x02
    2706:	88 23       	and	r24, r24
    2708:	f9 f0       	breq	.+62     	; 0x2748 <fat_write_dir_entry+0x13e>
    270a:	1f c0       	rjmp	.+62     	; 0x274a <fat_write_dir_entry+0x140>
#endif
    }
    else
    {
#if FAT_LFN_SUPPORT
        memcpy(buffer, name, 8);
    270c:	dc 01       	movw	r26, r24
    270e:	8e 2d       	mov	r24, r14
    2710:	99 2d       	mov	r25, r9
    2712:	9c 01       	movw	r18, r24
    2714:	f9 01       	movw	r30, r18
    2716:	88 e0       	ldi	r24, 0x08	; 8
    2718:	01 90       	ld	r0, Z+
    271a:	0d 92       	st	X+, r0
    271c:	81 50       	subi	r24, 0x01	; 1
    271e:	e1 f7       	brne	.-8      	; 0x2718 <fat_write_dir_entry+0x10e>

        /* Minimize 8.3 name clashes by appending
         * the lower byte of the cluster number.
         */
        uint8_t num = dir_entry->cluster & 0xff;
    2720:	d8 01       	movw	r26, r16
    2722:	91 96       	adiw	r26, 0x21	; 33
    2724:	8c 91       	ld	r24, X
    2726:	98 2f       	mov	r25, r24
    2728:	92 95       	swap	r25
    272a:	9f 70       	andi	r25, 0x0F	; 15

        buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
    272c:	80 3a       	cpi	r24, 0xA0	; 160
    272e:	10 f4       	brcc	.+4      	; 0x2734 <fat_write_dir_entry+0x12a>
    2730:	90 5d       	subi	r25, 0xD0	; 208
    2732:	01 c0       	rjmp	.+2      	; 0x2736 <fat_write_dir_entry+0x12c>
    2734:	9f 59       	subi	r25, 0x9F	; 159
        num &= 0x0f;
    2736:	8f 70       	andi	r24, 0x0F	; 15
        buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
    2738:	8a 30       	cpi	r24, 0x0A	; 10
    273a:	10 f4       	brcc	.+4      	; 0x2740 <fat_write_dir_entry+0x136>
    273c:	80 5d       	subi	r24, 0xD0	; 208
    273e:	01 c0       	rjmp	.+2      	; 0x2742 <fat_write_dir_entry+0x138>
    2740:	8f 59       	subi	r24, 0x9F	; 159
        /* Minimize 8.3 name clashes by appending
         * the lower byte of the cluster number.
         */
        uint8_t num = dir_entry->cluster & 0xff;

        buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
    2742:	9f 83       	std	Y+7, r25	; 0x07
        num &= 0x0f;
        buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
    2744:	88 87       	std	Y+8, r24	; 0x08
    2746:	01 c0       	rjmp	.+2      	; 0x274a <fat_write_dir_entry+0x140>
    2748:	77 24       	eor	r7, r7
#else
        return 0;
#endif
    }
    if(buffer[0] == FAT_DIRENTRY_DELETED)
    274a:	89 81       	ldd	r24, Y+1	; 0x01
    274c:	85 3e       	cpi	r24, 0xE5	; 229
    274e:	11 f4       	brne	.+4      	; 0x2754 <fat_write_dir_entry+0x14a>
        buffer[0] = 0x05;
    2750:	85 e0       	ldi	r24, 0x05	; 5
    2752:	89 83       	std	Y+1, r24	; 0x01

    /* fill directory entry buffer */
    memset(&buffer[11], 0, sizeof(buffer) - 11);
    2754:	8c e0       	ldi	r24, 0x0C	; 12
    2756:	88 2e       	mov	r8, r24
    2758:	91 2c       	mov	r9, r1
    275a:	8c 0e       	add	r8, r28
    275c:	9d 1e       	adc	r9, r29
    275e:	85 e1       	ldi	r24, 0x15	; 21
    2760:	f4 01       	movw	r30, r8
    2762:	11 92       	st	Z+, r1
    2764:	8a 95       	dec	r24
    2766:	e9 f7       	brne	.-6      	; 0x2762 <fat_write_dir_entry+0x158>
    buffer[0x0b] = dir_entry->attributes;
    2768:	d8 01       	movw	r26, r16
    276a:	90 96       	adiw	r26, 0x20	; 32
    276c:	8c 91       	ld	r24, X
    276e:	90 97       	sbiw	r26, 0x20	; 32
    2770:	8c 87       	std	Y+12, r24	; 0x0c
    *((uint16_t*) &buffer[0x18]) = htol16(dir_entry->modification_date);
#endif
#if FAT_FAT32_SUPPORT
    *((uint16_t*) &buffer[0x14]) = htol16((uint16_t) (dir_entry->cluster >> 16));
#endif
    *((uint16_t*) &buffer[0x1a]) = htol16(dir_entry->cluster);
    2772:	91 96       	adiw	r26, 0x21	; 33
    2774:	8d 91       	ld	r24, X+
    2776:	9c 91       	ld	r25, X
    2778:	92 97       	sbiw	r26, 0x22	; 34
    277a:	9c 8f       	std	Y+28, r25	; 0x1c
    277c:	8b 8f       	std	Y+27, r24	; 0x1b
    *((uint32_t*) &buffer[0x1c]) = htol32(dir_entry->file_size);
    277e:	93 96       	adiw	r26, 0x23	; 35
    2780:	8d 91       	ld	r24, X+
    2782:	9d 91       	ld	r25, X+
    2784:	0d 90       	ld	r0, X+
    2786:	bc 91       	ld	r27, X
    2788:	a0 2d       	mov	r26, r0
    278a:	8d 8f       	std	Y+29, r24	; 0x1d
    278c:	9e 8f       	std	Y+30, r25	; 0x1e
    278e:	af 8f       	std	Y+31, r26	; 0x1f
    2790:	b8 a3       	std	Y+32, r27	; 0x20

    /* write to disk */
#if FAT_LFN_SUPPORT
    if(!device_write(offset + (uint16_t) lfn_entry_count * 32, buffer, sizeof(buffer)))
    2792:	67 2d       	mov	r22, r7
    2794:	70 e0       	ldi	r23, 0x00	; 0
    2796:	b5 e0       	ldi	r27, 0x05	; 5
    2798:	66 0f       	add	r22, r22
    279a:	77 1f       	adc	r23, r23
    279c:	ba 95       	dec	r27
    279e:	e1 f7       	brne	.-8      	; 0x2798 <fat_write_dir_entry+0x18e>
    27a0:	80 e0       	ldi	r24, 0x00	; 0
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	6a 0d       	add	r22, r10
    27a6:	7b 1d       	adc	r23, r11
    27a8:	8c 1d       	adc	r24, r12
    27aa:	9d 1d       	adc	r25, r13
    27ac:	ae 01       	movw	r20, r28
    27ae:	4f 5f       	subi	r20, 0xFF	; 255
    27b0:	5f 4f       	sbci	r21, 0xFF	; 255
    27b2:	20 e2       	ldi	r18, 0x20	; 32
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	f2 01       	movw	r30, r4
    27b8:	09 95       	icall
    27ba:	88 23       	and	r24, r24
    27bc:	09 f4       	brne	.+2      	; 0x27c0 <fat_write_dir_entry+0x1b6>
    27be:	62 c0       	rjmp	.+196    	; 0x2884 <fat_write_dir_entry+0x27a>
 * \param[in] file_name_83 The 11-byte file name buffer.
 * \returns The checksum of the given file name.
 */
uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
{
    uint8_t checksum = file_name_83[0];
    27c0:	e9 80       	ldd	r14, Y+1	; 0x01
    27c2:	fe 01       	movw	r30, r28
    27c4:	32 96       	adiw	r30, 0x02	; 2
    for(uint8_t i = 1; i < 11; ++i)
    27c6:	94 01       	movw	r18, r8
        checksum = ((checksum >> 1) | (checksum << 7)) + file_name_83[i];
    27c8:	8e 2d       	mov	r24, r14
    27ca:	86 95       	lsr	r24
    27cc:	e7 94       	ror	r14
    27ce:	ee 24       	eor	r14, r14
    27d0:	e7 94       	ror	r14
    27d2:	e8 2a       	or	r14, r24
    27d4:	81 91       	ld	r24, Z+
    27d6:	e8 0e       	add	r14, r24
 * \returns The checksum of the given file name.
 */
uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
{
    uint8_t checksum = file_name_83[0];
    for(uint8_t i = 1; i < 11; ++i)
    27d8:	e2 17       	cp	r30, r18
    27da:	f3 07       	cpc	r31, r19
    27dc:	a9 f7       	brne	.-22     	; 0x27c8 <fat_write_dir_entry+0x1be>
    27de:	f7 2c       	mov	r15, r7
    uint8_t checksum = fat_calc_83_checksum(buffer);
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    {
        memset(buffer, 0xff, sizeof(buffer));
    27e0:	4e 01       	movw	r8, r28
    27e2:	08 94       	sec
    27e4:	81 1c       	adc	r8, r1
    27e6:	91 1c       	adc	r9, r1
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
    27e8:	ad e0       	ldi	r26, 0x0D	; 13
    27ea:	3a 2e       	mov	r3, r26
        buffer[0x00] = lfn_entry;
        if(lfn_entry == lfn_entry_count)
            buffer[0x00] |= FAT_DIRENTRY_LFNLAST;

        /* mark as lfn entry */
        buffer[0x0b] = 0x0f;
    27ec:	ff e0       	ldi	r31, 0x0F	; 15
    27ee:	6f 2e       	mov	r6, r31
    27f0:	44 c0       	rjmp	.+136    	; 0x287a <fat_write_dir_entry+0x270>
    uint8_t checksum = fat_calc_83_checksum(buffer);
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    {
        memset(buffer, 0xff, sizeof(buffer));
    27f2:	c4 01       	movw	r24, r8
    27f4:	6f ef       	ldi	r22, 0xFF	; 255
    27f6:	70 e0       	ldi	r23, 0x00	; 0
    27f8:	40 e2       	ldi	r20, 0x20	; 32
    27fa:	50 e0       	ldi	r21, 0x00	; 0
    27fc:	0e 94 04 1c 	call	0x3808	; 0x3808 <memset>
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
    2800:	f3 9c       	mul	r15, r3
    2802:	d0 01       	movw	r26, r0
    2804:	11 24       	eor	r1, r1
    2806:	1d 97       	sbiw	r26, 0x0d	; 13
    2808:	a0 0f       	add	r26, r16
    280a:	b1 1f       	adc	r27, r17
    280c:	91 e0       	ldi	r25, 0x01	; 1
        uint8_t i = 1;
        while(i < 0x1f)
        {
            buffer[i++] = *long_name_curr;
    280e:	f4 01       	movw	r30, r8
    2810:	e9 0f       	add	r30, r25
    2812:	f1 1d       	adc	r31, r1
    2814:	8c 91       	ld	r24, X
    2816:	80 83       	st	Z, r24
    2818:	89 2f       	mov	r24, r25
    281a:	8f 5f       	subi	r24, 0xFF	; 255
            buffer[i++] = 0;
    281c:	f4 01       	movw	r30, r8
    281e:	e8 0f       	add	r30, r24
    2820:	f1 1d       	adc	r31, r1
    2822:	10 82       	st	Z, r1
    2824:	9e 5f       	subi	r25, 0xFE	; 254

            switch(i)
    2826:	9b 30       	cpi	r25, 0x0B	; 11
    2828:	19 f0       	breq	.+6      	; 0x2830 <fat_write_dir_entry+0x226>
    282a:	9a 31       	cpi	r25, 0x1A	; 26
    282c:	21 f4       	brne	.+8      	; 0x2836 <fat_write_dir_entry+0x22c>
    282e:	02 c0       	rjmp	.+4      	; 0x2834 <fat_write_dir_entry+0x22a>
    2830:	9e e0       	ldi	r25, 0x0E	; 14
    2832:	01 c0       	rjmp	.+2      	; 0x2836 <fat_write_dir_entry+0x22c>
    2834:	9c e1       	ldi	r25, 0x1C	; 28
                case 0x1a:
                    i = 0x1c;
                    break;
            }

            if(!*long_name_curr++)
    2836:	8c 91       	ld	r24, X
    2838:	88 23       	and	r24, r24
    283a:	21 f0       	breq	.+8      	; 0x2844 <fat_write_dir_entry+0x23a>
        memset(buffer, 0xff, sizeof(buffer));
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
        uint8_t i = 1;
        while(i < 0x1f)
    283c:	9f 31       	cpi	r25, 0x1F	; 31
    283e:	10 f4       	brcc	.+4      	; 0x2844 <fat_write_dir_entry+0x23a>
                case 0x1a:
                    i = 0x1c;
                    break;
            }

            if(!*long_name_curr++)
    2840:	11 96       	adiw	r26, 0x01	; 1
    2842:	e5 cf       	rjmp	.-54     	; 0x280e <fat_write_dir_entry+0x204>
                break;
        }
        
        /* set index of lfn entry */
        buffer[0x00] = lfn_entry;
    2844:	f9 82       	std	Y+1, r15	; 0x01
        if(lfn_entry == lfn_entry_count)
    2846:	f7 14       	cp	r15, r7
    2848:	19 f4       	brne	.+6      	; 0x2850 <fat_write_dir_entry+0x246>
            buffer[0x00] |= FAT_DIRENTRY_LFNLAST;
    284a:	8f 2d       	mov	r24, r15
    284c:	80 64       	ori	r24, 0x40	; 64
    284e:	89 83       	std	Y+1, r24	; 0x01

        /* mark as lfn entry */
        buffer[0x0b] = 0x0f;
    2850:	6c 86       	std	Y+12, r6	; 0x0c

        /* set 8.3 checksum */
        buffer[0x0d] = checksum;
    2852:	ee 86       	std	Y+14, r14	; 0x0e

        /* clear reserved bytes */
        buffer[0x0c] = 0;
    2854:	1d 86       	std	Y+13, r1	; 0x0d
        buffer[0x1a] = 0;
    2856:	1b 8e       	std	Y+27, r1	; 0x1b
        buffer[0x1b] = 0;
    2858:	1c 8e       	std	Y+28, r1	; 0x1c

        /* write entry */
        device_write(offset, buffer, sizeof(buffer));
    285a:	c6 01       	movw	r24, r12
    285c:	b5 01       	movw	r22, r10
    285e:	a4 01       	movw	r20, r8
    2860:	20 e2       	ldi	r18, 0x20	; 32
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	f2 01       	movw	r30, r4
    2866:	09 95       	icall
    
        offset += sizeof(buffer);
    2868:	80 e2       	ldi	r24, 0x20	; 32
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	a0 e0       	ldi	r26, 0x00	; 0
    286e:	b0 e0       	ldi	r27, 0x00	; 0
    2870:	a8 0e       	add	r10, r24
    2872:	b9 1e       	adc	r11, r25
    2874:	ca 1e       	adc	r12, r26
    2876:	db 1e       	adc	r13, r27
#if FAT_LFN_SUPPORT
    /* calculate checksum of 8.3 name */
    uint8_t checksum = fat_calc_83_checksum(buffer);
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    2878:	fa 94       	dec	r15
    287a:	ff 20       	and	r15, r15
    287c:	09 f0       	breq	.+2      	; 0x2880 <fat_write_dir_entry+0x276>
    287e:	b9 cf       	rjmp	.-142    	; 0x27f2 <fat_write_dir_entry+0x1e8>
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	01 c0       	rjmp	.+2      	; 0x2886 <fat_write_dir_entry+0x27c>
    2884:	80 e0       	ldi	r24, 0x00	; 0
        offset += sizeof(buffer);
    }
#endif
    
    return 1;
}
    2886:	a0 96       	adiw	r28, 0x20	; 32
    2888:	0f b6       	in	r0, 0x3f	; 63
    288a:	f8 94       	cli
    288c:	de bf       	out	0x3e, r29	; 62
    288e:	0f be       	out	0x3f, r0	; 63
    2890:	cd bf       	out	0x3d, r28	; 61
    2892:	cf 91       	pop	r28
    2894:	df 91       	pop	r29
    2896:	1f 91       	pop	r17
    2898:	0f 91       	pop	r16
    289a:	ff 90       	pop	r15
    289c:	ef 90       	pop	r14
    289e:	df 90       	pop	r13
    28a0:	cf 90       	pop	r12
    28a2:	bf 90       	pop	r11
    28a4:	af 90       	pop	r10
    28a6:	9f 90       	pop	r9
    28a8:	8f 90       	pop	r8
    28aa:	7f 90       	pop	r7
    28ac:	6f 90       	pop	r6
    28ae:	5f 90       	pop	r5
    28b0:	4f 90       	pop	r4
    28b2:	3f 90       	pop	r3
    28b4:	08 95       	ret

000028b6 <fat_create_dir>:
 * \param[out] dir_entry The directory entry to fill for the new directory.
 * \returns 0 on failure, 1 on success.
 * \see fat_delete_dir
 */
uint8_t fat_create_dir(struct fat_dir_struct* parent, const char* dir, struct fat_dir_entry_struct* dir_entry)
{
    28b6:	7f 92       	push	r7
    28b8:	8f 92       	push	r8
    28ba:	9f 92       	push	r9
    28bc:	af 92       	push	r10
    28be:	bf 92       	push	r11
    28c0:	cf 92       	push	r12
    28c2:	df 92       	push	r13
    28c4:	ef 92       	push	r14
    28c6:	ff 92       	push	r15
    28c8:	0f 93       	push	r16
    28ca:	1f 93       	push	r17
    28cc:	cf 93       	push	r28
    28ce:	df 93       	push	r29
    28d0:	6c 01       	movw	r12, r24
    28d2:	5b 01       	movw	r10, r22
    28d4:	ea 01       	movw	r28, r20
    if(!parent || !dir || !dir[0] || !dir_entry)
    28d6:	00 97       	sbiw	r24, 0x00	; 0
    28d8:	09 f4       	brne	.+2      	; 0x28dc <fat_create_dir+0x26>
    28da:	9d c0       	rjmp	.+314    	; 0x2a16 <fat_create_dir+0x160>
    28dc:	61 15       	cp	r22, r1
    28de:	71 05       	cpc	r23, r1
    28e0:	09 f4       	brne	.+2      	; 0x28e4 <fat_create_dir+0x2e>
    28e2:	99 c0       	rjmp	.+306    	; 0x2a16 <fat_create_dir+0x160>
    28e4:	fb 01       	movw	r30, r22
    28e6:	80 81       	ld	r24, Z
    28e8:	88 23       	and	r24, r24
    28ea:	09 f4       	brne	.+2      	; 0x28ee <fat_create_dir+0x38>
    28ec:	94 c0       	rjmp	.+296    	; 0x2a16 <fat_create_dir+0x160>
    28ee:	41 15       	cp	r20, r1
    28f0:	51 05       	cpc	r21, r1
    28f2:	81 f4       	brne	.+32     	; 0x2914 <fat_create_dir+0x5e>
    28f4:	90 c0       	rjmp	.+288    	; 0x2a16 <fat_create_dir+0x160>
        return 0;

    /* check if the file or directory already exists */
    while(fat_read_dir(parent, dir_entry))
    {
        if(strcmp(dir, dir_entry->long_name) == 0)
    28f6:	c5 01       	movw	r24, r10
    28f8:	68 2d       	mov	r22, r8
    28fa:	77 2d       	mov	r23, r7
    28fc:	0e 94 16 1c 	call	0x382c	; 0x382c <strcmp>
    2900:	00 97       	sbiw	r24, 0x00	; 0
    2902:	51 f4       	brne	.+20     	; 0x2918 <fat_create_dir+0x62>
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    2904:	f6 01       	movw	r30, r12
    2906:	83 a1       	ldd	r24, Z+35	; 0x23
    2908:	94 a1       	ldd	r25, Z+36	; 0x24
    290a:	96 a7       	std	Z+46, r25	; 0x2e
    290c:	85 a7       	std	Z+45, r24	; 0x2d
    dd->entry_offset = 0;
    290e:	10 aa       	std	Z+48, r1	; 0x30
    2910:	17 a6       	std	Z+47, r1	; 0x2f
    2912:	81 c0       	rjmp	.+258    	; 0x2a16 <fat_create_dir+0x160>
        return 0;

    /* check if the file or directory already exists */
    while(fat_read_dir(parent, dir_entry))
    {
        if(strcmp(dir, dir_entry->long_name) == 0)
    2914:	84 2e       	mov	r8, r20
    2916:	7d 2e       	mov	r7, r29
{
    if(!parent || !dir || !dir[0] || !dir_entry)
        return 0;

    /* check if the file or directory already exists */
    while(fat_read_dir(parent, dir_entry))
    2918:	c6 01       	movw	r24, r12
    291a:	be 01       	movw	r22, r28
    291c:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <fat_read_dir>
    2920:	88 23       	and	r24, r24
    2922:	49 f7       	brne	.-46     	; 0x28f6 <fat_create_dir+0x40>
            fat_reset_dir(parent);
            return 0;
        }
    }

    struct fat_fs_struct* fs = parent->fs;
    2924:	f6 01       	movw	r30, r12
    2926:	e0 80       	ld	r14, Z
    2928:	f1 80       	ldd	r15, Z+1	; 0x01

    /* allocate cluster which will hold directory entries */
    cluster_t dir_cluster = fat_append_clusters(fs, 0, 1);
    292a:	c7 01       	movw	r24, r14
    292c:	60 e0       	ldi	r22, 0x00	; 0
    292e:	70 e0       	ldi	r23, 0x00	; 0
    2930:	41 e0       	ldi	r20, 0x01	; 1
    2932:	50 e0       	ldi	r21, 0x00	; 0
    2934:	0e 94 85 03 	call	0x70a	; 0x70a <fat_append_clusters>
    2938:	8c 01       	movw	r16, r24
    if(!dir_cluster)
    293a:	00 97       	sbiw	r24, 0x00	; 0
    293c:	09 f4       	brne	.+2      	; 0x2940 <fat_create_dir+0x8a>
    293e:	6b c0       	rjmp	.+214    	; 0x2a16 <fat_create_dir+0x160>
        return 0;

    /* clear cluster to prevent bogus directory entries */
    fat_clear_cluster(fs, dir_cluster);
    2940:	c7 01       	movw	r24, r14
    2942:	b8 01       	movw	r22, r16
    2944:	0e 94 90 09 	call	0x1320	; 0x1320 <fat_clear_cluster>
    
    memset(dir_entry, 0, sizeof(*dir_entry));
    2948:	8b e2       	ldi	r24, 0x2B	; 43
    294a:	fe 01       	movw	r30, r28
    294c:	11 92       	st	Z+, r1
    294e:	8a 95       	dec	r24
    2950:	e9 f7       	brne	.-6      	; 0x294c <fat_create_dir+0x96>
    dir_entry->attributes = FAT_ATTRIB_DIR;
    2952:	80 e1       	ldi	r24, 0x10	; 16
    2954:	88 a3       	std	Y+32, r24	; 0x20

    /* create "." directory self reference */
    dir_entry->entry_offset = fs->header.cluster_zero_offset +
    2956:	02 50       	subi	r16, 0x02	; 2
    2958:	10 40       	sbci	r17, 0x00	; 0
    295a:	b8 01       	movw	r22, r16
    295c:	80 e0       	ldi	r24, 0x00	; 0
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	0e 5f       	subi	r16, 0xFE	; 254
    2962:	1f 4f       	sbci	r17, 0xFF	; 255
    2964:	f7 01       	movw	r30, r14
    2966:	20 89       	ldd	r18, Z+16	; 0x10
    2968:	31 89       	ldd	r19, Z+17	; 0x11
    296a:	40 e0       	ldi	r20, 0x00	; 0
    296c:	50 e0       	ldi	r21, 0x00	; 0
    296e:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <__mulsi3>
    2972:	f7 01       	movw	r30, r14
    2974:	22 89       	ldd	r18, Z+18	; 0x12
    2976:	33 89       	ldd	r19, Z+19	; 0x13
    2978:	44 89       	ldd	r20, Z+20	; 0x14
    297a:	55 89       	ldd	r21, Z+21	; 0x15
    297c:	26 0f       	add	r18, r22
    297e:	37 1f       	adc	r19, r23
    2980:	48 1f       	adc	r20, r24
    2982:	59 1f       	adc	r21, r25
    2984:	2f a3       	std	Y+39, r18	; 0x27
    2986:	38 a7       	std	Y+40, r19	; 0x28
    2988:	49 a7       	std	Y+41, r20	; 0x29
    298a:	5a a7       	std	Y+42, r21	; 0x2a
                              (offset_t) (dir_cluster - 2) * fs->header.cluster_size;
    dir_entry->long_name[0] = '.';
    298c:	9e e2       	ldi	r25, 0x2E	; 46
    298e:	99 2e       	mov	r9, r25
    2990:	98 82       	st	Y, r9
    dir_entry->cluster = dir_cluster;
    2992:	1a a3       	std	Y+34, r17	; 0x22
    2994:	09 a3       	std	Y+33, r16	; 0x21
    if(!fat_write_dir_entry(fs, dir_entry))
    2996:	c7 01       	movw	r24, r14
    2998:	be 01       	movw	r22, r28
    299a:	0e 94 05 13 	call	0x260a	; 0x260a <fat_write_dir_entry>
    299e:	88 23       	and	r24, r24
    29a0:	b1 f1       	breq	.+108    	; 0x2a0e <fat_create_dir+0x158>
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    /* create ".." parent directory reference */
    dir_entry->entry_offset += 32;
    29a2:	8f a1       	ldd	r24, Y+39	; 0x27
    29a4:	98 a5       	ldd	r25, Y+40	; 0x28
    29a6:	a9 a5       	ldd	r26, Y+41	; 0x29
    29a8:	ba a5       	ldd	r27, Y+42	; 0x2a
    29aa:	80 96       	adiw	r24, 0x20	; 32
    29ac:	a1 1d       	adc	r26, r1
    29ae:	b1 1d       	adc	r27, r1
    29b0:	8f a3       	std	Y+39, r24	; 0x27
    29b2:	98 a7       	std	Y+40, r25	; 0x28
    29b4:	a9 a7       	std	Y+41, r26	; 0x29
    29b6:	ba a7       	std	Y+42, r27	; 0x2a
    dir_entry->long_name[1] = '.';
    29b8:	99 82       	std	Y+1, r9	; 0x01
    dir_entry->cluster = parent->dir_entry.cluster;
    29ba:	f6 01       	movw	r30, r12
    29bc:	83 a1       	ldd	r24, Z+35	; 0x23
    29be:	94 a1       	ldd	r25, Z+36	; 0x24
    29c0:	9a a3       	std	Y+34, r25	; 0x22
    29c2:	89 a3       	std	Y+33, r24	; 0x21
    if(!fat_write_dir_entry(fs, dir_entry))
    29c4:	c7 01       	movw	r24, r14
    29c6:	be 01       	movw	r22, r28
    29c8:	0e 94 05 13 	call	0x260a	; 0x260a <fat_write_dir_entry>
    29cc:	88 23       	and	r24, r24
    29ce:	f9 f0       	breq	.+62     	; 0x2a0e <fat_create_dir+0x158>
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    /* fill directory entry */
    strncpy(dir_entry->long_name, dir, sizeof(dir_entry->long_name) - 1);
    29d0:	88 2d       	mov	r24, r8
    29d2:	97 2d       	mov	r25, r7
    29d4:	b5 01       	movw	r22, r10
    29d6:	4f e1       	ldi	r20, 0x1F	; 31
    29d8:	50 e0       	ldi	r21, 0x00	; 0
    29da:	0e 94 2d 1c 	call	0x385a	; 0x385a <strncpy>
    dir_entry->cluster = dir_cluster;
    29de:	1a a3       	std	Y+34, r17	; 0x22
    29e0:	09 a3       	std	Y+33, r16	; 0x21

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
    29e2:	c7 01       	movw	r24, r14
    29e4:	b6 01       	movw	r22, r12
    29e6:	ae 01       	movw	r20, r28
    29e8:	0e 94 fd 11 	call	0x23fa	; 0x23fa <fat_find_offset_for_dir_entry>
    29ec:	6f a3       	std	Y+39, r22	; 0x27
    29ee:	78 a7       	std	Y+40, r23	; 0x28
    29f0:	89 a7       	std	Y+41, r24	; 0x29
    29f2:	9a a7       	std	Y+42, r25	; 0x2a
    29f4:	61 15       	cp	r22, r1
    29f6:	71 05       	cpc	r23, r1
    29f8:	81 05       	cpc	r24, r1
    29fa:	91 05       	cpc	r25, r1
    29fc:	41 f0       	breq	.+16     	; 0x2a0e <fat_create_dir+0x158>
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    /* write directory to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
    29fe:	c7 01       	movw	r24, r14
    2a00:	be 01       	movw	r22, r28
    2a02:	0e 94 05 13 	call	0x260a	; 0x260a <fat_write_dir_entry>
    2a06:	88 23       	and	r24, r24
    2a08:	11 f0       	breq	.+4      	; 0x2a0e <fat_create_dir+0x158>
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	05 c0       	rjmp	.+10     	; 0x2a18 <fat_create_dir+0x162>
    {
        fat_free_clusters(fs, dir_cluster);
    2a0e:	c7 01       	movw	r24, r14
    2a10:	b8 01       	movw	r22, r16
    2a12:	0e 94 0f 03 	call	0x61e	; 0x61e <fat_free_clusters>
        return 0;
    2a16:	80 e0       	ldi	r24, 0x00	; 0
    }

    return 1;
}
    2a18:	df 91       	pop	r29
    2a1a:	cf 91       	pop	r28
    2a1c:	1f 91       	pop	r17
    2a1e:	0f 91       	pop	r16
    2a20:	ff 90       	pop	r15
    2a22:	ef 90       	pop	r14
    2a24:	df 90       	pop	r13
    2a26:	cf 90       	pop	r12
    2a28:	bf 90       	pop	r11
    2a2a:	af 90       	pop	r10
    2a2c:	9f 90       	pop	r9
    2a2e:	8f 90       	pop	r8
    2a30:	7f 90       	pop	r7
    2a32:	08 95       	ret

00002a34 <fat_create_file>:
 * \param[out] dir_entry The directory entry to fill for the new file.
 * \returns 0 on failure, 1 on success.
 * \see fat_delete_file
 */
uint8_t fat_create_file(struct fat_dir_struct* parent, const char* file, struct fat_dir_entry_struct* dir_entry)
{
    2a34:	af 92       	push	r10
    2a36:	bf 92       	push	r11
    2a38:	cf 92       	push	r12
    2a3a:	df 92       	push	r13
    2a3c:	ef 92       	push	r14
    2a3e:	ff 92       	push	r15
    2a40:	0f 93       	push	r16
    2a42:	1f 93       	push	r17
    2a44:	cf 93       	push	r28
    2a46:	df 93       	push	r29
    2a48:	8c 01       	movw	r16, r24
    2a4a:	7b 01       	movw	r14, r22
    2a4c:	ea 01       	movw	r28, r20
    if(!parent || !file || !file[0] || !dir_entry)
    2a4e:	00 97       	sbiw	r24, 0x00	; 0
    2a50:	09 f4       	brne	.+2      	; 0x2a54 <fat_create_file+0x20>
    2a52:	48 c0       	rjmp	.+144    	; 0x2ae4 <fat_create_file+0xb0>
    2a54:	61 15       	cp	r22, r1
    2a56:	71 05       	cpc	r23, r1
    2a58:	09 f4       	brne	.+2      	; 0x2a5c <fat_create_file+0x28>
    2a5a:	44 c0       	rjmp	.+136    	; 0x2ae4 <fat_create_file+0xb0>
    2a5c:	fb 01       	movw	r30, r22
    2a5e:	80 81       	ld	r24, Z
    2a60:	88 23       	and	r24, r24
    2a62:	09 f4       	brne	.+2      	; 0x2a66 <fat_create_file+0x32>
    2a64:	3f c0       	rjmp	.+126    	; 0x2ae4 <fat_create_file+0xb0>
    2a66:	41 15       	cp	r20, r1
    2a68:	51 05       	cpc	r21, r1
    2a6a:	e1 f1       	breq	.+120    	; 0x2ae4 <fat_create_file+0xb0>
    while(1)
    {
        if(!fat_read_dir(parent, dir_entry))
            break;

        if(strcmp(file, dir_entry->long_name) == 0)
    2a6c:	b4 2e       	mov	r11, r20
    2a6e:	ad 2e       	mov	r10, r29
        return 0;

    /* check if the file already exists */
    while(1)
    {
        if(!fat_read_dir(parent, dir_entry))
    2a70:	c8 01       	movw	r24, r16
    2a72:	be 01       	movw	r22, r28
    2a74:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <fat_read_dir>
    2a78:	88 23       	and	r24, r24
    2a7a:	79 f0       	breq	.+30     	; 0x2a9a <fat_create_file+0x66>
            break;

        if(strcmp(file, dir_entry->long_name) == 0)
    2a7c:	c7 01       	movw	r24, r14
    2a7e:	6b 2d       	mov	r22, r11
    2a80:	7a 2d       	mov	r23, r10
    2a82:	0e 94 16 1c 	call	0x382c	; 0x382c <strcmp>
    2a86:	00 97       	sbiw	r24, 0x00	; 0
    2a88:	99 f7       	brne	.-26     	; 0x2a70 <fat_create_file+0x3c>
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    2a8a:	f8 01       	movw	r30, r16
    2a8c:	83 a1       	ldd	r24, Z+35	; 0x23
    2a8e:	94 a1       	ldd	r25, Z+36	; 0x24
    2a90:	96 a7       	std	Z+46, r25	; 0x2e
    2a92:	85 a7       	std	Z+45, r24	; 0x2d
    dd->entry_offset = 0;
    2a94:	10 aa       	std	Z+48, r1	; 0x30
    2a96:	17 a6       	std	Z+47, r1	; 0x2f
    2a98:	25 c0       	rjmp	.+74     	; 0x2ae4 <fat_create_file+0xb0>
            fat_reset_dir(parent);
            return 0;
        }
    }

    struct fat_fs_struct* fs = parent->fs;
    2a9a:	f8 01       	movw	r30, r16
    2a9c:	c0 80       	ld	r12, Z
    2a9e:	d1 80       	ldd	r13, Z+1	; 0x01

    /* prepare directory entry with values already known */
    memset(dir_entry, 0, sizeof(*dir_entry));
    2aa0:	8b e2       	ldi	r24, 0x2B	; 43
    2aa2:	fe 01       	movw	r30, r28
    2aa4:	11 92       	st	Z+, r1
    2aa6:	8a 95       	dec	r24
    2aa8:	e9 f7       	brne	.-6      	; 0x2aa4 <fat_create_file+0x70>
    strncpy(dir_entry->long_name, file, sizeof(dir_entry->long_name) - 1);
    2aaa:	8b 2d       	mov	r24, r11
    2aac:	9a 2d       	mov	r25, r10
    2aae:	b7 01       	movw	r22, r14
    2ab0:	4f e1       	ldi	r20, 0x1F	; 31
    2ab2:	50 e0       	ldi	r21, 0x00	; 0
    2ab4:	0e 94 2d 1c 	call	0x385a	; 0x385a <strncpy>

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
    2ab8:	c6 01       	movw	r24, r12
    2aba:	b8 01       	movw	r22, r16
    2abc:	ae 01       	movw	r20, r28
    2abe:	0e 94 fd 11 	call	0x23fa	; 0x23fa <fat_find_offset_for_dir_entry>
    2ac2:	6f a3       	std	Y+39, r22	; 0x27
    2ac4:	78 a7       	std	Y+40, r23	; 0x28
    2ac6:	89 a7       	std	Y+41, r24	; 0x29
    2ac8:	9a a7       	std	Y+42, r25	; 0x2a
    2aca:	61 15       	cp	r22, r1
    2acc:	71 05       	cpc	r23, r1
    2ace:	81 05       	cpc	r24, r1
    2ad0:	91 05       	cpc	r25, r1
    2ad2:	41 f0       	breq	.+16     	; 0x2ae4 <fat_create_file+0xb0>
        return 0;
    
    /* write directory entry to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
    2ad4:	c6 01       	movw	r24, r12
    2ad6:	be 01       	movw	r22, r28
    2ad8:	0e 94 05 13 	call	0x260a	; 0x260a <fat_write_dir_entry>
    2adc:	88 23       	and	r24, r24
    2ade:	19 f0       	breq	.+6      	; 0x2ae6 <fat_create_file+0xb2>
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	01 c0       	rjmp	.+2      	; 0x2ae6 <fat_create_file+0xb2>
    2ae4:	80 e0       	ldi	r24, 0x00	; 0
        return 0;
    
    return 1;
}
    2ae6:	df 91       	pop	r29
    2ae8:	cf 91       	pop	r28
    2aea:	1f 91       	pop	r17
    2aec:	0f 91       	pop	r16
    2aee:	ff 90       	pop	r15
    2af0:	ef 90       	pop	r14
    2af2:	df 90       	pop	r13
    2af4:	cf 90       	pop	r12
    2af6:	bf 90       	pop	r11
    2af8:	af 90       	pop	r10
    2afa:	08 95       	ret

00002afc <create_file>:
    return 0;
}


int create_file( const char* fname )
{
    2afc:	0f 93       	push	r16
    2afe:	1f 93       	push	r17
    2b00:	df 93       	push	r29
    2b02:	cf 93       	push	r28
    2b04:	cd b7       	in	r28, 0x3d	; 61
    2b06:	de b7       	in	r29, 0x3e	; 62
    2b08:	ab 97       	sbiw	r28, 0x2b	; 43
    2b0a:	0f b6       	in	r0, 0x3f	; 63
    2b0c:	f8 94       	cli
    2b0e:	de bf       	out	0x3e, r29	; 62
    2b10:	0f be       	out	0x3f, r0	; 63
    2b12:	cd bf       	out	0x3d, r28	; 61
    2b14:	8c 01       	movw	r16, r24
    struct fat_dir_entry_struct file_entry;
    if(!fat_create_file(dd, fname, &file_entry))
    2b16:	80 91 f4 03 	lds	r24, 0x03F4
    2b1a:	90 91 f5 03 	lds	r25, 0x03F5
    2b1e:	b8 01       	movw	r22, r16
    2b20:	ae 01       	movw	r20, r28
    2b22:	4f 5f       	subi	r20, 0xFF	; 255
    2b24:	5f 4f       	sbci	r21, 0xFF	; 255
    2b26:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <fat_create_file>
    2b2a:	88 23       	and	r24, r24
    2b2c:	19 f0       	breq	.+6      	; 0x2b34 <create_file+0x38>
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	0c c0       	rjmp	.+24     	; 0x2b4c <create_file+0x50>
    {
        uart_puts_p(PSTR("error creating file: "));
    2b34:	88 e0       	ldi	r24, 0x08	; 8
    2b36:	92 e0       	ldi	r25, 0x02	; 2
    2b38:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_puts_p>
        uart_puts(fname);
    2b3c:	c8 01       	movw	r24, r16
    2b3e:	0e 94 98 02 	call	0x530	; 0x530 <uart_puts>
        uart_putc('\n');
    2b42:	8a e0       	ldi	r24, 0x0A	; 10
    2b44:	0e 94 a9 01 	call	0x352	; 0x352 <uart_putc>
    2b48:	2f ef       	ldi	r18, 0xFF	; 255
    2b4a:	3f ef       	ldi	r19, 0xFF	; 255
        return -1;
    }
    return 0;
}
    2b4c:	c9 01       	movw	r24, r18
    2b4e:	ab 96       	adiw	r28, 0x2b	; 43
    2b50:	0f b6       	in	r0, 0x3f	; 63
    2b52:	f8 94       	cli
    2b54:	de bf       	out	0x3e, r29	; 62
    2b56:	0f be       	out	0x3f, r0	; 63
    2b58:	cd bf       	out	0x3d, r28	; 61
    2b5a:	cf 91       	pop	r28
    2b5c:	df 91       	pop	r29
    2b5e:	1f 91       	pop	r17
    2b60:	0f 91       	pop	r16
    2b62:	08 95       	ret

00002b64 <fat_resize_file>:
 * \param[in] fd The file decriptor of the file which to resize.
 * \param[in] size The new size of the file.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_resize_file(struct fat_file_struct* fd, uint32_t size)
{
    2b64:	4f 92       	push	r4
    2b66:	5f 92       	push	r5
    2b68:	6f 92       	push	r6
    2b6a:	7f 92       	push	r7
    2b6c:	8f 92       	push	r8
    2b6e:	9f 92       	push	r9
    2b70:	af 92       	push	r10
    2b72:	bf 92       	push	r11
    2b74:	cf 92       	push	r12
    2b76:	df 92       	push	r13
    2b78:	ef 92       	push	r14
    2b7a:	ff 92       	push	r15
    2b7c:	0f 93       	push	r16
    2b7e:	1f 93       	push	r17
    2b80:	df 93       	push	r29
    2b82:	cf 93       	push	r28
    2b84:	cd b7       	in	r28, 0x3d	; 61
    2b86:	de b7       	in	r29, 0x3e	; 62
    2b88:	2a 97       	sbiw	r28, 0x0a	; 10
    2b8a:	0f b6       	in	r0, 0x3f	; 63
    2b8c:	f8 94       	cli
    2b8e:	de bf       	out	0x3e, r29	; 62
    2b90:	0f be       	out	0x3f, r0	; 63
    2b92:	cd bf       	out	0x3d, r28	; 61
    2b94:	2c 01       	movw	r4, r24
    2b96:	5a 01       	movw	r10, r20
    2b98:	6b 01       	movw	r12, r22
    if(!fd)
    2b9a:	00 97       	sbiw	r24, 0x00	; 0
    2b9c:	09 f4       	brne	.+2      	; 0x2ba0 <fat_resize_file+0x3c>
    2b9e:	e5 c0       	rjmp	.+458    	; 0x2d6a <fat_resize_file+0x206>
        return 0;

    cluster_t cluster_num = fd->dir_entry.cluster;
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	93 96       	adiw	r26, 0x23	; 35
    2ba4:	0d 91       	ld	r16, X+
    2ba6:	1c 91       	ld	r17, X
    2ba8:	94 97       	sbiw	r26, 0x24	; 36
    uint16_t cluster_size = fd->fs->header.cluster_size;
    2baa:	ed 91       	ld	r30, X+
    2bac:	fc 91       	ld	r31, X
    2bae:	20 89       	ldd	r18, Z+16	; 0x10
    2bb0:	31 89       	ldd	r19, Z+17	; 0x11
    uint32_t size_new = size;

    do
    {
        if(cluster_num == 0 && size_new == 0)
    2bb2:	01 15       	cp	r16, r1
    2bb4:	11 05       	cpc	r17, r1
    2bb6:	99 f0       	breq	.+38     	; 0x2bde <fat_resize_file+0x7a>
    2bb8:	ab 82       	std	Y+3, r10	; 0x03
    2bba:	bc 82       	std	Y+4, r11	; 0x04
    2bbc:	cd 82       	std	Y+5, r12	; 0x05
    2bbe:	de 82       	std	Y+6, r13	; 0x06
            /* the file stays empty */
            break;

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
    2bc0:	39 01       	movw	r6, r18
    2bc2:	88 24       	eor	r8, r8
    2bc4:	99 24       	eor	r9, r9
                cluster_num = cluster_num_next;
                size_new -= cluster_size;
            }
            else
            {
                break;
    2bc6:	22 27       	eor	r18, r18
    2bc8:	33 27       	eor	r19, r19
    2bca:	a9 01       	movw	r20, r18
    2bcc:	26 19       	sub	r18, r6
    2bce:	37 09       	sbc	r19, r7
    2bd0:	48 09       	sbc	r20, r8
    2bd2:	59 09       	sbc	r21, r9
    2bd4:	2f 83       	std	Y+7, r18	; 0x07
    2bd6:	38 87       	std	Y+8, r19	; 0x08
    2bd8:	49 87       	std	Y+9, r20	; 0x09
    2bda:	5a 87       	std	Y+10, r21	; 0x0a
    2bdc:	20 c0       	rjmp	.+64     	; 0x2c1e <fat_resize_file+0xba>
    uint16_t cluster_size = fd->fs->header.cluster_size;
    uint32_t size_new = size;

    do
    {
        if(cluster_num == 0 && size_new == 0)
    2bde:	41 15       	cp	r20, r1
    2be0:	51 05       	cpc	r21, r1
    2be2:	61 05       	cpc	r22, r1
    2be4:	71 05       	cpc	r23, r1
    2be6:	09 f4       	brne	.+2      	; 0x2bea <fat_resize_file+0x86>
    2be8:	a9 c0       	rjmp	.+338    	; 0x2d3c <fat_resize_file+0x1d8>
    2bea:	e6 cf       	rjmp	.-52     	; 0x2bb8 <fat_resize_file+0x54>

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
        {
            /* get next cluster of file */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    2bec:	d2 01       	movw	r26, r4
    2bee:	8d 91       	ld	r24, X+
    2bf0:	9c 91       	ld	r25, X
    2bf2:	b8 01       	movw	r22, r16
    2bf4:	0e 94 cf 02 	call	0x59e	; 0x59e <fat_get_next_cluster>
            if(cluster_num_next)
    2bf8:	00 97       	sbiw	r24, 0x00	; 0
    2bfa:	d9 f0       	breq	.+54     	; 0x2c32 <fat_resize_file+0xce>
                cluster_num = cluster_num_next;
                size_new -= cluster_size;
            }
            else
            {
                break;
    2bfc:	eb 80       	ldd	r14, Y+3	; 0x03
    2bfe:	fc 80       	ldd	r15, Y+4	; 0x04
    2c00:	0d 81       	ldd	r16, Y+5	; 0x05
    2c02:	1e 81       	ldd	r17, Y+6	; 0x06
    2c04:	2f 81       	ldd	r18, Y+7	; 0x07
    2c06:	38 85       	ldd	r19, Y+8	; 0x08
    2c08:	49 85       	ldd	r20, Y+9	; 0x09
    2c0a:	5a 85       	ldd	r21, Y+10	; 0x0a
    2c0c:	e2 0e       	add	r14, r18
    2c0e:	f3 1e       	adc	r15, r19
    2c10:	04 1f       	adc	r16, r20
    2c12:	15 1f       	adc	r17, r21
    2c14:	eb 82       	std	Y+3, r14	; 0x03
    2c16:	fc 82       	std	Y+4, r15	; 0x04
    2c18:	0d 83       	std	Y+5, r16	; 0x05
    2c1a:	1e 83       	std	Y+6, r17	; 0x06
    2c1c:	8c 01       	movw	r16, r24
        if(cluster_num == 0 && size_new == 0)
            /* the file stays empty */
            break;

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
    2c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c20:	9c 81       	ldd	r25, Y+4	; 0x04
    2c22:	ad 81       	ldd	r26, Y+5	; 0x05
    2c24:	be 81       	ldd	r27, Y+6	; 0x06
    2c26:	68 16       	cp	r6, r24
    2c28:	79 06       	cpc	r7, r25
    2c2a:	8a 06       	cpc	r8, r26
    2c2c:	9b 06       	cpc	r9, r27
    2c2e:	f0 f2       	brcs	.-68     	; 0x2bec <fat_resize_file+0x88>
    2c30:	b4 c0       	rjmp	.+360    	; 0x2d9a <fat_resize_file+0x236>
    2c32:	78 01       	movw	r14, r16
        {
            /* Allocate new cluster chain and append
             * it to the existing one, if available.
             */
            cluster_t cluster_count = (size_new + cluster_size - 1) / cluster_size;
            cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
    2c34:	6b 81       	ldd	r22, Y+3	; 0x03
    2c36:	7c 81       	ldd	r23, Y+4	; 0x04
    2c38:	8d 81       	ldd	r24, Y+5	; 0x05
    2c3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c3c:	66 0d       	add	r22, r6
    2c3e:	77 1d       	adc	r23, r7
    2c40:	88 1d       	adc	r24, r8
    2c42:	99 1d       	adc	r25, r9
    2c44:	61 50       	subi	r22, 0x01	; 1
    2c46:	70 40       	sbci	r23, 0x00	; 0
    2c48:	80 40       	sbci	r24, 0x00	; 0
    2c4a:	90 40       	sbci	r25, 0x00	; 0
    2c4c:	a4 01       	movw	r20, r8
    2c4e:	93 01       	movw	r18, r6
    2c50:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__udivmodsi4>
    2c54:	d2 01       	movw	r26, r4
    2c56:	8d 91       	ld	r24, X+
    2c58:	9c 91       	ld	r25, X
    2c5a:	b8 01       	movw	r22, r16
    2c5c:	a9 01       	movw	r20, r18
    2c5e:	0e 94 85 03 	call	0x70a	; 0x70a <fat_append_clusters>
            if(!cluster_new_chain)
    2c62:	00 97       	sbiw	r24, 0x00	; 0
    2c64:	09 f4       	brne	.+2      	; 0x2c68 <fat_resize_file+0x104>
    2c66:	81 c0       	rjmp	.+258    	; 0x2d6a <fat_resize_file+0x206>
                return 0;

            if(!cluster_num)
    2c68:	01 2b       	or	r16, r17
    2c6a:	21 f4       	brne	.+8      	; 0x2c74 <fat_resize_file+0x110>
            {
                cluster_num = cluster_new_chain;
                fd->dir_entry.cluster = cluster_num;
    2c6c:	f2 01       	movw	r30, r4
    2c6e:	94 a3       	std	Z+36, r25	; 0x24
    2c70:	83 a3       	std	Z+35, r24	; 0x23
    2c72:	7c 01       	movw	r14, r24
            }
        }

        /* write new directory entry */
        fd->dir_entry.file_size = size;
    2c74:	d2 01       	movw	r26, r4
    2c76:	95 96       	adiw	r26, 0x25	; 37
    2c78:	ad 92       	st	X+, r10
    2c7a:	bd 92       	st	X+, r11
    2c7c:	cd 92       	st	X+, r12
    2c7e:	dc 92       	st	X, r13
    2c80:	98 97       	sbiw	r26, 0x28	; 40
        if(size == 0)
    2c82:	a1 14       	cp	r10, r1
    2c84:	b1 04       	cpc	r11, r1
    2c86:	c1 04       	cpc	r12, r1
    2c88:	d1 04       	cpc	r13, r1
    2c8a:	21 f4       	brne	.+8      	; 0x2c94 <fat_resize_file+0x130>
            fd->dir_entry.cluster = 0;
    2c8c:	94 96       	adiw	r26, 0x24	; 36
    2c8e:	1c 92       	st	X, r1
    2c90:	1e 92       	st	-X, r1
    2c92:	93 97       	sbiw	r26, 0x23	; 35
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    2c94:	f2 01       	movw	r30, r4
    2c96:	81 91       	ld	r24, Z+
    2c98:	91 91       	ld	r25, Z+
    2c9a:	bf 01       	movw	r22, r30
    2c9c:	0e 94 05 13 	call	0x260a	; 0x260a <fat_write_dir_entry>
    2ca0:	88 23       	and	r24, r24
    2ca2:	09 f4       	brne	.+2      	; 0x2ca6 <fat_resize_file+0x142>
    2ca4:	62 c0       	rjmp	.+196    	; 0x2d6a <fat_resize_file+0x206>
            return 0;

        if(size == 0)
    2ca6:	a1 14       	cp	r10, r1
    2ca8:	b1 04       	cpc	r11, r1
    2caa:	c1 04       	cpc	r12, r1
    2cac:	d1 04       	cpc	r13, r1
    2cae:	29 f4       	brne	.+10     	; 0x2cba <fat_resize_file+0x156>
        {
            /* free all clusters of file */
            fat_free_clusters(fd->fs, cluster_num);
    2cb0:	f2 01       	movw	r30, r4
    2cb2:	80 81       	ld	r24, Z
    2cb4:	91 81       	ldd	r25, Z+1	; 0x01
    2cb6:	b7 01       	movw	r22, r14
    2cb8:	3f c0       	rjmp	.+126    	; 0x2d38 <fat_resize_file+0x1d4>
        }
        else if(size_new <= cluster_size)
    2cba:	0b 81       	ldd	r16, Y+3	; 0x03
    2cbc:	1c 81       	ldd	r17, Y+4	; 0x04
    2cbe:	2d 81       	ldd	r18, Y+5	; 0x05
    2cc0:	3e 81       	ldd	r19, Y+6	; 0x06
    2cc2:	60 16       	cp	r6, r16
    2cc4:	71 06       	cpc	r7, r17
    2cc6:	82 06       	cpc	r8, r18
    2cc8:	93 06       	cpc	r9, r19
    2cca:	c0 f1       	brcs	.+112    	; 0x2d3c <fat_resize_file+0x1d8>
        {
            /* free all clusters no longer needed */
            fat_terminate_clusters(fd->fs, cluster_num);
    2ccc:	d2 01       	movw	r26, r4
    2cce:	0d 91       	ld	r16, X+
    2cd0:	1c 91       	ld	r17, X
 * \returns 0 on failure, 1 on success.
 * \see fat_free_clusters
 */
uint8_t fat_terminate_clusters(struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    2cd2:	01 15       	cp	r16, r1
    2cd4:	11 05       	cpc	r17, r1
    2cd6:	91 f1       	breq	.+100    	; 0x2d3c <fat_resize_file+0x1d8>
    2cd8:	b2 e0       	ldi	r27, 0x02	; 2
    2cda:	eb 16       	cp	r14, r27
    2cdc:	f1 04       	cpc	r15, r1
    2cde:	70 f1       	brcs	.+92     	; 0x2d3c <fat_resize_file+0x1d8>
        return 0;

    /* fetch next cluster before overwriting the cluster entry */
    cluster_t cluster_num_next = fat_get_next_cluster(fs, cluster_num);
    2ce0:	c8 01       	movw	r24, r16
    2ce2:	b7 01       	movw	r22, r14
    2ce4:	0e 94 cf 02 	call	0x59e	; 0x59e <fat_get_next_cluster>
    2ce8:	4c 01       	movw	r8, r24
            return 0;
    }
    else
#endif
    {
        uint16_t fat_entry = HTOL16(FAT16_CLUSTER_LAST_MAX);
    2cea:	8f ef       	ldi	r24, 0xFF	; 255
    2cec:	9f ef       	ldi	r25, 0xFF	; 255
    2cee:	9a 83       	std	Y+2, r25	; 0x02
    2cf0:	89 83       	std	Y+1, r24	; 0x01
        if(!fs->partition->device_write(fs->header.fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    2cf2:	d8 01       	movw	r26, r16
    2cf4:	ed 91       	ld	r30, X+
    2cf6:	fc 91       	ld	r31, X
    2cf8:	11 97       	sbiw	r26, 0x01	; 1
    2cfa:	ee 0c       	add	r14, r14
    2cfc:	ff 1c       	adc	r15, r15
    2cfe:	b7 01       	movw	r22, r14
    2d00:	80 e0       	ldi	r24, 0x00	; 0
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	16 96       	adiw	r26, 0x06	; 6
    2d06:	2d 91       	ld	r18, X+
    2d08:	3d 91       	ld	r19, X+
    2d0a:	4d 91       	ld	r20, X+
    2d0c:	5c 91       	ld	r21, X
    2d0e:	19 97       	sbiw	r26, 0x09	; 9
    2d10:	62 0f       	add	r22, r18
    2d12:	73 1f       	adc	r23, r19
    2d14:	84 1f       	adc	r24, r20
    2d16:	95 1f       	adc	r25, r21
    2d18:	04 80       	ldd	r0, Z+4	; 0x04
    2d1a:	f5 81       	ldd	r31, Z+5	; 0x05
    2d1c:	e0 2d       	mov	r30, r0
    2d1e:	ae 01       	movw	r20, r28
    2d20:	4f 5f       	subi	r20, 0xFF	; 255
    2d22:	5f 4f       	sbci	r21, 0xFF	; 255
    2d24:	22 e0       	ldi	r18, 0x02	; 2
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	09 95       	icall
    2d2a:	88 23       	and	r24, r24
    2d2c:	39 f0       	breq	.+14     	; 0x2d3c <fat_resize_file+0x1d8>
            return 0;
    }

    /* free remaining clusters */
    if(cluster_num_next)
    2d2e:	81 14       	cp	r8, r1
    2d30:	91 04       	cpc	r9, r1
    2d32:	21 f0       	breq	.+8      	; 0x2d3c <fat_resize_file+0x1d8>
        return fat_free_clusters(fs, cluster_num_next);
    2d34:	c8 01       	movw	r24, r16
    2d36:	b4 01       	movw	r22, r8
    2d38:	0e 94 0f 03 	call	0x61e	; 0x61e <fat_free_clusters>
        }

    } while(0);

    /* correct file position */
    if(size < fd->pos)
    2d3c:	f2 01       	movw	r30, r4
    2d3e:	85 a5       	ldd	r24, Z+45	; 0x2d
    2d40:	96 a5       	ldd	r25, Z+46	; 0x2e
    2d42:	a7 a5       	ldd	r26, Z+47	; 0x2f
    2d44:	b0 a9       	ldd	r27, Z+48	; 0x30
    2d46:	a8 16       	cp	r10, r24
    2d48:	b9 06       	cpc	r11, r25
    2d4a:	ca 06       	cpc	r12, r26
    2d4c:	db 06       	cpc	r13, r27
    2d4e:	58 f4       	brcc	.+22     	; 0x2d66 <fat_resize_file+0x202>
    {
        fd->pos = size;
    2d50:	d2 01       	movw	r26, r4
    2d52:	9d 96       	adiw	r26, 0x2d	; 45
    2d54:	ad 92       	st	X+, r10
    2d56:	bd 92       	st	X+, r11
    2d58:	cd 92       	st	X+, r12
    2d5a:	dc 92       	st	X, r13
    2d5c:	d0 97       	sbiw	r26, 0x30	; 48
        fd->pos_cluster = 0;
    2d5e:	d2 96       	adiw	r26, 0x32	; 50
    2d60:	1c 92       	st	X, r1
    2d62:	1e 92       	st	-X, r1
    2d64:	d1 97       	sbiw	r26, 0x31	; 49
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	01 c0       	rjmp	.+2      	; 0x2d6c <fat_resize_file+0x208>
    2d6a:	80 e0       	ldi	r24, 0x00	; 0
    }

    return 1;
}
    2d6c:	2a 96       	adiw	r28, 0x0a	; 10
    2d6e:	0f b6       	in	r0, 0x3f	; 63
    2d70:	f8 94       	cli
    2d72:	de bf       	out	0x3e, r29	; 62
    2d74:	0f be       	out	0x3f, r0	; 63
    2d76:	cd bf       	out	0x3d, r28	; 61
    2d78:	cf 91       	pop	r28
    2d7a:	df 91       	pop	r29
    2d7c:	1f 91       	pop	r17
    2d7e:	0f 91       	pop	r16
    2d80:	ff 90       	pop	r15
    2d82:	ef 90       	pop	r14
    2d84:	df 90       	pop	r13
    2d86:	cf 90       	pop	r12
    2d88:	bf 90       	pop	r11
    2d8a:	af 90       	pop	r10
    2d8c:	9f 90       	pop	r9
    2d8e:	8f 90       	pop	r8
    2d90:	7f 90       	pop	r7
    2d92:	6f 90       	pop	r6
    2d94:	5f 90       	pop	r5
    2d96:	4f 90       	pop	r4
    2d98:	08 95       	ret

    /* correct file position */
    if(size < fd->pos)
    {
        fd->pos = size;
        fd->pos_cluster = 0;
    2d9a:	78 01       	movw	r14, r16
            {
                break;
            }
        }

        if(size_new > cluster_size || cluster_num == 0)
    2d9c:	01 15       	cp	r16, r1
    2d9e:	11 05       	cpc	r17, r1
    2da0:	09 f4       	brne	.+2      	; 0x2da4 <fat_resize_file+0x240>
    2da2:	48 cf       	rjmp	.-368    	; 0x2c34 <fat_resize_file+0xd0>
    2da4:	67 cf       	rjmp	.-306    	; 0x2c74 <fat_resize_file+0x110>

00002da6 <fat_seek_file>:
 *                   to this location before it returns.
 * \param[in] whence Affects the way \c offset is interpreted, see above.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_seek_file(struct fat_file_struct* fd, int32_t* offset, uint8_t whence)
{
    2da6:	cf 92       	push	r12
    2da8:	df 92       	push	r13
    2daa:	ef 92       	push	r14
    2dac:	ff 92       	push	r15
    2dae:	0f 93       	push	r16
    2db0:	1f 93       	push	r17
    2db2:	cf 93       	push	r28
    2db4:	df 93       	push	r29
    2db6:	ec 01       	movw	r28, r24
    2db8:	6b 01       	movw	r12, r22
    if(!fd || !offset)
    2dba:	00 97       	sbiw	r24, 0x00	; 0
    2dbc:	09 f4       	brne	.+2      	; 0x2dc0 <fat_seek_file+0x1a>
    2dbe:	45 c0       	rjmp	.+138    	; 0x2e4a <fat_seek_file+0xa4>
    2dc0:	61 15       	cp	r22, r1
    2dc2:	71 05       	cpc	r23, r1
    2dc4:	09 f4       	brne	.+2      	; 0x2dc8 <fat_seek_file+0x22>
    2dc6:	41 c0       	rjmp	.+130    	; 0x2e4a <fat_seek_file+0xa4>
        return 0;

    uint32_t new_pos = fd->pos;
    2dc8:	8d a5       	ldd	r24, Y+45	; 0x2d
    2dca:	9e a5       	ldd	r25, Y+46	; 0x2e
    2dcc:	af a5       	ldd	r26, Y+47	; 0x2f
    2dce:	b8 a9       	ldd	r27, Y+48	; 0x30
    switch(whence)
    2dd0:	41 30       	cpi	r20, 0x01	; 1
    2dd2:	59 f0       	breq	.+22     	; 0x2dea <fat_seek_file+0x44>
    2dd4:	41 30       	cpi	r20, 0x01	; 1
    2dd6:	18 f0       	brcs	.+6      	; 0x2dde <fat_seek_file+0x38>
    2dd8:	42 30       	cpi	r20, 0x02	; 2
    2dda:	b9 f5       	brne	.+110    	; 0x2e4a <fat_seek_file+0xa4>
    2ddc:	0c c0       	rjmp	.+24     	; 0x2df6 <fat_seek_file+0x50>
    {
        case FAT_SEEK_SET:
            new_pos = *offset;
    2dde:	fb 01       	movw	r30, r22
    2de0:	e0 80       	ld	r14, Z
    2de2:	f1 80       	ldd	r15, Z+1	; 0x01
    2de4:	02 81       	ldd	r16, Z+2	; 0x02
    2de6:	13 81       	ldd	r17, Z+3	; 0x03
    2de8:	13 c0       	rjmp	.+38     	; 0x2e10 <fat_seek_file+0x6a>
            break;
        case FAT_SEEK_CUR:
            new_pos += *offset;
    2dea:	fb 01       	movw	r30, r22
    2dec:	e0 80       	ld	r14, Z
    2dee:	f1 80       	ldd	r15, Z+1	; 0x01
    2df0:	02 81       	ldd	r16, Z+2	; 0x02
    2df2:	13 81       	ldd	r17, Z+3	; 0x03
    2df4:	09 c0       	rjmp	.+18     	; 0x2e08 <fat_seek_file+0x62>
            break;
        case FAT_SEEK_END:
            new_pos = fd->dir_entry.file_size + *offset;
    2df6:	fb 01       	movw	r30, r22
    2df8:	e0 80       	ld	r14, Z
    2dfa:	f1 80       	ldd	r15, Z+1	; 0x01
    2dfc:	02 81       	ldd	r16, Z+2	; 0x02
    2dfe:	13 81       	ldd	r17, Z+3	; 0x03
    2e00:	8d a1       	ldd	r24, Y+37	; 0x25
    2e02:	9e a1       	ldd	r25, Y+38	; 0x26
    2e04:	af a1       	ldd	r26, Y+39	; 0x27
    2e06:	b8 a5       	ldd	r27, Y+40	; 0x28
    2e08:	e8 0e       	add	r14, r24
    2e0a:	f9 1e       	adc	r15, r25
    2e0c:	0a 1f       	adc	r16, r26
    2e0e:	1b 1f       	adc	r17, r27
            break;
        default:
            return 0;
    }

    if(new_pos > fd->dir_entry.file_size
    2e10:	8d a1       	ldd	r24, Y+37	; 0x25
    2e12:	9e a1       	ldd	r25, Y+38	; 0x26
    2e14:	af a1       	ldd	r26, Y+39	; 0x27
    2e16:	b8 a5       	ldd	r27, Y+40	; 0x28
    2e18:	8e 15       	cp	r24, r14
    2e1a:	9f 05       	cpc	r25, r15
    2e1c:	a0 07       	cpc	r26, r16
    2e1e:	b1 07       	cpc	r27, r17
    2e20:	38 f4       	brcc	.+14     	; 0x2e30 <fat_seek_file+0x8a>
    2e22:	ce 01       	movw	r24, r28
    2e24:	b8 01       	movw	r22, r16
    2e26:	a7 01       	movw	r20, r14
    2e28:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <fat_resize_file>
    2e2c:	88 23       	and	r24, r24
    2e2e:	69 f0       	breq	.+26     	; 0x2e4a <fat_seek_file+0xa4>
       && !fat_resize_file(fd, new_pos)
#endif
       )
        return 0;

    fd->pos = new_pos;
    2e30:	ed a6       	std	Y+45, r14	; 0x2d
    2e32:	fe a6       	std	Y+46, r15	; 0x2e
    2e34:	0f a7       	std	Y+47, r16	; 0x2f
    2e36:	18 ab       	std	Y+48, r17	; 0x30
    fd->pos_cluster = 0;
    2e38:	1a aa       	std	Y+50, r1	; 0x32
    2e3a:	19 aa       	std	Y+49, r1	; 0x31

    *offset = (int32_t) new_pos;
    2e3c:	f6 01       	movw	r30, r12
    2e3e:	e0 82       	st	Z, r14
    2e40:	f1 82       	std	Z+1, r15	; 0x01
    2e42:	02 83       	std	Z+2, r16	; 0x02
    2e44:	13 83       	std	Z+3, r17	; 0x03
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	01 c0       	rjmp	.+2      	; 0x2e4c <fat_seek_file+0xa6>
    return 1;
    2e4a:	80 e0       	ldi	r24, 0x00	; 0
}
    2e4c:	df 91       	pop	r29
    2e4e:	cf 91       	pop	r28
    2e50:	1f 91       	pop	r17
    2e52:	0f 91       	pop	r16
    2e54:	ff 90       	pop	r15
    2e56:	ef 90       	pop	r14
    2e58:	df 90       	pop	r13
    2e5a:	cf 90       	pop	r12
    2e5c:	08 95       	ret

00002e5e <fat_write_file>:
 * \param[in] buffer_len The amount of data to write.
 * \returns The number of bytes written, 0 on disk full, or -1 on failure.
 * \see fat_read_file
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
    2e5e:	2f 92       	push	r2
    2e60:	3f 92       	push	r3
    2e62:	4f 92       	push	r4
    2e64:	5f 92       	push	r5
    2e66:	6f 92       	push	r6
    2e68:	7f 92       	push	r7
    2e6a:	8f 92       	push	r8
    2e6c:	9f 92       	push	r9
    2e6e:	af 92       	push	r10
    2e70:	bf 92       	push	r11
    2e72:	cf 92       	push	r12
    2e74:	df 92       	push	r13
    2e76:	ef 92       	push	r14
    2e78:	ff 92       	push	r15
    2e7a:	0f 93       	push	r16
    2e7c:	1f 93       	push	r17
    2e7e:	df 93       	push	r29
    2e80:	cf 93       	push	r28
    2e82:	00 d0       	rcall	.+0      	; 0x2e84 <fat_write_file+0x26>
    2e84:	00 d0       	rcall	.+0      	; 0x2e86 <fat_write_file+0x28>
    2e86:	00 d0       	rcall	.+0      	; 0x2e88 <fat_write_file+0x2a>
    2e88:	cd b7       	in	r28, 0x3d	; 61
    2e8a:	de b7       	in	r29, 0x3e	; 62
    2e8c:	9e 83       	std	Y+6, r25	; 0x06
    2e8e:	8d 83       	std	Y+5, r24	; 0x05
    2e90:	7a 83       	std	Y+2, r23	; 0x02
    2e92:	69 83       	std	Y+1, r22	; 0x01
    2e94:	5c 83       	std	Y+4, r21	; 0x04
    2e96:	4b 83       	std	Y+3, r20	; 0x03
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
    2e98:	00 97       	sbiw	r24, 0x00	; 0
    2e9a:	09 f4       	brne	.+2      	; 0x2e9e <fat_write_file+0x40>
    2e9c:	41 c1       	rjmp	.+642    	; 0x3120 <fat_write_file+0x2c2>
    2e9e:	67 2b       	or	r22, r23
    2ea0:	09 f4       	brne	.+2      	; 0x2ea4 <fat_write_file+0x46>
    2ea2:	3e c1       	rjmp	.+636    	; 0x3120 <fat_write_file+0x2c2>
    2ea4:	45 2b       	or	r20, r21
    2ea6:	09 f4       	brne	.+2      	; 0x2eaa <fat_write_file+0x4c>
    2ea8:	3b c1       	rjmp	.+630    	; 0x3120 <fat_write_file+0x2c2>
        return -1;
    if(fd->pos > fd->dir_entry.file_size)
    2eaa:	dc 01       	movw	r26, r24
    2eac:	9d 96       	adiw	r26, 0x2d	; 45
    2eae:	8d 90       	ld	r8, X+
    2eb0:	9d 90       	ld	r9, X+
    2eb2:	ad 90       	ld	r10, X+
    2eb4:	bc 90       	ld	r11, X
    2eb6:	d0 97       	sbiw	r26, 0x30	; 48
    2eb8:	fc 01       	movw	r30, r24
    2eba:	85 a1       	ldd	r24, Z+37	; 0x25
    2ebc:	96 a1       	ldd	r25, Z+38	; 0x26
    2ebe:	a7 a1       	ldd	r26, Z+39	; 0x27
    2ec0:	b0 a5       	ldd	r27, Z+40	; 0x28
    2ec2:	88 15       	cp	r24, r8
    2ec4:	99 05       	cpc	r25, r9
    2ec6:	aa 05       	cpc	r26, r10
    2ec8:	bb 05       	cpc	r27, r11
    2eca:	08 f4       	brcc	.+2      	; 0x2ece <fat_write_file+0x70>
    2ecc:	29 c1       	rjmp	.+594    	; 0x3120 <fat_write_file+0x2c2>
        return -1;

    uint16_t cluster_size = fd->fs->header.cluster_size;
    2ece:	01 90       	ld	r0, Z+
    2ed0:	f0 81       	ld	r31, Z
    2ed2:	e0 2d       	mov	r30, r0
    2ed4:	20 88       	ldd	r2, Z+16	; 0x10
    2ed6:	31 88       	ldd	r3, Z+17	; 0x11
    cluster_t cluster_num = fd->pos_cluster;
    2ed8:	ad 81       	ldd	r26, Y+5	; 0x05
    2eda:	be 81       	ldd	r27, Y+6	; 0x06
    2edc:	d1 96       	adiw	r26, 0x31	; 49
    2ede:	0d 91       	ld	r16, X+
    2ee0:	1c 91       	ld	r17, X
    2ee2:	d2 97       	sbiw	r26, 0x32	; 50
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));

    /* find cluster in which to start writing */
    if(!cluster_num)
    2ee4:	01 15       	cp	r16, r1
    2ee6:	11 05       	cpc	r17, r1
    2ee8:	09 f0       	breq	.+2      	; 0x2eec <fat_write_file+0x8e>
    2eea:	55 c0       	rjmp	.+170    	; 0x2f96 <fat_write_file+0x138>
    {
        cluster_num = fd->dir_entry.cluster;
    2eec:	93 96       	adiw	r26, 0x23	; 35
    2eee:	0d 91       	ld	r16, X+
    2ef0:	1c 91       	ld	r17, X
    2ef2:	94 97       	sbiw	r26, 0x24	; 36
        
        if(!cluster_num)
    2ef4:	01 15       	cp	r16, r1
    2ef6:	11 05       	cpc	r17, r1
    2ef8:	a9 f4       	brne	.+42     	; 0x2f24 <fat_write_file+0xc6>
        {
            if(!fd->pos)
    2efa:	81 14       	cp	r8, r1
    2efc:	91 04       	cpc	r9, r1
    2efe:	a1 04       	cpc	r10, r1
    2f00:	b1 04       	cpc	r11, r1
    2f02:	09 f0       	breq	.+2      	; 0x2f06 <fat_write_file+0xa8>
    2f04:	0d c1       	rjmp	.+538    	; 0x3120 <fat_write_file+0x2c2>
            {
                /* empty file */
                fd->dir_entry.cluster = cluster_num = fat_append_clusters(fd->fs, 0, 1);
    2f06:	cf 01       	movw	r24, r30
    2f08:	60 e0       	ldi	r22, 0x00	; 0
    2f0a:	70 e0       	ldi	r23, 0x00	; 0
    2f0c:	41 e0       	ldi	r20, 0x01	; 1
    2f0e:	50 e0       	ldi	r21, 0x00	; 0
    2f10:	0e 94 85 03 	call	0x70a	; 0x70a <fat_append_clusters>
    2f14:	8c 01       	movw	r16, r24
    2f16:	ed 81       	ldd	r30, Y+5	; 0x05
    2f18:	fe 81       	ldd	r31, Y+6	; 0x06
    2f1a:	94 a3       	std	Z+36, r25	; 0x24
    2f1c:	83 a3       	std	Z+35, r24	; 0x23
                if(!cluster_num)
    2f1e:	00 97       	sbiw	r24, 0x00	; 0
    2f20:	09 f4       	brne	.+2      	; 0x2f24 <fat_write_file+0xc6>
    2f22:	fe c0       	rjmp	.+508    	; 0x3120 <fat_write_file+0x2c2>
            {
                return -1;
            }
        }

        if(fd->pos)
    2f24:	ad 81       	ldd	r26, Y+5	; 0x05
    2f26:	be 81       	ldd	r27, Y+6	; 0x06
    2f28:	9d 96       	adiw	r26, 0x2d	; 45
    2f2a:	cd 90       	ld	r12, X+
    2f2c:	dd 90       	ld	r13, X+
    2f2e:	ed 90       	ld	r14, X+
    2f30:	fc 90       	ld	r15, X
    2f32:	d0 97       	sbiw	r26, 0x30	; 48
    2f34:	c1 14       	cp	r12, r1
    2f36:	d1 04       	cpc	r13, r1
    2f38:	e1 04       	cpc	r14, r1
    2f3a:	f1 04       	cpc	r15, r1
    2f3c:	21 f5       	brne	.+72     	; 0x2f86 <fat_write_file+0x128>
    2f3e:	2b c0       	rjmp	.+86     	; 0x2f96 <fat_write_file+0x138>
        {
            uint32_t pos = fd->pos;
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
    2f40:	c4 18       	sub	r12, r4
    2f42:	d5 08       	sbc	r13, r5
    2f44:	e6 08       	sbc	r14, r6
    2f46:	f7 08       	sbc	r15, r7
                cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    2f48:	ed 81       	ldd	r30, Y+5	; 0x05
    2f4a:	fe 81       	ldd	r31, Y+6	; 0x06
    2f4c:	80 81       	ld	r24, Z
    2f4e:	91 81       	ldd	r25, Z+1	; 0x01
    2f50:	b8 01       	movw	r22, r16
    2f52:	0e 94 cf 02 	call	0x59e	; 0x59e <fat_get_next_cluster>
                if(!cluster_num_next && pos == 0)
    2f56:	00 97       	sbiw	r24, 0x00	; 0
    2f58:	11 f0       	breq	.+4      	; 0x2f5e <fat_write_file+0x100>
    2f5a:	8c 01       	movw	r16, r24
    2f5c:	17 c0       	rjmp	.+46     	; 0x2f8c <fat_write_file+0x12e>
    2f5e:	c1 14       	cp	r12, r1
    2f60:	d1 04       	cpc	r13, r1
    2f62:	e1 04       	cpc	r14, r1
    2f64:	f1 04       	cpc	r15, r1
    2f66:	09 f0       	breq	.+2      	; 0x2f6a <fat_write_file+0x10c>
    2f68:	db c0       	rjmp	.+438    	; 0x3120 <fat_write_file+0x2c2>
                    /* the file exactly ends on a cluster boundary, and we append to it */
                    cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    2f6a:	ad 81       	ldd	r26, Y+5	; 0x05
    2f6c:	be 81       	ldd	r27, Y+6	; 0x06
    2f6e:	8d 91       	ld	r24, X+
    2f70:	9c 91       	ld	r25, X
    2f72:	b8 01       	movw	r22, r16
    2f74:	41 e0       	ldi	r20, 0x01	; 1
    2f76:	50 e0       	ldi	r21, 0x00	; 0
    2f78:	0e 94 85 03 	call	0x70a	; 0x70a <fat_append_clusters>
                if(!cluster_num_next)
    2f7c:	00 97       	sbiw	r24, 0x00	; 0
    2f7e:	09 f4       	brne	.+2      	; 0x2f82 <fat_write_file+0x124>
    2f80:	cf c0       	rjmp	.+414    	; 0x3120 <fat_write_file+0x2c2>
    2f82:	8c 01       	movw	r16, r24
    2f84:	03 c0       	rjmp	.+6      	; 0x2f8c <fat_write_file+0x12e>

        if(fd->pos)
        {
            uint32_t pos = fd->pos;
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
    2f86:	21 01       	movw	r4, r2
    2f88:	66 24       	eor	r6, r6
    2f8a:	77 24       	eor	r7, r7
    2f8c:	c4 14       	cp	r12, r4
    2f8e:	d5 04       	cpc	r13, r5
    2f90:	e6 04       	cpc	r14, r6
    2f92:	f7 04       	cpc	r15, r7
    2f94:	a8 f6       	brcc	.-86     	; 0x2f40 <fat_write_file+0xe2>
        return -1;

    uint16_t cluster_size = fd->fs->header.cluster_size;
    cluster_t cluster_num = fd->pos_cluster;
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
    2f96:	08 94       	sec
    2f98:	21 08       	sbc	r2, r1
    2f9a:	31 08       	sbc	r3, r1
    2f9c:	82 20       	and	r8, r2
    2f9e:	93 20       	and	r9, r3
    2fa0:	08 94       	sec
    2fa2:	21 1c       	adc	r2, r1
    2fa4:	31 1c       	adc	r3, r1
    2fa6:	ab 80       	ldd	r10, Y+3	; 0x03
    2fa8:	bc 80       	ldd	r11, Y+4	; 0x04
    
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    2faa:	ed 81       	ldd	r30, Y+5	; 0x05
    2fac:	fe 81       	ldd	r31, Y+6	; 0x06
    2fae:	c0 80       	ld	r12, Z
    2fb0:	d1 80       	ldd	r13, Z+1	; 0x01
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    2fb2:	c1 14       	cp	r12, r1
    2fb4:	d1 04       	cpc	r13, r1
    2fb6:	f9 f0       	breq	.+62     	; 0x2ff6 <fat_write_file+0x198>
    2fb8:	02 30       	cpi	r16, 0x02	; 2
    2fba:	11 05       	cpc	r17, r1
    2fbc:	e0 f0       	brcs	.+56     	; 0x2ff6 <fat_write_file+0x198>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    2fbe:	02 50       	subi	r16, 0x02	; 2
    2fc0:	10 40       	sbci	r17, 0x00	; 0
    2fc2:	b8 01       	movw	r22, r16
    2fc4:	80 e0       	ldi	r24, 0x00	; 0
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	0e 5f       	subi	r16, 0xFE	; 254
    2fca:	1f 4f       	sbci	r17, 0xFF	; 255
    2fcc:	d6 01       	movw	r26, r12
    2fce:	50 96       	adiw	r26, 0x10	; 16
    2fd0:	2d 91       	ld	r18, X+
    2fd2:	3c 91       	ld	r19, X
    2fd4:	51 97       	sbiw	r26, 0x11	; 17
    2fd6:	40 e0       	ldi	r20, 0x00	; 0
    2fd8:	50 e0       	ldi	r21, 0x00	; 0
    2fda:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <__mulsi3>
    2fde:	9b 01       	movw	r18, r22
    2fe0:	ac 01       	movw	r20, r24
    2fe2:	f6 01       	movw	r30, r12
    2fe4:	82 89       	ldd	r24, Z+18	; 0x12
    2fe6:	93 89       	ldd	r25, Z+19	; 0x13
    2fe8:	a4 89       	ldd	r26, Z+20	; 0x14
    2fea:	b5 89       	ldd	r27, Z+21	; 0x15
    2fec:	28 0f       	add	r18, r24
    2fee:	39 1f       	adc	r19, r25
    2ff0:	4a 1f       	adc	r20, r26
    2ff2:	5b 1f       	adc	r21, r27
    2ff4:	04 c0       	rjmp	.+8      	; 0x2ffe <fat_write_file+0x1a0>
    2ff6:	20 e0       	ldi	r18, 0x00	; 0
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	40 e0       	ldi	r20, 0x00	; 0
    2ffc:	50 e0       	ldi	r21, 0x00	; 0
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
        uint16_t write_length = cluster_size - first_cluster_offset;
    2ffe:	71 01       	movw	r14, r2
    3000:	e8 18       	sub	r14, r8
    3002:	f9 08       	sbc	r15, r9
    3004:	ae 14       	cp	r10, r14
    3006:	bf 04       	cpc	r11, r15
    3008:	08 f4       	brcc	.+2      	; 0x300c <fat_write_file+0x1ae>
    300a:	75 01       	movw	r14, r10
        if(write_length > buffer_left)
            write_length = buffer_left;

        /* write data which fits into the current cluster */
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
    300c:	d6 01       	movw	r26, r12
    300e:	ed 91       	ld	r30, X+
    3010:	fc 91       	ld	r31, X
    3012:	c4 01       	movw	r24, r8
    3014:	a0 e0       	ldi	r26, 0x00	; 0
    3016:	b0 e0       	ldi	r27, 0x00	; 0
    3018:	28 0f       	add	r18, r24
    301a:	39 1f       	adc	r19, r25
    301c:	4a 1f       	adc	r20, r26
    301e:	5b 1f       	adc	r21, r27
    3020:	04 80       	ldd	r0, Z+4	; 0x04
    3022:	f5 81       	ldd	r31, Z+5	; 0x05
    3024:	e0 2d       	mov	r30, r0
    3026:	ca 01       	movw	r24, r20
    3028:	b9 01       	movw	r22, r18
    302a:	49 81       	ldd	r20, Y+1	; 0x01
    302c:	5a 81       	ldd	r21, Y+2	; 0x02
    302e:	97 01       	movw	r18, r14
    3030:	09 95       	icall
    3032:	88 23       	and	r24, r24
    3034:	09 f4       	brne	.+2      	; 0x3038 <fat_write_file+0x1da>
    3036:	48 c0       	rjmp	.+144    	; 0x30c8 <fat_write_file+0x26a>
            break;

        /* calculate new file position */
        buffer += write_length;
        buffer_left -= write_length;
    3038:	ae 18       	sub	r10, r14
    303a:	bf 08       	sbc	r11, r15
        fd->pos += write_length;
    303c:	c7 01       	movw	r24, r14
    303e:	a0 e0       	ldi	r26, 0x00	; 0
    3040:	b0 e0       	ldi	r27, 0x00	; 0
    3042:	ed 81       	ldd	r30, Y+5	; 0x05
    3044:	fe 81       	ldd	r31, Y+6	; 0x06
    3046:	25 a5       	ldd	r18, Z+45	; 0x2d
    3048:	36 a5       	ldd	r19, Z+46	; 0x2e
    304a:	47 a5       	ldd	r20, Z+47	; 0x2f
    304c:	50 a9       	ldd	r21, Z+48	; 0x30
    304e:	28 0f       	add	r18, r24
    3050:	39 1f       	adc	r19, r25
    3052:	4a 1f       	adc	r20, r26
    3054:	5b 1f       	adc	r21, r27
    3056:	25 a7       	std	Z+45, r18	; 0x2d
    3058:	36 a7       	std	Z+46, r19	; 0x2e
    305a:	47 a7       	std	Z+47, r20	; 0x2f
    305c:	50 ab       	std	Z+48, r21	; 0x30

        if(first_cluster_offset + write_length >= cluster_size)
    305e:	c7 01       	movw	r24, r14
    3060:	88 0d       	add	r24, r8
    3062:	99 1d       	adc	r25, r9
    3064:	82 15       	cp	r24, r2
    3066:	93 05       	cpc	r25, r3
    3068:	08 f1       	brcs	.+66     	; 0x30ac <fat_write_file+0x24e>
        {
            /* we are on a cluster boundary, so get the next cluster */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    306a:	80 81       	ld	r24, Z
    306c:	91 81       	ldd	r25, Z+1	; 0x01
    306e:	b8 01       	movw	r22, r16
    3070:	0e 94 cf 02 	call	0x59e	; 0x59e <fat_get_next_cluster>
            if(!cluster_num_next && buffer_left > 0)
    3074:	00 97       	sbiw	r24, 0x00	; 0
    3076:	11 f0       	breq	.+4      	; 0x307c <fat_write_file+0x21e>
    3078:	8c 01       	movw	r16, r24
    307a:	16 c0       	rjmp	.+44     	; 0x30a8 <fat_write_file+0x24a>
    307c:	a1 14       	cp	r10, r1
    307e:	b1 04       	cpc	r11, r1
    3080:	59 f0       	breq	.+22     	; 0x3098 <fat_write_file+0x23a>
                /* we reached the last cluster, append a new one */
                cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    3082:	ed 81       	ldd	r30, Y+5	; 0x05
    3084:	fe 81       	ldd	r31, Y+6	; 0x06
    3086:	80 81       	ld	r24, Z
    3088:	91 81       	ldd	r25, Z+1	; 0x01
    308a:	b8 01       	movw	r22, r16
    308c:	41 e0       	ldi	r20, 0x01	; 1
    308e:	50 e0       	ldi	r21, 0x00	; 0
    3090:	0e 94 85 03 	call	0x70a	; 0x70a <fat_append_clusters>
            if(!cluster_num_next)
    3094:	00 97       	sbiw	r24, 0x00	; 0
    3096:	39 f4       	brne	.+14     	; 0x30a6 <fat_write_file+0x248>
            {
                fd->pos_cluster = 0;
    3098:	ad 81       	ldd	r26, Y+5	; 0x05
    309a:	be 81       	ldd	r27, Y+6	; 0x06
    309c:	d2 96       	adiw	r26, 0x32	; 50
    309e:	1c 92       	st	X, r1
    30a0:	1e 92       	st	-X, r1
    30a2:	d1 97       	sbiw	r26, 0x31	; 49
    30a4:	11 c0       	rjmp	.+34     	; 0x30c8 <fat_write_file+0x26a>
                break;
    30a6:	8c 01       	movw	r16, r24
    30a8:	88 24       	eor	r8, r8
    30aa:	99 24       	eor	r9, r9

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
        }

        fd->pos_cluster = cluster_num;
    30ac:	ed 81       	ldd	r30, Y+5	; 0x05
    30ae:	fe 81       	ldd	r31, Y+6	; 0x06
    30b0:	12 ab       	std	Z+50, r17	; 0x32
    30b2:	01 ab       	std	Z+49, r16	; 0x31

    } while(buffer_left > 0); /* check if we are done */
    30b4:	a1 14       	cp	r10, r1
    30b6:	b1 04       	cpc	r11, r1
    30b8:	39 f0       	breq	.+14     	; 0x30c8 <fat_write_file+0x26a>
        /* write data which fits into the current cluster */
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
            break;

        /* calculate new file position */
        buffer += write_length;
    30ba:	89 81       	ldd	r24, Y+1	; 0x01
    30bc:	9a 81       	ldd	r25, Y+2	; 0x02
    30be:	8e 0d       	add	r24, r14
    30c0:	9f 1d       	adc	r25, r15
    30c2:	9a 83       	std	Y+2, r25	; 0x02
    30c4:	89 83       	std	Y+1, r24	; 0x01
    30c6:	71 cf       	rjmp	.-286    	; 0x2faa <fat_write_file+0x14c>
        fd->pos_cluster = cluster_num;

    } while(buffer_left > 0); /* check if we are done */

    /* update directory entry */
    if(fd->pos > fd->dir_entry.file_size)
    30c8:	ed 81       	ldd	r30, Y+5	; 0x05
    30ca:	fe 81       	ldd	r31, Y+6	; 0x06
    30cc:	85 a5       	ldd	r24, Z+45	; 0x2d
    30ce:	96 a5       	ldd	r25, Z+46	; 0x2e
    30d0:	a7 a5       	ldd	r26, Z+47	; 0x2f
    30d2:	b0 a9       	ldd	r27, Z+48	; 0x30
    30d4:	e5 a0       	ldd	r14, Z+37	; 0x25
    30d6:	f6 a0       	ldd	r15, Z+38	; 0x26
    30d8:	07 a1       	ldd	r16, Z+39	; 0x27
    30da:	10 a5       	ldd	r17, Z+40	; 0x28
    30dc:	e8 16       	cp	r14, r24
    30de:	f9 06       	cpc	r15, r25
    30e0:	0a 07       	cpc	r16, r26
    30e2:	1b 07       	cpc	r17, r27
    30e4:	c0 f4       	brcc	.+48     	; 0x3116 <fat_write_file+0x2b8>
#if !FAT_DELAY_DIRENTRY_UPDATE
        uint32_t size_old = fd->dir_entry.file_size;
#endif

        /* update file size */
        fd->dir_entry.file_size = fd->pos;
    30e6:	85 a3       	std	Z+37, r24	; 0x25
    30e8:	96 a3       	std	Z+38, r25	; 0x26
    30ea:	a7 a3       	std	Z+39, r26	; 0x27
    30ec:	b0 a7       	std	Z+40, r27	; 0x28

#if !FAT_DELAY_DIRENTRY_UPDATE
        /* write directory entry */
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    30ee:	81 91       	ld	r24, Z+
    30f0:	91 91       	ld	r25, Z+
    30f2:	bf 01       	movw	r22, r30
    30f4:	0e 94 05 13 	call	0x260a	; 0x260a <fat_write_dir_entry>
    30f8:	88 23       	and	r24, r24
    30fa:	69 f4       	brne	.+26     	; 0x3116 <fat_write_file+0x2b8>
        {
            /* We do not return an error here since we actually wrote
             * some data to disk. So we calculate the amount of data
             * we wrote to disk and which lies within the old file size.
             */
            buffer_left = fd->pos - size_old;
    30fc:	ad 81       	ldd	r26, Y+5	; 0x05
    30fe:	be 81       	ldd	r27, Y+6	; 0x06
    3100:	9d 96       	adiw	r26, 0x2d	; 45
    3102:	ad 90       	ld	r10, X+
    3104:	bc 90       	ld	r11, X
    3106:	9e 97       	sbiw	r26, 0x2e	; 46
    3108:	ae 18       	sub	r10, r14
    310a:	bf 08       	sbc	r11, r15
            fd->pos = size_old;
    310c:	fd 01       	movw	r30, r26
    310e:	e5 a6       	std	Z+45, r14	; 0x2d
    3110:	f6 a6       	std	Z+46, r15	; 0x2e
    3112:	07 a7       	std	Z+47, r16	; 0x2f
    3114:	10 ab       	std	Z+48, r17	; 0x30
        }
#endif
    }

    return buffer_len - buffer_left;
    3116:	4b 81       	ldd	r20, Y+3	; 0x03
    3118:	5c 81       	ldd	r21, Y+4	; 0x04
    311a:	4a 19       	sub	r20, r10
    311c:	5b 09       	sbc	r21, r11
    311e:	02 c0       	rjmp	.+4      	; 0x3124 <fat_write_file+0x2c6>
    3120:	4f ef       	ldi	r20, 0xFF	; 255
    3122:	5f ef       	ldi	r21, 0xFF	; 255
}
    3124:	ca 01       	movw	r24, r20
    3126:	26 96       	adiw	r28, 0x06	; 6
    3128:	0f b6       	in	r0, 0x3f	; 63
    312a:	f8 94       	cli
    312c:	de bf       	out	0x3e, r29	; 62
    312e:	0f be       	out	0x3f, r0	; 63
    3130:	cd bf       	out	0x3d, r28	; 61
    3132:	cf 91       	pop	r28
    3134:	df 91       	pop	r29
    3136:	1f 91       	pop	r17
    3138:	0f 91       	pop	r16
    313a:	ff 90       	pop	r15
    313c:	ef 90       	pop	r14
    313e:	df 90       	pop	r13
    3140:	cf 90       	pop	r12
    3142:	bf 90       	pop	r11
    3144:	af 90       	pop	r10
    3146:	9f 90       	pop	r9
    3148:	8f 90       	pop	r8
    314a:	7f 90       	pop	r7
    314c:	6f 90       	pop	r6
    314e:	5f 90       	pop	r5
    3150:	4f 90       	pop	r4
    3152:	3f 90       	pop	r3
    3154:	2f 90       	pop	r2
    3156:	08 95       	ret

00003158 <write_data_block>:

    return 0;
}

int write_data_block(const char* fname, uint8_t *data, int length)
{
    3158:	cf 92       	push	r12
    315a:	df 92       	push	r13
    315c:	ef 92       	push	r14
    315e:	ff 92       	push	r15
    3160:	0f 93       	push	r16
    3162:	1f 93       	push	r17
    3164:	cf 93       	push	r28
    3166:	df 93       	push	r29
    3168:	8c 01       	movw	r16, r24
    316a:	6b 01       	movw	r12, r22
    316c:	7a 01       	movw	r14, r20
	//char buffer[8];
	//uint8_t buf_len;

	if(!fs || !dd )
    316e:	80 91 f0 03 	lds	r24, 0x03F0
    3172:	90 91 f1 03 	lds	r25, 0x03F1
    3176:	00 97       	sbiw	r24, 0x00	; 0
    3178:	39 f0       	breq	.+14     	; 0x3188 <write_data_block+0x30>
    317a:	60 91 f4 03 	lds	r22, 0x03F4
    317e:	70 91 f5 03 	lds	r23, 0x03F5
    3182:	61 15       	cp	r22, r1
    3184:	71 05       	cpc	r23, r1
    3186:	59 f4       	brne	.+22     	; 0x319e <write_data_block+0x46>
	{
		uart_puts_p(PSTR("SD Card not initialized properly\n"));
    3188:	82 e7       	ldi	r24, 0x72	; 114
    318a:	91 e0       	ldi	r25, 0x01	; 1
    318c:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_puts_p>
		uart_puts_p(PSTR("call init_sdcard() first\n"));
    3190:	88 e5       	ldi	r24, 0x58	; 88
    3192:	91 e0       	ldi	r25, 0x01	; 1
    3194:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_puts_p>
    3198:	2f ef       	ldi	r18, 0xFF	; 255
    319a:	3f ef       	ldi	r19, 0xFF	; 255
    319c:	52 c0       	rjmp	.+164    	; 0x3242 <write_data_block+0xea>
		return -1;
	}

    /* search file in current directory and open it */
    struct fat_file_struct* fd = open_file_in_dir(fs, dd, fname );
    319e:	a8 01       	movw	r20, r16
    31a0:	0e 94 5d 11 	call	0x22ba	; 0x22ba <open_file_in_dir>
    31a4:	ec 01       	movw	r28, r24
    if(!fd)
    31a6:	00 97       	sbiw	r24, 0x00	; 0
    31a8:	69 f4       	brne	.+26     	; 0x31c4 <write_data_block+0x6c>
    {
        uart_puts_p(PSTR("error opening "));
    31aa:	89 e4       	ldi	r24, 0x49	; 73
    31ac:	91 e0       	ldi	r25, 0x01	; 1
    31ae:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_puts_p>
        uart_puts(fname);
    31b2:	c8 01       	movw	r24, r16
    31b4:	0e 94 98 02 	call	0x530	; 0x530 <uart_puts>
        uart_putc('\n');
    31b8:	8a e0       	ldi	r24, 0x0A	; 10
    31ba:	0e 94 a9 01 	call	0x352	; 0x352 <uart_putc>
    31be:	2e ef       	ldi	r18, 0xFE	; 254
    31c0:	3f ef       	ldi	r19, 0xFF	; 255
    31c2:	3f c0       	rjmp	.+126    	; 0x3242 <write_data_block+0xea>
        return -2;
    }

    /* set the file_offset */
    if(!fat_seek_file(fd, &file_offset, FAT_SEEK_SET))
    31c4:	64 e2       	ldi	r22, 0x24	; 36
    31c6:	71 e0       	ldi	r23, 0x01	; 1
    31c8:	40 e0       	ldi	r20, 0x00	; 0
    31ca:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <fat_seek_file>
    31ce:	88 23       	and	r24, r24
    31d0:	61 f4       	brne	.+24     	; 0x31ea <write_data_block+0x92>
    {
        uart_puts_p(PSTR("error seeking on "));
    31d2:	87 e3       	ldi	r24, 0x37	; 55
    31d4:	91 e0       	ldi	r25, 0x01	; 1
    31d6:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_puts_p>
        uart_putc('\n');
    31da:	8a e0       	ldi	r24, 0x0A	; 10
    31dc:	0e 94 a9 01 	call	0x352	; 0x352 <uart_putc>
#endif

#if USE_DYNAMIC_MEMORY
        free(fd);
#else
        fd->fs = 0;
    31e0:	19 82       	std	Y+1, r1	; 0x01
    31e2:	18 82       	st	Y, r1
    31e4:	2d ef       	ldi	r18, 0xFD	; 253
    31e6:	3f ef       	ldi	r19, 0xFF	; 255
    31e8:	2c c0       	rjmp	.+88     	; 0x3242 <write_data_block+0xea>
    }

    //buf_len = sprintf( buffer, "%03d ", data);
    /* write text to file */

    if(fat_write_file(fd, (uint8_t*)data, length) != length)
    31ea:	ce 01       	movw	r24, r28
    31ec:	b6 01       	movw	r22, r12
    31ee:	a7 01       	movw	r20, r14
    31f0:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <fat_write_file>
    31f4:	8e 15       	cp	r24, r14
    31f6:	9f 05       	cpc	r25, r15
    31f8:	39 f0       	breq	.+14     	; 0x3208 <write_data_block+0xb0>
    {
        uart_puts_p(PSTR("error writing to file\n"));
    31fa:	80 e2       	ldi	r24, 0x20	; 32
    31fc:	91 e0       	ldi	r25, 0x01	; 1
    31fe:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_puts_p>
    3202:	2c ef       	ldi	r18, 0xFC	; 252
    3204:	3f ef       	ldi	r19, 0xFF	; 255
    3206:	1d c0       	rjmp	.+58     	; 0x3242 <write_data_block+0xea>
        return -4;
    }

    file_offset += length;
    3208:	9c 01       	movw	r18, r24
    320a:	44 27       	eor	r20, r20
    320c:	37 fd       	sbrc	r19, 7
    320e:	40 95       	com	r20
    3210:	54 2f       	mov	r21, r20
    3212:	80 91 24 01 	lds	r24, 0x0124
    3216:	90 91 25 01 	lds	r25, 0x0125
    321a:	a0 91 26 01 	lds	r26, 0x0126
    321e:	b0 91 27 01 	lds	r27, 0x0127
    3222:	82 0f       	add	r24, r18
    3224:	93 1f       	adc	r25, r19
    3226:	a4 1f       	adc	r26, r20
    3228:	b5 1f       	adc	r27, r21
    322a:	80 93 24 01 	sts	0x0124, r24
    322e:	90 93 25 01 	sts	0x0125, r25
    3232:	a0 93 26 01 	sts	0x0126, r26
    3236:	b0 93 27 01 	sts	0x0127, r27
    323a:	19 82       	std	Y+1, r1	; 0x01
    323c:	18 82       	st	Y, r1
    323e:	20 e0       	ldi	r18, 0x00	; 0
    3240:	30 e0       	ldi	r19, 0x00	; 0

    fat_close_file(fd);

    return 0;
}
    3242:	c9 01       	movw	r24, r18
    3244:	df 91       	pop	r29
    3246:	cf 91       	pop	r28
    3248:	1f 91       	pop	r17
    324a:	0f 91       	pop	r16
    324c:	ff 90       	pop	r15
    324e:	ef 90       	pop	r14
    3250:	df 90       	pop	r13
    3252:	cf 90       	pop	r12
    3254:	08 95       	ret

00003256 <fat_get_dir_entry_of_path>:
 * \param[out] dir_entry The directory entry to fill.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
    3256:	6f 92       	push	r6
    3258:	7f 92       	push	r7
    325a:	8f 92       	push	r8
    325c:	9f 92       	push	r9
    325e:	af 92       	push	r10
    3260:	bf 92       	push	r11
    3262:	cf 92       	push	r12
    3264:	df 92       	push	r13
    3266:	ef 92       	push	r14
    3268:	ff 92       	push	r15
    326a:	0f 93       	push	r16
    326c:	1f 93       	push	r17
    326e:	cf 93       	push	r28
    3270:	df 93       	push	r29
    3272:	4c 01       	movw	r8, r24
    3274:	eb 01       	movw	r28, r22
    3276:	7a 01       	movw	r14, r20
    if(!fs || !path || path[0] == '\0' || !dir_entry)
    3278:	00 97       	sbiw	r24, 0x00	; 0
    327a:	09 f4       	brne	.+2      	; 0x327e <fat_get_dir_entry_of_path+0x28>
    327c:	67 c0       	rjmp	.+206    	; 0x334c <fat_get_dir_entry_of_path+0xf6>
    327e:	61 15       	cp	r22, r1
    3280:	71 05       	cpc	r23, r1
    3282:	09 f4       	brne	.+2      	; 0x3286 <fat_get_dir_entry_of_path+0x30>
    3284:	63 c0       	rjmp	.+198    	; 0x334c <fat_get_dir_entry_of_path+0xf6>
    3286:	88 81       	ld	r24, Y
    3288:	88 23       	and	r24, r24
    328a:	09 f4       	brne	.+2      	; 0x328e <fat_get_dir_entry_of_path+0x38>
    328c:	5f c0       	rjmp	.+190    	; 0x334c <fat_get_dir_entry_of_path+0xf6>
    328e:	41 15       	cp	r20, r1
    3290:	51 05       	cpc	r21, r1
    3292:	09 f4       	brne	.+2      	; 0x3296 <fat_get_dir_entry_of_path+0x40>
    3294:	5b c0       	rjmp	.+182    	; 0x334c <fat_get_dir_entry_of_path+0xf6>
        return 0;

    if(path[0] == '/')
    3296:	8f 32       	cpi	r24, 0x2F	; 47
    3298:	09 f4       	brne	.+2      	; 0x329c <fat_get_dir_entry_of_path+0x46>
        ++path;
    329a:	21 96       	adiw	r28, 0x01	; 1

    /* begin with the root directory */
    memset(dir_entry, 0, sizeof(*dir_entry));
    329c:	8b e2       	ldi	r24, 0x2B	; 43
    329e:	f7 01       	movw	r30, r14
    32a0:	11 92       	st	Z+, r1
    32a2:	8a 95       	dec	r24
    32a4:	e9 f7       	brne	.-6      	; 0x32a0 <fat_get_dir_entry_of_path+0x4a>
    dir_entry->attributes = FAT_ATTRIB_DIR;
    32a6:	80 e1       	ldi	r24, 0x10	; 16
    32a8:	f7 01       	movw	r30, r14
    32aa:	80 a3       	std	Z+32, r24	; 0x20
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    32ac:	37 01       	movw	r6, r14
    32ae:	01 c0       	rjmp	.+2      	; 0x32b2 <fat_get_dir_entry_of_path+0x5c>
    32b0:	e5 01       	movw	r28, r10
    memset(dir_entry, 0, sizeof(*dir_entry));
    dir_entry->attributes = FAT_ATTRIB_DIR;

    while(1)
    {
        if(path[0] == '\0')
    32b2:	88 81       	ld	r24, Y
    32b4:	88 23       	and	r24, r24
    32b6:	09 f4       	brne	.+2      	; 0x32ba <fat_get_dir_entry_of_path+0x64>
    32b8:	4b c0       	rjmp	.+150    	; 0x3350 <fat_get_dir_entry_of_path+0xfa>
            return 1;

        struct fat_dir_struct* dd = fat_open_dir(fs, dir_entry);
    32ba:	c4 01       	movw	r24, r8
    32bc:	b7 01       	movw	r22, r14
    32be:	0e 94 7d 10 	call	0x20fa	; 0x20fa <fat_open_dir>
    32c2:	6c 01       	movw	r12, r24
        if(!dd)
    32c4:	00 97       	sbiw	r24, 0x00	; 0
    32c6:	09 f4       	brne	.+2      	; 0x32ca <fat_get_dir_entry_of_path+0x74>
    32c8:	41 c0       	rjmp	.+130    	; 0x334c <fat_get_dir_entry_of_path+0xf6>
            break;

        /* extract the next hierarchy we will search for */
        const char* sub_path = strchr(path, '/');
    32ca:	ce 01       	movw	r24, r28
    32cc:	6f e2       	ldi	r22, 0x2F	; 47
    32ce:	70 e0       	ldi	r23, 0x00	; 0
    32d0:	0e 94 0b 1c 	call	0x3816	; 0x3816 <strchr>
        uint8_t length_to_sep;
        if(sub_path)
    32d4:	00 97       	sbiw	r24, 0x00	; 0
    32d6:	39 f0       	breq	.+14     	; 0x32e6 <fat_get_dir_entry_of_path+0x90>
        {
            length_to_sep = sub_path - path;
    32d8:	48 2f       	mov	r20, r24
    32da:	4c 1b       	sub	r20, r28
            ++sub_path;
    32dc:	5c 01       	movw	r10, r24
    32de:	08 94       	sec
    32e0:	a1 1c       	adc	r10, r1
    32e2:	b1 1c       	adc	r11, r1
    32e4:	2a c0       	rjmp	.+84     	; 0x333a <fat_get_dir_entry_of_path+0xe4>
        }
        else
        {
            length_to_sep = strlen(path);
    32e6:	fe 01       	movw	r30, r28
    32e8:	01 90       	ld	r0, Z+
    32ea:	00 20       	and	r0, r0
    32ec:	e9 f7       	brne	.-6      	; 0x32e8 <fat_get_dir_entry_of_path+0x92>
    32ee:	31 97       	sbiw	r30, 0x01	; 1
    32f0:	4e 2f       	mov	r20, r30
    32f2:	4c 1b       	sub	r20, r28
            sub_path = path + length_to_sep;
    32f4:	5e 01       	movw	r10, r28
    32f6:	a4 0e       	add	r10, r20
    32f8:	b1 1c       	adc	r11, r1
    32fa:	1f c0       	rjmp	.+62     	; 0x333a <fat_get_dir_entry_of_path+0xe4>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    32fc:	f3 01       	movw	r30, r6
    32fe:	01 90       	ld	r0, Z+
    3300:	00 20       	and	r0, r0
    3302:	e9 f7       	brne	.-6      	; 0x32fe <fat_get_dir_entry_of_path+0xa8>
    3304:	31 97       	sbiw	r30, 0x01	; 1
    3306:	e6 19       	sub	r30, r6
    3308:	f7 09       	sbc	r31, r7
    330a:	e0 17       	cp	r30, r16
    330c:	f1 07       	cpc	r31, r17
    330e:	b9 f4       	brne	.+46     	; 0x333e <fat_get_dir_entry_of_path+0xe8>
    3310:	ce 01       	movw	r24, r28
    3312:	b3 01       	movw	r22, r6
    3314:	a8 01       	movw	r20, r16
    3316:	0e 94 1f 1c 	call	0x383e	; 0x383e <strncmp>
    331a:	00 97       	sbiw	r24, 0x00	; 0
    331c:	81 f4       	brne	.+32     	; 0x333e <fat_get_dir_entry_of_path+0xe8>
{
    if(dd)
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
    331e:	f6 01       	movw	r30, r12
    3320:	11 82       	std	Z+1, r1	; 0x01
    3322:	10 82       	st	Z, r1
                continue;

            fat_close_dir(dd);
            dd = 0;

            if(path[length_to_sep] == '\0')
    3324:	0c 0f       	add	r16, r28
    3326:	1d 1f       	adc	r17, r29
    3328:	f8 01       	movw	r30, r16
    332a:	80 81       	ld	r24, Z
    332c:	88 23       	and	r24, r24
    332e:	81 f0       	breq	.+32     	; 0x3350 <fat_get_dir_entry_of_path+0xfa>
                /* we iterated through the whole path and have found the file */
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
    3330:	f7 01       	movw	r30, r14
    3332:	80 a1       	ldd	r24, Z+32	; 0x20
    3334:	84 fd       	sbrc	r24, 4
    3336:	bc cf       	rjmp	.-136    	; 0x32b0 <fat_get_dir_entry_of_path+0x5a>
    3338:	09 c0       	rjmp	.+18     	; 0x334c <fat_get_dir_entry_of_path+0xf6>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    333a:	04 2f       	mov	r16, r20
    333c:	10 e0       	ldi	r17, 0x00	; 0
            length_to_sep = strlen(path);
            sub_path = path + length_to_sep;
        }
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
    333e:	c6 01       	movw	r24, r12
    3340:	b7 01       	movw	r22, r14
    3342:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <fat_read_dir>
    3346:	88 23       	and	r24, r24
    3348:	c9 f6       	brne	.-78     	; 0x32fc <fat_get_dir_entry_of_path+0xa6>
    334a:	12 c0       	rjmp	.+36     	; 0x3370 <fat_get_dir_entry_of_path+0x11a>
    334c:	80 e0       	ldi	r24, 0x00	; 0
    334e:	01 c0       	rjmp	.+2      	; 0x3352 <fat_get_dir_entry_of_path+0xfc>
    3350:	81 e0       	ldi	r24, 0x01	; 1

        fat_close_dir(dd);
    }
    
    return 0;
}
    3352:	df 91       	pop	r29
    3354:	cf 91       	pop	r28
    3356:	1f 91       	pop	r17
    3358:	0f 91       	pop	r16
    335a:	ff 90       	pop	r15
    335c:	ef 90       	pop	r14
    335e:	df 90       	pop	r13
    3360:	cf 90       	pop	r12
    3362:	bf 90       	pop	r11
    3364:	af 90       	pop	r10
    3366:	9f 90       	pop	r9
    3368:	8f 90       	pop	r8
    336a:	7f 90       	pop	r7
    336c:	6f 90       	pop	r6
    336e:	08 95       	ret
{
    if(dd)
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
    3370:	f6 01       	movw	r30, r12
    3372:	11 82       	std	Z+1, r1	; 0x01
    3374:	10 82       	st	Z, r1
    3376:	9d cf       	rjmp	.-198    	; 0x32b2 <fat_get_dir_entry_of_path+0x5c>

00003378 <init_sdcard>:
struct partition_struct* partition;
struct fat_fs_struct*    fs;
struct fat_dir_struct*   dd;

int init_sdcard()
{
    3378:	ef 92       	push	r14
    337a:	ff 92       	push	r15
    337c:	0f 93       	push	r16
    337e:	1f 93       	push	r17
    3380:	df 93       	push	r29
    3382:	cf 93       	push	r28
    3384:	cd b7       	in	r28, 0x3d	; 61
    3386:	de b7       	in	r29, 0x3e	; 62
    3388:	c4 54       	subi	r28, 0x44	; 68
    338a:	d0 40       	sbci	r29, 0x00	; 0
    338c:	0f b6       	in	r0, 0x3f	; 63
    338e:	f8 94       	cli
    3390:	de bf       	out	0x3e, r29	; 62
    3392:	0f be       	out	0x3f, r0	; 63
    3394:	cd bf       	out	0x3d, r28	; 61
    /* we will just use ordinary idle mode */
    set_sleep_mode(SLEEP_MODE_IDLE);
    3396:	83 b7       	in	r24, 0x33	; 51
    3398:	81 7f       	andi	r24, 0xF1	; 241
    339a:	83 bf       	out	0x33, r24	; 51
            continue;
        }

        /* open root directory */
        struct fat_dir_entry_struct directory;
        fat_get_dir_entry_of_path(fs, "/", &directory);
    339c:	4a e1       	ldi	r20, 0x1A	; 26
    339e:	e4 2e       	mov	r14, r20
    33a0:	f1 2c       	mov	r15, r1
    33a2:	ec 0e       	add	r14, r28
    33a4:	fd 1e       	adc	r15, r29
    set_sleep_mode(SLEEP_MODE_IDLE);

    while(1)
    {
        /* setup sd card slot */
        if(!sd_raw_init())
    33a6:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <sd_raw_init>
    33aa:	88 23       	and	r24, r24
    33ac:	19 f4       	brne	.+6      	; 0x33b4 <init_sdcard+0x3c>
        {
#if DEBUG
            uart_puts_p(PSTR("MMC/SD initialization failed\n"));
    33ae:	82 e7       	ldi	r24, 0x72	; 114
    33b0:	92 e0       	ldi	r25, 0x02	; 2
    33b2:	48 c0       	rjmp	.+144    	; 0x3444 <init_sdcard+0xcc>
#endif
            continue;
        }

        /* open first partition */
        partition = partition_open(sd_raw_read,
    33b4:	8b e5       	ldi	r24, 0x5B	; 91
    33b6:	9e e0       	ldi	r25, 0x0E	; 14
    33b8:	69 e1       	ldi	r22, 0x19	; 25
    33ba:	7f e0       	ldi	r23, 0x0F	; 15
    33bc:	4b e6       	ldi	r20, 0x6B	; 107
    33be:	5d e0       	ldi	r21, 0x0D	; 13
    33c0:	22 e2       	ldi	r18, 0x22	; 34
    33c2:	30 e1       	ldi	r19, 0x10	; 16
    33c4:	00 e0       	ldi	r16, 0x00	; 0
    33c6:	0e 94 97 07 	call	0xf2e	; 0xf2e <partition_open>
    33ca:	90 93 f3 03 	sts	0x03F3, r25
    33ce:	80 93 f2 03 	sts	0x03F2, r24
                                                            0,
#endif
                                                            0
                                                           );

        if(!partition)
    33d2:	89 2b       	or	r24, r25
    33d4:	a1 f4       	brne	.+40     	; 0x33fe <init_sdcard+0x86>
        {
            /* If the partition did not open, assume the storage device
             * is a "superfloppy", i.e. has no MBR.
             */
            partition = partition_open(sd_raw_read,
    33d6:	8b e5       	ldi	r24, 0x5B	; 91
    33d8:	9e e0       	ldi	r25, 0x0E	; 14
    33da:	69 e1       	ldi	r22, 0x19	; 25
    33dc:	7f e0       	ldi	r23, 0x0F	; 15
    33de:	4b e6       	ldi	r20, 0x6B	; 107
    33e0:	5d e0       	ldi	r21, 0x0D	; 13
    33e2:	22 e2       	ldi	r18, 0x22	; 34
    33e4:	30 e1       	ldi	r19, 0x10	; 16
    33e6:	0f ef       	ldi	r16, 0xFF	; 255
    33e8:	0e 94 97 07 	call	0xf2e	; 0xf2e <partition_open>
    33ec:	90 93 f3 03 	sts	0x03F3, r25
    33f0:	80 93 f2 03 	sts	0x03F2, r24
                                       0,
                                       0,
#endif
                                       -1
                                      );
            if(!partition)
    33f4:	89 2b       	or	r24, r25
    33f6:	19 f4       	brne	.+6      	; 0x33fe <init_sdcard+0x86>
            {
#if DEBUG
                uart_puts_p(PSTR("opening partition failed\n"));
    33f8:	88 e5       	ldi	r24, 0x58	; 88
    33fa:	92 e0       	ldi	r25, 0x02	; 2
    33fc:	23 c0       	rjmp	.+70     	; 0x3444 <init_sdcard+0xcc>
                continue;
            }
        }

        /* open file system */
        fs = fat_open(partition);
    33fe:	80 91 f2 03 	lds	r24, 0x03F2
    3402:	90 91 f3 03 	lds	r25, 0x03F3
    3406:	0e 94 c8 0b 	call	0x1790	; 0x1790 <fat_open>
    340a:	90 93 f1 03 	sts	0x03F1, r25
    340e:	80 93 f0 03 	sts	0x03F0, r24
        if(!fs)
    3412:	00 97       	sbiw	r24, 0x00	; 0
    3414:	19 f4       	brne	.+6      	; 0x341c <init_sdcard+0xa4>
        {
#if DEBUG
            uart_puts_p(PSTR("opening filesystem failed\n"));
    3416:	8d e3       	ldi	r24, 0x3D	; 61
    3418:	92 e0       	ldi	r25, 0x02	; 2
    341a:	14 c0       	rjmp	.+40     	; 0x3444 <init_sdcard+0xcc>
            continue;
        }

        /* open root directory */
        struct fat_dir_entry_struct directory;
        fat_get_dir_entry_of_path(fs, "/", &directory);
    341c:	60 e0       	ldi	r22, 0x00	; 0
    341e:	71 e0       	ldi	r23, 0x01	; 1
    3420:	a7 01       	movw	r20, r14
    3422:	0e 94 2b 19 	call	0x3256	; 0x3256 <fat_get_dir_entry_of_path>

        dd = fat_open_dir(fs, &directory);
    3426:	80 91 f0 03 	lds	r24, 0x03F0
    342a:	90 91 f1 03 	lds	r25, 0x03F1
    342e:	b7 01       	movw	r22, r14
    3430:	0e 94 7d 10 	call	0x20fa	; 0x20fa <fat_open_dir>
    3434:	90 93 f5 03 	sts	0x03F5, r25
    3438:	80 93 f4 03 	sts	0x03F4, r24
        if(!dd)
    343c:	89 2b       	or	r24, r25
    343e:	29 f4       	brne	.+10     	; 0x344a <init_sdcard+0xd2>
        {
#if DEBUG
            uart_puts_p(PSTR("opening root directory failed\n"));
    3440:	8e e1       	ldi	r24, 0x1E	; 30
    3442:	92 e0       	ldi	r25, 0x02	; 2
    3444:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_puts_p>
    3448:	ae cf       	rjmp	.-164    	; 0x33a6 <init_sdcard+0x2e>
#endif
            continue;
        }
        
        /* print some card information as a boot message */
        print_disk_info(fs);
    344a:	00 91 f0 03 	lds	r16, 0x03F0
    344e:	10 91 f1 03 	lds	r17, 0x03F1
    return fat_open_file(fs, &file_entry);
}

uint8_t print_disk_info(const struct fat_fs_struct* fs)
{
    if(!fs)
    3452:	01 15       	cp	r16, r1
    3454:	11 05       	cpc	r17, r1
    3456:	09 f4       	brne	.+2      	; 0x345a <init_sdcard+0xe2>
    3458:	a1 c0       	rjmp	.+322    	; 0x359c <init_sdcard+0x224>
        return 0;

    struct sd_raw_info disk_info;
    if(!sd_raw_get_info(&disk_info))
    345a:	ce 01       	movw	r24, r28
    345c:	01 96       	adiw	r24, 0x01	; 1
    345e:	0e 94 73 08 	call	0x10e6	; 0x10e6 <sd_raw_get_info>
    3462:	88 23       	and	r24, r24
    3464:	09 f4       	brne	.+2      	; 0x3468 <init_sdcard+0xf0>
    3466:	9a c0       	rjmp	.+308    	; 0x359c <init_sdcard+0x224>
        return 0;

    uart_puts_p(PSTR("manuf:  0x")); uart_putc_hex(disk_info.manufacturer); uart_putc('\n');
    3468:	80 ef       	ldi	r24, 0xF0	; 240
    346a:	92 e0       	ldi	r25, 0x02	; 2
    346c:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_puts_p>
    3470:	89 81       	ldd	r24, Y+1	; 0x01
    3472:	0e 94 b8 01 	call	0x370	; 0x370 <uart_putc_hex>
    3476:	8a e0       	ldi	r24, 0x0A	; 10
    3478:	0e 94 a9 01 	call	0x352	; 0x352 <uart_putc>
    uart_puts_p(PSTR("oem:    ")); uart_puts((char*) disk_info.oem); uart_putc('\n');
    347c:	87 ee       	ldi	r24, 0xE7	; 231
    347e:	92 e0       	ldi	r25, 0x02	; 2
    3480:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_puts_p>
    3484:	ce 01       	movw	r24, r28
    3486:	02 96       	adiw	r24, 0x02	; 2
    3488:	0e 94 98 02 	call	0x530	; 0x530 <uart_puts>
    348c:	8a e0       	ldi	r24, 0x0A	; 10
    348e:	0e 94 a9 01 	call	0x352	; 0x352 <uart_putc>
    uart_puts_p(PSTR("prod:   ")); uart_puts((char*) disk_info.product); uart_putc('\n');
    3492:	8e ed       	ldi	r24, 0xDE	; 222
    3494:	92 e0       	ldi	r25, 0x02	; 2
    3496:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_puts_p>
    349a:	ce 01       	movw	r24, r28
    349c:	05 96       	adiw	r24, 0x05	; 5
    349e:	0e 94 98 02 	call	0x530	; 0x530 <uart_puts>
    34a2:	8a e0       	ldi	r24, 0x0A	; 10
    34a4:	0e 94 a9 01 	call	0x352	; 0x352 <uart_putc>
    uart_puts_p(PSTR("rev:    ")); uart_putc_hex(disk_info.revision); uart_putc('\n');
    34a8:	85 ed       	ldi	r24, 0xD5	; 213
    34aa:	92 e0       	ldi	r25, 0x02	; 2
    34ac:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_puts_p>
    34b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    34b2:	0e 94 b8 01 	call	0x370	; 0x370 <uart_putc_hex>
    34b6:	8a e0       	ldi	r24, 0x0A	; 10
    34b8:	0e 94 a9 01 	call	0x352	; 0x352 <uart_putc>
    uart_puts_p(PSTR("serial: 0x")); uart_putdw_hex(disk_info.serial); uart_putc('\n');
    34bc:	8a ec       	ldi	r24, 0xCA	; 202
    34be:	92 e0       	ldi	r25, 0x02	; 2
    34c0:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_puts_p>
    34c4:	6c 85       	ldd	r22, Y+12	; 0x0c
    34c6:	7d 85       	ldd	r23, Y+13	; 0x0d
    34c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    34ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    34cc:	0e 94 de 01 	call	0x3bc	; 0x3bc <uart_putdw_hex>
    34d0:	8a e0       	ldi	r24, 0x0A	; 10
    34d2:	0e 94 a9 01 	call	0x352	; 0x352 <uart_putc>
    uart_puts_p(PSTR("date:   ")); uart_putw_dec(disk_info.manufacturing_month); uart_putc('/');
    34d6:	81 ec       	ldi	r24, 0xC1	; 193
    34d8:	92 e0       	ldi	r25, 0x02	; 2
    34da:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_puts_p>
    34de:	89 89       	ldd	r24, Y+17	; 0x11
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <uart_putw_dec>
    34e6:	8f e2       	ldi	r24, 0x2F	; 47
    34e8:	0e 94 a9 01 	call	0x352	; 0x352 <uart_putc>
                                   uart_putw_dec(disk_info.manufacturing_year); uart_putc('\n');
    34ec:	88 89       	ldd	r24, Y+16	; 0x10
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <uart_putw_dec>
    34f4:	8a e0       	ldi	r24, 0x0A	; 10
    34f6:	0e 94 a9 01 	call	0x352	; 0x352 <uart_putc>
    uart_puts_p(PSTR("size:   ")); uart_putdw_dec(disk_info.capacity / 1024 / 1024); uart_puts_p(PSTR("MB\n"));
    34fa:	88 eb       	ldi	r24, 0xB8	; 184
    34fc:	92 e0       	ldi	r25, 0x02	; 2
    34fe:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_puts_p>
    3502:	6a 89       	ldd	r22, Y+18	; 0x12
    3504:	7b 89       	ldd	r23, Y+19	; 0x13
    3506:	8c 89       	ldd	r24, Y+20	; 0x14
    3508:	9d 89       	ldd	r25, Y+21	; 0x15
    350a:	34 e1       	ldi	r19, 0x14	; 20
    350c:	96 95       	lsr	r25
    350e:	87 95       	ror	r24
    3510:	77 95       	ror	r23
    3512:	67 95       	ror	r22
    3514:	3a 95       	dec	r19
    3516:	d1 f7       	brne	.-12     	; 0x350c <init_sdcard+0x194>
    3518:	0e 94 2f 02 	call	0x45e	; 0x45e <uart_putdw_dec>
    351c:	84 eb       	ldi	r24, 0xB4	; 180
    351e:	92 e0       	ldi	r25, 0x02	; 2
    3520:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_puts_p>
    uart_puts_p(PSTR("copy:   ")); uart_putw_dec(disk_info.flag_copy); uart_putc('\n');
    3524:	8b ea       	ldi	r24, 0xAB	; 171
    3526:	92 e0       	ldi	r25, 0x02	; 2
    3528:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_puts_p>
    352c:	8e 89       	ldd	r24, Y+22	; 0x16
    352e:	90 e0       	ldi	r25, 0x00	; 0
    3530:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <uart_putw_dec>
    3534:	8a e0       	ldi	r24, 0x0A	; 10
    3536:	0e 94 a9 01 	call	0x352	; 0x352 <uart_putc>
    uart_puts_p(PSTR("wr.pr.: ")); uart_putw_dec(disk_info.flag_write_protect_temp); uart_putc('/');
    353a:	82 ea       	ldi	r24, 0xA2	; 162
    353c:	92 e0       	ldi	r25, 0x02	; 2
    353e:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_puts_p>
    3542:	88 8d       	ldd	r24, Y+24	; 0x18
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <uart_putw_dec>
    354a:	8f e2       	ldi	r24, 0x2F	; 47
    354c:	0e 94 a9 01 	call	0x352	; 0x352 <uart_putc>
                                   uart_putw_dec(disk_info.flag_write_protect); uart_putc('\n');
    3550:	8f 89       	ldd	r24, Y+23	; 0x17
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <uart_putw_dec>
    3558:	8a e0       	ldi	r24, 0x0A	; 10
    355a:	0e 94 a9 01 	call	0x352	; 0x352 <uart_putc>
    uart_puts_p(PSTR("format: ")); uart_putw_dec(disk_info.format); uart_putc('\n');
    355e:	89 e9       	ldi	r24, 0x99	; 153
    3560:	92 e0       	ldi	r25, 0x02	; 2
    3562:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_puts_p>
    3566:	89 8d       	ldd	r24, Y+25	; 0x19
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <uart_putw_dec>
    356e:	8a e0       	ldi	r24, 0x0A	; 10
    3570:	0e 94 a9 01 	call	0x352	; 0x352 <uart_putc>
    uart_puts_p(PSTR("free:   ")); uart_putdw_dec(fat_get_fs_free(fs)); uart_putc('/');
    3574:	80 e9       	ldi	r24, 0x90	; 144
    3576:	92 e0       	ldi	r25, 0x02	; 2
    3578:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_puts_p>
    357c:	c8 01       	movw	r24, r16
    357e:	0e 94 74 06 	call	0xce8	; 0xce8 <fat_get_fs_free>
    3582:	0e 94 2f 02 	call	0x45e	; 0x45e <uart_putdw_dec>
    3586:	8f e2       	ldi	r24, 0x2F	; 47
    3588:	0e 94 a9 01 	call	0x352	; 0x352 <uart_putc>
                                   uart_putdw_dec(fat_get_fs_size(fs)); uart_putc('\n');
    358c:	c8 01       	movw	r24, r16
    358e:	0e 94 55 06 	call	0xcaa	; 0xcaa <fat_get_fs_size>
    3592:	0e 94 2f 02 	call	0x45e	; 0x45e <uart_putdw_dec>
    3596:	8a e0       	ldi	r24, 0x0A	; 10
    3598:	0e 94 a9 01 	call	0x352	; 0x352 <uart_putc>

        /* close partition */
        partition_close(partition);

    return 0;
}
    359c:	80 e0       	ldi	r24, 0x00	; 0
    359e:	90 e0       	ldi	r25, 0x00	; 0
    35a0:	cc 5b       	subi	r28, 0xBC	; 188
    35a2:	df 4f       	sbci	r29, 0xFF	; 255
    35a4:	0f b6       	in	r0, 0x3f	; 63
    35a6:	f8 94       	cli
    35a8:	de bf       	out	0x3e, r29	; 62
    35aa:	0f be       	out	0x3f, r0	; 63
    35ac:	cd bf       	out	0x3d, r28	; 61
    35ae:	cf 91       	pop	r28
    35b0:	df 91       	pop	r29
    35b2:	1f 91       	pop	r17
    35b4:	0f 91       	pop	r16
    35b6:	ff 90       	pop	r15
    35b8:	ef 90       	pop	r14
    35ba:	08 95       	ret

000035bc <write_data>:

// ?????
int32_t file_offset = 0;

int write_data(const char* fname, unsigned int data)
{
    35bc:	cf 92       	push	r12
    35be:	df 92       	push	r13
    35c0:	ef 92       	push	r14
    35c2:	ff 92       	push	r15
    35c4:	0f 93       	push	r16
    35c6:	1f 93       	push	r17
    35c8:	df 93       	push	r29
    35ca:	cf 93       	push	r28
    35cc:	cd b7       	in	r28, 0x3d	; 61
    35ce:	de b7       	in	r29, 0x3e	; 62
    35d0:	28 97       	sbiw	r28, 0x08	; 8
    35d2:	0f b6       	in	r0, 0x3f	; 63
    35d4:	f8 94       	cli
    35d6:	de bf       	out	0x3e, r29	; 62
    35d8:	0f be       	out	0x3f, r0	; 63
    35da:	cd bf       	out	0x3d, r28	; 61
    35dc:	8c 01       	movw	r16, r24
    35de:	6b 01       	movw	r12, r22
	char buffer[8];
	uint8_t buf_len;

	if(!fs || !dd )
    35e0:	80 91 f0 03 	lds	r24, 0x03F0
    35e4:	90 91 f1 03 	lds	r25, 0x03F1
    35e8:	00 97       	sbiw	r24, 0x00	; 0
    35ea:	39 f0       	breq	.+14     	; 0x35fa <write_data+0x3e>
    35ec:	60 91 f4 03 	lds	r22, 0x03F4
    35f0:	70 91 f5 03 	lds	r23, 0x03F5
    35f4:	61 15       	cp	r22, r1
    35f6:	71 05       	cpc	r23, r1
    35f8:	59 f4       	brne	.+22     	; 0x3610 <write_data+0x54>
	{
		uart_puts_p(PSTR("SD Card not initialized properly\n"));
    35fa:	86 ee       	ldi	r24, 0xE6	; 230
    35fc:	91 e0       	ldi	r25, 0x01	; 1
    35fe:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_puts_p>
		uart_puts_p(PSTR("call init_sdcard() first\n"));
    3602:	8c ec       	ldi	r24, 0xCC	; 204
    3604:	91 e0       	ldi	r25, 0x01	; 1
    3606:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_puts_p>
    360a:	2f ef       	ldi	r18, 0xFF	; 255
    360c:	3f ef       	ldi	r19, 0xFF	; 255
    360e:	72 c0       	rjmp	.+228    	; 0x36f4 <write_data+0x138>
		return -1;
	}

    /* search file in current directory and open it */
    struct fat_file_struct* fd = open_file_in_dir(fs, dd, fname );
    3610:	a8 01       	movw	r20, r16
    3612:	0e 94 5d 11 	call	0x22ba	; 0x22ba <open_file_in_dir>
    3616:	7c 01       	movw	r14, r24
    if(!fd)
    3618:	00 97       	sbiw	r24, 0x00	; 0
    361a:	69 f4       	brne	.+26     	; 0x3636 <write_data+0x7a>
    {
        uart_puts_p(PSTR("error opening "));
    361c:	8d eb       	ldi	r24, 0xBD	; 189
    361e:	91 e0       	ldi	r25, 0x01	; 1
    3620:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_puts_p>
        uart_puts(fname);
    3624:	c8 01       	movw	r24, r16
    3626:	0e 94 98 02 	call	0x530	; 0x530 <uart_puts>
        uart_putc('\n');
    362a:	8a e0       	ldi	r24, 0x0A	; 10
    362c:	0e 94 a9 01 	call	0x352	; 0x352 <uart_putc>
    3630:	2e ef       	ldi	r18, 0xFE	; 254
    3632:	3f ef       	ldi	r19, 0xFF	; 255
    3634:	5f c0       	rjmp	.+190    	; 0x36f4 <write_data+0x138>
        return -2;
    }

    /* set the file_offset */
    if(!fat_seek_file(fd, &file_offset, FAT_SEEK_SET))
    3636:	64 e2       	ldi	r22, 0x24	; 36
    3638:	71 e0       	ldi	r23, 0x01	; 1
    363a:	40 e0       	ldi	r20, 0x00	; 0
    363c:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <fat_seek_file>
    3640:	88 23       	and	r24, r24
    3642:	69 f4       	brne	.+26     	; 0x365e <write_data+0xa2>
    {
        uart_puts_p(PSTR("error seeking on "));
    3644:	8b ea       	ldi	r24, 0xAB	; 171
    3646:	91 e0       	ldi	r25, 0x01	; 1
    3648:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_puts_p>
        uart_putc('\n');
    364c:	8a e0       	ldi	r24, 0x0A	; 10
    364e:	0e 94 a9 01 	call	0x352	; 0x352 <uart_putc>
#endif

#if USE_DYNAMIC_MEMORY
        free(fd);
#else
        fd->fs = 0;
    3652:	d7 01       	movw	r26, r14
    3654:	1d 92       	st	X+, r1
    3656:	1c 92       	st	X, r1
    3658:	2d ef       	ldi	r18, 0xFD	; 253
    365a:	3f ef       	ldi	r19, 0xFF	; 255
    365c:	4b c0       	rjmp	.+150    	; 0x36f4 <write_data+0x138>
        fat_close_file(fd);
        return -3;
    }

    buf_len = sprintf( buffer, "%03d ", data);
    365e:	00 d0       	rcall	.+0      	; 0x3660 <write_data+0xa4>
    3660:	00 d0       	rcall	.+0      	; 0x3662 <write_data+0xa6>
    3662:	00 d0       	rcall	.+0      	; 0x3664 <write_data+0xa8>
    3664:	ed b7       	in	r30, 0x3d	; 61
    3666:	fe b7       	in	r31, 0x3e	; 62
    3668:	31 96       	adiw	r30, 0x01	; 1
    366a:	8e 01       	movw	r16, r28
    366c:	0f 5f       	subi	r16, 0xFF	; 255
    366e:	1f 4f       	sbci	r17, 0xFF	; 255
    3670:	ad b7       	in	r26, 0x3d	; 61
    3672:	be b7       	in	r27, 0x3e	; 62
    3674:	12 96       	adiw	r26, 0x02	; 2
    3676:	1c 93       	st	X, r17
    3678:	0e 93       	st	-X, r16
    367a:	11 97       	sbiw	r26, 0x01	; 1
    367c:	82 e0       	ldi	r24, 0x02	; 2
    367e:	91 e0       	ldi	r25, 0x01	; 1
    3680:	93 83       	std	Z+3, r25	; 0x03
    3682:	82 83       	std	Z+2, r24	; 0x02
    3684:	d5 82       	std	Z+5, r13	; 0x05
    3686:	c4 82       	std	Z+4, r12	; 0x04
    3688:	0e 94 47 1c 	call	0x388e	; 0x388e <sprintf>
    368c:	d8 2e       	mov	r13, r24
    /* write text to file */
    if(fat_write_file(fd, (uint8_t*) buffer, buf_len) != buf_len)
    368e:	ed b7       	in	r30, 0x3d	; 61
    3690:	fe b7       	in	r31, 0x3e	; 62
    3692:	36 96       	adiw	r30, 0x06	; 6
    3694:	0f b6       	in	r0, 0x3f	; 63
    3696:	f8 94       	cli
    3698:	fe bf       	out	0x3e, r31	; 62
    369a:	0f be       	out	0x3f, r0	; 63
    369c:	ed bf       	out	0x3d, r30	; 61
    369e:	c7 01       	movw	r24, r14
    36a0:	b8 01       	movw	r22, r16
    36a2:	4d 2d       	mov	r20, r13
    36a4:	50 e0       	ldi	r21, 0x00	; 0
    36a6:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <fat_write_file>
    36aa:	2d 2d       	mov	r18, r13
    36ac:	30 e0       	ldi	r19, 0x00	; 0
    36ae:	82 17       	cp	r24, r18
    36b0:	93 07       	cpc	r25, r19
    36b2:	39 f0       	breq	.+14     	; 0x36c2 <write_data+0x106>
    {
        uart_puts_p(PSTR("error writing to file\n"));
    36b4:	84 e9       	ldi	r24, 0x94	; 148
    36b6:	91 e0       	ldi	r25, 0x01	; 1
    36b8:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_puts_p>
    36bc:	2c ef       	ldi	r18, 0xFC	; 252
    36be:	3f ef       	ldi	r19, 0xFF	; 255
    36c0:	19 c0       	rjmp	.+50     	; 0x36f4 <write_data+0x138>
        return -4;
    }

    file_offset += buf_len;
    36c2:	80 91 24 01 	lds	r24, 0x0124
    36c6:	90 91 25 01 	lds	r25, 0x0125
    36ca:	a0 91 26 01 	lds	r26, 0x0126
    36ce:	b0 91 27 01 	lds	r27, 0x0127
    36d2:	8d 0d       	add	r24, r13
    36d4:	91 1d       	adc	r25, r1
    36d6:	a1 1d       	adc	r26, r1
    36d8:	b1 1d       	adc	r27, r1
    36da:	80 93 24 01 	sts	0x0124, r24
    36de:	90 93 25 01 	sts	0x0125, r25
    36e2:	a0 93 26 01 	sts	0x0126, r26
    36e6:	b0 93 27 01 	sts	0x0127, r27
    36ea:	d7 01       	movw	r26, r14
    36ec:	1d 92       	st	X+, r1
    36ee:	1c 92       	st	X, r1
    36f0:	20 e0       	ldi	r18, 0x00	; 0
    36f2:	30 e0       	ldi	r19, 0x00	; 0

    fat_close_file(fd);

    return 0;
}
    36f4:	c9 01       	movw	r24, r18
    36f6:	28 96       	adiw	r28, 0x08	; 8
    36f8:	0f b6       	in	r0, 0x3f	; 63
    36fa:	f8 94       	cli
    36fc:	de bf       	out	0x3e, r29	; 62
    36fe:	0f be       	out	0x3f, r0	; 63
    3700:	cd bf       	out	0x3d, r28	; 61
    3702:	cf 91       	pop	r28
    3704:	df 91       	pop	r29
    3706:	1f 91       	pop	r17
    3708:	0f 91       	pop	r16
    370a:	ff 90       	pop	r15
    370c:	ef 90       	pop	r14
    370e:	df 90       	pop	r13
    3710:	cf 90       	pop	r12
    3712:	08 95       	ret

00003714 <main>:
int display_file(const char* fname);
int write_data(const char* fname, unsigned int data);
int write_data_block(const char* fname, uint8_t *data, int length);

int main (void)
{
    3714:	ef 92       	push	r14
    3716:	ff 92       	push	r15
    3718:	0f 93       	push	r16
    371a:	1f 93       	push	r17
    371c:	cf 93       	push	r28
    371e:	df 93       	push	r29
    ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
    3720:	80 91 7a 00 	lds	r24, 0x007A
    3724:	87 60       	ori	r24, 0x07	; 7
    3726:	80 93 7a 00 	sts	0x007A, r24
    ADMUX |= (0 << MUX1) | (0 << MUX0)|(0 << MUX2);
    372a:	80 91 7c 00 	lds	r24, 0x007C
    372e:	80 93 7c 00 	sts	0x007C, r24
   
    ADMUX |= (1 << REFS0);
    3732:	80 91 7c 00 	lds	r24, 0x007C
    3736:	80 64       	ori	r24, 0x40	; 64
    3738:	80 93 7c 00 	sts	0x007C, r24
    ADMUX |= (0 << ADLAR);
    373c:	80 91 7c 00 	lds	r24, 0x007C
    3740:	80 93 7c 00 	sts	0x007C, r24
   
    ADCSRA |= (1 << ADATE);
    3744:	80 91 7a 00 	lds	r24, 0x007A
    3748:	80 62       	ori	r24, 0x20	; 32
    374a:	80 93 7a 00 	sts	0x007A, r24
    ADCSRA |= (1 << ADEN);
    374e:	80 91 7a 00 	lds	r24, 0x007A
    3752:	80 68       	ori	r24, 0x80	; 128
    3754:	80 93 7a 00 	sts	0x007A, r24
    ADCSRA |= (1 << ADSC);
    3758:	80 91 7a 00 	lds	r24, 0x007A
    375c:	80 64       	ori	r24, 0x40	; 64
    375e:	80 93 7a 00 	sts	0x007A, r24
#define USE_SLEEP 1

void uart_init()
{
    /* set baud rate */
    UBRRH = UBRRVAL >> 8;
    3762:	10 92 c5 00 	sts	0x00C5, r1
    UBRRL = UBRRVAL & 0xff;
    3766:	87 e6       	ldi	r24, 0x67	; 103
    3768:	80 93 c4 00 	sts	0x00C4, r24
    /* set frame format: 8 bit, no parity, 1 bit */
    UCSRC = UCSRC_SELECT | (1 << UCSZ1) | (1 << UCSZ0);
    376c:	86 e0       	ldi	r24, 0x06	; 6
    376e:	80 93 c2 00 	sts	0x00C2, r24
    /* enable serial receiver and transmitter */
#if !USE_SLEEP
    UCSRB = (1 << RXEN) | (1 << TXEN);
#else
    UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
    3772:	88 e9       	ldi	r24, 0x98	; 152
    3774:	80 93 c1 00 	sts	0x00C1, r24
    unsigned int x=0;
	unsigned int counter=0;

  	uart_init();
	uart_puts_p(PSTR("uart initialised \r\n"));
    3778:	8a ea       	ldi	r24, 0xAA	; 170
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_puts_p>

 
   	init_sdcard();
    3780:	0e 94 bc 19 	call	0x3378	; 0x3378 <init_sdcard>

	uart_puts_p(PSTR("MicroSDcard initialised \r\n"));
    3784:	8f e8       	ldi	r24, 0x8F	; 143
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_puts_p>
   	delete_file( FILENAME );
    378c:	88 e0       	ldi	r24, 0x08	; 8
    378e:	91 e0       	ldi	r25, 0x01	; 1
    3790:	0e 94 17 11 	call	0x222e	; 0x222e <delete_file>

	uart_puts_p(PSTR("A new file will be created\r\n"));
    3794:	82 e7       	ldi	r24, 0x72	; 114
    3796:	90 e0       	ldi	r25, 0x00	; 0
    3798:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_puts_p>
   

   DDRD=255;
    379c:	8f ef       	ldi	r24, 0xFF	; 255
    379e:	8a b9       	out	0x0a, r24	; 10
   PORTD=11111111;
    37a0:	87 ec       	ldi	r24, 0xC7	; 199
    37a2:	8b b9       	out	0x0b, r24	; 11
   
   while( create_file (FILENAME) != 0 )
    37a4:	88 e0       	ldi	r24, 0x08	; 8
    37a6:	91 e0       	ldi	r25, 0x01	; 1
    37a8:	0e 94 7e 15 	call	0x2afc	; 0x2afc <create_file>
    37ac:	89 2b       	or	r24, r25
    37ae:	d1 f7       	brne	.-12     	; 0x37a4 <main+0x90>
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    37b0:	5f e3       	ldi	r21, 0x3F	; 63
    37b2:	e5 2e       	mov	r14, r21
    37b4:	5d e0       	ldi	r21, 0x0D	; 13
    37b6:	f5 2e       	mov	r15, r21
    37b8:	53 e0       	ldi	r21, 0x03	; 3
    37ba:	05 2f       	mov	r16, r21
    37bc:	11 2d       	mov	r17, r1

 while (1)
    {

     
        x=ADCL;
    37be:	60 91 78 00 	lds	r22, 0x0078
    37c2:	70 e0       	ldi	r23, 0x00	; 0
        x|=(ADCH<<8);
    37c4:	80 91 79 00 	lds	r24, 0x0079
       
        
		write_data(FILENAME, x);
    37c8:	d8 2f       	mov	r29, r24
    37ca:	c0 e0       	ldi	r28, 0x00	; 0
    37cc:	6c 2b       	or	r22, r28
    37ce:	7d 2b       	or	r23, r29
    37d0:	88 e0       	ldi	r24, 0x08	; 8
    37d2:	91 e0       	ldi	r25, 0x01	; 1
    37d4:	0e 94 de 1a 	call	0x35bc	; 0x35bc <write_data>
    37d8:	d8 01       	movw	r26, r16
    37da:	c7 01       	movw	r24, r14
    37dc:	01 97       	sbiw	r24, 0x01	; 1
    37de:	a1 09       	sbc	r26, r1
    37e0:	b1 09       	sbc	r27, r1
    37e2:	00 00       	nop
    37e4:	01 f0       	breq	.+0      	; 0x37e6 <main+0xd2>
    37e6:	d1 f7       	brne	.-12     	; 0x37dc <main+0xc8>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    37e8:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    37ea:	00 00       	nop
		_delay_ms(100);
		uart_puts_p(PSTR("SD Off \r\n"));
    37ec:	88 e6       	ldi	r24, 0x68	; 104
    37ee:	90 e0       	ldi	r25, 0x00	; 0
    37f0:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_puts_p>
    37f4:	e4 cf       	rjmp	.-56     	; 0x37be <main+0xaa>

000037f6 <memcpy>:
    37f6:	fb 01       	movw	r30, r22
    37f8:	dc 01       	movw	r26, r24
    37fa:	02 c0       	rjmp	.+4      	; 0x3800 <memcpy+0xa>
    37fc:	01 90       	ld	r0, Z+
    37fe:	0d 92       	st	X+, r0
    3800:	41 50       	subi	r20, 0x01	; 1
    3802:	50 40       	sbci	r21, 0x00	; 0
    3804:	d8 f7       	brcc	.-10     	; 0x37fc <memcpy+0x6>
    3806:	08 95       	ret

00003808 <memset>:
    3808:	dc 01       	movw	r26, r24
    380a:	01 c0       	rjmp	.+2      	; 0x380e <memset+0x6>
    380c:	6d 93       	st	X+, r22
    380e:	41 50       	subi	r20, 0x01	; 1
    3810:	50 40       	sbci	r21, 0x00	; 0
    3812:	e0 f7       	brcc	.-8      	; 0x380c <memset+0x4>
    3814:	08 95       	ret

00003816 <strchr>:
    3816:	fc 01       	movw	r30, r24
    3818:	81 91       	ld	r24, Z+
    381a:	86 17       	cp	r24, r22
    381c:	21 f0       	breq	.+8      	; 0x3826 <strchr+0x10>
    381e:	88 23       	and	r24, r24
    3820:	d9 f7       	brne	.-10     	; 0x3818 <strchr+0x2>
    3822:	99 27       	eor	r25, r25
    3824:	08 95       	ret
    3826:	31 97       	sbiw	r30, 0x01	; 1
    3828:	cf 01       	movw	r24, r30
    382a:	08 95       	ret

0000382c <strcmp>:
    382c:	fb 01       	movw	r30, r22
    382e:	dc 01       	movw	r26, r24
    3830:	8d 91       	ld	r24, X+
    3832:	01 90       	ld	r0, Z+
    3834:	80 19       	sub	r24, r0
    3836:	01 10       	cpse	r0, r1
    3838:	d9 f3       	breq	.-10     	; 0x3830 <strcmp+0x4>
    383a:	99 0b       	sbc	r25, r25
    383c:	08 95       	ret

0000383e <strncmp>:
    383e:	fb 01       	movw	r30, r22
    3840:	dc 01       	movw	r26, r24
    3842:	41 50       	subi	r20, 0x01	; 1
    3844:	50 40       	sbci	r21, 0x00	; 0
    3846:	30 f0       	brcs	.+12     	; 0x3854 <strncmp+0x16>
    3848:	8d 91       	ld	r24, X+
    384a:	01 90       	ld	r0, Z+
    384c:	80 19       	sub	r24, r0
    384e:	19 f4       	brne	.+6      	; 0x3856 <strncmp+0x18>
    3850:	00 20       	and	r0, r0
    3852:	b9 f7       	brne	.-18     	; 0x3842 <strncmp+0x4>
    3854:	88 1b       	sub	r24, r24
    3856:	99 0b       	sbc	r25, r25
    3858:	08 95       	ret

0000385a <strncpy>:
    385a:	fb 01       	movw	r30, r22
    385c:	dc 01       	movw	r26, r24
    385e:	41 50       	subi	r20, 0x01	; 1
    3860:	50 40       	sbci	r21, 0x00	; 0
    3862:	48 f0       	brcs	.+18     	; 0x3876 <strncpy+0x1c>
    3864:	01 90       	ld	r0, Z+
    3866:	0d 92       	st	X+, r0
    3868:	00 20       	and	r0, r0
    386a:	c9 f7       	brne	.-14     	; 0x385e <strncpy+0x4>
    386c:	01 c0       	rjmp	.+2      	; 0x3870 <strncpy+0x16>
    386e:	1d 92       	st	X+, r1
    3870:	41 50       	subi	r20, 0x01	; 1
    3872:	50 40       	sbci	r21, 0x00	; 0
    3874:	e0 f7       	brcc	.-8      	; 0x386e <strncpy+0x14>
    3876:	08 95       	ret

00003878 <strrchr>:
    3878:	fc 01       	movw	r30, r24
    387a:	81 e0       	ldi	r24, 0x01	; 1
    387c:	90 e0       	ldi	r25, 0x00	; 0
    387e:	01 90       	ld	r0, Z+
    3880:	06 16       	cp	r0, r22
    3882:	09 f4       	brne	.+2      	; 0x3886 <strrchr+0xe>
    3884:	cf 01       	movw	r24, r30
    3886:	00 20       	and	r0, r0
    3888:	d1 f7       	brne	.-12     	; 0x387e <strrchr+0x6>
    388a:	01 97       	sbiw	r24, 0x01	; 1
    388c:	08 95       	ret

0000388e <sprintf>:
    388e:	ae e0       	ldi	r26, 0x0E	; 14
    3890:	b0 e0       	ldi	r27, 0x00	; 0
    3892:	ed e4       	ldi	r30, 0x4D	; 77
    3894:	fc e1       	ldi	r31, 0x1C	; 28
    3896:	0c 94 5e 1f 	jmp	0x3ebc	; 0x3ebc <__prologue_saves__+0x1c>
    389a:	0d 89       	ldd	r16, Y+21	; 0x15
    389c:	1e 89       	ldd	r17, Y+22	; 0x16
    389e:	86 e0       	ldi	r24, 0x06	; 6
    38a0:	8c 83       	std	Y+4, r24	; 0x04
    38a2:	1a 83       	std	Y+2, r17	; 0x02
    38a4:	09 83       	std	Y+1, r16	; 0x01
    38a6:	8f ef       	ldi	r24, 0xFF	; 255
    38a8:	9f e7       	ldi	r25, 0x7F	; 127
    38aa:	9e 83       	std	Y+6, r25	; 0x06
    38ac:	8d 83       	std	Y+5, r24	; 0x05
    38ae:	9e 01       	movw	r18, r28
    38b0:	27 5e       	subi	r18, 0xE7	; 231
    38b2:	3f 4f       	sbci	r19, 0xFF	; 255
    38b4:	ce 01       	movw	r24, r28
    38b6:	01 96       	adiw	r24, 0x01	; 1
    38b8:	6f 89       	ldd	r22, Y+23	; 0x17
    38ba:	78 8d       	ldd	r23, Y+24	; 0x18
    38bc:	a9 01       	movw	r20, r18
    38be:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <vfprintf>
    38c2:	2f 81       	ldd	r18, Y+7	; 0x07
    38c4:	38 85       	ldd	r19, Y+8	; 0x08
    38c6:	02 0f       	add	r16, r18
    38c8:	13 1f       	adc	r17, r19
    38ca:	f8 01       	movw	r30, r16
    38cc:	10 82       	st	Z, r1
    38ce:	2e 96       	adiw	r28, 0x0e	; 14
    38d0:	e4 e0       	ldi	r30, 0x04	; 4
    38d2:	0c 94 7a 1f 	jmp	0x3ef4	; 0x3ef4 <__epilogue_restores__+0x1c>

000038d6 <vfprintf>:
    38d6:	ab e0       	ldi	r26, 0x0B	; 11
    38d8:	b0 e0       	ldi	r27, 0x00	; 0
    38da:	e1 e7       	ldi	r30, 0x71	; 113
    38dc:	fc e1       	ldi	r31, 0x1C	; 28
    38de:	0c 94 50 1f 	jmp	0x3ea0	; 0x3ea0 <__prologue_saves__>
    38e2:	3c 01       	movw	r6, r24
    38e4:	2b 01       	movw	r4, r22
    38e6:	5a 01       	movw	r10, r20
    38e8:	fc 01       	movw	r30, r24
    38ea:	17 82       	std	Z+7, r1	; 0x07
    38ec:	16 82       	std	Z+6, r1	; 0x06
    38ee:	83 81       	ldd	r24, Z+3	; 0x03
    38f0:	81 fd       	sbrc	r24, 1
    38f2:	03 c0       	rjmp	.+6      	; 0x38fa <vfprintf+0x24>
    38f4:	6f ef       	ldi	r22, 0xFF	; 255
    38f6:	7f ef       	ldi	r23, 0xFF	; 255
    38f8:	c6 c1       	rjmp	.+908    	; 0x3c86 <vfprintf+0x3b0>
    38fa:	9a e0       	ldi	r25, 0x0A	; 10
    38fc:	89 2e       	mov	r8, r25
    38fe:	1e 01       	movw	r2, r28
    3900:	08 94       	sec
    3902:	21 1c       	adc	r2, r1
    3904:	31 1c       	adc	r3, r1
    3906:	f3 01       	movw	r30, r6
    3908:	23 81       	ldd	r18, Z+3	; 0x03
    390a:	f2 01       	movw	r30, r4
    390c:	23 fd       	sbrc	r18, 3
    390e:	85 91       	lpm	r24, Z+
    3910:	23 ff       	sbrs	r18, 3
    3912:	81 91       	ld	r24, Z+
    3914:	2f 01       	movw	r4, r30
    3916:	88 23       	and	r24, r24
    3918:	09 f4       	brne	.+2      	; 0x391c <vfprintf+0x46>
    391a:	b2 c1       	rjmp	.+868    	; 0x3c80 <vfprintf+0x3aa>
    391c:	85 32       	cpi	r24, 0x25	; 37
    391e:	39 f4       	brne	.+14     	; 0x392e <vfprintf+0x58>
    3920:	23 fd       	sbrc	r18, 3
    3922:	85 91       	lpm	r24, Z+
    3924:	23 ff       	sbrs	r18, 3
    3926:	81 91       	ld	r24, Z+
    3928:	2f 01       	movw	r4, r30
    392a:	85 32       	cpi	r24, 0x25	; 37
    392c:	29 f4       	brne	.+10     	; 0x3938 <vfprintf+0x62>
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	b3 01       	movw	r22, r6
    3932:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <fputc>
    3936:	e7 cf       	rjmp	.-50     	; 0x3906 <vfprintf+0x30>
    3938:	98 2f       	mov	r25, r24
    393a:	ff 24       	eor	r15, r15
    393c:	ee 24       	eor	r14, r14
    393e:	99 24       	eor	r9, r9
    3940:	ff e1       	ldi	r31, 0x1F	; 31
    3942:	ff 15       	cp	r31, r15
    3944:	d0 f0       	brcs	.+52     	; 0x397a <vfprintf+0xa4>
    3946:	9b 32       	cpi	r25, 0x2B	; 43
    3948:	69 f0       	breq	.+26     	; 0x3964 <vfprintf+0x8e>
    394a:	9c 32       	cpi	r25, 0x2C	; 44
    394c:	28 f4       	brcc	.+10     	; 0x3958 <vfprintf+0x82>
    394e:	90 32       	cpi	r25, 0x20	; 32
    3950:	59 f0       	breq	.+22     	; 0x3968 <vfprintf+0x92>
    3952:	93 32       	cpi	r25, 0x23	; 35
    3954:	91 f4       	brne	.+36     	; 0x397a <vfprintf+0xa4>
    3956:	0e c0       	rjmp	.+28     	; 0x3974 <vfprintf+0x9e>
    3958:	9d 32       	cpi	r25, 0x2D	; 45
    395a:	49 f0       	breq	.+18     	; 0x396e <vfprintf+0x98>
    395c:	90 33       	cpi	r25, 0x30	; 48
    395e:	69 f4       	brne	.+26     	; 0x397a <vfprintf+0xa4>
    3960:	41 e0       	ldi	r20, 0x01	; 1
    3962:	24 c0       	rjmp	.+72     	; 0x39ac <vfprintf+0xd6>
    3964:	52 e0       	ldi	r21, 0x02	; 2
    3966:	f5 2a       	or	r15, r21
    3968:	84 e0       	ldi	r24, 0x04	; 4
    396a:	f8 2a       	or	r15, r24
    396c:	28 c0       	rjmp	.+80     	; 0x39be <vfprintf+0xe8>
    396e:	98 e0       	ldi	r25, 0x08	; 8
    3970:	f9 2a       	or	r15, r25
    3972:	25 c0       	rjmp	.+74     	; 0x39be <vfprintf+0xe8>
    3974:	e0 e1       	ldi	r30, 0x10	; 16
    3976:	fe 2a       	or	r15, r30
    3978:	22 c0       	rjmp	.+68     	; 0x39be <vfprintf+0xe8>
    397a:	f7 fc       	sbrc	r15, 7
    397c:	29 c0       	rjmp	.+82     	; 0x39d0 <vfprintf+0xfa>
    397e:	89 2f       	mov	r24, r25
    3980:	80 53       	subi	r24, 0x30	; 48
    3982:	8a 30       	cpi	r24, 0x0A	; 10
    3984:	70 f4       	brcc	.+28     	; 0x39a2 <vfprintf+0xcc>
    3986:	f6 fe       	sbrs	r15, 6
    3988:	05 c0       	rjmp	.+10     	; 0x3994 <vfprintf+0xbe>
    398a:	98 9c       	mul	r9, r8
    398c:	90 2c       	mov	r9, r0
    398e:	11 24       	eor	r1, r1
    3990:	98 0e       	add	r9, r24
    3992:	15 c0       	rjmp	.+42     	; 0x39be <vfprintf+0xe8>
    3994:	e8 9c       	mul	r14, r8
    3996:	e0 2c       	mov	r14, r0
    3998:	11 24       	eor	r1, r1
    399a:	e8 0e       	add	r14, r24
    399c:	f0 e2       	ldi	r31, 0x20	; 32
    399e:	ff 2a       	or	r15, r31
    39a0:	0e c0       	rjmp	.+28     	; 0x39be <vfprintf+0xe8>
    39a2:	9e 32       	cpi	r25, 0x2E	; 46
    39a4:	29 f4       	brne	.+10     	; 0x39b0 <vfprintf+0xda>
    39a6:	f6 fc       	sbrc	r15, 6
    39a8:	6b c1       	rjmp	.+726    	; 0x3c80 <vfprintf+0x3aa>
    39aa:	40 e4       	ldi	r20, 0x40	; 64
    39ac:	f4 2a       	or	r15, r20
    39ae:	07 c0       	rjmp	.+14     	; 0x39be <vfprintf+0xe8>
    39b0:	9c 36       	cpi	r25, 0x6C	; 108
    39b2:	19 f4       	brne	.+6      	; 0x39ba <vfprintf+0xe4>
    39b4:	50 e8       	ldi	r21, 0x80	; 128
    39b6:	f5 2a       	or	r15, r21
    39b8:	02 c0       	rjmp	.+4      	; 0x39be <vfprintf+0xe8>
    39ba:	98 36       	cpi	r25, 0x68	; 104
    39bc:	49 f4       	brne	.+18     	; 0x39d0 <vfprintf+0xfa>
    39be:	f2 01       	movw	r30, r4
    39c0:	23 fd       	sbrc	r18, 3
    39c2:	95 91       	lpm	r25, Z+
    39c4:	23 ff       	sbrs	r18, 3
    39c6:	91 91       	ld	r25, Z+
    39c8:	2f 01       	movw	r4, r30
    39ca:	99 23       	and	r25, r25
    39cc:	09 f0       	breq	.+2      	; 0x39d0 <vfprintf+0xfa>
    39ce:	b8 cf       	rjmp	.-144    	; 0x3940 <vfprintf+0x6a>
    39d0:	89 2f       	mov	r24, r25
    39d2:	85 54       	subi	r24, 0x45	; 69
    39d4:	83 30       	cpi	r24, 0x03	; 3
    39d6:	18 f0       	brcs	.+6      	; 0x39de <vfprintf+0x108>
    39d8:	80 52       	subi	r24, 0x20	; 32
    39da:	83 30       	cpi	r24, 0x03	; 3
    39dc:	38 f4       	brcc	.+14     	; 0x39ec <vfprintf+0x116>
    39de:	44 e0       	ldi	r20, 0x04	; 4
    39e0:	50 e0       	ldi	r21, 0x00	; 0
    39e2:	a4 0e       	add	r10, r20
    39e4:	b5 1e       	adc	r11, r21
    39e6:	5f e3       	ldi	r21, 0x3F	; 63
    39e8:	59 83       	std	Y+1, r21	; 0x01
    39ea:	0f c0       	rjmp	.+30     	; 0x3a0a <vfprintf+0x134>
    39ec:	93 36       	cpi	r25, 0x63	; 99
    39ee:	31 f0       	breq	.+12     	; 0x39fc <vfprintf+0x126>
    39f0:	93 37       	cpi	r25, 0x73	; 115
    39f2:	79 f0       	breq	.+30     	; 0x3a12 <vfprintf+0x13c>
    39f4:	93 35       	cpi	r25, 0x53	; 83
    39f6:	09 f0       	breq	.+2      	; 0x39fa <vfprintf+0x124>
    39f8:	56 c0       	rjmp	.+172    	; 0x3aa6 <vfprintf+0x1d0>
    39fa:	20 c0       	rjmp	.+64     	; 0x3a3c <vfprintf+0x166>
    39fc:	f5 01       	movw	r30, r10
    39fe:	80 81       	ld	r24, Z
    3a00:	89 83       	std	Y+1, r24	; 0x01
    3a02:	42 e0       	ldi	r20, 0x02	; 2
    3a04:	50 e0       	ldi	r21, 0x00	; 0
    3a06:	a4 0e       	add	r10, r20
    3a08:	b5 1e       	adc	r11, r21
    3a0a:	61 01       	movw	r12, r2
    3a0c:	01 e0       	ldi	r16, 0x01	; 1
    3a0e:	10 e0       	ldi	r17, 0x00	; 0
    3a10:	12 c0       	rjmp	.+36     	; 0x3a36 <vfprintf+0x160>
    3a12:	f5 01       	movw	r30, r10
    3a14:	c0 80       	ld	r12, Z
    3a16:	d1 80       	ldd	r13, Z+1	; 0x01
    3a18:	f6 fc       	sbrc	r15, 6
    3a1a:	03 c0       	rjmp	.+6      	; 0x3a22 <vfprintf+0x14c>
    3a1c:	6f ef       	ldi	r22, 0xFF	; 255
    3a1e:	7f ef       	ldi	r23, 0xFF	; 255
    3a20:	02 c0       	rjmp	.+4      	; 0x3a26 <vfprintf+0x150>
    3a22:	69 2d       	mov	r22, r9
    3a24:	70 e0       	ldi	r23, 0x00	; 0
    3a26:	42 e0       	ldi	r20, 0x02	; 2
    3a28:	50 e0       	ldi	r21, 0x00	; 0
    3a2a:	a4 0e       	add	r10, r20
    3a2c:	b5 1e       	adc	r11, r21
    3a2e:	c6 01       	movw	r24, r12
    3a30:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <strnlen>
    3a34:	8c 01       	movw	r16, r24
    3a36:	5f e7       	ldi	r21, 0x7F	; 127
    3a38:	f5 22       	and	r15, r21
    3a3a:	14 c0       	rjmp	.+40     	; 0x3a64 <vfprintf+0x18e>
    3a3c:	f5 01       	movw	r30, r10
    3a3e:	c0 80       	ld	r12, Z
    3a40:	d1 80       	ldd	r13, Z+1	; 0x01
    3a42:	f6 fc       	sbrc	r15, 6
    3a44:	03 c0       	rjmp	.+6      	; 0x3a4c <vfprintf+0x176>
    3a46:	6f ef       	ldi	r22, 0xFF	; 255
    3a48:	7f ef       	ldi	r23, 0xFF	; 255
    3a4a:	02 c0       	rjmp	.+4      	; 0x3a50 <vfprintf+0x17a>
    3a4c:	69 2d       	mov	r22, r9
    3a4e:	70 e0       	ldi	r23, 0x00	; 0
    3a50:	42 e0       	ldi	r20, 0x02	; 2
    3a52:	50 e0       	ldi	r21, 0x00	; 0
    3a54:	a4 0e       	add	r10, r20
    3a56:	b5 1e       	adc	r11, r21
    3a58:	c6 01       	movw	r24, r12
    3a5a:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <strnlen_P>
    3a5e:	8c 01       	movw	r16, r24
    3a60:	50 e8       	ldi	r21, 0x80	; 128
    3a62:	f5 2a       	or	r15, r21
    3a64:	f3 fe       	sbrs	r15, 3
    3a66:	07 c0       	rjmp	.+14     	; 0x3a76 <vfprintf+0x1a0>
    3a68:	1a c0       	rjmp	.+52     	; 0x3a9e <vfprintf+0x1c8>
    3a6a:	80 e2       	ldi	r24, 0x20	; 32
    3a6c:	90 e0       	ldi	r25, 0x00	; 0
    3a6e:	b3 01       	movw	r22, r6
    3a70:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <fputc>
    3a74:	ea 94       	dec	r14
    3a76:	8e 2d       	mov	r24, r14
    3a78:	90 e0       	ldi	r25, 0x00	; 0
    3a7a:	08 17       	cp	r16, r24
    3a7c:	19 07       	cpc	r17, r25
    3a7e:	a8 f3       	brcs	.-22     	; 0x3a6a <vfprintf+0x194>
    3a80:	0e c0       	rjmp	.+28     	; 0x3a9e <vfprintf+0x1c8>
    3a82:	f6 01       	movw	r30, r12
    3a84:	f7 fc       	sbrc	r15, 7
    3a86:	85 91       	lpm	r24, Z+
    3a88:	f7 fe       	sbrs	r15, 7
    3a8a:	81 91       	ld	r24, Z+
    3a8c:	6f 01       	movw	r12, r30
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	b3 01       	movw	r22, r6
    3a92:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <fputc>
    3a96:	e1 10       	cpse	r14, r1
    3a98:	ea 94       	dec	r14
    3a9a:	01 50       	subi	r16, 0x01	; 1
    3a9c:	10 40       	sbci	r17, 0x00	; 0
    3a9e:	01 15       	cp	r16, r1
    3aa0:	11 05       	cpc	r17, r1
    3aa2:	79 f7       	brne	.-34     	; 0x3a82 <vfprintf+0x1ac>
    3aa4:	ea c0       	rjmp	.+468    	; 0x3c7a <vfprintf+0x3a4>
    3aa6:	94 36       	cpi	r25, 0x64	; 100
    3aa8:	11 f0       	breq	.+4      	; 0x3aae <vfprintf+0x1d8>
    3aaa:	99 36       	cpi	r25, 0x69	; 105
    3aac:	69 f5       	brne	.+90     	; 0x3b08 <vfprintf+0x232>
    3aae:	f7 fe       	sbrs	r15, 7
    3ab0:	08 c0       	rjmp	.+16     	; 0x3ac2 <vfprintf+0x1ec>
    3ab2:	f5 01       	movw	r30, r10
    3ab4:	20 81       	ld	r18, Z
    3ab6:	31 81       	ldd	r19, Z+1	; 0x01
    3ab8:	42 81       	ldd	r20, Z+2	; 0x02
    3aba:	53 81       	ldd	r21, Z+3	; 0x03
    3abc:	84 e0       	ldi	r24, 0x04	; 4
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	0a c0       	rjmp	.+20     	; 0x3ad6 <vfprintf+0x200>
    3ac2:	f5 01       	movw	r30, r10
    3ac4:	80 81       	ld	r24, Z
    3ac6:	91 81       	ldd	r25, Z+1	; 0x01
    3ac8:	9c 01       	movw	r18, r24
    3aca:	44 27       	eor	r20, r20
    3acc:	37 fd       	sbrc	r19, 7
    3ace:	40 95       	com	r20
    3ad0:	54 2f       	mov	r21, r20
    3ad2:	82 e0       	ldi	r24, 0x02	; 2
    3ad4:	90 e0       	ldi	r25, 0x00	; 0
    3ad6:	a8 0e       	add	r10, r24
    3ad8:	b9 1e       	adc	r11, r25
    3ada:	9f e6       	ldi	r25, 0x6F	; 111
    3adc:	f9 22       	and	r15, r25
    3ade:	57 ff       	sbrs	r21, 7
    3ae0:	09 c0       	rjmp	.+18     	; 0x3af4 <vfprintf+0x21e>
    3ae2:	50 95       	com	r21
    3ae4:	40 95       	com	r20
    3ae6:	30 95       	com	r19
    3ae8:	21 95       	neg	r18
    3aea:	3f 4f       	sbci	r19, 0xFF	; 255
    3aec:	4f 4f       	sbci	r20, 0xFF	; 255
    3aee:	5f 4f       	sbci	r21, 0xFF	; 255
    3af0:	e0 e8       	ldi	r30, 0x80	; 128
    3af2:	fe 2a       	or	r15, r30
    3af4:	ca 01       	movw	r24, r20
    3af6:	b9 01       	movw	r22, r18
    3af8:	a1 01       	movw	r20, r2
    3afa:	2a e0       	ldi	r18, 0x0A	; 10
    3afc:	30 e0       	ldi	r19, 0x00	; 0
    3afe:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <__ultoa_invert>
    3b02:	d8 2e       	mov	r13, r24
    3b04:	d2 18       	sub	r13, r2
    3b06:	40 c0       	rjmp	.+128    	; 0x3b88 <vfprintf+0x2b2>
    3b08:	95 37       	cpi	r25, 0x75	; 117
    3b0a:	29 f4       	brne	.+10     	; 0x3b16 <vfprintf+0x240>
    3b0c:	1f 2d       	mov	r17, r15
    3b0e:	1f 7e       	andi	r17, 0xEF	; 239
    3b10:	2a e0       	ldi	r18, 0x0A	; 10
    3b12:	30 e0       	ldi	r19, 0x00	; 0
    3b14:	1d c0       	rjmp	.+58     	; 0x3b50 <vfprintf+0x27a>
    3b16:	1f 2d       	mov	r17, r15
    3b18:	19 7f       	andi	r17, 0xF9	; 249
    3b1a:	9f 36       	cpi	r25, 0x6F	; 111
    3b1c:	61 f0       	breq	.+24     	; 0x3b36 <vfprintf+0x260>
    3b1e:	90 37       	cpi	r25, 0x70	; 112
    3b20:	20 f4       	brcc	.+8      	; 0x3b2a <vfprintf+0x254>
    3b22:	98 35       	cpi	r25, 0x58	; 88
    3b24:	09 f0       	breq	.+2      	; 0x3b28 <vfprintf+0x252>
    3b26:	ac c0       	rjmp	.+344    	; 0x3c80 <vfprintf+0x3aa>
    3b28:	0f c0       	rjmp	.+30     	; 0x3b48 <vfprintf+0x272>
    3b2a:	90 37       	cpi	r25, 0x70	; 112
    3b2c:	39 f0       	breq	.+14     	; 0x3b3c <vfprintf+0x266>
    3b2e:	98 37       	cpi	r25, 0x78	; 120
    3b30:	09 f0       	breq	.+2      	; 0x3b34 <vfprintf+0x25e>
    3b32:	a6 c0       	rjmp	.+332    	; 0x3c80 <vfprintf+0x3aa>
    3b34:	04 c0       	rjmp	.+8      	; 0x3b3e <vfprintf+0x268>
    3b36:	28 e0       	ldi	r18, 0x08	; 8
    3b38:	30 e0       	ldi	r19, 0x00	; 0
    3b3a:	0a c0       	rjmp	.+20     	; 0x3b50 <vfprintf+0x27a>
    3b3c:	10 61       	ori	r17, 0x10	; 16
    3b3e:	14 fd       	sbrc	r17, 4
    3b40:	14 60       	ori	r17, 0x04	; 4
    3b42:	20 e1       	ldi	r18, 0x10	; 16
    3b44:	30 e0       	ldi	r19, 0x00	; 0
    3b46:	04 c0       	rjmp	.+8      	; 0x3b50 <vfprintf+0x27a>
    3b48:	14 fd       	sbrc	r17, 4
    3b4a:	16 60       	ori	r17, 0x06	; 6
    3b4c:	20 e1       	ldi	r18, 0x10	; 16
    3b4e:	32 e0       	ldi	r19, 0x02	; 2
    3b50:	17 ff       	sbrs	r17, 7
    3b52:	08 c0       	rjmp	.+16     	; 0x3b64 <vfprintf+0x28e>
    3b54:	f5 01       	movw	r30, r10
    3b56:	60 81       	ld	r22, Z
    3b58:	71 81       	ldd	r23, Z+1	; 0x01
    3b5a:	82 81       	ldd	r24, Z+2	; 0x02
    3b5c:	93 81       	ldd	r25, Z+3	; 0x03
    3b5e:	44 e0       	ldi	r20, 0x04	; 4
    3b60:	50 e0       	ldi	r21, 0x00	; 0
    3b62:	08 c0       	rjmp	.+16     	; 0x3b74 <vfprintf+0x29e>
    3b64:	f5 01       	movw	r30, r10
    3b66:	80 81       	ld	r24, Z
    3b68:	91 81       	ldd	r25, Z+1	; 0x01
    3b6a:	bc 01       	movw	r22, r24
    3b6c:	80 e0       	ldi	r24, 0x00	; 0
    3b6e:	90 e0       	ldi	r25, 0x00	; 0
    3b70:	42 e0       	ldi	r20, 0x02	; 2
    3b72:	50 e0       	ldi	r21, 0x00	; 0
    3b74:	a4 0e       	add	r10, r20
    3b76:	b5 1e       	adc	r11, r21
    3b78:	a1 01       	movw	r20, r2
    3b7a:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <__ultoa_invert>
    3b7e:	d8 2e       	mov	r13, r24
    3b80:	d2 18       	sub	r13, r2
    3b82:	8f e7       	ldi	r24, 0x7F	; 127
    3b84:	f8 2e       	mov	r15, r24
    3b86:	f1 22       	and	r15, r17
    3b88:	f6 fe       	sbrs	r15, 6
    3b8a:	0b c0       	rjmp	.+22     	; 0x3ba2 <vfprintf+0x2cc>
    3b8c:	5e ef       	ldi	r21, 0xFE	; 254
    3b8e:	f5 22       	and	r15, r21
    3b90:	d9 14       	cp	r13, r9
    3b92:	38 f4       	brcc	.+14     	; 0x3ba2 <vfprintf+0x2cc>
    3b94:	f4 fe       	sbrs	r15, 4
    3b96:	07 c0       	rjmp	.+14     	; 0x3ba6 <vfprintf+0x2d0>
    3b98:	f2 fc       	sbrc	r15, 2
    3b9a:	05 c0       	rjmp	.+10     	; 0x3ba6 <vfprintf+0x2d0>
    3b9c:	8f ee       	ldi	r24, 0xEF	; 239
    3b9e:	f8 22       	and	r15, r24
    3ba0:	02 c0       	rjmp	.+4      	; 0x3ba6 <vfprintf+0x2d0>
    3ba2:	1d 2d       	mov	r17, r13
    3ba4:	01 c0       	rjmp	.+2      	; 0x3ba8 <vfprintf+0x2d2>
    3ba6:	19 2d       	mov	r17, r9
    3ba8:	f4 fe       	sbrs	r15, 4
    3baa:	0d c0       	rjmp	.+26     	; 0x3bc6 <vfprintf+0x2f0>
    3bac:	fe 01       	movw	r30, r28
    3bae:	ed 0d       	add	r30, r13
    3bb0:	f1 1d       	adc	r31, r1
    3bb2:	80 81       	ld	r24, Z
    3bb4:	80 33       	cpi	r24, 0x30	; 48
    3bb6:	19 f4       	brne	.+6      	; 0x3bbe <vfprintf+0x2e8>
    3bb8:	99 ee       	ldi	r25, 0xE9	; 233
    3bba:	f9 22       	and	r15, r25
    3bbc:	08 c0       	rjmp	.+16     	; 0x3bce <vfprintf+0x2f8>
    3bbe:	1f 5f       	subi	r17, 0xFF	; 255
    3bc0:	f2 fe       	sbrs	r15, 2
    3bc2:	05 c0       	rjmp	.+10     	; 0x3bce <vfprintf+0x2f8>
    3bc4:	03 c0       	rjmp	.+6      	; 0x3bcc <vfprintf+0x2f6>
    3bc6:	8f 2d       	mov	r24, r15
    3bc8:	86 78       	andi	r24, 0x86	; 134
    3bca:	09 f0       	breq	.+2      	; 0x3bce <vfprintf+0x2f8>
    3bcc:	1f 5f       	subi	r17, 0xFF	; 255
    3bce:	0f 2d       	mov	r16, r15
    3bd0:	f3 fc       	sbrc	r15, 3
    3bd2:	14 c0       	rjmp	.+40     	; 0x3bfc <vfprintf+0x326>
    3bd4:	f0 fe       	sbrs	r15, 0
    3bd6:	0f c0       	rjmp	.+30     	; 0x3bf6 <vfprintf+0x320>
    3bd8:	1e 15       	cp	r17, r14
    3bda:	10 f0       	brcs	.+4      	; 0x3be0 <vfprintf+0x30a>
    3bdc:	9d 2c       	mov	r9, r13
    3bde:	0b c0       	rjmp	.+22     	; 0x3bf6 <vfprintf+0x320>
    3be0:	9d 2c       	mov	r9, r13
    3be2:	9e 0c       	add	r9, r14
    3be4:	91 1a       	sub	r9, r17
    3be6:	1e 2d       	mov	r17, r14
    3be8:	06 c0       	rjmp	.+12     	; 0x3bf6 <vfprintf+0x320>
    3bea:	80 e2       	ldi	r24, 0x20	; 32
    3bec:	90 e0       	ldi	r25, 0x00	; 0
    3bee:	b3 01       	movw	r22, r6
    3bf0:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <fputc>
    3bf4:	1f 5f       	subi	r17, 0xFF	; 255
    3bf6:	1e 15       	cp	r17, r14
    3bf8:	c0 f3       	brcs	.-16     	; 0x3bea <vfprintf+0x314>
    3bfa:	04 c0       	rjmp	.+8      	; 0x3c04 <vfprintf+0x32e>
    3bfc:	1e 15       	cp	r17, r14
    3bfe:	10 f4       	brcc	.+4      	; 0x3c04 <vfprintf+0x32e>
    3c00:	e1 1a       	sub	r14, r17
    3c02:	01 c0       	rjmp	.+2      	; 0x3c06 <vfprintf+0x330>
    3c04:	ee 24       	eor	r14, r14
    3c06:	04 ff       	sbrs	r16, 4
    3c08:	0f c0       	rjmp	.+30     	; 0x3c28 <vfprintf+0x352>
    3c0a:	80 e3       	ldi	r24, 0x30	; 48
    3c0c:	90 e0       	ldi	r25, 0x00	; 0
    3c0e:	b3 01       	movw	r22, r6
    3c10:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <fputc>
    3c14:	02 ff       	sbrs	r16, 2
    3c16:	1d c0       	rjmp	.+58     	; 0x3c52 <vfprintf+0x37c>
    3c18:	01 fd       	sbrc	r16, 1
    3c1a:	03 c0       	rjmp	.+6      	; 0x3c22 <vfprintf+0x34c>
    3c1c:	88 e7       	ldi	r24, 0x78	; 120
    3c1e:	90 e0       	ldi	r25, 0x00	; 0
    3c20:	0e c0       	rjmp	.+28     	; 0x3c3e <vfprintf+0x368>
    3c22:	88 e5       	ldi	r24, 0x58	; 88
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	0b c0       	rjmp	.+22     	; 0x3c3e <vfprintf+0x368>
    3c28:	80 2f       	mov	r24, r16
    3c2a:	86 78       	andi	r24, 0x86	; 134
    3c2c:	91 f0       	breq	.+36     	; 0x3c52 <vfprintf+0x37c>
    3c2e:	01 ff       	sbrs	r16, 1
    3c30:	02 c0       	rjmp	.+4      	; 0x3c36 <vfprintf+0x360>
    3c32:	8b e2       	ldi	r24, 0x2B	; 43
    3c34:	01 c0       	rjmp	.+2      	; 0x3c38 <vfprintf+0x362>
    3c36:	80 e2       	ldi	r24, 0x20	; 32
    3c38:	f7 fc       	sbrc	r15, 7
    3c3a:	8d e2       	ldi	r24, 0x2D	; 45
    3c3c:	90 e0       	ldi	r25, 0x00	; 0
    3c3e:	b3 01       	movw	r22, r6
    3c40:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <fputc>
    3c44:	06 c0       	rjmp	.+12     	; 0x3c52 <vfprintf+0x37c>
    3c46:	80 e3       	ldi	r24, 0x30	; 48
    3c48:	90 e0       	ldi	r25, 0x00	; 0
    3c4a:	b3 01       	movw	r22, r6
    3c4c:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <fputc>
    3c50:	9a 94       	dec	r9
    3c52:	d9 14       	cp	r13, r9
    3c54:	c0 f3       	brcs	.-16     	; 0x3c46 <vfprintf+0x370>
    3c56:	da 94       	dec	r13
    3c58:	f1 01       	movw	r30, r2
    3c5a:	ed 0d       	add	r30, r13
    3c5c:	f1 1d       	adc	r31, r1
    3c5e:	80 81       	ld	r24, Z
    3c60:	90 e0       	ldi	r25, 0x00	; 0
    3c62:	b3 01       	movw	r22, r6
    3c64:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <fputc>
    3c68:	dd 20       	and	r13, r13
    3c6a:	a9 f7       	brne	.-22     	; 0x3c56 <vfprintf+0x380>
    3c6c:	06 c0       	rjmp	.+12     	; 0x3c7a <vfprintf+0x3a4>
    3c6e:	80 e2       	ldi	r24, 0x20	; 32
    3c70:	90 e0       	ldi	r25, 0x00	; 0
    3c72:	b3 01       	movw	r22, r6
    3c74:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <fputc>
    3c78:	ea 94       	dec	r14
    3c7a:	ee 20       	and	r14, r14
    3c7c:	c1 f7       	brne	.-16     	; 0x3c6e <vfprintf+0x398>
    3c7e:	43 ce       	rjmp	.-890    	; 0x3906 <vfprintf+0x30>
    3c80:	f3 01       	movw	r30, r6
    3c82:	66 81       	ldd	r22, Z+6	; 0x06
    3c84:	77 81       	ldd	r23, Z+7	; 0x07
    3c86:	cb 01       	movw	r24, r22
    3c88:	2b 96       	adiw	r28, 0x0b	; 11
    3c8a:	e2 e1       	ldi	r30, 0x12	; 18
    3c8c:	0c 94 6c 1f 	jmp	0x3ed8	; 0x3ed8 <__epilogue_restores__>

00003c90 <strnlen_P>:
    3c90:	fc 01       	movw	r30, r24
    3c92:	05 90       	lpm	r0, Z+
    3c94:	61 50       	subi	r22, 0x01	; 1
    3c96:	70 40       	sbci	r23, 0x00	; 0
    3c98:	01 10       	cpse	r0, r1
    3c9a:	d8 f7       	brcc	.-10     	; 0x3c92 <strnlen_P+0x2>
    3c9c:	80 95       	com	r24
    3c9e:	90 95       	com	r25
    3ca0:	8e 0f       	add	r24, r30
    3ca2:	9f 1f       	adc	r25, r31
    3ca4:	08 95       	ret

00003ca6 <strnlen>:
    3ca6:	fc 01       	movw	r30, r24
    3ca8:	61 50       	subi	r22, 0x01	; 1
    3caa:	70 40       	sbci	r23, 0x00	; 0
    3cac:	01 90       	ld	r0, Z+
    3cae:	01 10       	cpse	r0, r1
    3cb0:	d8 f7       	brcc	.-10     	; 0x3ca8 <strnlen+0x2>
    3cb2:	80 95       	com	r24
    3cb4:	90 95       	com	r25
    3cb6:	8e 0f       	add	r24, r30
    3cb8:	9f 1f       	adc	r25, r31
    3cba:	08 95       	ret

00003cbc <fputc>:
    3cbc:	0f 93       	push	r16
    3cbe:	1f 93       	push	r17
    3cc0:	cf 93       	push	r28
    3cc2:	df 93       	push	r29
    3cc4:	8c 01       	movw	r16, r24
    3cc6:	eb 01       	movw	r28, r22
    3cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    3cca:	81 ff       	sbrs	r24, 1
    3ccc:	1b c0       	rjmp	.+54     	; 0x3d04 <fputc+0x48>
    3cce:	82 ff       	sbrs	r24, 2
    3cd0:	0d c0       	rjmp	.+26     	; 0x3cec <fputc+0x30>
    3cd2:	2e 81       	ldd	r18, Y+6	; 0x06
    3cd4:	3f 81       	ldd	r19, Y+7	; 0x07
    3cd6:	8c 81       	ldd	r24, Y+4	; 0x04
    3cd8:	9d 81       	ldd	r25, Y+5	; 0x05
    3cda:	28 17       	cp	r18, r24
    3cdc:	39 07       	cpc	r19, r25
    3cde:	64 f4       	brge	.+24     	; 0x3cf8 <fputc+0x3c>
    3ce0:	e8 81       	ld	r30, Y
    3ce2:	f9 81       	ldd	r31, Y+1	; 0x01
    3ce4:	01 93       	st	Z+, r16
    3ce6:	f9 83       	std	Y+1, r31	; 0x01
    3ce8:	e8 83       	st	Y, r30
    3cea:	06 c0       	rjmp	.+12     	; 0x3cf8 <fputc+0x3c>
    3cec:	e8 85       	ldd	r30, Y+8	; 0x08
    3cee:	f9 85       	ldd	r31, Y+9	; 0x09
    3cf0:	80 2f       	mov	r24, r16
    3cf2:	09 95       	icall
    3cf4:	89 2b       	or	r24, r25
    3cf6:	31 f4       	brne	.+12     	; 0x3d04 <fputc+0x48>
    3cf8:	8e 81       	ldd	r24, Y+6	; 0x06
    3cfa:	9f 81       	ldd	r25, Y+7	; 0x07
    3cfc:	01 96       	adiw	r24, 0x01	; 1
    3cfe:	9f 83       	std	Y+7, r25	; 0x07
    3d00:	8e 83       	std	Y+6, r24	; 0x06
    3d02:	02 c0       	rjmp	.+4      	; 0x3d08 <fputc+0x4c>
    3d04:	0f ef       	ldi	r16, 0xFF	; 255
    3d06:	1f ef       	ldi	r17, 0xFF	; 255
    3d08:	c8 01       	movw	r24, r16
    3d0a:	df 91       	pop	r29
    3d0c:	cf 91       	pop	r28
    3d0e:	1f 91       	pop	r17
    3d10:	0f 91       	pop	r16
    3d12:	08 95       	ret

00003d14 <__ultoa_invert>:
    3d14:	fa 01       	movw	r30, r20
    3d16:	aa 27       	eor	r26, r26
    3d18:	28 30       	cpi	r18, 0x08	; 8
    3d1a:	51 f1       	breq	.+84     	; 0x3d70 <__ultoa_invert+0x5c>
    3d1c:	20 31       	cpi	r18, 0x10	; 16
    3d1e:	81 f1       	breq	.+96     	; 0x3d80 <__ultoa_invert+0x6c>
    3d20:	e8 94       	clt
    3d22:	6f 93       	push	r22
    3d24:	6e 7f       	andi	r22, 0xFE	; 254
    3d26:	6e 5f       	subi	r22, 0xFE	; 254
    3d28:	7f 4f       	sbci	r23, 0xFF	; 255
    3d2a:	8f 4f       	sbci	r24, 0xFF	; 255
    3d2c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d2e:	af 4f       	sbci	r26, 0xFF	; 255
    3d30:	b1 e0       	ldi	r27, 0x01	; 1
    3d32:	3e d0       	rcall	.+124    	; 0x3db0 <__ultoa_invert+0x9c>
    3d34:	b4 e0       	ldi	r27, 0x04	; 4
    3d36:	3c d0       	rcall	.+120    	; 0x3db0 <__ultoa_invert+0x9c>
    3d38:	67 0f       	add	r22, r23
    3d3a:	78 1f       	adc	r23, r24
    3d3c:	89 1f       	adc	r24, r25
    3d3e:	9a 1f       	adc	r25, r26
    3d40:	a1 1d       	adc	r26, r1
    3d42:	68 0f       	add	r22, r24
    3d44:	79 1f       	adc	r23, r25
    3d46:	8a 1f       	adc	r24, r26
    3d48:	91 1d       	adc	r25, r1
    3d4a:	a1 1d       	adc	r26, r1
    3d4c:	6a 0f       	add	r22, r26
    3d4e:	71 1d       	adc	r23, r1
    3d50:	81 1d       	adc	r24, r1
    3d52:	91 1d       	adc	r25, r1
    3d54:	a1 1d       	adc	r26, r1
    3d56:	20 d0       	rcall	.+64     	; 0x3d98 <__ultoa_invert+0x84>
    3d58:	09 f4       	brne	.+2      	; 0x3d5c <__ultoa_invert+0x48>
    3d5a:	68 94       	set
    3d5c:	3f 91       	pop	r19
    3d5e:	2a e0       	ldi	r18, 0x0A	; 10
    3d60:	26 9f       	mul	r18, r22
    3d62:	11 24       	eor	r1, r1
    3d64:	30 19       	sub	r19, r0
    3d66:	30 5d       	subi	r19, 0xD0	; 208
    3d68:	31 93       	st	Z+, r19
    3d6a:	de f6       	brtc	.-74     	; 0x3d22 <__ultoa_invert+0xe>
    3d6c:	cf 01       	movw	r24, r30
    3d6e:	08 95       	ret
    3d70:	46 2f       	mov	r20, r22
    3d72:	47 70       	andi	r20, 0x07	; 7
    3d74:	40 5d       	subi	r20, 0xD0	; 208
    3d76:	41 93       	st	Z+, r20
    3d78:	b3 e0       	ldi	r27, 0x03	; 3
    3d7a:	0f d0       	rcall	.+30     	; 0x3d9a <__ultoa_invert+0x86>
    3d7c:	c9 f7       	brne	.-14     	; 0x3d70 <__ultoa_invert+0x5c>
    3d7e:	f6 cf       	rjmp	.-20     	; 0x3d6c <__ultoa_invert+0x58>
    3d80:	46 2f       	mov	r20, r22
    3d82:	4f 70       	andi	r20, 0x0F	; 15
    3d84:	40 5d       	subi	r20, 0xD0	; 208
    3d86:	4a 33       	cpi	r20, 0x3A	; 58
    3d88:	18 f0       	brcs	.+6      	; 0x3d90 <__ultoa_invert+0x7c>
    3d8a:	49 5d       	subi	r20, 0xD9	; 217
    3d8c:	31 fd       	sbrc	r19, 1
    3d8e:	40 52       	subi	r20, 0x20	; 32
    3d90:	41 93       	st	Z+, r20
    3d92:	02 d0       	rcall	.+4      	; 0x3d98 <__ultoa_invert+0x84>
    3d94:	a9 f7       	brne	.-22     	; 0x3d80 <__ultoa_invert+0x6c>
    3d96:	ea cf       	rjmp	.-44     	; 0x3d6c <__ultoa_invert+0x58>
    3d98:	b4 e0       	ldi	r27, 0x04	; 4
    3d9a:	a6 95       	lsr	r26
    3d9c:	97 95       	ror	r25
    3d9e:	87 95       	ror	r24
    3da0:	77 95       	ror	r23
    3da2:	67 95       	ror	r22
    3da4:	ba 95       	dec	r27
    3da6:	c9 f7       	brne	.-14     	; 0x3d9a <__ultoa_invert+0x86>
    3da8:	00 97       	sbiw	r24, 0x00	; 0
    3daa:	61 05       	cpc	r22, r1
    3dac:	71 05       	cpc	r23, r1
    3dae:	08 95       	ret
    3db0:	9b 01       	movw	r18, r22
    3db2:	ac 01       	movw	r20, r24
    3db4:	0a 2e       	mov	r0, r26
    3db6:	06 94       	lsr	r0
    3db8:	57 95       	ror	r21
    3dba:	47 95       	ror	r20
    3dbc:	37 95       	ror	r19
    3dbe:	27 95       	ror	r18
    3dc0:	ba 95       	dec	r27
    3dc2:	c9 f7       	brne	.-14     	; 0x3db6 <__ultoa_invert+0xa2>
    3dc4:	62 0f       	add	r22, r18
    3dc6:	73 1f       	adc	r23, r19
    3dc8:	84 1f       	adc	r24, r20
    3dca:	95 1f       	adc	r25, r21
    3dcc:	a0 1d       	adc	r26, r0
    3dce:	08 95       	ret

00003dd0 <__mulsi3>:
    3dd0:	62 9f       	mul	r22, r18
    3dd2:	d0 01       	movw	r26, r0
    3dd4:	73 9f       	mul	r23, r19
    3dd6:	f0 01       	movw	r30, r0
    3dd8:	82 9f       	mul	r24, r18
    3dda:	e0 0d       	add	r30, r0
    3ddc:	f1 1d       	adc	r31, r1
    3dde:	64 9f       	mul	r22, r20
    3de0:	e0 0d       	add	r30, r0
    3de2:	f1 1d       	adc	r31, r1
    3de4:	92 9f       	mul	r25, r18
    3de6:	f0 0d       	add	r31, r0
    3de8:	83 9f       	mul	r24, r19
    3dea:	f0 0d       	add	r31, r0
    3dec:	74 9f       	mul	r23, r20
    3dee:	f0 0d       	add	r31, r0
    3df0:	65 9f       	mul	r22, r21
    3df2:	f0 0d       	add	r31, r0
    3df4:	99 27       	eor	r25, r25
    3df6:	72 9f       	mul	r23, r18
    3df8:	b0 0d       	add	r27, r0
    3dfa:	e1 1d       	adc	r30, r1
    3dfc:	f9 1f       	adc	r31, r25
    3dfe:	63 9f       	mul	r22, r19
    3e00:	b0 0d       	add	r27, r0
    3e02:	e1 1d       	adc	r30, r1
    3e04:	f9 1f       	adc	r31, r25
    3e06:	bd 01       	movw	r22, r26
    3e08:	cf 01       	movw	r24, r30
    3e0a:	11 24       	eor	r1, r1
    3e0c:	08 95       	ret

00003e0e <__udivmodhi4>:
    3e0e:	aa 1b       	sub	r26, r26
    3e10:	bb 1b       	sub	r27, r27
    3e12:	51 e1       	ldi	r21, 0x11	; 17
    3e14:	07 c0       	rjmp	.+14     	; 0x3e24 <__udivmodhi4_ep>

00003e16 <__udivmodhi4_loop>:
    3e16:	aa 1f       	adc	r26, r26
    3e18:	bb 1f       	adc	r27, r27
    3e1a:	a6 17       	cp	r26, r22
    3e1c:	b7 07       	cpc	r27, r23
    3e1e:	10 f0       	brcs	.+4      	; 0x3e24 <__udivmodhi4_ep>
    3e20:	a6 1b       	sub	r26, r22
    3e22:	b7 0b       	sbc	r27, r23

00003e24 <__udivmodhi4_ep>:
    3e24:	88 1f       	adc	r24, r24
    3e26:	99 1f       	adc	r25, r25
    3e28:	5a 95       	dec	r21
    3e2a:	a9 f7       	brne	.-22     	; 0x3e16 <__udivmodhi4_loop>
    3e2c:	80 95       	com	r24
    3e2e:	90 95       	com	r25
    3e30:	bc 01       	movw	r22, r24
    3e32:	cd 01       	movw	r24, r26
    3e34:	08 95       	ret

00003e36 <__divmodhi4>:
    3e36:	97 fb       	bst	r25, 7
    3e38:	09 2e       	mov	r0, r25
    3e3a:	07 26       	eor	r0, r23
    3e3c:	0a d0       	rcall	.+20     	; 0x3e52 <__divmodhi4_neg1>
    3e3e:	77 fd       	sbrc	r23, 7
    3e40:	04 d0       	rcall	.+8      	; 0x3e4a <__divmodhi4_neg2>
    3e42:	e5 df       	rcall	.-54     	; 0x3e0e <__udivmodhi4>
    3e44:	06 d0       	rcall	.+12     	; 0x3e52 <__divmodhi4_neg1>
    3e46:	00 20       	and	r0, r0
    3e48:	1a f4       	brpl	.+6      	; 0x3e50 <__divmodhi4_exit>

00003e4a <__divmodhi4_neg2>:
    3e4a:	70 95       	com	r23
    3e4c:	61 95       	neg	r22
    3e4e:	7f 4f       	sbci	r23, 0xFF	; 255

00003e50 <__divmodhi4_exit>:
    3e50:	08 95       	ret

00003e52 <__divmodhi4_neg1>:
    3e52:	f6 f7       	brtc	.-4      	; 0x3e50 <__divmodhi4_exit>
    3e54:	90 95       	com	r25
    3e56:	81 95       	neg	r24
    3e58:	9f 4f       	sbci	r25, 0xFF	; 255
    3e5a:	08 95       	ret

00003e5c <__udivmodsi4>:
    3e5c:	a1 e2       	ldi	r26, 0x21	; 33
    3e5e:	1a 2e       	mov	r1, r26
    3e60:	aa 1b       	sub	r26, r26
    3e62:	bb 1b       	sub	r27, r27
    3e64:	fd 01       	movw	r30, r26
    3e66:	0d c0       	rjmp	.+26     	; 0x3e82 <__udivmodsi4_ep>

00003e68 <__udivmodsi4_loop>:
    3e68:	aa 1f       	adc	r26, r26
    3e6a:	bb 1f       	adc	r27, r27
    3e6c:	ee 1f       	adc	r30, r30
    3e6e:	ff 1f       	adc	r31, r31
    3e70:	a2 17       	cp	r26, r18
    3e72:	b3 07       	cpc	r27, r19
    3e74:	e4 07       	cpc	r30, r20
    3e76:	f5 07       	cpc	r31, r21
    3e78:	20 f0       	brcs	.+8      	; 0x3e82 <__udivmodsi4_ep>
    3e7a:	a2 1b       	sub	r26, r18
    3e7c:	b3 0b       	sbc	r27, r19
    3e7e:	e4 0b       	sbc	r30, r20
    3e80:	f5 0b       	sbc	r31, r21

00003e82 <__udivmodsi4_ep>:
    3e82:	66 1f       	adc	r22, r22
    3e84:	77 1f       	adc	r23, r23
    3e86:	88 1f       	adc	r24, r24
    3e88:	99 1f       	adc	r25, r25
    3e8a:	1a 94       	dec	r1
    3e8c:	69 f7       	brne	.-38     	; 0x3e68 <__udivmodsi4_loop>
    3e8e:	60 95       	com	r22
    3e90:	70 95       	com	r23
    3e92:	80 95       	com	r24
    3e94:	90 95       	com	r25
    3e96:	9b 01       	movw	r18, r22
    3e98:	ac 01       	movw	r20, r24
    3e9a:	bd 01       	movw	r22, r26
    3e9c:	cf 01       	movw	r24, r30
    3e9e:	08 95       	ret

00003ea0 <__prologue_saves__>:
    3ea0:	2f 92       	push	r2
    3ea2:	3f 92       	push	r3
    3ea4:	4f 92       	push	r4
    3ea6:	5f 92       	push	r5
    3ea8:	6f 92       	push	r6
    3eaa:	7f 92       	push	r7
    3eac:	8f 92       	push	r8
    3eae:	9f 92       	push	r9
    3eb0:	af 92       	push	r10
    3eb2:	bf 92       	push	r11
    3eb4:	cf 92       	push	r12
    3eb6:	df 92       	push	r13
    3eb8:	ef 92       	push	r14
    3eba:	ff 92       	push	r15
    3ebc:	0f 93       	push	r16
    3ebe:	1f 93       	push	r17
    3ec0:	cf 93       	push	r28
    3ec2:	df 93       	push	r29
    3ec4:	cd b7       	in	r28, 0x3d	; 61
    3ec6:	de b7       	in	r29, 0x3e	; 62
    3ec8:	ca 1b       	sub	r28, r26
    3eca:	db 0b       	sbc	r29, r27
    3ecc:	0f b6       	in	r0, 0x3f	; 63
    3ece:	f8 94       	cli
    3ed0:	de bf       	out	0x3e, r29	; 62
    3ed2:	0f be       	out	0x3f, r0	; 63
    3ed4:	cd bf       	out	0x3d, r28	; 61
    3ed6:	09 94       	ijmp

00003ed8 <__epilogue_restores__>:
    3ed8:	2a 88       	ldd	r2, Y+18	; 0x12
    3eda:	39 88       	ldd	r3, Y+17	; 0x11
    3edc:	48 88       	ldd	r4, Y+16	; 0x10
    3ede:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ee0:	6e 84       	ldd	r6, Y+14	; 0x0e
    3ee2:	7d 84       	ldd	r7, Y+13	; 0x0d
    3ee4:	8c 84       	ldd	r8, Y+12	; 0x0c
    3ee6:	9b 84       	ldd	r9, Y+11	; 0x0b
    3ee8:	aa 84       	ldd	r10, Y+10	; 0x0a
    3eea:	b9 84       	ldd	r11, Y+9	; 0x09
    3eec:	c8 84       	ldd	r12, Y+8	; 0x08
    3eee:	df 80       	ldd	r13, Y+7	; 0x07
    3ef0:	ee 80       	ldd	r14, Y+6	; 0x06
    3ef2:	fd 80       	ldd	r15, Y+5	; 0x05
    3ef4:	0c 81       	ldd	r16, Y+4	; 0x04
    3ef6:	1b 81       	ldd	r17, Y+3	; 0x03
    3ef8:	aa 81       	ldd	r26, Y+2	; 0x02
    3efa:	b9 81       	ldd	r27, Y+1	; 0x01
    3efc:	ce 0f       	add	r28, r30
    3efe:	d1 1d       	adc	r29, r1
    3f00:	0f b6       	in	r0, 0x3f	; 63
    3f02:	f8 94       	cli
    3f04:	de bf       	out	0x3e, r29	; 62
    3f06:	0f be       	out	0x3f, r0	; 63
    3f08:	cd bf       	out	0x3d, r28	; 61
    3f0a:	ed 01       	movw	r28, r26
    3f0c:	08 95       	ret

00003f0e <_exit>:
    3f0e:	f8 94       	cli

00003f10 <__stop_program>:
    3f10:	ff cf       	rjmp	.-2      	; 0x3f10 <__stop_program>
