
Temp_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000498  0000052c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000498  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800122  00800122  0000054e  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000054e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000bc  00000000  00000000  0000056e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000844  00000000  00000000  0000062a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002f7  00000000  00000000  00000e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000067d  00000000  00000000  00001165  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  000017e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000025d  00000000  00000000  000018e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002f0  00000000  00000000  00001b41  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001e31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e9       	ldi	r30, 0x98	; 152
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e2       	ldi	r26, 0x22	; 34
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 32       	cpi	r26, 0x27	; 39
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 55 01 	call	0x2aa	; 0x2aa <main>
  9e:	0c 94 4a 02 	jmp	0x494	; 0x494 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_write>:
static void lcd_write(uint8_t data,uint8_t rs) 
{
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
  a6:	66 23       	and	r22, r22
  a8:	11 f0       	breq	.+4      	; 0xae <lcd_write+0x8>
       lcd_rs_high();
  aa:	41 9a       	sbi	0x08, 1	; 8
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <lcd_write+0xa>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
  ae:	41 98       	cbi	0x08, 1	; 8
    }
    lcd_rw_low();
  b0:	42 98       	cbi	0x08, 2	; 8
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
  b2:	52 9a       	sbi	0x0a, 2	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
  b4:	53 9a       	sbi	0x0a, 3	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
  b6:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
  b8:	55 9a       	sbi	0x0a, 5	; 10
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
  ba:	5d 98       	cbi	0x0b, 5	; 11
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
  bc:	5c 98       	cbi	0x0b, 4	; 11
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
  be:	5b 98       	cbi	0x0b, 3	; 11
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
  c0:	5a 98       	cbi	0x0b, 2	; 11
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  c2:	87 fd       	sbrc	r24, 7
  c4:	5d 9a       	sbi	0x0b, 5	; 11
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  c6:	86 fd       	sbrc	r24, 6
  c8:	5c 9a       	sbi	0x0b, 4	; 11
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  ca:	85 fd       	sbrc	r24, 5
  cc:	5b 9a       	sbi	0x0b, 3	; 11
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
  ce:	84 fd       	sbrc	r24, 4
  d0:	5a 9a       	sbi	0x0b, 2	; 11

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
  d2:	43 9a       	sbi	0x08, 3	; 8
    lcd_e_delay();
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <lcd_write+0x30>
    lcd_e_low();
  d6:	43 98       	cbi	0x08, 3	; 8
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
        lcd_e_toggle();
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
  d8:	5d 98       	cbi	0x0b, 5	; 11
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
  da:	5c 98       	cbi	0x0b, 4	; 11
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
  dc:	5b 98       	cbi	0x0b, 3	; 11
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
  de:	5a 98       	cbi	0x0b, 2	; 11
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  e0:	83 fd       	sbrc	r24, 3
  e2:	5d 9a       	sbi	0x0b, 5	; 11
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  e4:	82 fd       	sbrc	r24, 2
  e6:	5c 9a       	sbi	0x0b, 4	; 11
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  e8:	81 fd       	sbrc	r24, 1
  ea:	5b 9a       	sbi	0x0b, 3	; 11
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
  ec:	80 fd       	sbrc	r24, 0
  ee:	5a 9a       	sbi	0x0b, 2	; 11

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
  f0:	43 9a       	sbi	0x08, 3	; 8
    lcd_e_delay();
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <lcd_write+0x4e>
    lcd_e_low();
  f4:	43 98       	cbi	0x08, 3	; 8
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();        
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
  f6:	5a 9a       	sbi	0x0b, 2	; 11
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  f8:	5b 9a       	sbi	0x0b, 3	; 11
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  fa:	5c 9a       	sbi	0x0b, 4	; 11
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  fc:	5d 9a       	sbi	0x0b, 5	; 11
    }
}
  fe:	08 95       	ret

00000100 <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
 100:	88 23       	and	r24, r24
 102:	11 f0       	breq	.+4      	; 0x108 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
 104:	41 9a       	sbi	0x08, 1	; 8
 106:	01 c0       	rjmp	.+2      	; 0x10a <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 108:	41 98       	cbi	0x08, 1	; 8
    lcd_rw_high();                           /* RW=1  read mode      */
 10a:	42 9a       	sbi	0x08, 2	; 8
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 10c:	52 98       	cbi	0x0a, 2	; 10
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 10e:	53 98       	cbi	0x0a, 3	; 10
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 110:	54 98       	cbi	0x0a, 4	; 10
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 112:	55 98       	cbi	0x0a, 5	; 10
                
        /* read high nibble first */
        lcd_e_high();
 114:	43 9a       	sbi	0x08, 3	; 8
        lcd_e_delay();        
 116:	00 c0       	rjmp	.+0      	; 0x118 <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 118:	4a 9b       	sbis	0x09, 2	; 9
 11a:	02 c0       	rjmp	.+4      	; 0x120 <lcd_read+0x20>
 11c:	80 e1       	ldi	r24, 0x10	; 16
 11e:	01 c0       	rjmp	.+2      	; 0x122 <lcd_read+0x22>
 120:	80 e0       	ldi	r24, 0x00	; 0
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 122:	4b 99       	sbic	0x09, 3	; 9
 124:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 126:	4c 99       	sbic	0x09, 4	; 9
 128:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 12a:	4d 99       	sbic	0x09, 5	; 9
 12c:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 12e:	43 98       	cbi	0x08, 3	; 8

        lcd_e_delay();                       /* Enable 500ns low       */
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
 132:	43 9a       	sbi	0x08, 3	; 8
        lcd_e_delay();
 134:	00 c0       	rjmp	.+0      	; 0x136 <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 136:	4a 99       	sbic	0x09, 2	; 9
 138:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 13a:	4b 99       	sbic	0x09, 3	; 9
 13c:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 13e:	4c 99       	sbic	0x09, 4	; 9
 140:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 142:	4d 99       	sbic	0x09, 5	; 9
 144:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 146:	43 98       	cbi	0x08, 3	; 8
    }
    return data;
}
 148:	08 95       	ret

0000014a <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	0e 94 80 00 	call	0x100	; 0x100 <lcd_read>
 150:	87 fd       	sbrc	r24, 7
 152:	fb cf       	rjmp	.-10     	; 0x14a <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <lcd_waitbusy+0xe>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 80 00 	call	0x100	; 0x100 <lcd_read>
    
}/* lcd_waitbusy */
 162:	08 95       	ret

00000164 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 164:	1f 93       	push	r17
 166:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 168:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_waitbusy>
    lcd_write(cmd,0);
 16c:	81 2f       	mov	r24, r17
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write>
}
 174:	1f 91       	pop	r17
 176:	08 95       	ret

00000178 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 178:	1f 93       	push	r17
 17a:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 17c:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_waitbusy>
    lcd_write(data,1);
 180:	81 2f       	mov	r24, r17
 182:	61 e0       	ldi	r22, 0x01	; 1
 184:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write>
}
 188:	1f 91       	pop	r17
 18a:	08 95       	ret

0000018c <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 18c:	66 23       	and	r22, r22
 18e:	11 f4       	brne	.+4      	; 0x194 <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 190:	80 58       	subi	r24, 0x80	; 128
 192:	01 c0       	rjmp	.+2      	; 0x196 <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 194:	80 54       	subi	r24, 0x40	; 64
 196:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_command>
 19a:	08 95       	ret

0000019c <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 19c:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_waitbusy>
}
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	08 95       	ret

000001a4 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_command>
}
 1aa:	08 95       	ret

000001ac <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_command>
}
 1b2:	08 95       	ret

000001b4 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 1b4:	1f 93       	push	r17
 1b6:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 1b8:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_waitbusy>
    if (c=='\n')
 1bc:	1a 30       	cpi	r17, 0x0A	; 10
 1be:	49 f4       	brne	.+18     	; 0x1d2 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 1c0:	80 34       	cpi	r24, 0x40	; 64
 1c2:	10 f0       	brcs	.+4      	; 0x1c8 <lcd_putc+0x14>
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	01 c0       	rjmp	.+2      	; 0x1ca <lcd_putc+0x16>
 1c8:	80 e4       	ldi	r24, 0x40	; 64
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 1ca:	80 58       	subi	r24, 0x80	; 128
 1cc:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_command>
 1d0:	04 c0       	rjmp	.+8      	; 0x1da <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 1d2:	81 2f       	mov	r24, r17
 1d4:	61 e0       	ldi	r22, 0x01	; 1
 1d6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write>
    }

}/* lcd_putc */
 1da:	1f 91       	pop	r17
 1dc:	08 95       	ret

000001de <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	ec 01       	movw	r28, r24
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <lcd_puts+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
 1e6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 1ea:	89 91       	ld	r24, Y+
 1ec:	88 23       	and	r24, r24
 1ee:	d9 f7       	brne	.-10     	; 0x1e6 <lcd_puts+0x8>
        lcd_putc(c);
    }

}/* lcd_puts */
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	ec 01       	movw	r28, r24
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
 1fe:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_putc>
 202:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 204:	21 96       	adiw	r28, 0x01	; 1
 206:	84 91       	lpm	r24, Z+
 208:	88 23       	and	r24, r24
 20a:	c9 f7       	brne	.-14     	; 0x1fe <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 212:	1f 93       	push	r17
 214:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 216:	39 9a       	sbi	0x07, 1	; 7
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 218:	3a 9a       	sbi	0x07, 2	; 7
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 21a:	3b 9a       	sbi	0x07, 3	; 7
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 21c:	52 9a       	sbi	0x0a, 2	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 21e:	53 9a       	sbi	0x0a, 3	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 220:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 222:	55 9a       	sbi	0x0a, 5	; 10
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 224:	80 e8       	ldi	r24, 0x80	; 128
 226:	9e e3       	ldi	r25, 0x3E	; 62
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <lcd_init+0x16>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 22c:	5b 9a       	sbi	0x0b, 3	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 22e:	5a 9a       	sbi	0x0b, 2	; 11

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 230:	43 9a       	sbi	0x08, 3	; 8
    lcd_e_delay();
 232:	00 c0       	rjmp	.+0      	; 0x234 <lcd_init+0x22>
    lcd_e_low();
 234:	43 98       	cbi	0x08, 3	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 236:	80 e8       	ldi	r24, 0x80	; 128
 238:	93 e1       	ldi	r25, 0x13	; 19
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <lcd_init+0x28>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 23e:	43 9a       	sbi	0x08, 3	; 8
    lcd_e_delay();
 240:	00 c0       	rjmp	.+0      	; 0x242 <lcd_init+0x30>
    lcd_e_low();
 242:	43 98       	cbi	0x08, 3	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 244:	80 e4       	ldi	r24, 0x40	; 64
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	fc 01       	movw	r30, r24
 24a:	31 97       	sbiw	r30, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <lcd_init+0x38>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 24e:	43 9a       	sbi	0x08, 3	; 8
    lcd_e_delay();
 250:	00 c0       	rjmp	.+0      	; 0x252 <lcd_init+0x40>
    lcd_e_low();
 252:	43 98       	cbi	0x08, 3	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 254:	fc 01       	movw	r30, r24
 256:	31 97       	sbiw	r30, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <lcd_init+0x44>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 25a:	5a 98       	cbi	0x0b, 2	; 11

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 25c:	43 9a       	sbi	0x08, 3	; 8
    lcd_e_delay();
 25e:	00 c0       	rjmp	.+0      	; 0x260 <lcd_init+0x4e>
    lcd_e_low();
 260:	43 98       	cbi	0x08, 3	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <lcd_init+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 266:	88 e2       	ldi	r24, 0x28	; 40
 268:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 26c:	88 e0       	ldi	r24, 0x08	; 8
 26e:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 272:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 276:	86 e0       	ldi	r24, 0x06	; 6
 278:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 27c:	81 2f       	mov	r24, r17
 27e:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_command>

}/* lcd_init */
 282:	1f 91       	pop	r17
 284:	08 95       	ret

00000286 <ReadADC>:

uint16_t ReadADC()
   {
      //Start Single conversion

   ADCSRA|=(1<<ADSC);
 286:	80 91 7a 00 	lds	r24, 0x007A
 28a:	80 64       	ori	r24, 0x40	; 64
 28c:	80 93 7a 00 	sts	0x007A, r24

   
   while(!(ADCSRA & (1<<ADIF)));//Wait for conversion to complete
 290:	80 91 7a 00 	lds	r24, 0x007A
 294:	84 ff       	sbrs	r24, 4
 296:	fc cf       	rjmp	.-8      	; 0x290 <ReadADC+0xa>
		


   
   ADCSRA|=(1<<ADIF);//Clear ADIF by writing one to it
 298:	80 91 7a 00 	lds	r24, 0x007A
 29c:	80 61       	ori	r24, 0x10	; 16
 29e:	80 93 7a 00 	sts	0x007A, r24

   return(ADCH);
 2a2:	80 91 79 00 	lds	r24, 0x0079
 }
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	08 95       	ret

000002aa <main>:




int main()
{
 2aa:	af 92       	push	r10
 2ac:	bf 92       	push	r11
 2ae:	cf 92       	push	r12
 2b0:	df 92       	push	r13
 2b2:	ef 92       	push	r14
 2b4:	ff 92       	push	r15
 2b6:	0f 93       	push	r16
 2b8:	1f 93       	push	r17
 2ba:	df 93       	push	r29
 2bc:	cf 93       	push	r28
 2be:	00 d0       	rcall	.+0      	; 0x2c0 <main+0x16>
 2c0:	00 d0       	rcall	.+0      	; 0x2c2 <main+0x18>
 2c2:	00 d0       	rcall	.+0      	; 0x2c4 <main+0x1a>
 2c4:	cd b7       	in	r28, 0x3d	; 61
 2c6:	de b7       	in	r29, 0x3e	; 62
  uint16_t adc_value; 
  uint8_t t;

	char tmp[6]="temp=";
 2c8:	de 01       	movw	r26, r28
 2ca:	11 96       	adiw	r26, 0x01	; 1
 2cc:	ec e1       	ldi	r30, 0x1C	; 28
 2ce:	f1 e0       	ldi	r31, 0x01	; 1
 2d0:	86 e0       	ldi	r24, 0x06	; 6
 2d2:	01 90       	ld	r0, Z+
 2d4:	0d 92       	st	X+, r0
 2d6:	81 50       	subi	r24, 0x01	; 1
 2d8:	e1 f7       	brne	.-8      	; 0x2d2 <main+0x28>

   lcd_init(LCD_DISP_ON);
 2da:	8c e0       	ldi	r24, 0x0C	; 12
 2dc:	0e 94 09 01 	call	0x212	; 0x212 <lcd_init>
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
 2e0:	9f e7       	ldi	r25, 0x7F	; 127
 2e2:	e9 2e       	mov	r14, r25
 2e4:	94 e8       	ldi	r25, 0x84	; 132
 2e6:	f9 2e       	mov	r15, r25
 2e8:	9e e1       	ldi	r25, 0x1E	; 30
 2ea:	09 2f       	mov	r16, r25
 2ec:	11 2d       	mov	r17, r1
 2ee:	d8 01       	movw	r26, r16
 2f0:	c7 01       	movw	r24, r14
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	a1 09       	sbc	r26, r1
 2f6:	b1 09       	sbc	r27, r1
 2f8:	00 00       	nop
 2fa:	01 f0       	breq	.+0      	; 0x2fc <main+0x52>
 2fc:	d1 f7       	brne	.-12     	; 0x2f2 <main+0x48>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
 2fe:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
 300:	00 00       	nop
   _delay_ms(1000);
   lcd_puts("testing....");
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	91 e0       	ldi	r25, 0x01	; 1
 306:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_puts>
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
 30a:	d8 01       	movw	r26, r16
 30c:	c7 01       	movw	r24, r14
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	a1 09       	sbc	r26, r1
 312:	b1 09       	sbc	r27, r1
 314:	00 00       	nop
 316:	01 f0       	breq	.+0      	; 0x318 <main+0x6e>
 318:	d1 f7       	brne	.-12     	; 0x30e <main+0x64>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
 31a:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
 31c:	00 00       	nop
      _delay_ms(1000);
   
	 lcd_clrscr();
 31e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_clrscr>
      
   ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz      
 322:	80 91 7a 00 	lds	r24, 0x007A
 326:	87 60       	ori	r24, 0x07	; 7
 328:	80 93 7a 00 	sts	0x007A, r24

   ADMUX |= (1 << REFS0); // set refrence voltage
 32c:	80 91 7c 00 	lds	r24, 0x007C
 330:	80 64       	ori	r24, 0x40	; 64
 332:	80 93 7c 00 	sts	0x007C, r24

   ADMUX |= (1 << ADLAR); // left adjust ADC result.
 336:	80 91 7c 00 	lds	r24, 0x007C
 33a:	80 62       	ori	r24, 0x20	; 32
 33c:	80 93 7c 00 	sts	0x007C, r24

   ADCSRA |= (1 << ADEN);  // Enable ADC 
 340:	80 91 7a 00 	lds	r24, 0x007A
 344:	80 68       	ori	r24, 0x80	; 128
 346:	80 93 7a 00 	sts	0x007A, r24
  
       

  while(1)
   {
     strcpy(tmp,"Temp=");
 34a:	7e 01       	movw	r14, r28
 34c:	08 94       	sec
 34e:	e1 1c       	adc	r14, r1
 350:	f1 1c       	adc	r15, r1
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
 352:	8f e7       	ldi	r24, 0x7F	; 127
 354:	a8 2e       	mov	r10, r24
 356:	84 e8       	ldi	r24, 0x84	; 132
 358:	b8 2e       	mov	r11, r24
 35a:	8e e1       	ldi	r24, 0x1E	; 30
 35c:	c8 2e       	mov	r12, r24
 35e:	d1 2c       	mov	r13, r1
 360:	c7 01       	movw	r24, r14
 362:	6c e0       	ldi	r22, 0x0C	; 12
 364:	71 e0       	ldi	r23, 0x01	; 1
 366:	0e 94 fe 01 	call	0x3fc	; 0x3fc <strcpy>

uint16_t ReadADC()
   {
      //Start Single conversion

   ADCSRA|=(1<<ADSC);
 36a:	80 91 7a 00 	lds	r24, 0x007A
 36e:	80 64       	ori	r24, 0x40	; 64
 370:	80 93 7a 00 	sts	0x007A, r24

   
   while(!(ADCSRA & (1<<ADIF)));//Wait for conversion to complete
 374:	80 91 7a 00 	lds	r24, 0x007A
 378:	84 ff       	sbrs	r24, 4
 37a:	fc cf       	rjmp	.-8      	; 0x374 <main+0xca>
		


   
   ADCSRA|=(1<<ADIF);//Clear ADIF by writing one to it
 37c:	80 91 7a 00 	lds	r24, 0x007A
 380:	80 61       	ori	r24, 0x10	; 16
 382:	80 93 7a 00 	sts	0x007A, r24

   return(ADCH);
 386:	10 91 79 00 	lds	r17, 0x0079
      
      t=adc_value/2;//Convert to degree Centrigrade

      //Print to display
     	 
	 lcd_puts("Sensing..");
 38a:	82 e1       	ldi	r24, 0x12	; 18
 38c:	91 e0       	ldi	r25, 0x01	; 1
 38e:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_puts>
 392:	d6 01       	movw	r26, r12
 394:	c5 01       	movw	r24, r10
 396:	01 97       	sbiw	r24, 0x01	; 1
 398:	a1 09       	sbc	r26, r1
 39a:	b1 09       	sbc	r27, r1
 39c:	00 00       	nop
 39e:	01 f0       	breq	.+0      	; 0x3a0 <main+0xf6>
 3a0:	d1 f7       	brne	.-12     	; 0x396 <main+0xec>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
 3a2:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
 3a4:	00 00       	nop
      _delay_ms(1000);

	 lcd_clrscr();
 3a6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_clrscr>
             
   itoa(t,rslt,10);
 3aa:	81 2f       	mov	r24, r17
 3ac:	86 95       	lsr	r24
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	62 e2       	ldi	r22, 0x22	; 34
 3b2:	71 e0       	ldi	r23, 0x01	; 1
 3b4:	4a e0       	ldi	r20, 0x0A	; 10
 3b6:	50 e0       	ldi	r21, 0x00	; 0
 3b8:	0e 94 05 02 	call	0x40a	; 0x40a <itoa>
    strcat(tmp,rslt);
 3bc:	c7 01       	movw	r24, r14
 3be:	62 e2       	ldi	r22, 0x22	; 34
 3c0:	71 e0       	ldi	r23, 0x01	; 1
 3c2:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <strcat>
      
   lcd_puts(tmp);
 3c6:	c7 01       	movw	r24, r14
 3c8:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_puts>
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
 3cc:	d6 01       	movw	r26, r12
 3ce:	c5 01       	movw	r24, r10
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	a1 09       	sbc	r26, r1
 3d4:	b1 09       	sbc	r27, r1
 3d6:	00 00       	nop
 3d8:	01 f0       	breq	.+0      	; 0x3da <main+0x130>
 3da:	d1 f7       	brne	.-12     	; 0x3d0 <main+0x126>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
 3dc:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
 3de:	00 00       	nop
     _delay_ms(1000);
	 lcd_clrscr();
 3e0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_clrscr>
 3e4:	bd cf       	rjmp	.-134    	; 0x360 <main+0xb6>

000003e6 <strcat>:
 3e6:	fb 01       	movw	r30, r22
 3e8:	dc 01       	movw	r26, r24
 3ea:	0d 90       	ld	r0, X+
 3ec:	00 20       	and	r0, r0
 3ee:	e9 f7       	brne	.-6      	; 0x3ea <strcat+0x4>
 3f0:	11 97       	sbiw	r26, 0x01	; 1
 3f2:	01 90       	ld	r0, Z+
 3f4:	0d 92       	st	X+, r0
 3f6:	00 20       	and	r0, r0
 3f8:	e1 f7       	brne	.-8      	; 0x3f2 <strcat+0xc>
 3fa:	08 95       	ret

000003fc <strcpy>:
 3fc:	fb 01       	movw	r30, r22
 3fe:	dc 01       	movw	r26, r24
 400:	01 90       	ld	r0, Z+
 402:	0d 92       	st	X+, r0
 404:	00 20       	and	r0, r0
 406:	e1 f7       	brne	.-8      	; 0x400 <strcpy+0x4>
 408:	08 95       	ret

0000040a <itoa>:
 40a:	fb 01       	movw	r30, r22
 40c:	9f 01       	movw	r18, r30
 40e:	e8 94       	clt
 410:	42 30       	cpi	r20, 0x02	; 2
 412:	c4 f0       	brlt	.+48     	; 0x444 <itoa+0x3a>
 414:	45 32       	cpi	r20, 0x25	; 37
 416:	b4 f4       	brge	.+44     	; 0x444 <itoa+0x3a>
 418:	4a 30       	cpi	r20, 0x0A	; 10
 41a:	29 f4       	brne	.+10     	; 0x426 <itoa+0x1c>
 41c:	97 fb       	bst	r25, 7
 41e:	1e f4       	brtc	.+6      	; 0x426 <itoa+0x1c>
 420:	90 95       	com	r25
 422:	81 95       	neg	r24
 424:	9f 4f       	sbci	r25, 0xFF	; 255
 426:	64 2f       	mov	r22, r20
 428:	77 27       	eor	r23, r23
 42a:	0e 94 36 02 	call	0x46c	; 0x46c <__udivmodhi4>
 42e:	80 5d       	subi	r24, 0xD0	; 208
 430:	8a 33       	cpi	r24, 0x3A	; 58
 432:	0c f0       	brlt	.+2      	; 0x436 <itoa+0x2c>
 434:	89 5d       	subi	r24, 0xD9	; 217
 436:	81 93       	st	Z+, r24
 438:	cb 01       	movw	r24, r22
 43a:	00 97       	sbiw	r24, 0x00	; 0
 43c:	a1 f7       	brne	.-24     	; 0x426 <itoa+0x1c>
 43e:	16 f4       	brtc	.+4      	; 0x444 <itoa+0x3a>
 440:	5d e2       	ldi	r21, 0x2D	; 45
 442:	51 93       	st	Z+, r21
 444:	10 82       	st	Z, r1
 446:	c9 01       	movw	r24, r18
 448:	0c 94 26 02 	jmp	0x44c	; 0x44c <strrev>

0000044c <strrev>:
 44c:	dc 01       	movw	r26, r24
 44e:	fc 01       	movw	r30, r24
 450:	67 2f       	mov	r22, r23
 452:	71 91       	ld	r23, Z+
 454:	77 23       	and	r23, r23
 456:	e1 f7       	brne	.-8      	; 0x450 <strrev+0x4>
 458:	32 97       	sbiw	r30, 0x02	; 2
 45a:	04 c0       	rjmp	.+8      	; 0x464 <strrev+0x18>
 45c:	7c 91       	ld	r23, X
 45e:	6d 93       	st	X+, r22
 460:	70 83       	st	Z, r23
 462:	62 91       	ld	r22, -Z
 464:	ae 17       	cp	r26, r30
 466:	bf 07       	cpc	r27, r31
 468:	c8 f3       	brcs	.-14     	; 0x45c <strrev+0x10>
 46a:	08 95       	ret

0000046c <__udivmodhi4>:
 46c:	aa 1b       	sub	r26, r26
 46e:	bb 1b       	sub	r27, r27
 470:	51 e1       	ldi	r21, 0x11	; 17
 472:	07 c0       	rjmp	.+14     	; 0x482 <__udivmodhi4_ep>

00000474 <__udivmodhi4_loop>:
 474:	aa 1f       	adc	r26, r26
 476:	bb 1f       	adc	r27, r27
 478:	a6 17       	cp	r26, r22
 47a:	b7 07       	cpc	r27, r23
 47c:	10 f0       	brcs	.+4      	; 0x482 <__udivmodhi4_ep>
 47e:	a6 1b       	sub	r26, r22
 480:	b7 0b       	sbc	r27, r23

00000482 <__udivmodhi4_ep>:
 482:	88 1f       	adc	r24, r24
 484:	99 1f       	adc	r25, r25
 486:	5a 95       	dec	r21
 488:	a9 f7       	brne	.-22     	; 0x474 <__udivmodhi4_loop>
 48a:	80 95       	com	r24
 48c:	90 95       	com	r25
 48e:	bc 01       	movw	r22, r24
 490:	cd 01       	movw	r24, r26
 492:	08 95       	ret

00000494 <_exit>:
 494:	f8 94       	cli

00000496 <__stop_program>:
 496:	ff cf       	rjmp	.-2      	; 0x496 <__stop_program>
