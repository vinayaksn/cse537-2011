
sid_Adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011c  00800100  00000fde  00001052  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fde  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  0000116e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000a7  00000000  00000000  0000118e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000006b4  00000000  00000000  00001235  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002be  00000000  00000000  000018e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000058a  00000000  00000000  00001ba7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000f0  00000000  00000000  00002134  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000235  00000000  00000000  00002224  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002be  00000000  00000000  00002459  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00002717  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ed       	ldi	r30, 0xDE	; 222
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 3b 01 	call	0x276	; 0x276 <main>
  8e:	0c 94 ed 07 	jmp	0xfda	; 0xfda <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <lcd_write>:
static void lcd_write(uint8_t data,uint8_t rs) 
{
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
  96:	66 23       	and	r22, r22
  98:	11 f0       	breq	.+4      	; 0x9e <lcd_write+0x8>
       lcd_rs_high();
  9a:	40 9a       	sbi	0x08, 0	; 8
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <lcd_write+0xa>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
  9e:	40 98       	cbi	0x08, 0	; 8
    }
    lcd_rw_low();
  a0:	41 98       	cbi	0x08, 1	; 8
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
  a2:	52 9a       	sbi	0x0a, 2	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
  a4:	53 9a       	sbi	0x0a, 3	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
  a6:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
  a8:	55 9a       	sbi	0x0a, 5	; 10
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
  aa:	5d 98       	cbi	0x0b, 5	; 11
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
  ac:	5c 98       	cbi	0x0b, 4	; 11
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
  ae:	5b 98       	cbi	0x0b, 3	; 11
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
  b0:	5a 98       	cbi	0x0b, 2	; 11
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  b2:	87 fd       	sbrc	r24, 7
  b4:	5d 9a       	sbi	0x0b, 5	; 11
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  b6:	86 fd       	sbrc	r24, 6
  b8:	5c 9a       	sbi	0x0b, 4	; 11
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  ba:	85 fd       	sbrc	r24, 5
  bc:	5b 9a       	sbi	0x0b, 3	; 11
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
  be:	84 fd       	sbrc	r24, 4
  c0:	5a 9a       	sbi	0x0b, 2	; 11

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
  c2:	42 9a       	sbi	0x08, 2	; 8
    lcd_e_delay();
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <lcd_write+0x30>
    lcd_e_low();
  c6:	42 98       	cbi	0x08, 2	; 8
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
        lcd_e_toggle();
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
  c8:	5d 98       	cbi	0x0b, 5	; 11
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
  ca:	5c 98       	cbi	0x0b, 4	; 11
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
  cc:	5b 98       	cbi	0x0b, 3	; 11
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
  ce:	5a 98       	cbi	0x0b, 2	; 11
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  d0:	83 fd       	sbrc	r24, 3
  d2:	5d 9a       	sbi	0x0b, 5	; 11
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  d4:	82 fd       	sbrc	r24, 2
  d6:	5c 9a       	sbi	0x0b, 4	; 11
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  d8:	81 fd       	sbrc	r24, 1
  da:	5b 9a       	sbi	0x0b, 3	; 11
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
  dc:	80 fd       	sbrc	r24, 0
  de:	5a 9a       	sbi	0x0b, 2	; 11

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
  e0:	42 9a       	sbi	0x08, 2	; 8
    lcd_e_delay();
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <lcd_write+0x4e>
    lcd_e_low();
  e4:	42 98       	cbi	0x08, 2	; 8
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();        
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
  e6:	5a 9a       	sbi	0x0b, 2	; 11
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  e8:	5b 9a       	sbi	0x0b, 3	; 11
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  ea:	5c 9a       	sbi	0x0b, 4	; 11
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  ec:	5d 9a       	sbi	0x0b, 5	; 11
    }
}
  ee:	08 95       	ret

000000f0 <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
  f0:	88 23       	and	r24, r24
  f2:	11 f0       	breq	.+4      	; 0xf8 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
  f4:	40 9a       	sbi	0x08, 0	; 8
  f6:	01 c0       	rjmp	.+2      	; 0xfa <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
  f8:	40 98       	cbi	0x08, 0	; 8
    lcd_rw_high();                           /* RW=1  read mode      */
  fa:	41 9a       	sbi	0x08, 1	; 8
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
  fc:	52 98       	cbi	0x0a, 2	; 10
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
  fe:	53 98       	cbi	0x0a, 3	; 10
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 100:	54 98       	cbi	0x0a, 4	; 10
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 102:	55 98       	cbi	0x0a, 5	; 10
                
        /* read high nibble first */
        lcd_e_high();
 104:	42 9a       	sbi	0x08, 2	; 8
        lcd_e_delay();        
 106:	00 c0       	rjmp	.+0      	; 0x108 <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 108:	4a 9b       	sbis	0x09, 2	; 9
 10a:	02 c0       	rjmp	.+4      	; 0x110 <lcd_read+0x20>
 10c:	80 e1       	ldi	r24, 0x10	; 16
 10e:	01 c0       	rjmp	.+2      	; 0x112 <lcd_read+0x22>
 110:	80 e0       	ldi	r24, 0x00	; 0
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 112:	4b 99       	sbic	0x09, 3	; 9
 114:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 116:	4c 99       	sbic	0x09, 4	; 9
 118:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 11a:	4d 99       	sbic	0x09, 5	; 9
 11c:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 11e:	42 98       	cbi	0x08, 2	; 8

        lcd_e_delay();                       /* Enable 500ns low       */
 120:	00 c0       	rjmp	.+0      	; 0x122 <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
 122:	42 9a       	sbi	0x08, 2	; 8
        lcd_e_delay();
 124:	00 c0       	rjmp	.+0      	; 0x126 <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 126:	4a 99       	sbic	0x09, 2	; 9
 128:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 12a:	4b 99       	sbic	0x09, 3	; 9
 12c:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 12e:	4c 99       	sbic	0x09, 4	; 9
 130:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 132:	4d 99       	sbic	0x09, 5	; 9
 134:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 136:	42 98       	cbi	0x08, 2	; 8
    }
    return data;
}
 138:	08 95       	ret

0000013a <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_read>
 140:	87 fd       	sbrc	r24, 7
 142:	fb cf       	rjmp	.-10     	; 0x13a <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <lcd_waitbusy+0xe>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_read>
    
}/* lcd_waitbusy */
 152:	08 95       	ret

00000154 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 154:	1f 93       	push	r17
 156:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 158:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_waitbusy>
    lcd_write(cmd,0);
 15c:	81 2f       	mov	r24, r17
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write>
}
 164:	1f 91       	pop	r17
 166:	08 95       	ret

00000168 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 168:	1f 93       	push	r17
 16a:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 16c:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_waitbusy>
    lcd_write(data,1);
 170:	81 2f       	mov	r24, r17
 172:	61 e0       	ldi	r22, 0x01	; 1
 174:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write>
}
 178:	1f 91       	pop	r17
 17a:	08 95       	ret

0000017c <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 17c:	66 23       	and	r22, r22
 17e:	11 f4       	brne	.+4      	; 0x184 <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 180:	80 58       	subi	r24, 0x80	; 128
 182:	01 c0       	rjmp	.+2      	; 0x186 <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 184:	80 54       	subi	r24, 0x40	; 64
 186:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>
 18a:	08 95       	ret

0000018c <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 18c:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_waitbusy>
}
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	08 95       	ret

00000194 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>
}
 19a:	08 95       	ret

0000019c <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 19c:	82 e0       	ldi	r24, 0x02	; 2
 19e:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>
}
 1a2:	08 95       	ret

000001a4 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 1a4:	1f 93       	push	r17
 1a6:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 1a8:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_waitbusy>
    if (c=='\n')
 1ac:	1a 30       	cpi	r17, 0x0A	; 10
 1ae:	49 f4       	brne	.+18     	; 0x1c2 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 1b0:	80 34       	cpi	r24, 0x40	; 64
 1b2:	10 f0       	brcs	.+4      	; 0x1b8 <lcd_putc+0x14>
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <lcd_putc+0x16>
 1b8:	80 e4       	ldi	r24, 0x40	; 64
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 1ba:	80 58       	subi	r24, 0x80	; 128
 1bc:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>
 1c0:	04 c0       	rjmp	.+8      	; 0x1ca <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 1c2:	81 2f       	mov	r24, r17
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write>
    }

}/* lcd_putc */
 1ca:	1f 91       	pop	r17
 1cc:	08 95       	ret

000001ce <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	ec 01       	movw	r28, r24
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <lcd_puts+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
 1d6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 1da:	89 91       	ld	r24, Y+
 1dc:	88 23       	and	r24, r24
 1de:	d9 f7       	brne	.-10     	; 0x1d6 <lcd_puts+0x8>
        lcd_putc(c);
    }

}/* lcd_puts */
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	ec 01       	movw	r28, r24
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
 1ee:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_putc>
 1f2:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 1f4:	21 96       	adiw	r28, 0x01	; 1
 1f6:	84 91       	lpm	r24, Z+
 1f8:	88 23       	and	r24, r24
 1fa:	c9 f7       	brne	.-14     	; 0x1ee <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 202:	1f 93       	push	r17
 204:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 206:	38 9a       	sbi	0x07, 0	; 7
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 208:	39 9a       	sbi	0x07, 1	; 7
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 20a:	3a 9a       	sbi	0x07, 2	; 7
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 20c:	52 9a       	sbi	0x0a, 2	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 20e:	53 9a       	sbi	0x0a, 3	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 210:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 212:	55 9a       	sbi	0x0a, 5	; 10
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 214:	80 e8       	ldi	r24, 0x80	; 128
 216:	9e e3       	ldi	r25, 0x3E	; 62
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <lcd_init+0x16>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 21c:	5b 9a       	sbi	0x0b, 3	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 21e:	5a 9a       	sbi	0x0b, 2	; 11

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 220:	42 9a       	sbi	0x08, 2	; 8
    lcd_e_delay();
 222:	00 c0       	rjmp	.+0      	; 0x224 <lcd_init+0x22>
    lcd_e_low();
 224:	42 98       	cbi	0x08, 2	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 226:	80 e8       	ldi	r24, 0x80	; 128
 228:	93 e1       	ldi	r25, 0x13	; 19
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <lcd_init+0x28>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 22e:	42 9a       	sbi	0x08, 2	; 8
    lcd_e_delay();
 230:	00 c0       	rjmp	.+0      	; 0x232 <lcd_init+0x30>
    lcd_e_low();
 232:	42 98       	cbi	0x08, 2	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 234:	80 e4       	ldi	r24, 0x40	; 64
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	fc 01       	movw	r30, r24
 23a:	31 97       	sbiw	r30, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <lcd_init+0x38>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 23e:	42 9a       	sbi	0x08, 2	; 8
    lcd_e_delay();
 240:	00 c0       	rjmp	.+0      	; 0x242 <lcd_init+0x40>
    lcd_e_low();
 242:	42 98       	cbi	0x08, 2	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 244:	fc 01       	movw	r30, r24
 246:	31 97       	sbiw	r30, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <lcd_init+0x44>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 24a:	5a 98       	cbi	0x0b, 2	; 11

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 24c:	42 9a       	sbi	0x08, 2	; 8
    lcd_e_delay();
 24e:	00 c0       	rjmp	.+0      	; 0x250 <lcd_init+0x4e>
    lcd_e_low();
 250:	42 98       	cbi	0x08, 2	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <lcd_init+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 256:	88 e2       	ldi	r24, 0x28	; 40
 258:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 25c:	88 e0       	ldi	r24, 0x08	; 8
 25e:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 262:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 266:	86 e0       	ldi	r24, 0x06	; 6
 268:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 26c:	81 2f       	mov	r24, r17
 26e:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>

}/* lcd_init */
 272:	1f 91       	pop	r17
 274:	08 95       	ret

00000276 <main>:
#include "delay_x.h"
#include "lcd.h"
#include "lcd.c"

int main (void)
{   ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz
 276:	af 92       	push	r10
 278:	bf 92       	push	r11
 27a:	cf 92       	push	r12
 27c:	df 92       	push	r13
 27e:	ef 92       	push	r14
 280:	ff 92       	push	r15
 282:	0f 93       	push	r16
 284:	1f 93       	push	r17
 286:	df 93       	push	r29
 288:	cf 93       	push	r28
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
 28e:	2f 97       	sbiw	r28, 0x0f	; 15
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	f8 94       	cli
 294:	de bf       	out	0x3e, r29	; 62
 296:	0f be       	out	0x3f, r0	; 63
 298:	cd bf       	out	0x3d, r28	; 61
 29a:	80 91 7a 00 	lds	r24, 0x007A
 29e:	87 60       	ori	r24, 0x07	; 7
 2a0:	80 93 7a 00 	sts	0x007A, r24
   ADCSRB&=~((1<<ADTS0)|(1<<ADTS1)|(1<<ADTS2));
 2a4:	80 91 7b 00 	lds	r24, 0x007B
 2a8:	88 7f       	andi	r24, 0xF8	; 248
 2aa:	80 93 7b 00 	sts	0x007B, r24
   ADMUX |= (1 << REFS0); // Set ADC reference to AVCC
 2ae:	80 91 7c 00 	lds	r24, 0x007C
 2b2:	80 64       	ori	r24, 0x40	; 64
 2b4:	80 93 7c 00 	sts	0x007C, r24

   ADCSRA |= (1 << ADATE);  // Set ADC to Free-Running Mode
 2b8:	80 91 7a 00 	lds	r24, 0x007A
 2bc:	80 62       	ori	r24, 0x20	; 32
 2be:	80 93 7a 00 	sts	0x007A, r24

//ADMUX |= (ADLAR)
ADCSRA |= (1<<ADEN);
 2c2:	80 91 7a 00 	lds	r24, 0x007A
 2c6:	80 68       	ori	r24, 0x80	; 128
 2c8:	80 93 7a 00 	sts	0x007A, r24
ADCSRA |= (1<<ADSC);
 2cc:	80 91 7a 00 	lds	r24, 0x007A
 2d0:	80 64       	ori	r24, 0x40	; 64
 2d2:	80 93 7a 00 	sts	0x007A, r24
double temperature;

while(1){
adc=ADC;
temperature= adc * 0.5;
sprintf( buf, "READING: %03d\t%d\r\n", adc, (int)temperature);
 2d6:	7e 01       	movw	r14, r28
 2d8:	08 94       	sec
 2da:	e1 1c       	adc	r14, r1
 2dc:	f1 1c       	adc	r15, r1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	a9 2e       	mov	r10, r25
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	b9 2e       	mov	r11, r25
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
 2e6:	8f e3       	ldi	r24, 0x3F	; 63
 2e8:	c8 2e       	mov	r12, r24
 2ea:	8c e9       	ldi	r24, 0x9C	; 156
 2ec:	d8 2e       	mov	r13, r24
char buf[15],str[19];
unsigned int adc;
double temperature;

while(1){
adc=ADC;
 2ee:	60 91 78 00 	lds	r22, 0x0078
 2f2:	70 91 79 00 	lds	r23, 0x0079
temperature= adc * 0.5;
sprintf( buf, "READING: %03d\t%d\r\n", adc, (int)temperature);
 2f6:	8d b7       	in	r24, 0x3d	; 61
 2f8:	9e b7       	in	r25, 0x3e	; 62
 2fa:	08 97       	sbiw	r24, 0x08	; 8
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	f8 94       	cli
 300:	9e bf       	out	0x3e, r25	; 62
 302:	0f be       	out	0x3f, r0	; 63
 304:	8d bf       	out	0x3d, r24	; 61
 306:	0d b7       	in	r16, 0x3d	; 61
 308:	1e b7       	in	r17, 0x3e	; 62
 30a:	0f 5f       	subi	r16, 0xFF	; 255
 30c:	1f 4f       	sbci	r17, 0xFF	; 255
 30e:	ed b7       	in	r30, 0x3d	; 61
 310:	fe b7       	in	r31, 0x3e	; 62
 312:	f2 82       	std	Z+2, r15	; 0x02
 314:	e1 82       	std	Z+1, r14	; 0x01
 316:	f8 01       	movw	r30, r16
 318:	b3 82       	std	Z+3, r11	; 0x03
 31a:	a2 82       	std	Z+2, r10	; 0x02
 31c:	75 83       	std	Z+5, r23	; 0x05
 31e:	64 83       	std	Z+4, r22	; 0x04
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 00 03 	call	0x600	; 0x600 <__floatunsisf>
 328:	20 e0       	ldi	r18, 0x00	; 0
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	40 e0       	ldi	r20, 0x00	; 0
 32e:	5f e3       	ldi	r21, 0x3F	; 63
 330:	0e 94 b2 01 	call	0x364	; 0x364 <__mulsf3>
 334:	0e 94 ac 02 	call	0x558	; 0x558 <__fixsfsi>
 338:	f8 01       	movw	r30, r16
 33a:	77 83       	std	Z+7, r23	; 0x07
 33c:	66 83       	std	Z+6, r22	; 0x06
 33e:	0e 94 15 05 	call	0xa2a	; 0xa2a <sprintf>
 342:	c6 01       	movw	r24, r12
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <main+0xce>
 348:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
 34a:	00 c0       	rjmp	.+0      	; 0x34c <main+0xd6>
_delay_ms(10);
//str= "Reading: " + buf;
lcd_puts(buf);
 34c:	8d b7       	in	r24, 0x3d	; 61
 34e:	9e b7       	in	r25, 0x3e	; 62
 350:	08 96       	adiw	r24, 0x08	; 8
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	f8 94       	cli
 356:	9e bf       	out	0x3e, r25	; 62
 358:	0f be       	out	0x3f, r0	; 63
 35a:	8d bf       	out	0x3d, r24	; 61
 35c:	c7 01       	movw	r24, r14
 35e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
 362:	c5 cf       	rjmp	.-118    	; 0x2ee <main+0x78>

00000364 <__mulsf3>:
 364:	a0 e2       	ldi	r26, 0x20	; 32
 366:	b0 e0       	ldi	r27, 0x00	; 0
 368:	e8 eb       	ldi	r30, 0xB8	; 184
 36a:	f1 e0       	ldi	r31, 0x01	; 1
 36c:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <__prologue_saves__>
 370:	69 83       	std	Y+1, r22	; 0x01
 372:	7a 83       	std	Y+2, r23	; 0x02
 374:	8b 83       	std	Y+3, r24	; 0x03
 376:	9c 83       	std	Y+4, r25	; 0x04
 378:	2d 83       	std	Y+5, r18	; 0x05
 37a:	3e 83       	std	Y+6, r19	; 0x06
 37c:	4f 83       	std	Y+7, r20	; 0x07
 37e:	58 87       	std	Y+8, r21	; 0x08
 380:	ce 01       	movw	r24, r28
 382:	01 96       	adiw	r24, 0x01	; 1
 384:	be 01       	movw	r22, r28
 386:	67 5f       	subi	r22, 0xF7	; 247
 388:	7f 4f       	sbci	r23, 0xFF	; 255
 38a:	0e 94 9d 04 	call	0x93a	; 0x93a <__unpack_f>
 38e:	ce 01       	movw	r24, r28
 390:	05 96       	adiw	r24, 0x05	; 5
 392:	be 01       	movw	r22, r28
 394:	6f 5e       	subi	r22, 0xEF	; 239
 396:	7f 4f       	sbci	r23, 0xFF	; 255
 398:	0e 94 9d 04 	call	0x93a	; 0x93a <__unpack_f>
 39c:	99 85       	ldd	r25, Y+9	; 0x09
 39e:	92 30       	cpi	r25, 0x02	; 2
 3a0:	88 f0       	brcs	.+34     	; 0x3c4 <__mulsf3+0x60>
 3a2:	89 89       	ldd	r24, Y+17	; 0x11
 3a4:	82 30       	cpi	r24, 0x02	; 2
 3a6:	c8 f0       	brcs	.+50     	; 0x3da <__mulsf3+0x76>
 3a8:	94 30       	cpi	r25, 0x04	; 4
 3aa:	19 f4       	brne	.+6      	; 0x3b2 <__mulsf3+0x4e>
 3ac:	82 30       	cpi	r24, 0x02	; 2
 3ae:	51 f4       	brne	.+20     	; 0x3c4 <__mulsf3+0x60>
 3b0:	04 c0       	rjmp	.+8      	; 0x3ba <__mulsf3+0x56>
 3b2:	84 30       	cpi	r24, 0x04	; 4
 3b4:	29 f4       	brne	.+10     	; 0x3c0 <__mulsf3+0x5c>
 3b6:	92 30       	cpi	r25, 0x02	; 2
 3b8:	81 f4       	brne	.+32     	; 0x3da <__mulsf3+0x76>
 3ba:	83 e1       	ldi	r24, 0x13	; 19
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	c6 c0       	rjmp	.+396    	; 0x54c <__mulsf3+0x1e8>
 3c0:	92 30       	cpi	r25, 0x02	; 2
 3c2:	49 f4       	brne	.+18     	; 0x3d6 <__mulsf3+0x72>
 3c4:	20 e0       	ldi	r18, 0x00	; 0
 3c6:	9a 85       	ldd	r25, Y+10	; 0x0a
 3c8:	8a 89       	ldd	r24, Y+18	; 0x12
 3ca:	98 13       	cpse	r25, r24
 3cc:	21 e0       	ldi	r18, 0x01	; 1
 3ce:	2a 87       	std	Y+10, r18	; 0x0a
 3d0:	ce 01       	movw	r24, r28
 3d2:	09 96       	adiw	r24, 0x09	; 9
 3d4:	bb c0       	rjmp	.+374    	; 0x54c <__mulsf3+0x1e8>
 3d6:	82 30       	cpi	r24, 0x02	; 2
 3d8:	49 f4       	brne	.+18     	; 0x3ec <__mulsf3+0x88>
 3da:	20 e0       	ldi	r18, 0x00	; 0
 3dc:	9a 85       	ldd	r25, Y+10	; 0x0a
 3de:	8a 89       	ldd	r24, Y+18	; 0x12
 3e0:	98 13       	cpse	r25, r24
 3e2:	21 e0       	ldi	r18, 0x01	; 1
 3e4:	2a 8b       	std	Y+18, r18	; 0x12
 3e6:	ce 01       	movw	r24, r28
 3e8:	41 96       	adiw	r24, 0x11	; 17
 3ea:	b0 c0       	rjmp	.+352    	; 0x54c <__mulsf3+0x1e8>
 3ec:	2d 84       	ldd	r2, Y+13	; 0x0d
 3ee:	3e 84       	ldd	r3, Y+14	; 0x0e
 3f0:	4f 84       	ldd	r4, Y+15	; 0x0f
 3f2:	58 88       	ldd	r5, Y+16	; 0x10
 3f4:	6d 88       	ldd	r6, Y+21	; 0x15
 3f6:	7e 88       	ldd	r7, Y+22	; 0x16
 3f8:	8f 88       	ldd	r8, Y+23	; 0x17
 3fa:	98 8c       	ldd	r9, Y+24	; 0x18
 3fc:	ee 24       	eor	r14, r14
 3fe:	ff 24       	eor	r15, r15
 400:	87 01       	movw	r16, r14
 402:	aa 24       	eor	r10, r10
 404:	bb 24       	eor	r11, r11
 406:	65 01       	movw	r12, r10
 408:	40 e0       	ldi	r20, 0x00	; 0
 40a:	50 e0       	ldi	r21, 0x00	; 0
 40c:	60 e0       	ldi	r22, 0x00	; 0
 40e:	70 e0       	ldi	r23, 0x00	; 0
 410:	e0 e0       	ldi	r30, 0x00	; 0
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	c1 01       	movw	r24, r2
 416:	81 70       	andi	r24, 0x01	; 1
 418:	90 70       	andi	r25, 0x00	; 0
 41a:	89 2b       	or	r24, r25
 41c:	e9 f0       	breq	.+58     	; 0x458 <__mulsf3+0xf4>
 41e:	e6 0c       	add	r14, r6
 420:	f7 1c       	adc	r15, r7
 422:	08 1d       	adc	r16, r8
 424:	19 1d       	adc	r17, r9
 426:	9a 01       	movw	r18, r20
 428:	ab 01       	movw	r20, r22
 42a:	2a 0d       	add	r18, r10
 42c:	3b 1d       	adc	r19, r11
 42e:	4c 1d       	adc	r20, r12
 430:	5d 1d       	adc	r21, r13
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	a0 e0       	ldi	r26, 0x00	; 0
 438:	b0 e0       	ldi	r27, 0x00	; 0
 43a:	e6 14       	cp	r14, r6
 43c:	f7 04       	cpc	r15, r7
 43e:	08 05       	cpc	r16, r8
 440:	19 05       	cpc	r17, r9
 442:	20 f4       	brcc	.+8      	; 0x44c <__mulsf3+0xe8>
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	a0 e0       	ldi	r26, 0x00	; 0
 44a:	b0 e0       	ldi	r27, 0x00	; 0
 44c:	ba 01       	movw	r22, r20
 44e:	a9 01       	movw	r20, r18
 450:	48 0f       	add	r20, r24
 452:	59 1f       	adc	r21, r25
 454:	6a 1f       	adc	r22, r26
 456:	7b 1f       	adc	r23, r27
 458:	aa 0c       	add	r10, r10
 45a:	bb 1c       	adc	r11, r11
 45c:	cc 1c       	adc	r12, r12
 45e:	dd 1c       	adc	r13, r13
 460:	97 fe       	sbrs	r9, 7
 462:	08 c0       	rjmp	.+16     	; 0x474 <__mulsf3+0x110>
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	a0 e0       	ldi	r26, 0x00	; 0
 46a:	b0 e0       	ldi	r27, 0x00	; 0
 46c:	a8 2a       	or	r10, r24
 46e:	b9 2a       	or	r11, r25
 470:	ca 2a       	or	r12, r26
 472:	db 2a       	or	r13, r27
 474:	31 96       	adiw	r30, 0x01	; 1
 476:	e0 32       	cpi	r30, 0x20	; 32
 478:	f1 05       	cpc	r31, r1
 47a:	49 f0       	breq	.+18     	; 0x48e <__mulsf3+0x12a>
 47c:	66 0c       	add	r6, r6
 47e:	77 1c       	adc	r7, r7
 480:	88 1c       	adc	r8, r8
 482:	99 1c       	adc	r9, r9
 484:	56 94       	lsr	r5
 486:	47 94       	ror	r4
 488:	37 94       	ror	r3
 48a:	27 94       	ror	r2
 48c:	c3 cf       	rjmp	.-122    	; 0x414 <__mulsf3+0xb0>
 48e:	fa 85       	ldd	r31, Y+10	; 0x0a
 490:	ea 89       	ldd	r30, Y+18	; 0x12
 492:	2b 89       	ldd	r18, Y+19	; 0x13
 494:	3c 89       	ldd	r19, Y+20	; 0x14
 496:	8b 85       	ldd	r24, Y+11	; 0x0b
 498:	9c 85       	ldd	r25, Y+12	; 0x0c
 49a:	28 0f       	add	r18, r24
 49c:	39 1f       	adc	r19, r25
 49e:	2e 5f       	subi	r18, 0xFE	; 254
 4a0:	3f 4f       	sbci	r19, 0xFF	; 255
 4a2:	17 c0       	rjmp	.+46     	; 0x4d2 <__mulsf3+0x16e>
 4a4:	ca 01       	movw	r24, r20
 4a6:	81 70       	andi	r24, 0x01	; 1
 4a8:	90 70       	andi	r25, 0x00	; 0
 4aa:	89 2b       	or	r24, r25
 4ac:	61 f0       	breq	.+24     	; 0x4c6 <__mulsf3+0x162>
 4ae:	16 95       	lsr	r17
 4b0:	07 95       	ror	r16
 4b2:	f7 94       	ror	r15
 4b4:	e7 94       	ror	r14
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	a0 e0       	ldi	r26, 0x00	; 0
 4bc:	b0 e8       	ldi	r27, 0x80	; 128
 4be:	e8 2a       	or	r14, r24
 4c0:	f9 2a       	or	r15, r25
 4c2:	0a 2b       	or	r16, r26
 4c4:	1b 2b       	or	r17, r27
 4c6:	76 95       	lsr	r23
 4c8:	67 95       	ror	r22
 4ca:	57 95       	ror	r21
 4cc:	47 95       	ror	r20
 4ce:	2f 5f       	subi	r18, 0xFF	; 255
 4d0:	3f 4f       	sbci	r19, 0xFF	; 255
 4d2:	77 fd       	sbrc	r23, 7
 4d4:	e7 cf       	rjmp	.-50     	; 0x4a4 <__mulsf3+0x140>
 4d6:	0c c0       	rjmp	.+24     	; 0x4f0 <__mulsf3+0x18c>
 4d8:	44 0f       	add	r20, r20
 4da:	55 1f       	adc	r21, r21
 4dc:	66 1f       	adc	r22, r22
 4de:	77 1f       	adc	r23, r23
 4e0:	17 fd       	sbrc	r17, 7
 4e2:	41 60       	ori	r20, 0x01	; 1
 4e4:	ee 0c       	add	r14, r14
 4e6:	ff 1c       	adc	r15, r15
 4e8:	00 1f       	adc	r16, r16
 4ea:	11 1f       	adc	r17, r17
 4ec:	21 50       	subi	r18, 0x01	; 1
 4ee:	30 40       	sbci	r19, 0x00	; 0
 4f0:	40 30       	cpi	r20, 0x00	; 0
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	59 07       	cpc	r21, r25
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	69 07       	cpc	r22, r25
 4fa:	90 e4       	ldi	r25, 0x40	; 64
 4fc:	79 07       	cpc	r23, r25
 4fe:	60 f3       	brcs	.-40     	; 0x4d8 <__mulsf3+0x174>
 500:	2b 8f       	std	Y+27, r18	; 0x1b
 502:	3c 8f       	std	Y+28, r19	; 0x1c
 504:	db 01       	movw	r26, r22
 506:	ca 01       	movw	r24, r20
 508:	8f 77       	andi	r24, 0x7F	; 127
 50a:	90 70       	andi	r25, 0x00	; 0
 50c:	a0 70       	andi	r26, 0x00	; 0
 50e:	b0 70       	andi	r27, 0x00	; 0
 510:	80 34       	cpi	r24, 0x40	; 64
 512:	91 05       	cpc	r25, r1
 514:	a1 05       	cpc	r26, r1
 516:	b1 05       	cpc	r27, r1
 518:	61 f4       	brne	.+24     	; 0x532 <__mulsf3+0x1ce>
 51a:	47 fd       	sbrc	r20, 7
 51c:	0a c0       	rjmp	.+20     	; 0x532 <__mulsf3+0x1ce>
 51e:	e1 14       	cp	r14, r1
 520:	f1 04       	cpc	r15, r1
 522:	01 05       	cpc	r16, r1
 524:	11 05       	cpc	r17, r1
 526:	29 f0       	breq	.+10     	; 0x532 <__mulsf3+0x1ce>
 528:	40 5c       	subi	r20, 0xC0	; 192
 52a:	5f 4f       	sbci	r21, 0xFF	; 255
 52c:	6f 4f       	sbci	r22, 0xFF	; 255
 52e:	7f 4f       	sbci	r23, 0xFF	; 255
 530:	40 78       	andi	r20, 0x80	; 128
 532:	1a 8e       	std	Y+26, r1	; 0x1a
 534:	fe 17       	cp	r31, r30
 536:	11 f0       	breq	.+4      	; 0x53c <__mulsf3+0x1d8>
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	8a 8f       	std	Y+26, r24	; 0x1a
 53c:	4d 8f       	std	Y+29, r20	; 0x1d
 53e:	5e 8f       	std	Y+30, r21	; 0x1e
 540:	6f 8f       	std	Y+31, r22	; 0x1f
 542:	78 a3       	std	Y+32, r23	; 0x20
 544:	83 e0       	ldi	r24, 0x03	; 3
 546:	89 8f       	std	Y+25, r24	; 0x19
 548:	ce 01       	movw	r24, r28
 54a:	49 96       	adiw	r24, 0x19	; 25
 54c:	0e 94 c8 03 	call	0x790	; 0x790 <__pack_f>
 550:	a0 96       	adiw	r28, 0x20	; 32
 552:	e2 e1       	ldi	r30, 0x12	; 18
 554:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <__epilogue_restores__>

00000558 <__fixsfsi>:
 558:	ac e0       	ldi	r26, 0x0C	; 12
 55a:	b0 e0       	ldi	r27, 0x00	; 0
 55c:	e2 eb       	ldi	r30, 0xB2	; 178
 55e:	f2 e0       	ldi	r31, 0x02	; 2
 560:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <__prologue_saves__+0x20>
 564:	69 83       	std	Y+1, r22	; 0x01
 566:	7a 83       	std	Y+2, r23	; 0x02
 568:	8b 83       	std	Y+3, r24	; 0x03
 56a:	9c 83       	std	Y+4, r25	; 0x04
 56c:	ce 01       	movw	r24, r28
 56e:	01 96       	adiw	r24, 0x01	; 1
 570:	be 01       	movw	r22, r28
 572:	6b 5f       	subi	r22, 0xFB	; 251
 574:	7f 4f       	sbci	r23, 0xFF	; 255
 576:	0e 94 9d 04 	call	0x93a	; 0x93a <__unpack_f>
 57a:	8d 81       	ldd	r24, Y+5	; 0x05
 57c:	82 30       	cpi	r24, 0x02	; 2
 57e:	61 f1       	breq	.+88     	; 0x5d8 <__fixsfsi+0x80>
 580:	82 30       	cpi	r24, 0x02	; 2
 582:	50 f1       	brcs	.+84     	; 0x5d8 <__fixsfsi+0x80>
 584:	84 30       	cpi	r24, 0x04	; 4
 586:	21 f4       	brne	.+8      	; 0x590 <__fixsfsi+0x38>
 588:	8e 81       	ldd	r24, Y+6	; 0x06
 58a:	88 23       	and	r24, r24
 58c:	51 f1       	breq	.+84     	; 0x5e2 <__fixsfsi+0x8a>
 58e:	2e c0       	rjmp	.+92     	; 0x5ec <__fixsfsi+0x94>
 590:	2f 81       	ldd	r18, Y+7	; 0x07
 592:	38 85       	ldd	r19, Y+8	; 0x08
 594:	37 fd       	sbrc	r19, 7
 596:	20 c0       	rjmp	.+64     	; 0x5d8 <__fixsfsi+0x80>
 598:	6e 81       	ldd	r22, Y+6	; 0x06
 59a:	2f 31       	cpi	r18, 0x1F	; 31
 59c:	31 05       	cpc	r19, r1
 59e:	1c f0       	brlt	.+6      	; 0x5a6 <__fixsfsi+0x4e>
 5a0:	66 23       	and	r22, r22
 5a2:	f9 f0       	breq	.+62     	; 0x5e2 <__fixsfsi+0x8a>
 5a4:	23 c0       	rjmp	.+70     	; 0x5ec <__fixsfsi+0x94>
 5a6:	8e e1       	ldi	r24, 0x1E	; 30
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	82 1b       	sub	r24, r18
 5ac:	93 0b       	sbc	r25, r19
 5ae:	29 85       	ldd	r18, Y+9	; 0x09
 5b0:	3a 85       	ldd	r19, Y+10	; 0x0a
 5b2:	4b 85       	ldd	r20, Y+11	; 0x0b
 5b4:	5c 85       	ldd	r21, Y+12	; 0x0c
 5b6:	04 c0       	rjmp	.+8      	; 0x5c0 <__fixsfsi+0x68>
 5b8:	56 95       	lsr	r21
 5ba:	47 95       	ror	r20
 5bc:	37 95       	ror	r19
 5be:	27 95       	ror	r18
 5c0:	8a 95       	dec	r24
 5c2:	d2 f7       	brpl	.-12     	; 0x5b8 <__fixsfsi+0x60>
 5c4:	66 23       	and	r22, r22
 5c6:	b1 f0       	breq	.+44     	; 0x5f4 <__fixsfsi+0x9c>
 5c8:	50 95       	com	r21
 5ca:	40 95       	com	r20
 5cc:	30 95       	com	r19
 5ce:	21 95       	neg	r18
 5d0:	3f 4f       	sbci	r19, 0xFF	; 255
 5d2:	4f 4f       	sbci	r20, 0xFF	; 255
 5d4:	5f 4f       	sbci	r21, 0xFF	; 255
 5d6:	0e c0       	rjmp	.+28     	; 0x5f4 <__fixsfsi+0x9c>
 5d8:	20 e0       	ldi	r18, 0x00	; 0
 5da:	30 e0       	ldi	r19, 0x00	; 0
 5dc:	40 e0       	ldi	r20, 0x00	; 0
 5de:	50 e0       	ldi	r21, 0x00	; 0
 5e0:	09 c0       	rjmp	.+18     	; 0x5f4 <__fixsfsi+0x9c>
 5e2:	2f ef       	ldi	r18, 0xFF	; 255
 5e4:	3f ef       	ldi	r19, 0xFF	; 255
 5e6:	4f ef       	ldi	r20, 0xFF	; 255
 5e8:	5f e7       	ldi	r21, 0x7F	; 127
 5ea:	04 c0       	rjmp	.+8      	; 0x5f4 <__fixsfsi+0x9c>
 5ec:	20 e0       	ldi	r18, 0x00	; 0
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	40 e0       	ldi	r20, 0x00	; 0
 5f2:	50 e8       	ldi	r21, 0x80	; 128
 5f4:	b9 01       	movw	r22, r18
 5f6:	ca 01       	movw	r24, r20
 5f8:	2c 96       	adiw	r28, 0x0c	; 12
 5fa:	e2 e0       	ldi	r30, 0x02	; 2
 5fc:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <__epilogue_restores__+0x20>

00000600 <__floatunsisf>:
 600:	a8 e0       	ldi	r26, 0x08	; 8
 602:	b0 e0       	ldi	r27, 0x00	; 0
 604:	e6 e0       	ldi	r30, 0x06	; 6
 606:	f3 e0       	ldi	r31, 0x03	; 3
 608:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__prologue_saves__+0x10>
 60c:	7b 01       	movw	r14, r22
 60e:	8c 01       	movw	r16, r24
 610:	61 15       	cp	r22, r1
 612:	71 05       	cpc	r23, r1
 614:	81 05       	cpc	r24, r1
 616:	91 05       	cpc	r25, r1
 618:	19 f4       	brne	.+6      	; 0x620 <__floatunsisf+0x20>
 61a:	82 e0       	ldi	r24, 0x02	; 2
 61c:	89 83       	std	Y+1, r24	; 0x01
 61e:	60 c0       	rjmp	.+192    	; 0x6e0 <__floatunsisf+0xe0>
 620:	83 e0       	ldi	r24, 0x03	; 3
 622:	89 83       	std	Y+1, r24	; 0x01
 624:	8e e1       	ldi	r24, 0x1E	; 30
 626:	c8 2e       	mov	r12, r24
 628:	d1 2c       	mov	r13, r1
 62a:	dc 82       	std	Y+4, r13	; 0x04
 62c:	cb 82       	std	Y+3, r12	; 0x03
 62e:	ed 82       	std	Y+5, r14	; 0x05
 630:	fe 82       	std	Y+6, r15	; 0x06
 632:	0f 83       	std	Y+7, r16	; 0x07
 634:	18 87       	std	Y+8, r17	; 0x08
 636:	c8 01       	movw	r24, r16
 638:	b7 01       	movw	r22, r14
 63a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__clzsi2>
 63e:	fc 01       	movw	r30, r24
 640:	31 97       	sbiw	r30, 0x01	; 1
 642:	f7 ff       	sbrs	r31, 7
 644:	3b c0       	rjmp	.+118    	; 0x6bc <__floatunsisf+0xbc>
 646:	22 27       	eor	r18, r18
 648:	33 27       	eor	r19, r19
 64a:	2e 1b       	sub	r18, r30
 64c:	3f 0b       	sbc	r19, r31
 64e:	57 01       	movw	r10, r14
 650:	68 01       	movw	r12, r16
 652:	02 2e       	mov	r0, r18
 654:	04 c0       	rjmp	.+8      	; 0x65e <__floatunsisf+0x5e>
 656:	d6 94       	lsr	r13
 658:	c7 94       	ror	r12
 65a:	b7 94       	ror	r11
 65c:	a7 94       	ror	r10
 65e:	0a 94       	dec	r0
 660:	d2 f7       	brpl	.-12     	; 0x656 <__floatunsisf+0x56>
 662:	40 e0       	ldi	r20, 0x00	; 0
 664:	50 e0       	ldi	r21, 0x00	; 0
 666:	60 e0       	ldi	r22, 0x00	; 0
 668:	70 e0       	ldi	r23, 0x00	; 0
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	a0 e0       	ldi	r26, 0x00	; 0
 670:	b0 e0       	ldi	r27, 0x00	; 0
 672:	04 c0       	rjmp	.+8      	; 0x67c <__floatunsisf+0x7c>
 674:	88 0f       	add	r24, r24
 676:	99 1f       	adc	r25, r25
 678:	aa 1f       	adc	r26, r26
 67a:	bb 1f       	adc	r27, r27
 67c:	2a 95       	dec	r18
 67e:	d2 f7       	brpl	.-12     	; 0x674 <__floatunsisf+0x74>
 680:	01 97       	sbiw	r24, 0x01	; 1
 682:	a1 09       	sbc	r26, r1
 684:	b1 09       	sbc	r27, r1
 686:	8e 21       	and	r24, r14
 688:	9f 21       	and	r25, r15
 68a:	a0 23       	and	r26, r16
 68c:	b1 23       	and	r27, r17
 68e:	00 97       	sbiw	r24, 0x00	; 0
 690:	a1 05       	cpc	r26, r1
 692:	b1 05       	cpc	r27, r1
 694:	21 f0       	breq	.+8      	; 0x69e <__floatunsisf+0x9e>
 696:	41 e0       	ldi	r20, 0x01	; 1
 698:	50 e0       	ldi	r21, 0x00	; 0
 69a:	60 e0       	ldi	r22, 0x00	; 0
 69c:	70 e0       	ldi	r23, 0x00	; 0
 69e:	4a 29       	or	r20, r10
 6a0:	5b 29       	or	r21, r11
 6a2:	6c 29       	or	r22, r12
 6a4:	7d 29       	or	r23, r13
 6a6:	4d 83       	std	Y+5, r20	; 0x05
 6a8:	5e 83       	std	Y+6, r21	; 0x06
 6aa:	6f 83       	std	Y+7, r22	; 0x07
 6ac:	78 87       	std	Y+8, r23	; 0x08
 6ae:	8e e1       	ldi	r24, 0x1E	; 30
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	8e 1b       	sub	r24, r30
 6b4:	9f 0b       	sbc	r25, r31
 6b6:	9c 83       	std	Y+4, r25	; 0x04
 6b8:	8b 83       	std	Y+3, r24	; 0x03
 6ba:	12 c0       	rjmp	.+36     	; 0x6e0 <__floatunsisf+0xe0>
 6bc:	30 97       	sbiw	r30, 0x00	; 0
 6be:	81 f0       	breq	.+32     	; 0x6e0 <__floatunsisf+0xe0>
 6c0:	0e 2e       	mov	r0, r30
 6c2:	04 c0       	rjmp	.+8      	; 0x6cc <__floatunsisf+0xcc>
 6c4:	ee 0c       	add	r14, r14
 6c6:	ff 1c       	adc	r15, r15
 6c8:	00 1f       	adc	r16, r16
 6ca:	11 1f       	adc	r17, r17
 6cc:	0a 94       	dec	r0
 6ce:	d2 f7       	brpl	.-12     	; 0x6c4 <__floatunsisf+0xc4>
 6d0:	ed 82       	std	Y+5, r14	; 0x05
 6d2:	fe 82       	std	Y+6, r15	; 0x06
 6d4:	0f 83       	std	Y+7, r16	; 0x07
 6d6:	18 87       	std	Y+8, r17	; 0x08
 6d8:	ce 1a       	sub	r12, r30
 6da:	df 0a       	sbc	r13, r31
 6dc:	dc 82       	std	Y+4, r13	; 0x04
 6de:	cb 82       	std	Y+3, r12	; 0x03
 6e0:	1a 82       	std	Y+2, r1	; 0x02
 6e2:	ce 01       	movw	r24, r28
 6e4:	01 96       	adiw	r24, 0x01	; 1
 6e6:	0e 94 c8 03 	call	0x790	; 0x790 <__pack_f>
 6ea:	28 96       	adiw	r28, 0x08	; 8
 6ec:	ea e0       	ldi	r30, 0x0A	; 10
 6ee:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <__epilogue_restores__+0x10>

000006f2 <__clzsi2>:
 6f2:	ef 92       	push	r14
 6f4:	ff 92       	push	r15
 6f6:	0f 93       	push	r16
 6f8:	1f 93       	push	r17
 6fa:	7b 01       	movw	r14, r22
 6fc:	8c 01       	movw	r16, r24
 6fe:	80 e0       	ldi	r24, 0x00	; 0
 700:	e8 16       	cp	r14, r24
 702:	80 e0       	ldi	r24, 0x00	; 0
 704:	f8 06       	cpc	r15, r24
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	08 07       	cpc	r16, r24
 70a:	80 e0       	ldi	r24, 0x00	; 0
 70c:	18 07       	cpc	r17, r24
 70e:	88 f4       	brcc	.+34     	; 0x732 <__clzsi2+0x40>
 710:	8f ef       	ldi	r24, 0xFF	; 255
 712:	e8 16       	cp	r14, r24
 714:	f1 04       	cpc	r15, r1
 716:	01 05       	cpc	r16, r1
 718:	11 05       	cpc	r17, r1
 71a:	31 f0       	breq	.+12     	; 0x728 <__clzsi2+0x36>
 71c:	28 f0       	brcs	.+10     	; 0x728 <__clzsi2+0x36>
 71e:	88 e0       	ldi	r24, 0x08	; 8
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	a0 e0       	ldi	r26, 0x00	; 0
 724:	b0 e0       	ldi	r27, 0x00	; 0
 726:	17 c0       	rjmp	.+46     	; 0x756 <__clzsi2+0x64>
 728:	80 e0       	ldi	r24, 0x00	; 0
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	a0 e0       	ldi	r26, 0x00	; 0
 72e:	b0 e0       	ldi	r27, 0x00	; 0
 730:	12 c0       	rjmp	.+36     	; 0x756 <__clzsi2+0x64>
 732:	80 e0       	ldi	r24, 0x00	; 0
 734:	e8 16       	cp	r14, r24
 736:	80 e0       	ldi	r24, 0x00	; 0
 738:	f8 06       	cpc	r15, r24
 73a:	80 e0       	ldi	r24, 0x00	; 0
 73c:	08 07       	cpc	r16, r24
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	18 07       	cpc	r17, r24
 742:	28 f0       	brcs	.+10     	; 0x74e <__clzsi2+0x5c>
 744:	88 e1       	ldi	r24, 0x18	; 24
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	a0 e0       	ldi	r26, 0x00	; 0
 74a:	b0 e0       	ldi	r27, 0x00	; 0
 74c:	04 c0       	rjmp	.+8      	; 0x756 <__clzsi2+0x64>
 74e:	80 e1       	ldi	r24, 0x10	; 16
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	a0 e0       	ldi	r26, 0x00	; 0
 754:	b0 e0       	ldi	r27, 0x00	; 0
 756:	20 e2       	ldi	r18, 0x20	; 32
 758:	30 e0       	ldi	r19, 0x00	; 0
 75a:	40 e0       	ldi	r20, 0x00	; 0
 75c:	50 e0       	ldi	r21, 0x00	; 0
 75e:	28 1b       	sub	r18, r24
 760:	39 0b       	sbc	r19, r25
 762:	4a 0b       	sbc	r20, r26
 764:	5b 0b       	sbc	r21, r27
 766:	04 c0       	rjmp	.+8      	; 0x770 <__clzsi2+0x7e>
 768:	16 95       	lsr	r17
 76a:	07 95       	ror	r16
 76c:	f7 94       	ror	r15
 76e:	e7 94       	ror	r14
 770:	8a 95       	dec	r24
 772:	d2 f7       	brpl	.-12     	; 0x768 <__clzsi2+0x76>
 774:	f7 01       	movw	r30, r14
 776:	e5 5e       	subi	r30, 0xE5	; 229
 778:	fe 4f       	sbci	r31, 0xFE	; 254
 77a:	80 81       	ld	r24, Z
 77c:	28 1b       	sub	r18, r24
 77e:	31 09       	sbc	r19, r1
 780:	41 09       	sbc	r20, r1
 782:	51 09       	sbc	r21, r1
 784:	c9 01       	movw	r24, r18
 786:	1f 91       	pop	r17
 788:	0f 91       	pop	r16
 78a:	ff 90       	pop	r15
 78c:	ef 90       	pop	r14
 78e:	08 95       	ret

00000790 <__pack_f>:
 790:	df 92       	push	r13
 792:	ef 92       	push	r14
 794:	ff 92       	push	r15
 796:	0f 93       	push	r16
 798:	1f 93       	push	r17
 79a:	fc 01       	movw	r30, r24
 79c:	e4 80       	ldd	r14, Z+4	; 0x04
 79e:	f5 80       	ldd	r15, Z+5	; 0x05
 7a0:	06 81       	ldd	r16, Z+6	; 0x06
 7a2:	17 81       	ldd	r17, Z+7	; 0x07
 7a4:	d1 80       	ldd	r13, Z+1	; 0x01
 7a6:	80 81       	ld	r24, Z
 7a8:	82 30       	cpi	r24, 0x02	; 2
 7aa:	48 f4       	brcc	.+18     	; 0x7be <__pack_f+0x2e>
 7ac:	80 e0       	ldi	r24, 0x00	; 0
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	a0 e1       	ldi	r26, 0x10	; 16
 7b2:	b0 e0       	ldi	r27, 0x00	; 0
 7b4:	e8 2a       	or	r14, r24
 7b6:	f9 2a       	or	r15, r25
 7b8:	0a 2b       	or	r16, r26
 7ba:	1b 2b       	or	r17, r27
 7bc:	a5 c0       	rjmp	.+330    	; 0x908 <__stack+0x9>
 7be:	84 30       	cpi	r24, 0x04	; 4
 7c0:	09 f4       	brne	.+2      	; 0x7c4 <__pack_f+0x34>
 7c2:	9f c0       	rjmp	.+318    	; 0x902 <__stack+0x3>
 7c4:	82 30       	cpi	r24, 0x02	; 2
 7c6:	21 f4       	brne	.+8      	; 0x7d0 <__pack_f+0x40>
 7c8:	ee 24       	eor	r14, r14
 7ca:	ff 24       	eor	r15, r15
 7cc:	87 01       	movw	r16, r14
 7ce:	05 c0       	rjmp	.+10     	; 0x7da <__pack_f+0x4a>
 7d0:	e1 14       	cp	r14, r1
 7d2:	f1 04       	cpc	r15, r1
 7d4:	01 05       	cpc	r16, r1
 7d6:	11 05       	cpc	r17, r1
 7d8:	19 f4       	brne	.+6      	; 0x7e0 <__pack_f+0x50>
 7da:	e0 e0       	ldi	r30, 0x00	; 0
 7dc:	f0 e0       	ldi	r31, 0x00	; 0
 7de:	96 c0       	rjmp	.+300    	; 0x90c <__stack+0xd>
 7e0:	62 81       	ldd	r22, Z+2	; 0x02
 7e2:	73 81       	ldd	r23, Z+3	; 0x03
 7e4:	9f ef       	ldi	r25, 0xFF	; 255
 7e6:	62 38       	cpi	r22, 0x82	; 130
 7e8:	79 07       	cpc	r23, r25
 7ea:	0c f0       	brlt	.+2      	; 0x7ee <__pack_f+0x5e>
 7ec:	5b c0       	rjmp	.+182    	; 0x8a4 <__pack_f+0x114>
 7ee:	22 e8       	ldi	r18, 0x82	; 130
 7f0:	3f ef       	ldi	r19, 0xFF	; 255
 7f2:	26 1b       	sub	r18, r22
 7f4:	37 0b       	sbc	r19, r23
 7f6:	2a 31       	cpi	r18, 0x1A	; 26
 7f8:	31 05       	cpc	r19, r1
 7fa:	2c f0       	brlt	.+10     	; 0x806 <__pack_f+0x76>
 7fc:	20 e0       	ldi	r18, 0x00	; 0
 7fe:	30 e0       	ldi	r19, 0x00	; 0
 800:	40 e0       	ldi	r20, 0x00	; 0
 802:	50 e0       	ldi	r21, 0x00	; 0
 804:	2a c0       	rjmp	.+84     	; 0x85a <__pack_f+0xca>
 806:	b8 01       	movw	r22, r16
 808:	a7 01       	movw	r20, r14
 80a:	02 2e       	mov	r0, r18
 80c:	04 c0       	rjmp	.+8      	; 0x816 <__pack_f+0x86>
 80e:	76 95       	lsr	r23
 810:	67 95       	ror	r22
 812:	57 95       	ror	r21
 814:	47 95       	ror	r20
 816:	0a 94       	dec	r0
 818:	d2 f7       	brpl	.-12     	; 0x80e <__pack_f+0x7e>
 81a:	81 e0       	ldi	r24, 0x01	; 1
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	a0 e0       	ldi	r26, 0x00	; 0
 820:	b0 e0       	ldi	r27, 0x00	; 0
 822:	04 c0       	rjmp	.+8      	; 0x82c <__pack_f+0x9c>
 824:	88 0f       	add	r24, r24
 826:	99 1f       	adc	r25, r25
 828:	aa 1f       	adc	r26, r26
 82a:	bb 1f       	adc	r27, r27
 82c:	2a 95       	dec	r18
 82e:	d2 f7       	brpl	.-12     	; 0x824 <__pack_f+0x94>
 830:	01 97       	sbiw	r24, 0x01	; 1
 832:	a1 09       	sbc	r26, r1
 834:	b1 09       	sbc	r27, r1
 836:	8e 21       	and	r24, r14
 838:	9f 21       	and	r25, r15
 83a:	a0 23       	and	r26, r16
 83c:	b1 23       	and	r27, r17
 83e:	00 97       	sbiw	r24, 0x00	; 0
 840:	a1 05       	cpc	r26, r1
 842:	b1 05       	cpc	r27, r1
 844:	21 f0       	breq	.+8      	; 0x84e <__pack_f+0xbe>
 846:	81 e0       	ldi	r24, 0x01	; 1
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	a0 e0       	ldi	r26, 0x00	; 0
 84c:	b0 e0       	ldi	r27, 0x00	; 0
 84e:	9a 01       	movw	r18, r20
 850:	ab 01       	movw	r20, r22
 852:	28 2b       	or	r18, r24
 854:	39 2b       	or	r19, r25
 856:	4a 2b       	or	r20, r26
 858:	5b 2b       	or	r21, r27
 85a:	da 01       	movw	r26, r20
 85c:	c9 01       	movw	r24, r18
 85e:	8f 77       	andi	r24, 0x7F	; 127
 860:	90 70       	andi	r25, 0x00	; 0
 862:	a0 70       	andi	r26, 0x00	; 0
 864:	b0 70       	andi	r27, 0x00	; 0
 866:	80 34       	cpi	r24, 0x40	; 64
 868:	91 05       	cpc	r25, r1
 86a:	a1 05       	cpc	r26, r1
 86c:	b1 05       	cpc	r27, r1
 86e:	39 f4       	brne	.+14     	; 0x87e <__pack_f+0xee>
 870:	27 ff       	sbrs	r18, 7
 872:	09 c0       	rjmp	.+18     	; 0x886 <__pack_f+0xf6>
 874:	20 5c       	subi	r18, 0xC0	; 192
 876:	3f 4f       	sbci	r19, 0xFF	; 255
 878:	4f 4f       	sbci	r20, 0xFF	; 255
 87a:	5f 4f       	sbci	r21, 0xFF	; 255
 87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0xf6>
 87e:	21 5c       	subi	r18, 0xC1	; 193
 880:	3f 4f       	sbci	r19, 0xFF	; 255
 882:	4f 4f       	sbci	r20, 0xFF	; 255
 884:	5f 4f       	sbci	r21, 0xFF	; 255
 886:	e0 e0       	ldi	r30, 0x00	; 0
 888:	f0 e0       	ldi	r31, 0x00	; 0
 88a:	20 30       	cpi	r18, 0x00	; 0
 88c:	a0 e0       	ldi	r26, 0x00	; 0
 88e:	3a 07       	cpc	r19, r26
 890:	a0 e0       	ldi	r26, 0x00	; 0
 892:	4a 07       	cpc	r20, r26
 894:	a0 e4       	ldi	r26, 0x40	; 64
 896:	5a 07       	cpc	r21, r26
 898:	10 f0       	brcs	.+4      	; 0x89e <__pack_f+0x10e>
 89a:	e1 e0       	ldi	r30, 0x01	; 1
 89c:	f0 e0       	ldi	r31, 0x00	; 0
 89e:	79 01       	movw	r14, r18
 8a0:	8a 01       	movw	r16, r20
 8a2:	27 c0       	rjmp	.+78     	; 0x8f2 <__pack_f+0x162>
 8a4:	60 38       	cpi	r22, 0x80	; 128
 8a6:	71 05       	cpc	r23, r1
 8a8:	64 f5       	brge	.+88     	; 0x902 <__stack+0x3>
 8aa:	fb 01       	movw	r30, r22
 8ac:	e1 58       	subi	r30, 0x81	; 129
 8ae:	ff 4f       	sbci	r31, 0xFF	; 255
 8b0:	d8 01       	movw	r26, r16
 8b2:	c7 01       	movw	r24, r14
 8b4:	8f 77       	andi	r24, 0x7F	; 127
 8b6:	90 70       	andi	r25, 0x00	; 0
 8b8:	a0 70       	andi	r26, 0x00	; 0
 8ba:	b0 70       	andi	r27, 0x00	; 0
 8bc:	80 34       	cpi	r24, 0x40	; 64
 8be:	91 05       	cpc	r25, r1
 8c0:	a1 05       	cpc	r26, r1
 8c2:	b1 05       	cpc	r27, r1
 8c4:	39 f4       	brne	.+14     	; 0x8d4 <__pack_f+0x144>
 8c6:	e7 fe       	sbrs	r14, 7
 8c8:	0d c0       	rjmp	.+26     	; 0x8e4 <__pack_f+0x154>
 8ca:	80 e4       	ldi	r24, 0x40	; 64
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	a0 e0       	ldi	r26, 0x00	; 0
 8d0:	b0 e0       	ldi	r27, 0x00	; 0
 8d2:	04 c0       	rjmp	.+8      	; 0x8dc <__pack_f+0x14c>
 8d4:	8f e3       	ldi	r24, 0x3F	; 63
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	a0 e0       	ldi	r26, 0x00	; 0
 8da:	b0 e0       	ldi	r27, 0x00	; 0
 8dc:	e8 0e       	add	r14, r24
 8de:	f9 1e       	adc	r15, r25
 8e0:	0a 1f       	adc	r16, r26
 8e2:	1b 1f       	adc	r17, r27
 8e4:	17 ff       	sbrs	r17, 7
 8e6:	05 c0       	rjmp	.+10     	; 0x8f2 <__pack_f+0x162>
 8e8:	16 95       	lsr	r17
 8ea:	07 95       	ror	r16
 8ec:	f7 94       	ror	r15
 8ee:	e7 94       	ror	r14
 8f0:	31 96       	adiw	r30, 0x01	; 1
 8f2:	87 e0       	ldi	r24, 0x07	; 7
 8f4:	16 95       	lsr	r17
 8f6:	07 95       	ror	r16
 8f8:	f7 94       	ror	r15
 8fa:	e7 94       	ror	r14
 8fc:	8a 95       	dec	r24
 8fe:	d1 f7       	brne	.-12     	; 0x8f4 <__pack_f+0x164>
 900:	05 c0       	rjmp	.+10     	; 0x90c <__stack+0xd>
 902:	ee 24       	eor	r14, r14
 904:	ff 24       	eor	r15, r15
 906:	87 01       	movw	r16, r14
 908:	ef ef       	ldi	r30, 0xFF	; 255
 90a:	f0 e0       	ldi	r31, 0x00	; 0
 90c:	6e 2f       	mov	r22, r30
 90e:	67 95       	ror	r22
 910:	66 27       	eor	r22, r22
 912:	67 95       	ror	r22
 914:	90 2f       	mov	r25, r16
 916:	9f 77       	andi	r25, 0x7F	; 127
 918:	d7 94       	ror	r13
 91a:	dd 24       	eor	r13, r13
 91c:	d7 94       	ror	r13
 91e:	8e 2f       	mov	r24, r30
 920:	86 95       	lsr	r24
 922:	49 2f       	mov	r20, r25
 924:	46 2b       	or	r20, r22
 926:	58 2f       	mov	r21, r24
 928:	5d 29       	or	r21, r13
 92a:	b7 01       	movw	r22, r14
 92c:	ca 01       	movw	r24, r20
 92e:	1f 91       	pop	r17
 930:	0f 91       	pop	r16
 932:	ff 90       	pop	r15
 934:	ef 90       	pop	r14
 936:	df 90       	pop	r13
 938:	08 95       	ret

0000093a <__unpack_f>:
 93a:	fc 01       	movw	r30, r24
 93c:	db 01       	movw	r26, r22
 93e:	40 81       	ld	r20, Z
 940:	51 81       	ldd	r21, Z+1	; 0x01
 942:	22 81       	ldd	r18, Z+2	; 0x02
 944:	62 2f       	mov	r22, r18
 946:	6f 77       	andi	r22, 0x7F	; 127
 948:	70 e0       	ldi	r23, 0x00	; 0
 94a:	22 1f       	adc	r18, r18
 94c:	22 27       	eor	r18, r18
 94e:	22 1f       	adc	r18, r18
 950:	93 81       	ldd	r25, Z+3	; 0x03
 952:	89 2f       	mov	r24, r25
 954:	88 0f       	add	r24, r24
 956:	82 2b       	or	r24, r18
 958:	28 2f       	mov	r18, r24
 95a:	30 e0       	ldi	r19, 0x00	; 0
 95c:	99 1f       	adc	r25, r25
 95e:	99 27       	eor	r25, r25
 960:	99 1f       	adc	r25, r25
 962:	11 96       	adiw	r26, 0x01	; 1
 964:	9c 93       	st	X, r25
 966:	11 97       	sbiw	r26, 0x01	; 1
 968:	21 15       	cp	r18, r1
 96a:	31 05       	cpc	r19, r1
 96c:	a9 f5       	brne	.+106    	; 0x9d8 <__unpack_f+0x9e>
 96e:	41 15       	cp	r20, r1
 970:	51 05       	cpc	r21, r1
 972:	61 05       	cpc	r22, r1
 974:	71 05       	cpc	r23, r1
 976:	11 f4       	brne	.+4      	; 0x97c <__unpack_f+0x42>
 978:	82 e0       	ldi	r24, 0x02	; 2
 97a:	37 c0       	rjmp	.+110    	; 0x9ea <__unpack_f+0xb0>
 97c:	82 e8       	ldi	r24, 0x82	; 130
 97e:	9f ef       	ldi	r25, 0xFF	; 255
 980:	13 96       	adiw	r26, 0x03	; 3
 982:	9c 93       	st	X, r25
 984:	8e 93       	st	-X, r24
 986:	12 97       	sbiw	r26, 0x02	; 2
 988:	9a 01       	movw	r18, r20
 98a:	ab 01       	movw	r20, r22
 98c:	67 e0       	ldi	r22, 0x07	; 7
 98e:	22 0f       	add	r18, r18
 990:	33 1f       	adc	r19, r19
 992:	44 1f       	adc	r20, r20
 994:	55 1f       	adc	r21, r21
 996:	6a 95       	dec	r22
 998:	d1 f7       	brne	.-12     	; 0x98e <__unpack_f+0x54>
 99a:	83 e0       	ldi	r24, 0x03	; 3
 99c:	8c 93       	st	X, r24
 99e:	0d c0       	rjmp	.+26     	; 0x9ba <__unpack_f+0x80>
 9a0:	22 0f       	add	r18, r18
 9a2:	33 1f       	adc	r19, r19
 9a4:	44 1f       	adc	r20, r20
 9a6:	55 1f       	adc	r21, r21
 9a8:	12 96       	adiw	r26, 0x02	; 2
 9aa:	8d 91       	ld	r24, X+
 9ac:	9c 91       	ld	r25, X
 9ae:	13 97       	sbiw	r26, 0x03	; 3
 9b0:	01 97       	sbiw	r24, 0x01	; 1
 9b2:	13 96       	adiw	r26, 0x03	; 3
 9b4:	9c 93       	st	X, r25
 9b6:	8e 93       	st	-X, r24
 9b8:	12 97       	sbiw	r26, 0x02	; 2
 9ba:	20 30       	cpi	r18, 0x00	; 0
 9bc:	80 e0       	ldi	r24, 0x00	; 0
 9be:	38 07       	cpc	r19, r24
 9c0:	80 e0       	ldi	r24, 0x00	; 0
 9c2:	48 07       	cpc	r20, r24
 9c4:	80 e4       	ldi	r24, 0x40	; 64
 9c6:	58 07       	cpc	r21, r24
 9c8:	58 f3       	brcs	.-42     	; 0x9a0 <__unpack_f+0x66>
 9ca:	14 96       	adiw	r26, 0x04	; 4
 9cc:	2d 93       	st	X+, r18
 9ce:	3d 93       	st	X+, r19
 9d0:	4d 93       	st	X+, r20
 9d2:	5c 93       	st	X, r21
 9d4:	17 97       	sbiw	r26, 0x07	; 7
 9d6:	08 95       	ret
 9d8:	2f 3f       	cpi	r18, 0xFF	; 255
 9da:	31 05       	cpc	r19, r1
 9dc:	79 f4       	brne	.+30     	; 0x9fc <__unpack_f+0xc2>
 9de:	41 15       	cp	r20, r1
 9e0:	51 05       	cpc	r21, r1
 9e2:	61 05       	cpc	r22, r1
 9e4:	71 05       	cpc	r23, r1
 9e6:	19 f4       	brne	.+6      	; 0x9ee <__unpack_f+0xb4>
 9e8:	84 e0       	ldi	r24, 0x04	; 4
 9ea:	8c 93       	st	X, r24
 9ec:	08 95       	ret
 9ee:	64 ff       	sbrs	r22, 4
 9f0:	03 c0       	rjmp	.+6      	; 0x9f8 <__unpack_f+0xbe>
 9f2:	81 e0       	ldi	r24, 0x01	; 1
 9f4:	8c 93       	st	X, r24
 9f6:	12 c0       	rjmp	.+36     	; 0xa1c <__unpack_f+0xe2>
 9f8:	1c 92       	st	X, r1
 9fa:	10 c0       	rjmp	.+32     	; 0xa1c <__unpack_f+0xe2>
 9fc:	2f 57       	subi	r18, 0x7F	; 127
 9fe:	30 40       	sbci	r19, 0x00	; 0
 a00:	13 96       	adiw	r26, 0x03	; 3
 a02:	3c 93       	st	X, r19
 a04:	2e 93       	st	-X, r18
 a06:	12 97       	sbiw	r26, 0x02	; 2
 a08:	83 e0       	ldi	r24, 0x03	; 3
 a0a:	8c 93       	st	X, r24
 a0c:	87 e0       	ldi	r24, 0x07	; 7
 a0e:	44 0f       	add	r20, r20
 a10:	55 1f       	adc	r21, r21
 a12:	66 1f       	adc	r22, r22
 a14:	77 1f       	adc	r23, r23
 a16:	8a 95       	dec	r24
 a18:	d1 f7       	brne	.-12     	; 0xa0e <__unpack_f+0xd4>
 a1a:	70 64       	ori	r23, 0x40	; 64
 a1c:	14 96       	adiw	r26, 0x04	; 4
 a1e:	4d 93       	st	X+, r20
 a20:	5d 93       	st	X+, r21
 a22:	6d 93       	st	X+, r22
 a24:	7c 93       	st	X, r23
 a26:	17 97       	sbiw	r26, 0x07	; 7
 a28:	08 95       	ret

00000a2a <sprintf>:
 a2a:	ae e0       	ldi	r26, 0x0E	; 14
 a2c:	b0 e0       	ldi	r27, 0x00	; 0
 a2e:	eb e1       	ldi	r30, 0x1B	; 27
 a30:	f5 e0       	ldi	r31, 0x05	; 5
 a32:	0c 94 c4 07 	jmp	0xf88	; 0xf88 <__prologue_saves__+0x1c>
 a36:	0d 89       	ldd	r16, Y+21	; 0x15
 a38:	1e 89       	ldd	r17, Y+22	; 0x16
 a3a:	86 e0       	ldi	r24, 0x06	; 6
 a3c:	8c 83       	std	Y+4, r24	; 0x04
 a3e:	1a 83       	std	Y+2, r17	; 0x02
 a40:	09 83       	std	Y+1, r16	; 0x01
 a42:	8f ef       	ldi	r24, 0xFF	; 255
 a44:	9f e7       	ldi	r25, 0x7F	; 127
 a46:	9e 83       	std	Y+6, r25	; 0x06
 a48:	8d 83       	std	Y+5, r24	; 0x05
 a4a:	9e 01       	movw	r18, r28
 a4c:	27 5e       	subi	r18, 0xE7	; 231
 a4e:	3f 4f       	sbci	r19, 0xFF	; 255
 a50:	ce 01       	movw	r24, r28
 a52:	01 96       	adiw	r24, 0x01	; 1
 a54:	6f 89       	ldd	r22, Y+23	; 0x17
 a56:	78 8d       	ldd	r23, Y+24	; 0x18
 a58:	a9 01       	movw	r20, r18
 a5a:	0e 94 39 05 	call	0xa72	; 0xa72 <vfprintf>
 a5e:	2f 81       	ldd	r18, Y+7	; 0x07
 a60:	38 85       	ldd	r19, Y+8	; 0x08
 a62:	02 0f       	add	r16, r18
 a64:	13 1f       	adc	r17, r19
 a66:	f8 01       	movw	r30, r16
 a68:	10 82       	st	Z, r1
 a6a:	2e 96       	adiw	r28, 0x0e	; 14
 a6c:	e4 e0       	ldi	r30, 0x04	; 4
 a6e:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <__epilogue_restores__+0x1c>

00000a72 <vfprintf>:
 a72:	ab e0       	ldi	r26, 0x0B	; 11
 a74:	b0 e0       	ldi	r27, 0x00	; 0
 a76:	ef e3       	ldi	r30, 0x3F	; 63
 a78:	f5 e0       	ldi	r31, 0x05	; 5
 a7a:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <__prologue_saves__>
 a7e:	3c 01       	movw	r6, r24
 a80:	2b 01       	movw	r4, r22
 a82:	5a 01       	movw	r10, r20
 a84:	fc 01       	movw	r30, r24
 a86:	17 82       	std	Z+7, r1	; 0x07
 a88:	16 82       	std	Z+6, r1	; 0x06
 a8a:	83 81       	ldd	r24, Z+3	; 0x03
 a8c:	81 fd       	sbrc	r24, 1
 a8e:	03 c0       	rjmp	.+6      	; 0xa96 <vfprintf+0x24>
 a90:	6f ef       	ldi	r22, 0xFF	; 255
 a92:	7f ef       	ldi	r23, 0xFF	; 255
 a94:	c6 c1       	rjmp	.+908    	; 0xe22 <vfprintf+0x3b0>
 a96:	9a e0       	ldi	r25, 0x0A	; 10
 a98:	89 2e       	mov	r8, r25
 a9a:	1e 01       	movw	r2, r28
 a9c:	08 94       	sec
 a9e:	21 1c       	adc	r2, r1
 aa0:	31 1c       	adc	r3, r1
 aa2:	f3 01       	movw	r30, r6
 aa4:	23 81       	ldd	r18, Z+3	; 0x03
 aa6:	f2 01       	movw	r30, r4
 aa8:	23 fd       	sbrc	r18, 3
 aaa:	85 91       	lpm	r24, Z+
 aac:	23 ff       	sbrs	r18, 3
 aae:	81 91       	ld	r24, Z+
 ab0:	2f 01       	movw	r4, r30
 ab2:	88 23       	and	r24, r24
 ab4:	09 f4       	brne	.+2      	; 0xab8 <vfprintf+0x46>
 ab6:	b2 c1       	rjmp	.+868    	; 0xe1c <vfprintf+0x3aa>
 ab8:	85 32       	cpi	r24, 0x25	; 37
 aba:	39 f4       	brne	.+14     	; 0xaca <vfprintf+0x58>
 abc:	23 fd       	sbrc	r18, 3
 abe:	85 91       	lpm	r24, Z+
 ac0:	23 ff       	sbrs	r18, 3
 ac2:	81 91       	ld	r24, Z+
 ac4:	2f 01       	movw	r4, r30
 ac6:	85 32       	cpi	r24, 0x25	; 37
 ac8:	29 f4       	brne	.+10     	; 0xad4 <vfprintf+0x62>
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	b3 01       	movw	r22, r6
 ace:	0e 94 2c 07 	call	0xe58	; 0xe58 <fputc>
 ad2:	e7 cf       	rjmp	.-50     	; 0xaa2 <vfprintf+0x30>
 ad4:	98 2f       	mov	r25, r24
 ad6:	ff 24       	eor	r15, r15
 ad8:	ee 24       	eor	r14, r14
 ada:	99 24       	eor	r9, r9
 adc:	ff e1       	ldi	r31, 0x1F	; 31
 ade:	ff 15       	cp	r31, r15
 ae0:	d0 f0       	brcs	.+52     	; 0xb16 <vfprintf+0xa4>
 ae2:	9b 32       	cpi	r25, 0x2B	; 43
 ae4:	69 f0       	breq	.+26     	; 0xb00 <vfprintf+0x8e>
 ae6:	9c 32       	cpi	r25, 0x2C	; 44
 ae8:	28 f4       	brcc	.+10     	; 0xaf4 <vfprintf+0x82>
 aea:	90 32       	cpi	r25, 0x20	; 32
 aec:	59 f0       	breq	.+22     	; 0xb04 <vfprintf+0x92>
 aee:	93 32       	cpi	r25, 0x23	; 35
 af0:	91 f4       	brne	.+36     	; 0xb16 <vfprintf+0xa4>
 af2:	0e c0       	rjmp	.+28     	; 0xb10 <vfprintf+0x9e>
 af4:	9d 32       	cpi	r25, 0x2D	; 45
 af6:	49 f0       	breq	.+18     	; 0xb0a <vfprintf+0x98>
 af8:	90 33       	cpi	r25, 0x30	; 48
 afa:	69 f4       	brne	.+26     	; 0xb16 <vfprintf+0xa4>
 afc:	41 e0       	ldi	r20, 0x01	; 1
 afe:	24 c0       	rjmp	.+72     	; 0xb48 <vfprintf+0xd6>
 b00:	52 e0       	ldi	r21, 0x02	; 2
 b02:	f5 2a       	or	r15, r21
 b04:	84 e0       	ldi	r24, 0x04	; 4
 b06:	f8 2a       	or	r15, r24
 b08:	28 c0       	rjmp	.+80     	; 0xb5a <vfprintf+0xe8>
 b0a:	98 e0       	ldi	r25, 0x08	; 8
 b0c:	f9 2a       	or	r15, r25
 b0e:	25 c0       	rjmp	.+74     	; 0xb5a <vfprintf+0xe8>
 b10:	e0 e1       	ldi	r30, 0x10	; 16
 b12:	fe 2a       	or	r15, r30
 b14:	22 c0       	rjmp	.+68     	; 0xb5a <vfprintf+0xe8>
 b16:	f7 fc       	sbrc	r15, 7
 b18:	29 c0       	rjmp	.+82     	; 0xb6c <vfprintf+0xfa>
 b1a:	89 2f       	mov	r24, r25
 b1c:	80 53       	subi	r24, 0x30	; 48
 b1e:	8a 30       	cpi	r24, 0x0A	; 10
 b20:	70 f4       	brcc	.+28     	; 0xb3e <vfprintf+0xcc>
 b22:	f6 fe       	sbrs	r15, 6
 b24:	05 c0       	rjmp	.+10     	; 0xb30 <vfprintf+0xbe>
 b26:	98 9c       	mul	r9, r8
 b28:	90 2c       	mov	r9, r0
 b2a:	11 24       	eor	r1, r1
 b2c:	98 0e       	add	r9, r24
 b2e:	15 c0       	rjmp	.+42     	; 0xb5a <vfprintf+0xe8>
 b30:	e8 9c       	mul	r14, r8
 b32:	e0 2c       	mov	r14, r0
 b34:	11 24       	eor	r1, r1
 b36:	e8 0e       	add	r14, r24
 b38:	f0 e2       	ldi	r31, 0x20	; 32
 b3a:	ff 2a       	or	r15, r31
 b3c:	0e c0       	rjmp	.+28     	; 0xb5a <vfprintf+0xe8>
 b3e:	9e 32       	cpi	r25, 0x2E	; 46
 b40:	29 f4       	brne	.+10     	; 0xb4c <vfprintf+0xda>
 b42:	f6 fc       	sbrc	r15, 6
 b44:	6b c1       	rjmp	.+726    	; 0xe1c <vfprintf+0x3aa>
 b46:	40 e4       	ldi	r20, 0x40	; 64
 b48:	f4 2a       	or	r15, r20
 b4a:	07 c0       	rjmp	.+14     	; 0xb5a <vfprintf+0xe8>
 b4c:	9c 36       	cpi	r25, 0x6C	; 108
 b4e:	19 f4       	brne	.+6      	; 0xb56 <vfprintf+0xe4>
 b50:	50 e8       	ldi	r21, 0x80	; 128
 b52:	f5 2a       	or	r15, r21
 b54:	02 c0       	rjmp	.+4      	; 0xb5a <vfprintf+0xe8>
 b56:	98 36       	cpi	r25, 0x68	; 104
 b58:	49 f4       	brne	.+18     	; 0xb6c <vfprintf+0xfa>
 b5a:	f2 01       	movw	r30, r4
 b5c:	23 fd       	sbrc	r18, 3
 b5e:	95 91       	lpm	r25, Z+
 b60:	23 ff       	sbrs	r18, 3
 b62:	91 91       	ld	r25, Z+
 b64:	2f 01       	movw	r4, r30
 b66:	99 23       	and	r25, r25
 b68:	09 f0       	breq	.+2      	; 0xb6c <vfprintf+0xfa>
 b6a:	b8 cf       	rjmp	.-144    	; 0xadc <vfprintf+0x6a>
 b6c:	89 2f       	mov	r24, r25
 b6e:	85 54       	subi	r24, 0x45	; 69
 b70:	83 30       	cpi	r24, 0x03	; 3
 b72:	18 f0       	brcs	.+6      	; 0xb7a <vfprintf+0x108>
 b74:	80 52       	subi	r24, 0x20	; 32
 b76:	83 30       	cpi	r24, 0x03	; 3
 b78:	38 f4       	brcc	.+14     	; 0xb88 <vfprintf+0x116>
 b7a:	44 e0       	ldi	r20, 0x04	; 4
 b7c:	50 e0       	ldi	r21, 0x00	; 0
 b7e:	a4 0e       	add	r10, r20
 b80:	b5 1e       	adc	r11, r21
 b82:	5f e3       	ldi	r21, 0x3F	; 63
 b84:	59 83       	std	Y+1, r21	; 0x01
 b86:	0f c0       	rjmp	.+30     	; 0xba6 <vfprintf+0x134>
 b88:	93 36       	cpi	r25, 0x63	; 99
 b8a:	31 f0       	breq	.+12     	; 0xb98 <vfprintf+0x126>
 b8c:	93 37       	cpi	r25, 0x73	; 115
 b8e:	79 f0       	breq	.+30     	; 0xbae <vfprintf+0x13c>
 b90:	93 35       	cpi	r25, 0x53	; 83
 b92:	09 f0       	breq	.+2      	; 0xb96 <vfprintf+0x124>
 b94:	56 c0       	rjmp	.+172    	; 0xc42 <vfprintf+0x1d0>
 b96:	20 c0       	rjmp	.+64     	; 0xbd8 <vfprintf+0x166>
 b98:	f5 01       	movw	r30, r10
 b9a:	80 81       	ld	r24, Z
 b9c:	89 83       	std	Y+1, r24	; 0x01
 b9e:	42 e0       	ldi	r20, 0x02	; 2
 ba0:	50 e0       	ldi	r21, 0x00	; 0
 ba2:	a4 0e       	add	r10, r20
 ba4:	b5 1e       	adc	r11, r21
 ba6:	61 01       	movw	r12, r2
 ba8:	01 e0       	ldi	r16, 0x01	; 1
 baa:	10 e0       	ldi	r17, 0x00	; 0
 bac:	12 c0       	rjmp	.+36     	; 0xbd2 <vfprintf+0x160>
 bae:	f5 01       	movw	r30, r10
 bb0:	c0 80       	ld	r12, Z
 bb2:	d1 80       	ldd	r13, Z+1	; 0x01
 bb4:	f6 fc       	sbrc	r15, 6
 bb6:	03 c0       	rjmp	.+6      	; 0xbbe <vfprintf+0x14c>
 bb8:	6f ef       	ldi	r22, 0xFF	; 255
 bba:	7f ef       	ldi	r23, 0xFF	; 255
 bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <vfprintf+0x150>
 bbe:	69 2d       	mov	r22, r9
 bc0:	70 e0       	ldi	r23, 0x00	; 0
 bc2:	42 e0       	ldi	r20, 0x02	; 2
 bc4:	50 e0       	ldi	r21, 0x00	; 0
 bc6:	a4 0e       	add	r10, r20
 bc8:	b5 1e       	adc	r11, r21
 bca:	c6 01       	movw	r24, r12
 bcc:	0e 94 21 07 	call	0xe42	; 0xe42 <strnlen>
 bd0:	8c 01       	movw	r16, r24
 bd2:	5f e7       	ldi	r21, 0x7F	; 127
 bd4:	f5 22       	and	r15, r21
 bd6:	14 c0       	rjmp	.+40     	; 0xc00 <vfprintf+0x18e>
 bd8:	f5 01       	movw	r30, r10
 bda:	c0 80       	ld	r12, Z
 bdc:	d1 80       	ldd	r13, Z+1	; 0x01
 bde:	f6 fc       	sbrc	r15, 6
 be0:	03 c0       	rjmp	.+6      	; 0xbe8 <vfprintf+0x176>
 be2:	6f ef       	ldi	r22, 0xFF	; 255
 be4:	7f ef       	ldi	r23, 0xFF	; 255
 be6:	02 c0       	rjmp	.+4      	; 0xbec <vfprintf+0x17a>
 be8:	69 2d       	mov	r22, r9
 bea:	70 e0       	ldi	r23, 0x00	; 0
 bec:	42 e0       	ldi	r20, 0x02	; 2
 bee:	50 e0       	ldi	r21, 0x00	; 0
 bf0:	a4 0e       	add	r10, r20
 bf2:	b5 1e       	adc	r11, r21
 bf4:	c6 01       	movw	r24, r12
 bf6:	0e 94 16 07 	call	0xe2c	; 0xe2c <strnlen_P>
 bfa:	8c 01       	movw	r16, r24
 bfc:	50 e8       	ldi	r21, 0x80	; 128
 bfe:	f5 2a       	or	r15, r21
 c00:	f3 fe       	sbrs	r15, 3
 c02:	07 c0       	rjmp	.+14     	; 0xc12 <vfprintf+0x1a0>
 c04:	1a c0       	rjmp	.+52     	; 0xc3a <vfprintf+0x1c8>
 c06:	80 e2       	ldi	r24, 0x20	; 32
 c08:	90 e0       	ldi	r25, 0x00	; 0
 c0a:	b3 01       	movw	r22, r6
 c0c:	0e 94 2c 07 	call	0xe58	; 0xe58 <fputc>
 c10:	ea 94       	dec	r14
 c12:	8e 2d       	mov	r24, r14
 c14:	90 e0       	ldi	r25, 0x00	; 0
 c16:	08 17       	cp	r16, r24
 c18:	19 07       	cpc	r17, r25
 c1a:	a8 f3       	brcs	.-22     	; 0xc06 <vfprintf+0x194>
 c1c:	0e c0       	rjmp	.+28     	; 0xc3a <vfprintf+0x1c8>
 c1e:	f6 01       	movw	r30, r12
 c20:	f7 fc       	sbrc	r15, 7
 c22:	85 91       	lpm	r24, Z+
 c24:	f7 fe       	sbrs	r15, 7
 c26:	81 91       	ld	r24, Z+
 c28:	6f 01       	movw	r12, r30
 c2a:	90 e0       	ldi	r25, 0x00	; 0
 c2c:	b3 01       	movw	r22, r6
 c2e:	0e 94 2c 07 	call	0xe58	; 0xe58 <fputc>
 c32:	e1 10       	cpse	r14, r1
 c34:	ea 94       	dec	r14
 c36:	01 50       	subi	r16, 0x01	; 1
 c38:	10 40       	sbci	r17, 0x00	; 0
 c3a:	01 15       	cp	r16, r1
 c3c:	11 05       	cpc	r17, r1
 c3e:	79 f7       	brne	.-34     	; 0xc1e <vfprintf+0x1ac>
 c40:	ea c0       	rjmp	.+468    	; 0xe16 <vfprintf+0x3a4>
 c42:	94 36       	cpi	r25, 0x64	; 100
 c44:	11 f0       	breq	.+4      	; 0xc4a <vfprintf+0x1d8>
 c46:	99 36       	cpi	r25, 0x69	; 105
 c48:	69 f5       	brne	.+90     	; 0xca4 <vfprintf+0x232>
 c4a:	f7 fe       	sbrs	r15, 7
 c4c:	08 c0       	rjmp	.+16     	; 0xc5e <vfprintf+0x1ec>
 c4e:	f5 01       	movw	r30, r10
 c50:	20 81       	ld	r18, Z
 c52:	31 81       	ldd	r19, Z+1	; 0x01
 c54:	42 81       	ldd	r20, Z+2	; 0x02
 c56:	53 81       	ldd	r21, Z+3	; 0x03
 c58:	84 e0       	ldi	r24, 0x04	; 4
 c5a:	90 e0       	ldi	r25, 0x00	; 0
 c5c:	0a c0       	rjmp	.+20     	; 0xc72 <vfprintf+0x200>
 c5e:	f5 01       	movw	r30, r10
 c60:	80 81       	ld	r24, Z
 c62:	91 81       	ldd	r25, Z+1	; 0x01
 c64:	9c 01       	movw	r18, r24
 c66:	44 27       	eor	r20, r20
 c68:	37 fd       	sbrc	r19, 7
 c6a:	40 95       	com	r20
 c6c:	54 2f       	mov	r21, r20
 c6e:	82 e0       	ldi	r24, 0x02	; 2
 c70:	90 e0       	ldi	r25, 0x00	; 0
 c72:	a8 0e       	add	r10, r24
 c74:	b9 1e       	adc	r11, r25
 c76:	9f e6       	ldi	r25, 0x6F	; 111
 c78:	f9 22       	and	r15, r25
 c7a:	57 ff       	sbrs	r21, 7
 c7c:	09 c0       	rjmp	.+18     	; 0xc90 <vfprintf+0x21e>
 c7e:	50 95       	com	r21
 c80:	40 95       	com	r20
 c82:	30 95       	com	r19
 c84:	21 95       	neg	r18
 c86:	3f 4f       	sbci	r19, 0xFF	; 255
 c88:	4f 4f       	sbci	r20, 0xFF	; 255
 c8a:	5f 4f       	sbci	r21, 0xFF	; 255
 c8c:	e0 e8       	ldi	r30, 0x80	; 128
 c8e:	fe 2a       	or	r15, r30
 c90:	ca 01       	movw	r24, r20
 c92:	b9 01       	movw	r22, r18
 c94:	a1 01       	movw	r20, r2
 c96:	2a e0       	ldi	r18, 0x0A	; 10
 c98:	30 e0       	ldi	r19, 0x00	; 0
 c9a:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__ultoa_invert>
 c9e:	d8 2e       	mov	r13, r24
 ca0:	d2 18       	sub	r13, r2
 ca2:	40 c0       	rjmp	.+128    	; 0xd24 <vfprintf+0x2b2>
 ca4:	95 37       	cpi	r25, 0x75	; 117
 ca6:	29 f4       	brne	.+10     	; 0xcb2 <vfprintf+0x240>
 ca8:	1f 2d       	mov	r17, r15
 caa:	1f 7e       	andi	r17, 0xEF	; 239
 cac:	2a e0       	ldi	r18, 0x0A	; 10
 cae:	30 e0       	ldi	r19, 0x00	; 0
 cb0:	1d c0       	rjmp	.+58     	; 0xcec <vfprintf+0x27a>
 cb2:	1f 2d       	mov	r17, r15
 cb4:	19 7f       	andi	r17, 0xF9	; 249
 cb6:	9f 36       	cpi	r25, 0x6F	; 111
 cb8:	61 f0       	breq	.+24     	; 0xcd2 <vfprintf+0x260>
 cba:	90 37       	cpi	r25, 0x70	; 112
 cbc:	20 f4       	brcc	.+8      	; 0xcc6 <vfprintf+0x254>
 cbe:	98 35       	cpi	r25, 0x58	; 88
 cc0:	09 f0       	breq	.+2      	; 0xcc4 <vfprintf+0x252>
 cc2:	ac c0       	rjmp	.+344    	; 0xe1c <vfprintf+0x3aa>
 cc4:	0f c0       	rjmp	.+30     	; 0xce4 <vfprintf+0x272>
 cc6:	90 37       	cpi	r25, 0x70	; 112
 cc8:	39 f0       	breq	.+14     	; 0xcd8 <vfprintf+0x266>
 cca:	98 37       	cpi	r25, 0x78	; 120
 ccc:	09 f0       	breq	.+2      	; 0xcd0 <vfprintf+0x25e>
 cce:	a6 c0       	rjmp	.+332    	; 0xe1c <vfprintf+0x3aa>
 cd0:	04 c0       	rjmp	.+8      	; 0xcda <vfprintf+0x268>
 cd2:	28 e0       	ldi	r18, 0x08	; 8
 cd4:	30 e0       	ldi	r19, 0x00	; 0
 cd6:	0a c0       	rjmp	.+20     	; 0xcec <vfprintf+0x27a>
 cd8:	10 61       	ori	r17, 0x10	; 16
 cda:	14 fd       	sbrc	r17, 4
 cdc:	14 60       	ori	r17, 0x04	; 4
 cde:	20 e1       	ldi	r18, 0x10	; 16
 ce0:	30 e0       	ldi	r19, 0x00	; 0
 ce2:	04 c0       	rjmp	.+8      	; 0xcec <vfprintf+0x27a>
 ce4:	14 fd       	sbrc	r17, 4
 ce6:	16 60       	ori	r17, 0x06	; 6
 ce8:	20 e1       	ldi	r18, 0x10	; 16
 cea:	32 e0       	ldi	r19, 0x02	; 2
 cec:	17 ff       	sbrs	r17, 7
 cee:	08 c0       	rjmp	.+16     	; 0xd00 <vfprintf+0x28e>
 cf0:	f5 01       	movw	r30, r10
 cf2:	60 81       	ld	r22, Z
 cf4:	71 81       	ldd	r23, Z+1	; 0x01
 cf6:	82 81       	ldd	r24, Z+2	; 0x02
 cf8:	93 81       	ldd	r25, Z+3	; 0x03
 cfa:	44 e0       	ldi	r20, 0x04	; 4
 cfc:	50 e0       	ldi	r21, 0x00	; 0
 cfe:	08 c0       	rjmp	.+16     	; 0xd10 <vfprintf+0x29e>
 d00:	f5 01       	movw	r30, r10
 d02:	80 81       	ld	r24, Z
 d04:	91 81       	ldd	r25, Z+1	; 0x01
 d06:	bc 01       	movw	r22, r24
 d08:	80 e0       	ldi	r24, 0x00	; 0
 d0a:	90 e0       	ldi	r25, 0x00	; 0
 d0c:	42 e0       	ldi	r20, 0x02	; 2
 d0e:	50 e0       	ldi	r21, 0x00	; 0
 d10:	a4 0e       	add	r10, r20
 d12:	b5 1e       	adc	r11, r21
 d14:	a1 01       	movw	r20, r2
 d16:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__ultoa_invert>
 d1a:	d8 2e       	mov	r13, r24
 d1c:	d2 18       	sub	r13, r2
 d1e:	8f e7       	ldi	r24, 0x7F	; 127
 d20:	f8 2e       	mov	r15, r24
 d22:	f1 22       	and	r15, r17
 d24:	f6 fe       	sbrs	r15, 6
 d26:	0b c0       	rjmp	.+22     	; 0xd3e <vfprintf+0x2cc>
 d28:	5e ef       	ldi	r21, 0xFE	; 254
 d2a:	f5 22       	and	r15, r21
 d2c:	d9 14       	cp	r13, r9
 d2e:	38 f4       	brcc	.+14     	; 0xd3e <vfprintf+0x2cc>
 d30:	f4 fe       	sbrs	r15, 4
 d32:	07 c0       	rjmp	.+14     	; 0xd42 <vfprintf+0x2d0>
 d34:	f2 fc       	sbrc	r15, 2
 d36:	05 c0       	rjmp	.+10     	; 0xd42 <vfprintf+0x2d0>
 d38:	8f ee       	ldi	r24, 0xEF	; 239
 d3a:	f8 22       	and	r15, r24
 d3c:	02 c0       	rjmp	.+4      	; 0xd42 <vfprintf+0x2d0>
 d3e:	1d 2d       	mov	r17, r13
 d40:	01 c0       	rjmp	.+2      	; 0xd44 <vfprintf+0x2d2>
 d42:	19 2d       	mov	r17, r9
 d44:	f4 fe       	sbrs	r15, 4
 d46:	0d c0       	rjmp	.+26     	; 0xd62 <vfprintf+0x2f0>
 d48:	fe 01       	movw	r30, r28
 d4a:	ed 0d       	add	r30, r13
 d4c:	f1 1d       	adc	r31, r1
 d4e:	80 81       	ld	r24, Z
 d50:	80 33       	cpi	r24, 0x30	; 48
 d52:	19 f4       	brne	.+6      	; 0xd5a <vfprintf+0x2e8>
 d54:	99 ee       	ldi	r25, 0xE9	; 233
 d56:	f9 22       	and	r15, r25
 d58:	08 c0       	rjmp	.+16     	; 0xd6a <vfprintf+0x2f8>
 d5a:	1f 5f       	subi	r17, 0xFF	; 255
 d5c:	f2 fe       	sbrs	r15, 2
 d5e:	05 c0       	rjmp	.+10     	; 0xd6a <vfprintf+0x2f8>
 d60:	03 c0       	rjmp	.+6      	; 0xd68 <vfprintf+0x2f6>
 d62:	8f 2d       	mov	r24, r15
 d64:	86 78       	andi	r24, 0x86	; 134
 d66:	09 f0       	breq	.+2      	; 0xd6a <vfprintf+0x2f8>
 d68:	1f 5f       	subi	r17, 0xFF	; 255
 d6a:	0f 2d       	mov	r16, r15
 d6c:	f3 fc       	sbrc	r15, 3
 d6e:	14 c0       	rjmp	.+40     	; 0xd98 <vfprintf+0x326>
 d70:	f0 fe       	sbrs	r15, 0
 d72:	0f c0       	rjmp	.+30     	; 0xd92 <vfprintf+0x320>
 d74:	1e 15       	cp	r17, r14
 d76:	10 f0       	brcs	.+4      	; 0xd7c <vfprintf+0x30a>
 d78:	9d 2c       	mov	r9, r13
 d7a:	0b c0       	rjmp	.+22     	; 0xd92 <vfprintf+0x320>
 d7c:	9d 2c       	mov	r9, r13
 d7e:	9e 0c       	add	r9, r14
 d80:	91 1a       	sub	r9, r17
 d82:	1e 2d       	mov	r17, r14
 d84:	06 c0       	rjmp	.+12     	; 0xd92 <vfprintf+0x320>
 d86:	80 e2       	ldi	r24, 0x20	; 32
 d88:	90 e0       	ldi	r25, 0x00	; 0
 d8a:	b3 01       	movw	r22, r6
 d8c:	0e 94 2c 07 	call	0xe58	; 0xe58 <fputc>
 d90:	1f 5f       	subi	r17, 0xFF	; 255
 d92:	1e 15       	cp	r17, r14
 d94:	c0 f3       	brcs	.-16     	; 0xd86 <vfprintf+0x314>
 d96:	04 c0       	rjmp	.+8      	; 0xda0 <vfprintf+0x32e>
 d98:	1e 15       	cp	r17, r14
 d9a:	10 f4       	brcc	.+4      	; 0xda0 <vfprintf+0x32e>
 d9c:	e1 1a       	sub	r14, r17
 d9e:	01 c0       	rjmp	.+2      	; 0xda2 <vfprintf+0x330>
 da0:	ee 24       	eor	r14, r14
 da2:	04 ff       	sbrs	r16, 4
 da4:	0f c0       	rjmp	.+30     	; 0xdc4 <vfprintf+0x352>
 da6:	80 e3       	ldi	r24, 0x30	; 48
 da8:	90 e0       	ldi	r25, 0x00	; 0
 daa:	b3 01       	movw	r22, r6
 dac:	0e 94 2c 07 	call	0xe58	; 0xe58 <fputc>
 db0:	02 ff       	sbrs	r16, 2
 db2:	1d c0       	rjmp	.+58     	; 0xdee <vfprintf+0x37c>
 db4:	01 fd       	sbrc	r16, 1
 db6:	03 c0       	rjmp	.+6      	; 0xdbe <vfprintf+0x34c>
 db8:	88 e7       	ldi	r24, 0x78	; 120
 dba:	90 e0       	ldi	r25, 0x00	; 0
 dbc:	0e c0       	rjmp	.+28     	; 0xdda <vfprintf+0x368>
 dbe:	88 e5       	ldi	r24, 0x58	; 88
 dc0:	90 e0       	ldi	r25, 0x00	; 0
 dc2:	0b c0       	rjmp	.+22     	; 0xdda <vfprintf+0x368>
 dc4:	80 2f       	mov	r24, r16
 dc6:	86 78       	andi	r24, 0x86	; 134
 dc8:	91 f0       	breq	.+36     	; 0xdee <vfprintf+0x37c>
 dca:	01 ff       	sbrs	r16, 1
 dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <vfprintf+0x360>
 dce:	8b e2       	ldi	r24, 0x2B	; 43
 dd0:	01 c0       	rjmp	.+2      	; 0xdd4 <vfprintf+0x362>
 dd2:	80 e2       	ldi	r24, 0x20	; 32
 dd4:	f7 fc       	sbrc	r15, 7
 dd6:	8d e2       	ldi	r24, 0x2D	; 45
 dd8:	90 e0       	ldi	r25, 0x00	; 0
 dda:	b3 01       	movw	r22, r6
 ddc:	0e 94 2c 07 	call	0xe58	; 0xe58 <fputc>
 de0:	06 c0       	rjmp	.+12     	; 0xdee <vfprintf+0x37c>
 de2:	80 e3       	ldi	r24, 0x30	; 48
 de4:	90 e0       	ldi	r25, 0x00	; 0
 de6:	b3 01       	movw	r22, r6
 de8:	0e 94 2c 07 	call	0xe58	; 0xe58 <fputc>
 dec:	9a 94       	dec	r9
 dee:	d9 14       	cp	r13, r9
 df0:	c0 f3       	brcs	.-16     	; 0xde2 <vfprintf+0x370>
 df2:	da 94       	dec	r13
 df4:	f1 01       	movw	r30, r2
 df6:	ed 0d       	add	r30, r13
 df8:	f1 1d       	adc	r31, r1
 dfa:	80 81       	ld	r24, Z
 dfc:	90 e0       	ldi	r25, 0x00	; 0
 dfe:	b3 01       	movw	r22, r6
 e00:	0e 94 2c 07 	call	0xe58	; 0xe58 <fputc>
 e04:	dd 20       	and	r13, r13
 e06:	a9 f7       	brne	.-22     	; 0xdf2 <vfprintf+0x380>
 e08:	06 c0       	rjmp	.+12     	; 0xe16 <vfprintf+0x3a4>
 e0a:	80 e2       	ldi	r24, 0x20	; 32
 e0c:	90 e0       	ldi	r25, 0x00	; 0
 e0e:	b3 01       	movw	r22, r6
 e10:	0e 94 2c 07 	call	0xe58	; 0xe58 <fputc>
 e14:	ea 94       	dec	r14
 e16:	ee 20       	and	r14, r14
 e18:	c1 f7       	brne	.-16     	; 0xe0a <vfprintf+0x398>
 e1a:	43 ce       	rjmp	.-890    	; 0xaa2 <vfprintf+0x30>
 e1c:	f3 01       	movw	r30, r6
 e1e:	66 81       	ldd	r22, Z+6	; 0x06
 e20:	77 81       	ldd	r23, Z+7	; 0x07
 e22:	cb 01       	movw	r24, r22
 e24:	2b 96       	adiw	r28, 0x0b	; 11
 e26:	e2 e1       	ldi	r30, 0x12	; 18
 e28:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <__epilogue_restores__>

00000e2c <strnlen_P>:
 e2c:	fc 01       	movw	r30, r24
 e2e:	05 90       	lpm	r0, Z+
 e30:	61 50       	subi	r22, 0x01	; 1
 e32:	70 40       	sbci	r23, 0x00	; 0
 e34:	01 10       	cpse	r0, r1
 e36:	d8 f7       	brcc	.-10     	; 0xe2e <strnlen_P+0x2>
 e38:	80 95       	com	r24
 e3a:	90 95       	com	r25
 e3c:	8e 0f       	add	r24, r30
 e3e:	9f 1f       	adc	r25, r31
 e40:	08 95       	ret

00000e42 <strnlen>:
 e42:	fc 01       	movw	r30, r24
 e44:	61 50       	subi	r22, 0x01	; 1
 e46:	70 40       	sbci	r23, 0x00	; 0
 e48:	01 90       	ld	r0, Z+
 e4a:	01 10       	cpse	r0, r1
 e4c:	d8 f7       	brcc	.-10     	; 0xe44 <strnlen+0x2>
 e4e:	80 95       	com	r24
 e50:	90 95       	com	r25
 e52:	8e 0f       	add	r24, r30
 e54:	9f 1f       	adc	r25, r31
 e56:	08 95       	ret

00000e58 <fputc>:
 e58:	0f 93       	push	r16
 e5a:	1f 93       	push	r17
 e5c:	cf 93       	push	r28
 e5e:	df 93       	push	r29
 e60:	8c 01       	movw	r16, r24
 e62:	eb 01       	movw	r28, r22
 e64:	8b 81       	ldd	r24, Y+3	; 0x03
 e66:	81 ff       	sbrs	r24, 1
 e68:	1b c0       	rjmp	.+54     	; 0xea0 <fputc+0x48>
 e6a:	82 ff       	sbrs	r24, 2
 e6c:	0d c0       	rjmp	.+26     	; 0xe88 <fputc+0x30>
 e6e:	2e 81       	ldd	r18, Y+6	; 0x06
 e70:	3f 81       	ldd	r19, Y+7	; 0x07
 e72:	8c 81       	ldd	r24, Y+4	; 0x04
 e74:	9d 81       	ldd	r25, Y+5	; 0x05
 e76:	28 17       	cp	r18, r24
 e78:	39 07       	cpc	r19, r25
 e7a:	64 f4       	brge	.+24     	; 0xe94 <fputc+0x3c>
 e7c:	e8 81       	ld	r30, Y
 e7e:	f9 81       	ldd	r31, Y+1	; 0x01
 e80:	01 93       	st	Z+, r16
 e82:	f9 83       	std	Y+1, r31	; 0x01
 e84:	e8 83       	st	Y, r30
 e86:	06 c0       	rjmp	.+12     	; 0xe94 <fputc+0x3c>
 e88:	e8 85       	ldd	r30, Y+8	; 0x08
 e8a:	f9 85       	ldd	r31, Y+9	; 0x09
 e8c:	80 2f       	mov	r24, r16
 e8e:	09 95       	icall
 e90:	89 2b       	or	r24, r25
 e92:	31 f4       	brne	.+12     	; 0xea0 <fputc+0x48>
 e94:	8e 81       	ldd	r24, Y+6	; 0x06
 e96:	9f 81       	ldd	r25, Y+7	; 0x07
 e98:	01 96       	adiw	r24, 0x01	; 1
 e9a:	9f 83       	std	Y+7, r25	; 0x07
 e9c:	8e 83       	std	Y+6, r24	; 0x06
 e9e:	02 c0       	rjmp	.+4      	; 0xea4 <fputc+0x4c>
 ea0:	0f ef       	ldi	r16, 0xFF	; 255
 ea2:	1f ef       	ldi	r17, 0xFF	; 255
 ea4:	c8 01       	movw	r24, r16
 ea6:	df 91       	pop	r29
 ea8:	cf 91       	pop	r28
 eaa:	1f 91       	pop	r17
 eac:	0f 91       	pop	r16
 eae:	08 95       	ret

00000eb0 <__ultoa_invert>:
 eb0:	fa 01       	movw	r30, r20
 eb2:	aa 27       	eor	r26, r26
 eb4:	28 30       	cpi	r18, 0x08	; 8
 eb6:	51 f1       	breq	.+84     	; 0xf0c <__ultoa_invert+0x5c>
 eb8:	20 31       	cpi	r18, 0x10	; 16
 eba:	81 f1       	breq	.+96     	; 0xf1c <__ultoa_invert+0x6c>
 ebc:	e8 94       	clt
 ebe:	6f 93       	push	r22
 ec0:	6e 7f       	andi	r22, 0xFE	; 254
 ec2:	6e 5f       	subi	r22, 0xFE	; 254
 ec4:	7f 4f       	sbci	r23, 0xFF	; 255
 ec6:	8f 4f       	sbci	r24, 0xFF	; 255
 ec8:	9f 4f       	sbci	r25, 0xFF	; 255
 eca:	af 4f       	sbci	r26, 0xFF	; 255
 ecc:	b1 e0       	ldi	r27, 0x01	; 1
 ece:	3e d0       	rcall	.+124    	; 0xf4c <__ultoa_invert+0x9c>
 ed0:	b4 e0       	ldi	r27, 0x04	; 4
 ed2:	3c d0       	rcall	.+120    	; 0xf4c <__ultoa_invert+0x9c>
 ed4:	67 0f       	add	r22, r23
 ed6:	78 1f       	adc	r23, r24
 ed8:	89 1f       	adc	r24, r25
 eda:	9a 1f       	adc	r25, r26
 edc:	a1 1d       	adc	r26, r1
 ede:	68 0f       	add	r22, r24
 ee0:	79 1f       	adc	r23, r25
 ee2:	8a 1f       	adc	r24, r26
 ee4:	91 1d       	adc	r25, r1
 ee6:	a1 1d       	adc	r26, r1
 ee8:	6a 0f       	add	r22, r26
 eea:	71 1d       	adc	r23, r1
 eec:	81 1d       	adc	r24, r1
 eee:	91 1d       	adc	r25, r1
 ef0:	a1 1d       	adc	r26, r1
 ef2:	20 d0       	rcall	.+64     	; 0xf34 <__ultoa_invert+0x84>
 ef4:	09 f4       	brne	.+2      	; 0xef8 <__ultoa_invert+0x48>
 ef6:	68 94       	set
 ef8:	3f 91       	pop	r19
 efa:	2a e0       	ldi	r18, 0x0A	; 10
 efc:	26 9f       	mul	r18, r22
 efe:	11 24       	eor	r1, r1
 f00:	30 19       	sub	r19, r0
 f02:	30 5d       	subi	r19, 0xD0	; 208
 f04:	31 93       	st	Z+, r19
 f06:	de f6       	brtc	.-74     	; 0xebe <__ultoa_invert+0xe>
 f08:	cf 01       	movw	r24, r30
 f0a:	08 95       	ret
 f0c:	46 2f       	mov	r20, r22
 f0e:	47 70       	andi	r20, 0x07	; 7
 f10:	40 5d       	subi	r20, 0xD0	; 208
 f12:	41 93       	st	Z+, r20
 f14:	b3 e0       	ldi	r27, 0x03	; 3
 f16:	0f d0       	rcall	.+30     	; 0xf36 <__ultoa_invert+0x86>
 f18:	c9 f7       	brne	.-14     	; 0xf0c <__ultoa_invert+0x5c>
 f1a:	f6 cf       	rjmp	.-20     	; 0xf08 <__ultoa_invert+0x58>
 f1c:	46 2f       	mov	r20, r22
 f1e:	4f 70       	andi	r20, 0x0F	; 15
 f20:	40 5d       	subi	r20, 0xD0	; 208
 f22:	4a 33       	cpi	r20, 0x3A	; 58
 f24:	18 f0       	brcs	.+6      	; 0xf2c <__ultoa_invert+0x7c>
 f26:	49 5d       	subi	r20, 0xD9	; 217
 f28:	31 fd       	sbrc	r19, 1
 f2a:	40 52       	subi	r20, 0x20	; 32
 f2c:	41 93       	st	Z+, r20
 f2e:	02 d0       	rcall	.+4      	; 0xf34 <__ultoa_invert+0x84>
 f30:	a9 f7       	brne	.-22     	; 0xf1c <__ultoa_invert+0x6c>
 f32:	ea cf       	rjmp	.-44     	; 0xf08 <__ultoa_invert+0x58>
 f34:	b4 e0       	ldi	r27, 0x04	; 4
 f36:	a6 95       	lsr	r26
 f38:	97 95       	ror	r25
 f3a:	87 95       	ror	r24
 f3c:	77 95       	ror	r23
 f3e:	67 95       	ror	r22
 f40:	ba 95       	dec	r27
 f42:	c9 f7       	brne	.-14     	; 0xf36 <__ultoa_invert+0x86>
 f44:	00 97       	sbiw	r24, 0x00	; 0
 f46:	61 05       	cpc	r22, r1
 f48:	71 05       	cpc	r23, r1
 f4a:	08 95       	ret
 f4c:	9b 01       	movw	r18, r22
 f4e:	ac 01       	movw	r20, r24
 f50:	0a 2e       	mov	r0, r26
 f52:	06 94       	lsr	r0
 f54:	57 95       	ror	r21
 f56:	47 95       	ror	r20
 f58:	37 95       	ror	r19
 f5a:	27 95       	ror	r18
 f5c:	ba 95       	dec	r27
 f5e:	c9 f7       	brne	.-14     	; 0xf52 <__ultoa_invert+0xa2>
 f60:	62 0f       	add	r22, r18
 f62:	73 1f       	adc	r23, r19
 f64:	84 1f       	adc	r24, r20
 f66:	95 1f       	adc	r25, r21
 f68:	a0 1d       	adc	r26, r0
 f6a:	08 95       	ret

00000f6c <__prologue_saves__>:
 f6c:	2f 92       	push	r2
 f6e:	3f 92       	push	r3
 f70:	4f 92       	push	r4
 f72:	5f 92       	push	r5
 f74:	6f 92       	push	r6
 f76:	7f 92       	push	r7
 f78:	8f 92       	push	r8
 f7a:	9f 92       	push	r9
 f7c:	af 92       	push	r10
 f7e:	bf 92       	push	r11
 f80:	cf 92       	push	r12
 f82:	df 92       	push	r13
 f84:	ef 92       	push	r14
 f86:	ff 92       	push	r15
 f88:	0f 93       	push	r16
 f8a:	1f 93       	push	r17
 f8c:	cf 93       	push	r28
 f8e:	df 93       	push	r29
 f90:	cd b7       	in	r28, 0x3d	; 61
 f92:	de b7       	in	r29, 0x3e	; 62
 f94:	ca 1b       	sub	r28, r26
 f96:	db 0b       	sbc	r29, r27
 f98:	0f b6       	in	r0, 0x3f	; 63
 f9a:	f8 94       	cli
 f9c:	de bf       	out	0x3e, r29	; 62
 f9e:	0f be       	out	0x3f, r0	; 63
 fa0:	cd bf       	out	0x3d, r28	; 61
 fa2:	09 94       	ijmp

00000fa4 <__epilogue_restores__>:
 fa4:	2a 88       	ldd	r2, Y+18	; 0x12
 fa6:	39 88       	ldd	r3, Y+17	; 0x11
 fa8:	48 88       	ldd	r4, Y+16	; 0x10
 faa:	5f 84       	ldd	r5, Y+15	; 0x0f
 fac:	6e 84       	ldd	r6, Y+14	; 0x0e
 fae:	7d 84       	ldd	r7, Y+13	; 0x0d
 fb0:	8c 84       	ldd	r8, Y+12	; 0x0c
 fb2:	9b 84       	ldd	r9, Y+11	; 0x0b
 fb4:	aa 84       	ldd	r10, Y+10	; 0x0a
 fb6:	b9 84       	ldd	r11, Y+9	; 0x09
 fb8:	c8 84       	ldd	r12, Y+8	; 0x08
 fba:	df 80       	ldd	r13, Y+7	; 0x07
 fbc:	ee 80       	ldd	r14, Y+6	; 0x06
 fbe:	fd 80       	ldd	r15, Y+5	; 0x05
 fc0:	0c 81       	ldd	r16, Y+4	; 0x04
 fc2:	1b 81       	ldd	r17, Y+3	; 0x03
 fc4:	aa 81       	ldd	r26, Y+2	; 0x02
 fc6:	b9 81       	ldd	r27, Y+1	; 0x01
 fc8:	ce 0f       	add	r28, r30
 fca:	d1 1d       	adc	r29, r1
 fcc:	0f b6       	in	r0, 0x3f	; 63
 fce:	f8 94       	cli
 fd0:	de bf       	out	0x3e, r29	; 62
 fd2:	0f be       	out	0x3f, r0	; 63
 fd4:	cd bf       	out	0x3d, r28	; 61
 fd6:	ed 01       	movw	r28, r26
 fd8:	08 95       	ret

00000fda <_exit>:
 fda:	f8 94       	cli

00000fdc <__stop_program>:
 fdc:	ff cf       	rjmp	.-2      	; 0xfdc <__stop_program>
