
LabAssign1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000002f8  0000036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000a7  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000006f2  00000000  00000000  0000043f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000296  00000000  00000000  00000b31  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000590  00000000  00000000  00000dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000f0  00000000  00000000  00001358  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000242  00000000  00000000  00001448  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002ca  00000000  00000000  0000168a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a8  00000000  00000000  00001954  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ef       	ldi	r30, 0xF8	; 248
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 3b 01 	call	0x276	; 0x276 <main>
  8e:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <lcd_write>:
static void lcd_write(uint8_t data,uint8_t rs) 
{
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
  96:	66 23       	and	r22, r22
  98:	11 f0       	breq	.+4      	; 0x9e <lcd_write+0x8>
       lcd_rs_high();
  9a:	41 9a       	sbi	0x08, 1	; 8
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <lcd_write+0xa>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
  9e:	41 98       	cbi	0x08, 1	; 8
    }
    lcd_rw_low();
  a0:	40 98       	cbi	0x08, 0	; 8
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
  a2:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
  a4:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
  a6:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
  a8:	57 9a       	sbi	0x0a, 7	; 10
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
  aa:	5f 98       	cbi	0x0b, 7	; 11
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
  ac:	5e 98       	cbi	0x0b, 6	; 11
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
  ae:	5d 98       	cbi	0x0b, 5	; 11
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
  b0:	5c 98       	cbi	0x0b, 4	; 11
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  b2:	87 fd       	sbrc	r24, 7
  b4:	5f 9a       	sbi	0x0b, 7	; 11
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  b6:	86 fd       	sbrc	r24, 6
  b8:	5e 9a       	sbi	0x0b, 6	; 11
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  ba:	85 fd       	sbrc	r24, 5
  bc:	5d 9a       	sbi	0x0b, 5	; 11
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
  be:	84 fd       	sbrc	r24, 4
  c0:	5c 9a       	sbi	0x0b, 4	; 11

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
  c2:	42 9a       	sbi	0x08, 2	; 8
    lcd_e_delay();
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <lcd_write+0x30>
    lcd_e_low();
  c6:	42 98       	cbi	0x08, 2	; 8
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
        lcd_e_toggle();
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
  c8:	5f 98       	cbi	0x0b, 7	; 11
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
  ca:	5e 98       	cbi	0x0b, 6	; 11
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
  cc:	5d 98       	cbi	0x0b, 5	; 11
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
  ce:	5c 98       	cbi	0x0b, 4	; 11
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  d0:	83 fd       	sbrc	r24, 3
  d2:	5f 9a       	sbi	0x0b, 7	; 11
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  d4:	82 fd       	sbrc	r24, 2
  d6:	5e 9a       	sbi	0x0b, 6	; 11
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  d8:	81 fd       	sbrc	r24, 1
  da:	5d 9a       	sbi	0x0b, 5	; 11
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
  dc:	80 fd       	sbrc	r24, 0
  de:	5c 9a       	sbi	0x0b, 4	; 11

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
  e0:	42 9a       	sbi	0x08, 2	; 8
    lcd_e_delay();
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <lcd_write+0x4e>
    lcd_e_low();
  e4:	42 98       	cbi	0x08, 2	; 8
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();        
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
  e6:	5c 9a       	sbi	0x0b, 4	; 11
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  e8:	5d 9a       	sbi	0x0b, 5	; 11
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  ea:	5e 9a       	sbi	0x0b, 6	; 11
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  ec:	5f 9a       	sbi	0x0b, 7	; 11
    }
}
  ee:	08 95       	ret

000000f0 <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
  f0:	88 23       	and	r24, r24
  f2:	11 f0       	breq	.+4      	; 0xf8 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
  f4:	41 9a       	sbi	0x08, 1	; 8
  f6:	01 c0       	rjmp	.+2      	; 0xfa <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
  f8:	41 98       	cbi	0x08, 1	; 8
    lcd_rw_high();                           /* RW=1  read mode      */
  fa:	40 9a       	sbi	0x08, 0	; 8
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
  fc:	54 98       	cbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
  fe:	55 98       	cbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 100:	56 98       	cbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 102:	57 98       	cbi	0x0a, 7	; 10
                
        /* read high nibble first */
        lcd_e_high();
 104:	42 9a       	sbi	0x08, 2	; 8
        lcd_e_delay();        
 106:	00 c0       	rjmp	.+0      	; 0x108 <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 108:	4c 9b       	sbis	0x09, 4	; 9
 10a:	02 c0       	rjmp	.+4      	; 0x110 <lcd_read+0x20>
 10c:	80 e1       	ldi	r24, 0x10	; 16
 10e:	01 c0       	rjmp	.+2      	; 0x112 <lcd_read+0x22>
 110:	80 e0       	ldi	r24, 0x00	; 0
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 112:	4d 99       	sbic	0x09, 5	; 9
 114:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 116:	4e 99       	sbic	0x09, 6	; 9
 118:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 11a:	4f 99       	sbic	0x09, 7	; 9
 11c:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 11e:	42 98       	cbi	0x08, 2	; 8

        lcd_e_delay();                       /* Enable 500ns low       */
 120:	00 c0       	rjmp	.+0      	; 0x122 <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
 122:	42 9a       	sbi	0x08, 2	; 8
        lcd_e_delay();
 124:	00 c0       	rjmp	.+0      	; 0x126 <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 126:	4c 99       	sbic	0x09, 4	; 9
 128:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 12a:	4d 99       	sbic	0x09, 5	; 9
 12c:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 12e:	4e 99       	sbic	0x09, 6	; 9
 130:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 132:	4f 99       	sbic	0x09, 7	; 9
 134:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 136:	42 98       	cbi	0x08, 2	; 8
    }
    return data;
}
 138:	08 95       	ret

0000013a <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_read>
 140:	87 fd       	sbrc	r24, 7
 142:	fb cf       	rjmp	.-10     	; 0x13a <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <lcd_waitbusy+0xe>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_read>
    
}/* lcd_waitbusy */
 152:	08 95       	ret

00000154 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 154:	1f 93       	push	r17
 156:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 158:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_waitbusy>
    lcd_write(cmd,0);
 15c:	81 2f       	mov	r24, r17
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write>
}
 164:	1f 91       	pop	r17
 166:	08 95       	ret

00000168 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 168:	1f 93       	push	r17
 16a:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 16c:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_waitbusy>
    lcd_write(data,1);
 170:	81 2f       	mov	r24, r17
 172:	61 e0       	ldi	r22, 0x01	; 1
 174:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write>
}
 178:	1f 91       	pop	r17
 17a:	08 95       	ret

0000017c <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 17c:	66 23       	and	r22, r22
 17e:	11 f4       	brne	.+4      	; 0x184 <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 180:	80 58       	subi	r24, 0x80	; 128
 182:	01 c0       	rjmp	.+2      	; 0x186 <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 184:	80 54       	subi	r24, 0x40	; 64
 186:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>
 18a:	08 95       	ret

0000018c <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 18c:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_waitbusy>
}
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	08 95       	ret

00000194 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>
}
 19a:	08 95       	ret

0000019c <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 19c:	82 e0       	ldi	r24, 0x02	; 2
 19e:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>
}
 1a2:	08 95       	ret

000001a4 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 1a4:	1f 93       	push	r17
 1a6:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 1a8:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_waitbusy>
    if (c=='\n')
 1ac:	1a 30       	cpi	r17, 0x0A	; 10
 1ae:	49 f4       	brne	.+18     	; 0x1c2 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 1b0:	80 34       	cpi	r24, 0x40	; 64
 1b2:	10 f0       	brcs	.+4      	; 0x1b8 <lcd_putc+0x14>
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <lcd_putc+0x16>
 1b8:	80 e4       	ldi	r24, 0x40	; 64
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 1ba:	80 58       	subi	r24, 0x80	; 128
 1bc:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>
 1c0:	04 c0       	rjmp	.+8      	; 0x1ca <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 1c2:	81 2f       	mov	r24, r17
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write>
    }

}/* lcd_putc */
 1ca:	1f 91       	pop	r17
 1cc:	08 95       	ret

000001ce <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	ec 01       	movw	r28, r24
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <lcd_puts+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
 1d6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 1da:	89 91       	ld	r24, Y+
 1dc:	88 23       	and	r24, r24
 1de:	d9 f7       	brne	.-10     	; 0x1d6 <lcd_puts+0x8>
        lcd_putc(c);
    }

}/* lcd_puts */
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	ec 01       	movw	r28, r24
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
 1ee:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_putc>
 1f2:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 1f4:	21 96       	adiw	r28, 0x01	; 1
 1f6:	84 91       	lpm	r24, Z+
 1f8:	88 23       	and	r24, r24
 1fa:	c9 f7       	brne	.-14     	; 0x1ee <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 202:	1f 93       	push	r17
 204:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 206:	39 9a       	sbi	0x07, 1	; 7
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 208:	38 9a       	sbi	0x07, 0	; 7
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 20a:	3a 9a       	sbi	0x07, 2	; 7
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 20c:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 20e:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 210:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 212:	57 9a       	sbi	0x0a, 7	; 10
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 214:	80 e8       	ldi	r24, 0x80	; 128
 216:	9e e3       	ldi	r25, 0x3E	; 62
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <lcd_init+0x16>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 21c:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 21e:	5c 9a       	sbi	0x0b, 4	; 11

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 220:	42 9a       	sbi	0x08, 2	; 8
    lcd_e_delay();
 222:	00 c0       	rjmp	.+0      	; 0x224 <lcd_init+0x22>
    lcd_e_low();
 224:	42 98       	cbi	0x08, 2	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 226:	80 e8       	ldi	r24, 0x80	; 128
 228:	93 e1       	ldi	r25, 0x13	; 19
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <lcd_init+0x28>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 22e:	42 9a       	sbi	0x08, 2	; 8
    lcd_e_delay();
 230:	00 c0       	rjmp	.+0      	; 0x232 <lcd_init+0x30>
    lcd_e_low();
 232:	42 98       	cbi	0x08, 2	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 234:	80 e4       	ldi	r24, 0x40	; 64
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	fc 01       	movw	r30, r24
 23a:	31 97       	sbiw	r30, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <lcd_init+0x38>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 23e:	42 9a       	sbi	0x08, 2	; 8
    lcd_e_delay();
 240:	00 c0       	rjmp	.+0      	; 0x242 <lcd_init+0x40>
    lcd_e_low();
 242:	42 98       	cbi	0x08, 2	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 244:	fc 01       	movw	r30, r24
 246:	31 97       	sbiw	r30, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <lcd_init+0x44>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 24a:	5c 98       	cbi	0x0b, 4	; 11

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 24c:	42 9a       	sbi	0x08, 2	; 8
    lcd_e_delay();
 24e:	00 c0       	rjmp	.+0      	; 0x250 <lcd_init+0x4e>
    lcd_e_low();
 250:	42 98       	cbi	0x08, 2	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <lcd_init+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 256:	88 e2       	ldi	r24, 0x28	; 40
 258:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 25c:	88 e0       	ldi	r24, 0x08	; 8
 25e:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 262:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 266:	86 e0       	ldi	r24, 0x06	; 6
 268:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 26c:	81 2f       	mov	r24, r17
 26e:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>

}/* lcd_init */
 272:	1f 91       	pop	r17
 274:	08 95       	ret

00000276 <main>:
#include "delay_x.h"
#include "lcd.h"
#include "lcd.c"

int main(void)
{
 276:	af 92       	push	r10
 278:	bf 92       	push	r11
 27a:	cf 92       	push	r12
 27c:	df 92       	push	r13
 27e:	ef 92       	push	r14
 280:	ff 92       	push	r15
 282:	0f 93       	push	r16
 284:	1f 93       	push	r17
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
	lcd_init(LCD_DISP_ON);
 28a:	8c e0       	ldi	r24, 0x0C	; 12
 28c:	0e 94 01 01 	call	0x202	; 0x202 <lcd_init>
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
 290:	9f e9       	ldi	r25, 0x9F	; 159
 292:	a9 2e       	mov	r10, r25
 294:	96 e8       	ldi	r25, 0x86	; 134
 296:	b9 2e       	mov	r11, r25
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	c9 2e       	mov	r12, r25
 29c:	d1 2c       	mov	r13, r1
	while (1)
		{
			lcd_clrscr();
 29e:	8f e3       	ldi	r24, 0x3F	; 63
 2a0:	e8 2e       	mov	r14, r24
 2a2:	87 e7       	ldi	r24, 0x77	; 119
 2a4:	f8 2e       	mov	r15, r24
 2a6:	8b e1       	ldi	r24, 0x1B	; 27
 2a8:	08 2f       	mov	r16, r24
 2aa:	11 2d       	mov	r17, r1
 2ac:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_clrscr>
			lcd_puts("Aman Gupta");
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
 2b8:	d6 01       	movw	r26, r12
 2ba:	c5 01       	movw	r24, r10
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	a1 09       	sbc	r26, r1
 2c0:	b1 09       	sbc	r27, r1
 2c2:	00 00       	nop
 2c4:	01 f0       	breq	.+0      	; 0x2c6 <main+0x50>
 2c6:	d1 f7       	brne	.-12     	; 0x2bc <main+0x46>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
 2c8:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
 2ca:	00 00       	nop
 2cc:	c0 e0       	ldi	r28, 0x00	; 0
 2ce:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_ms(50);

			for(int i=0;i<16;i++)
				{
					lcd_command(LCD_MOVE_DISP_RIGHT);
 2d0:	8c e1       	ldi	r24, 0x1C	; 28
 2d2:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_command>
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
 2d6:	d8 01       	movw	r26, r16
 2d8:	c7 01       	movw	r24, r14
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	a1 09       	sbc	r26, r1
 2de:	b1 09       	sbc	r27, r1
 2e0:	00 00       	nop
 2e2:	01 f0       	breq	.+0      	; 0x2e4 <main+0x6e>
 2e4:	d1 f7       	brne	.-12     	; 0x2da <main+0x64>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
 2e6:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
 2e8:	00 00       	nop
		{
			lcd_clrscr();
			lcd_puts("Aman Gupta");
			_delay_ms(50);

			for(int i=0;i<16;i++)
 2ea:	21 96       	adiw	r28, 0x01	; 1
 2ec:	c0 31       	cpi	r28, 0x10	; 16
 2ee:	d1 05       	cpc	r29, r1
 2f0:	79 f7       	brne	.-34     	; 0x2d0 <main+0x5a>
 2f2:	dc cf       	rjmp	.-72     	; 0x2ac <main+0x36>

000002f4 <_exit>:
 2f4:	f8 94       	cli

000002f6 <__stop_program>:
 2f6:	ff cf       	rjmp	.-2      	; 0x2f6 <__stop_program>
